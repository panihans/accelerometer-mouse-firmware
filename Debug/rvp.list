
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009790  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080098cc  080098cc  000198cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080099c4  080099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000004  080099c8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a78  20000188  08009b4c  00020188  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001c00  08009b4c  00021c00  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d949  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000040ad  00000000  00000000  0003db01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001790  00000000  00000000  00041bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000015f0  00000000  00000000  00043340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00023434  00000000  00000000  00044930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017830  00000000  00000000  00067d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ce2ea  00000000  00000000  0007f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0014d87e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005f30  00000000  00000000  0014d8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000188 	.word	0x20000188
 8000158:	00000000 	.word	0x00000000
 800015c:	080098b4 	.word	0x080098b4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000018c 	.word	0x2000018c
 8000178:	080098b4 	.word	0x080098b4

0800017c <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000188:	f000 ff14 	bl	8000fb4 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <update_buttons+0x1c>
		left_down = 0;
 8000192:	4b30      	ldr	r3, [pc, #192]	; (8000254 <update_buttons+0xd8>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000198:	2108      	movs	r1, #8
 800019a:	482f      	ldr	r0, [pc, #188]	; (8000258 <update_buttons+0xdc>)
 800019c:	f000 ff0a 	bl	8000fb4 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <update_buttons+0x30>
		left_down = 1;
 80001a6:	4b2b      	ldr	r3, [pc, #172]	; (8000254 <update_buttons+0xd8>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 80001ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001b4:	f000 fefe 	bl	8000fb4 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d002      	beq.n	80001c4 <update_buttons+0x48>
		middle_down = 0;
 80001be:	4b27      	ldr	r3, [pc, #156]	; (800025c <update_buttons+0xe0>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 80001c4:	2110      	movs	r1, #16
 80001c6:	4826      	ldr	r0, [pc, #152]	; (8000260 <update_buttons+0xe4>)
 80001c8:	f000 fef4 	bl	8000fb4 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d002      	beq.n	80001d8 <update_buttons+0x5c>
		middle_down = 1;
 80001d2:	4b22      	ldr	r3, [pc, #136]	; (800025c <update_buttons+0xe0>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 80001d8:	2102      	movs	r1, #2
 80001da:	481f      	ldr	r0, [pc, #124]	; (8000258 <update_buttons+0xdc>)
 80001dc:	f000 feea 	bl	8000fb4 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d002      	beq.n	80001ec <update_buttons+0x70>
		right_down = 0;
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <update_buttons+0xe8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 80001ec:	2101      	movs	r1, #1
 80001ee:	481a      	ldr	r0, [pc, #104]	; (8000258 <update_buttons+0xdc>)
 80001f0:	f000 fee0 	bl	8000fb4 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <update_buttons+0x84>
		right_down = 1;
 80001fa:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <update_buttons+0xe8>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000200:	2120      	movs	r1, #32
 8000202:	4815      	ldr	r0, [pc, #84]	; (8000258 <update_buttons+0xdc>)
 8000204:	f000 fed6 	bl	8000fb4 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d002      	beq.n	8000214 <update_buttons+0x98>
		b4_down = 0;
 800020e:	4b16      	ldr	r3, [pc, #88]	; (8000268 <update_buttons+0xec>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000214:	2110      	movs	r1, #16
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <update_buttons+0xdc>)
 8000218:	f000 fecc 	bl	8000fb4 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <update_buttons+0xac>
		b4_down = 1;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <update_buttons+0xec>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000228:	2180      	movs	r1, #128	; 0x80
 800022a:	480b      	ldr	r0, [pc, #44]	; (8000258 <update_buttons+0xdc>)
 800022c:	f000 fec2 	bl	8000fb4 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <update_buttons+0xc0>
		b5_down = 0;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <update_buttons+0xf0>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4806      	ldr	r0, [pc, #24]	; (8000258 <update_buttons+0xdc>)
 8000240:	f000 feb8 	bl	8000fb4 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <update_buttons+0xd4>
		b5_down = 1;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <update_buttons+0xf0>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
	}
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200001a4 	.word	0x200001a4
 8000258:	48000400 	.word	0x48000400
 800025c:	200001a5 	.word	0x200001a5
 8000260:	48001000 	.word	0x48001000
 8000264:	200001a6 	.word	0x200001a6
 8000268:	200001a7 	.word	0x200001a7
 800026c:	200001a8 	.word	0x200001a8

08000270 <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000280:	b2db      	uxtb	r3, r3
 8000282:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000284:	2300      	movs	r3, #0
 8000286:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000290:	f000 fea8 	bl	8000fe4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000294:	f107 010c 	add.w	r1, r7, #12
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	2201      	movs	r2, #1
 800029e:	480b      	ldr	r0, [pc, #44]	; (80002cc <read_register+0x5c>)
 80002a0:	f004 fa58 	bl	8004754 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 80002a4:	f107 0108 	add.w	r1, r7, #8
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ac:	2201      	movs	r2, #1
 80002ae:	4807      	ldr	r0, [pc, #28]	; (80002cc <read_register+0x5c>)
 80002b0:	f004 fbbe 	bl	8004a30 <HAL_SPI_Receive>
	CS_END();
 80002b4:	2201      	movs	r2, #1
 80002b6:	2110      	movs	r1, #16
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f000 fe92 	bl	8000fe4 <HAL_GPIO_WritePin>
	return pRxData[0];
 80002c0:	7a3b      	ldrb	r3, [r7, #8]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200003d4 	.word	0x200003d4

080002d0 <write_register>:

void write_register(uint8_t r, uint8_t value) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	733b      	strb	r3, [r7, #12]
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	737b      	strb	r3, [r7, #13]
	CS_START();
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f000 fe78 	bl	8000fe4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 80002f4:	f107 010c 	add.w	r1, r7, #12
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	2202      	movs	r2, #2
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <write_register+0x48>)
 8000300:	f004 fa28 	bl	8004754 <HAL_SPI_Transmit>
	CS_END();
 8000304:	2201      	movs	r2, #1
 8000306:	2110      	movs	r1, #16
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f000 fe6a 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200003d4 	.word	0x200003d4

0800031c <imu_setup>:

#pragma GCC push_options
#pragma GCC optimize ("O0")
void imu_setup() {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	206b      	movs	r0, #107	; 0x6b
 8000326:	f7ff ffd3 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800032a:	2064      	movs	r0, #100	; 0x64
 800032c:	f000 fba6 	bl	8000a7c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000330:	206b      	movs	r0, #107	; 0x6b
 8000332:	f7ff ff9d 	bl	8000270 <read_register>
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
		if (reg & (1UL << 6)) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0ee      	beq.n	8000322 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000344:	2101      	movs	r1, #1
 8000346:	206b      	movs	r0, #107	; 0x6b
 8000348:	f7ff ffc2 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800034c:	2064      	movs	r0, #100	; 0x64
 800034e:	f000 fb95 	bl	8000a7c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000352:	206b      	movs	r0, #107	; 0x6b
 8000354:	f7ff ff8c 	bl	8000270 <read_register>
 8000358:	4603      	mov	r3, r0
 800035a:	71bb      	strb	r3, [r7, #6]
		if (reg & (1 << 0)) {
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0ee      	beq.n	8000344 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000366:	2110      	movs	r1, #16
 8000368:	206a      	movs	r0, #106	; 0x6a
 800036a:	f7ff ffb1 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f000 fb84 	bl	8000a7c <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000374:	206a      	movs	r0, #106	; 0x6a
 8000376:	f7ff ff7b 	bl	8000270 <read_register>
 800037a:	4603      	mov	r3, r0
 800037c:	717b      	strb	r3, [r7, #5]
		if (reg & (1 << 4)) {
 800037e:	797b      	ldrb	r3, [r7, #5]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0ee      	beq.n	8000366 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000388:	2118      	movs	r1, #24
 800038a:	201c      	movs	r0, #28
 800038c:	f7ff ffa0 	bl	80002d0 <write_register>
		HAL_Delay(100);
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f000 fb73 	bl	8000a7c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000396:	201c      	movs	r0, #28
 8000398:	f7ff ff6a 	bl	8000270 <read_register>
 800039c:	4603      	mov	r3, r0
 800039e:	713b      	strb	r3, [r7, #4]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 80003a0:	793b      	ldrb	r3, [r7, #4]
 80003a2:	f003 0310 	and.w	r3, r3, #16
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0ee      	beq.n	8000388 <imu_setup+0x6c>
 80003aa:	793b      	ldrb	r3, [r7, #4]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0e9      	beq.n	8000388 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	201d      	movs	r0, #29
 80003b8:	f7ff ff8a 	bl	80002d0 <write_register>
		HAL_Delay(100);
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 fb5d 	bl	8000a7c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 80003c2:	201d      	movs	r0, #29
 80003c4:	f7ff ff54 	bl	8000270 <read_register>
 80003c8:	4603      	mov	r3, r0
 80003ca:	70fb      	strb	r3, [r7, #3]
		if (reg == 0) {
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d000      	beq.n	80003d4 <imu_setup+0xb8>
	while (1) {
 80003d2:	e7ef      	b.n	80003b4 <imu_setup+0x98>
			break;
 80003d4:	bf00      	nop
		}
	}
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4013      	ands	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	2002      	movs	r0, #2
 8000426:	f7ff ffda 	bl	80003de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff ffd7 	bl	80003de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000430:	2010      	movs	r0, #16
 8000432:	f7ff ffd4 	bl	80003de <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043c:	4825      	ldr	r0, [pc, #148]	; (80004d4 <MX_GPIO_Init+0xc4>)
 800043e:	f000 fdd1 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2110      	movs	r1, #16
 8000446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044a:	f000 fdcb 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800044e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000452:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4619      	mov	r1, r3
 8000464:	481b      	ldr	r0, [pc, #108]	; (80004d4 <MX_GPIO_Init+0xc4>)
 8000466:	f000 fc3d 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800046a:	2310      	movs	r3, #16
 800046c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046e:	2301      	movs	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4619      	mov	r1, r3
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f000 fc2f 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 8000486:	23fb      	movs	r3, #251	; 0xfb
 8000488:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	480f      	ldr	r0, [pc, #60]	; (80004d4 <MX_GPIO_Init+0xc4>)
 8000498:	f000 fc24 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 800049c:	2310      	movs	r3, #16
 800049e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	480a      	ldr	r0, [pc, #40]	; (80004d8 <MX_GPIO_Init+0xc8>)
 80004ae:	f000 fc19 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 80004b2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80004b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f000 fc0c 	bl	8000ce4 <HAL_GPIO_Init>

}
 80004cc:	bf00      	nop
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	48000400 	.word	0x48000400
 80004d8:	48001000 	.word	0x48001000

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa46 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f834 	bl	8000550 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f89e 	bl	8000628 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f7ff ff90 	bl	8000410 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80004f0:	f008 fc52 	bl	8008d98 <MX_USB_Device_Init>
  MX_SPI1_Init();
 80004f4:	f000 f8ec 	bl	80006d0 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	imu_setup();
 80004f8:	f7ff ff10 	bl	800031c <imu_setup>

	while (1) {
		update_buttons();
 80004fc:	f7ff fe3e 	bl	800017c <update_buttons>
		feedback.left = left_down;
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <main+0x5c>)
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0x60>)
 8000506:	701a      	strb	r2, [r3, #0]
		feedback.middle = middle_down;
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0x64>)
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <main+0x60>)
 800050e:	705a      	strb	r2, [r3, #1]
		feedback.right = right_down;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <main+0x68>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <main+0x60>)
 8000516:	709a      	strb	r2, [r3, #2]
		feedback.b4 = b4_down;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <main+0x6c>)
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <main+0x60>)
 800051e:	70da      	strb	r2, [r3, #3]
		feedback.b5 = b5_down;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <main+0x70>)
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <main+0x60>)
 8000526:	711a      	strb	r2, [r3, #4]
//		int16_t x = 0;
//		int16_t y = 0;
//		int16_t z = 0;

//		get_xyz(&feedback.x, &feedback.y, &feedback.z);
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000528:	2105      	movs	r1, #5
 800052a:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x60>)
 800052c:	f008 fcf2 	bl	8008f14 <CDC_Transmit_FS>
		HAL_Delay(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f000 faa3 	bl	8000a7c <HAL_Delay>
	while (1) {
 8000536:	e7e1      	b.n	80004fc <main+0x20>
 8000538:	200001a4 	.word	0x200001a4
 800053c:	200003cc 	.word	0x200003cc
 8000540:	200001a5 	.word	0x200001a5
 8000544:	200001a6 	.word	0x200001a6
 8000548:	200001a7 	.word	0x200001a7
 800054c:	200001a8 	.word	0x200001a8

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b09a      	sub	sp, #104	; 0x68
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2248      	movs	r2, #72	; 0x48
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f009 f9a0 	bl	80098a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <SystemClock_Config+0xd4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800057e:	4a29      	ldr	r2, [pc, #164]	; (8000624 <SystemClock_Config+0xd4>)
 8000580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b27      	ldr	r3, [pc, #156]	; (8000624 <SystemClock_Config+0xd4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000592:	2326      	movs	r3, #38	; 0x26
 8000594:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000596:	2300      	movs	r3, #0
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005a8:	2300      	movs	r3, #0
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ac:	2360      	movs	r3, #96	; 0x60
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b4:	2301      	movs	r3, #1
 80005b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005bc:	2320      	movs	r3, #32
 80005be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fddc 	bl	8003194 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e2:	f000 f83e 	bl	8000662 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005e6:	236f      	movs	r3, #111	; 0x6f
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2103      	movs	r1, #3
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f950 	bl	80038ac <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000612:	f000 f826 	bl	8000662 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000616:	f003 fee3 	bl	80043e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800061a:	bf00      	nop
 800061c:	3768      	adds	r7, #104	; 0x68
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	58000400 	.word	0x58000400

08000628 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2250      	movs	r2, #80	; 0x50
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f009 f935 	bl	80098a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000644:	2310      	movs	r3, #16
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fd52 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000656:	f000 f804 	bl	8000662 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000666:	b672      	cpsid	i
}
 8000668:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800066a:	e7fe      	b.n	800066a <Error_Handler+0x8>

0800066c <LL_AHB2_GRP1_EnableClock>:
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800067a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4313      	orrs	r3, r2
 8000682:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4013      	ands	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000690:	68fb      	ldr	r3, [r7, #12]
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800069e:	b480      	push	{r7}
 80006a0:	b085      	sub	sp, #20
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4013      	ands	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c2:	68fb      	ldr	r3, [r7, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_SPI1_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_SPI1_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_SPI1_Init+0x74>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_SPI1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_SPI1_Init+0x74>)
 80006ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_SPI1_Init+0x74>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_SPI1_Init+0x74>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_SPI1_Init+0x74>)
 80006fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000702:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_SPI1_Init+0x74>)
 8000706:	2210      	movs	r2, #16
 8000708:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_SPI1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_SPI1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_SPI1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_SPI1_Init+0x74>)
 800071e:	2207      	movs	r2, #7
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_SPI1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_SPI1_Init+0x74>)
 8000730:	f003 ff6d 	bl	800460e <HAL_SPI_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f7ff ff92 	bl	8000662 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200003d4 	.word	0x200003d4
 8000748:	40013000 	.word	0x40013000

0800074c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <HAL_SPI_MspInit+0x5c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d117      	bne.n	800079e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800076e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000772:	f7ff ff94 	bl	800069e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ff78 	bl	800066c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800077c:	23c2      	movs	r3, #194	; 0xc2
 800077e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800078c:	2305      	movs	r3, #5
 800078e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 faa3 	bl	8000ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40013000 	.word	0x40013000

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2101      	movs	r1, #1
 80007b4:	f06f 000b 	mvn.w	r0, #11
 80007b8:	f000 fa5f 	bl	8000c7a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2101      	movs	r1, #1
 80007c0:	f06f 000a 	mvn.w	r0, #10
 80007c4:	f000 fa59 	bl	8000c7a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	f06f 0009 	mvn.w	r0, #9
 80007d0:	f000 fa53 	bl	8000c7a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2101      	movs	r1, #1
 80007d8:	f06f 0004 	mvn.w	r0, #4
 80007dc:	f000 fa4d 	bl	8000c7a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2101      	movs	r1, #1
 80007e4:	f06f 0003 	mvn.w	r0, #3
 80007e8:	f000 fa47 	bl	8000c7a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2101      	movs	r1, #1
 80007f0:	f06f 0001 	mvn.w	r0, #1
 80007f4:	f000 fa41 	bl	8000c7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 f8ec 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <USB_LP_IRQHandler+0x10>)
 8000856:	f000 fce4 	bl	8001222 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000190c 	.word	0x2000190c

08000864 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <SystemInit+0x90>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <SystemInit+0x90>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000890:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <SystemInit+0x94>)
 800089e:	4013      	ands	r3, r2
 80008a0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80008a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008ae:	f023 0305 	bic.w	r3, r3, #5
 80008b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80008b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80008be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008c2:	f023 0301 	bic.w	r3, r3, #1
 80008c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80008ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <SystemInit+0x98>)
 80008d0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00
 80008f8:	faf6fefb 	.word	0xfaf6fefb
 80008fc:	22041000 	.word	0x22041000

08000900 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000900:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000902:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000904:	3304      	adds	r3, #4

08000906 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000906:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000908:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800090a:	d3f9      	bcc.n	8000900 <CopyDataInit>
  bx lr
 800090c:	4770      	bx	lr

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800090e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000910:	3004      	adds	r0, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000912:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>
  bx lr
 8000916:	4770      	bx	lr

08000918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800091a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800091c:	f7ff ffa2 	bl	8000864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <LoopForever+0x8>)
 8000922:	490c      	ldr	r1, [pc, #48]	; (8000954 <LoopForever+0xc>)
 8000924:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <LoopForever+0x10>)
 8000926:	2300      	movs	r3, #0
 8000928:	f7ff ffed 	bl	8000906 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <LoopForever+0x14>)
 800092e:	490c      	ldr	r1, [pc, #48]	; (8000960 <LoopForever+0x18>)
 8000930:	2300      	movs	r3, #0
 8000932:	f7ff ffee 	bl	8000912 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <LoopForever+0x1c>)
 8000938:	490b      	ldr	r1, [pc, #44]	; (8000968 <LoopForever+0x20>)
 800093a:	2300      	movs	r3, #0
 800093c:	f7ff ffe9 	bl	8000912 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000940:	f008 ff8c 	bl	800985c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000944:	f7ff fdca 	bl	80004dc <main>

08000948 <LoopForever>:

LoopForever:
  b LoopForever
 8000948:	e7fe      	b.n	8000948 <LoopForever>
 800094a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800094c:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8000950:	20000004 	.word	0x20000004
 8000954:	20000188 	.word	0x20000188
 8000958:	080099c8 	.word	0x080099c8
  INIT_BSS _sbss, _ebss
 800095c:	20000188 	.word	0x20000188
 8000960:	20001c00 	.word	0x20001c00
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000964:	20030000 	.word	0x20030000
 8000968:	20030000 	.word	0x20030000

0800096c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_Init+0x3c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <HAL_Init+0x3c>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000984:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000986:	2003      	movs	r0, #3
 8000988:	f000 f96c 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098c:	2000      	movs	r0, #0
 800098e:	f000 f80f 	bl	80009b0 <HAL_InitTick>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	e001      	b.n	80009a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800099e:	f7ff ff05 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	58004000 	.word	0x58004000

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_InitTick+0x6c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d024      	beq.n	8000a0e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009c4:	f003 f91e 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 80009c8:	4602      	mov	r2, r0
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_InitTick+0x6c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	4619      	mov	r1, r3
 80009d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f974 	bl	8000cca <HAL_SYSTICK_Config>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10f      	bne.n	8000a08 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d809      	bhi.n	8000a02 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	2200      	movs	r2, #0
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	f04f 30ff 	mov.w	r0, #4294967295
 80009f6:	f000 f940 	bl	8000c7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fa:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <HAL_InitTick+0x70>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e007      	b.n	8000a12 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e004      	b.n	8000a12 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e001      	b.n	8000a12 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000000c 	.word	0x2000000c
 8000a20:	20000008 	.word	0x20000008

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	2000000c 	.word	0x2000000c
 8000a48:	20000438 	.word	0x20000438

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000438 	.word	0x20000438

08000a64 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_GetTickPrio+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff ffe2 	bl	8000a4c <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff ffd2 	bl	8000a4c <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
    {
    }
  }
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000000c 	.word	0x2000000c

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f7ff ff8e 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff29 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff40 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff90 	bl	8000bb8 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5f 	bl	8000b64 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff33 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffa4 	bl	8000c20 <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	e146      	b.n	8000f82 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 8138 	beq.w	8000f7c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 0201 	and.w	r2, r3, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	6939      	ldr	r1, [r7, #16]
 8000e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0203 	and.w	r2, r3, #3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 8092 	beq.w	8000f7c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000e58:	4a51      	ldr	r2, [pc, #324]	; (8000fa0 <HAL_GPIO_Init+0x2bc>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e82:	d013      	beq.n	8000eac <HAL_GPIO_Init+0x1c8>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <HAL_GPIO_Init+0x2c0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00d      	beq.n	8000ea8 <HAL_GPIO_Init+0x1c4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a46      	ldr	r2, [pc, #280]	; (8000fa8 <HAL_GPIO_Init+0x2c4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x1c0>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a45      	ldr	r2, [pc, #276]	; (8000fac <HAL_GPIO_Init+0x2c8>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d101      	bne.n	8000ea0 <HAL_GPIO_Init+0x1bc>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x1ca>
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	e004      	b.n	8000eae <HAL_GPIO_Init+0x1ca>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0x1ca>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_GPIO_Init+0x1ca>
 8000eac:	2300      	movs	r3, #0
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	f002 0203 	and.w	r2, r2, #3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ebe:	4938      	ldr	r1, [pc, #224]	; (8000fa0 <HAL_GPIO_Init+0x2bc>)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ecc:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef0:	4a2f      	ldr	r2, [pc, #188]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f1a:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f47f aeb1 	bne.w	8000cf4 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	48001000 	.word	0x48001000
 8000fb0:	58000800 	.word	0x58000800

08000fb4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e001      	b.n	8000fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001000:	e002      	b.n	8001008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	b08b      	sub	sp, #44	; 0x2c
 8001018:	af06      	add	r7, sp, #24
 800101a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e0d7      	b.n	80011d6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f008 f8e4 	bl	8009208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2203      	movs	r2, #3
 8001044:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fa06 	bl	800545e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	e04c      	b.n	80010f2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3301      	adds	r3, #1
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	b298      	uxth	r0, r3
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	3336      	adds	r3, #54	; 0x36
 8001096:	4602      	mov	r2, r0
 8001098:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	3303      	adds	r3, #3
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	3338      	adds	r3, #56	; 0x38
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	333c      	adds	r3, #60	; 0x3c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3340      	adds	r3, #64	; 0x40
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	3301      	adds	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3ad      	bcc.n	8001058 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e044      	b.n	800118c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	440b      	add	r3, r1
 8001168:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	3301      	adds	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3b5      	bcc.n	8001102 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	687e      	ldr	r6, [r7, #4]
 800119e:	466d      	mov	r5, sp
 80011a0:	f106 0410 	add.w	r4, r6, #16
 80011a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	602b      	str	r3, [r5, #0]
 80011ac:	1d33      	adds	r3, r6, #4
 80011ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f004 f96f 	bl	8005494 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d102      	bne.n	80011d4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f001 fc29 	bl	8002a26 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_PCD_Start+0x16>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e012      	b.n	800121a <HAL_PCD_Start+0x3c>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f004 f915 	bl	8005430 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f006 f8ca 	bl	80073a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f006 f8cf 	bl	80073d2 <USB_ReadInterrupts>
 8001234:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fb26 	bl	8001892 <PCD_EP_ISR_Handler>

    return;
 8001246:	e110      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124e:	2b00      	cmp	r3, #0
 8001250:	d013      	beq.n	800127a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001264:	b292      	uxth	r2, r2
 8001266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f008 f87f 	bl	800936e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001270:	2100      	movs	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f8fc 	bl	8001470 <HAL_PCD_SetAddress>

    return;
 8001278:	e0f7      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00c      	beq.n	800129e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001296:	b292      	uxth	r2, r2
 8001298:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800129c:	e0e5      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00c      	beq.n	80012c2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012ba:	b292      	uxth	r2, r2
 80012bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012c0:	e0d3      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d034      	beq.n	8001336 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0204 	bic.w	r2, r2, #4
 80012de:	b292      	uxth	r2, r2
 80012e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0208 	bic.w	r2, r2, #8
 80012f6:	b292      	uxth	r2, r2
 80012f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f008 fa23 	bl	800975c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f008 f862 	bl	80093e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800132e:	b292      	uxth	r2, r2
 8001330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001334:	e099      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133c:	2b00      	cmp	r3, #0
 800133e:	d027      	beq.n	8001390 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001348:	b29a      	uxth	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	b292      	uxth	r2, r2
 8001354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800136a:	b292      	uxth	r2, r2
 800136c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	b292      	uxth	r2, r2
 8001384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f008 f80f 	bl	80093ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800138e:	e06c      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	2b00      	cmp	r3, #0
 8001398:	d040      	beq.n	800141c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ac:	b292      	uxth	r2, r2
 80013ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d12b      	bne.n	8001414 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0204 	orr.w	r2, r2, #4
 80013ce:	b292      	uxth	r2, r2
 80013d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0208 	orr.w	r2, r2, #8
 80013e6:	b292      	uxth	r2, r2
 80013e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800140a:	2101      	movs	r1, #1
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f008 f9a5 	bl	800975c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001412:	e02a      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f007 ffc9 	bl	80093ac <HAL_PCD_SuspendCallback>
    return;
 800141a:	e026      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00f      	beq.n	8001446 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f007 ff87 	bl	8009352 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001444:	e011      	b.n	800146a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00c      	beq.n	800146a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001458:	b29a      	uxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001462:	b292      	uxth	r2, r2
 8001464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001468:	bf00      	nop
  }
}
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_PCD_SetAddress+0x1a>
 8001486:	2302      	movs	r3, #2
 8001488:	e013      	b.n	80014b2 <HAL_PCD_SetAddress+0x42>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	78fa      	ldrb	r2, [r7, #3]
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f005 ff6a 	bl	800737c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	4608      	mov	r0, r1
 80014c4:	4611      	mov	r1, r2
 80014c6:	461a      	mov	r2, r3
 80014c8:	4603      	mov	r3, r0
 80014ca:	70fb      	strb	r3, [r7, #3]
 80014cc:	460b      	mov	r3, r1
 80014ce:	803b      	strh	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da0e      	bge.n	80014fe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2201      	movs	r2, #1
 80014fa:	705a      	strb	r2, [r3, #1]
 80014fc:	e00e      	b.n	800151c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	f003 0207 	and.w	r2, r3, #7
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	b2da      	uxtb	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001528:	883a      	ldrh	r2, [r7, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	78ba      	ldrb	r2, [r7, #2]
 8001532:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001546:	78bb      	ldrb	r3, [r7, #2]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d102      	bne.n	8001552 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_PCD_EP_Open+0xa6>
 800155c:	2302      	movs	r3, #2
 800155e:	e00e      	b.n	800157e <HAL_PCD_EP_Open+0xc4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68f9      	ldr	r1, [r7, #12]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 ffb2 	bl	80054d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800157c:	7afb      	ldrb	r3, [r7, #11]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001596:	2b00      	cmp	r3, #0
 8001598:	da0e      	bge.n	80015b8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2201      	movs	r2, #1
 80015b4:	705a      	strb	r2, [r3, #1]
 80015b6:	e00e      	b.n	80015d6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	f003 0207 	and.w	r2, r3, #7
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_PCD_EP_Close+0x6a>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e00e      	b.n	800160e <HAL_PCD_EP_Close+0x88>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 fafe 	bl	8005c00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	460b      	mov	r3, r1
 8001624:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	f003 0207 	and.w	r2, r3, #7
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2200      	movs	r2, #0
 8001654:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	b2da      	uxtb	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	2b00      	cmp	r3, #0
 800166a:	d106      	bne.n	800167a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6979      	ldr	r1, [r7, #20]
 8001672:	4618      	mov	r0, r3
 8001674:	f004 fcb1 	bl	8005fda <USB_EPStartXfer>
 8001678:	e005      	b.n	8001686 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6979      	ldr	r1, [r7, #20]
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fcaa 	bl	8005fda <USB_EPStartXfer>
  }

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 0207 	and.w	r2, r3, #7
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	460b      	mov	r3, r1
 80016ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	7afb      	ldrb	r3, [r7, #11]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2201      	movs	r2, #1
 800170a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800170c:	7afb      	ldrb	r3, [r7, #11]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	b2da      	uxtb	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001718:	7afb      	ldrb	r3, [r7, #11]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6979      	ldr	r1, [r7, #20]
 8001728:	4618      	mov	r0, r3
 800172a:	f004 fc56 	bl	8005fda <USB_EPStartXfer>
 800172e:	e005      	b.n	800173c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6979      	ldr	r1, [r7, #20]
 8001736:	4618      	mov	r0, r3
 8001738:	f004 fc4f 	bl	8005fda <USB_EPStartXfer>
  }

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	f003 0207 	and.w	r2, r3, #7
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	d901      	bls.n	8001764 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e03e      	b.n	80017e2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	da0e      	bge.n	800178a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	705a      	strb	r2, [r3, #1]
 8001788:	e00c      	b.n	80017a4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_PCD_EP_SetStall+0x7e>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e00e      	b.n	80017e2 <HAL_PCD_EP_SetStall+0x9c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68f9      	ldr	r1, [r7, #12]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f005 fcd3 	bl	800717e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	f003 020f 	and.w	r2, r3, #15
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	d901      	bls.n	8001808 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e040      	b.n	800188a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da0e      	bge.n	800182e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	705a      	strb	r2, [r3, #1]
 800182c:	e00e      	b.n	800184c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f003 0207 	and.w	r2, r3, #7
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	b2da      	uxtb	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_PCD_EP_ClrStall+0x82>
 8001868:	2302      	movs	r3, #2
 800186a:	e00e      	b.n	800188a <HAL_PCD_EP_ClrStall+0xa0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	4618      	mov	r0, r3
 800187c:	f005 fcd0 	bl	8007220 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b096      	sub	sp, #88	; 0x58
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800189a:	e39c      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80018b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 815e 	bne.w	8001b7c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d150      	bne.n	800196e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018dc:	81fb      	strh	r3, [r7, #14]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	89fb      	ldrh	r3, [r7, #14]
 80018e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3328      	adds	r3, #40	; 0x28
 80018f4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fe:	b29b      	uxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	4413      	add	r3, r2
 8001910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800191e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	441a      	add	r2, r3
 8001928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800192a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800192c:	2100      	movs	r1, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f007 fcf5 	bl	800931e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 834a 	beq.w	8001fd6 <PCD_EP_ISR_Handler+0x744>
 8001942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 8345 	bne.w	8001fd6 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001958:	b2da      	uxtb	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b292      	uxth	r2, r2
 8001960:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800196c:	e333      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001974:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001980:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001988:	2b00      	cmp	r3, #0
 800198a:	d032      	beq.n	80019f2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	f005 fd55 	bl	8007476 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019d8:	4013      	ands	r3, r2
 80019da:	823b      	strh	r3, [r7, #16]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	8a3a      	ldrh	r2, [r7, #16]
 80019e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e6:	b292      	uxth	r2, r2
 80019e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f007 fc6a 	bl	80092c4 <HAL_PCD_SetupStageCallback>
 80019f0:	e2f1      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019f2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f280 82ed 	bge.w	8001fd6 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a08:	4013      	ands	r3, r2
 8001a0a:	83fb      	strh	r3, [r7, #30]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	8bfa      	ldrh	r2, [r7, #30]
 8001a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a16:	b292      	uxth	r2, r2
 8001a18:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a40:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d019      	beq.n	8001a7e <PCD_EP_ISR_Handler+0x1ec>
 8001a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a58:	6959      	ldr	r1, [r3, #20]
 8001a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a5c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a60:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f005 fd07 	bl	8007476 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	441a      	add	r2, r3
 8001a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a74:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a76:	2100      	movs	r1, #0
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f007 fc35 	bl	80092e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 82a3 	bne.w	8001fd6 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ab6:	d918      	bls.n	8001aea <PCD_EP_ISR_Handler+0x258>
 8001ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
 8001ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <PCD_EP_ISR_Handler+0x240>
 8001acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	801a      	strh	r2, [r3, #0]
 8001ae8:	e029      	b.n	8001b3e <PCD_EP_ISR_Handler+0x2ac>
 8001aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d112      	bne.n	8001b18 <PCD_EP_ISR_Handler+0x286>
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	801a      	strh	r2, [r3, #0]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	801a      	strh	r2, [r3, #0]
 8001b16:	e012      	b.n	8001b3e <PCD_EP_ISR_Handler+0x2ac>
 8001b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <PCD_EP_ISR_Handler+0x2a0>
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2e:	3301      	adds	r3, #1
 8001b30:	647b      	str	r3, [r7, #68]	; 0x44
 8001b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	029b      	lsls	r3, r3, #10
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	827b      	strh	r3, [r7, #18]
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b56:	827b      	strh	r3, [r7, #18]
 8001b58:	8a7b      	ldrh	r3, [r7, #18]
 8001b5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b5e:	827b      	strh	r3, [r7, #18]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	8a7b      	ldrh	r3, [r7, #18]
 8001b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	8013      	strh	r3, [r2, #0]
 8001b7a:	e22c      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b90:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f280 80f6 	bge.w	8001d86 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bd0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be8:	7b1b      	ldrb	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d123      	bne.n	8001c36 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001c16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 808e 	beq.w	8001d3c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c26:	6959      	ldr	r1, [r3, #20]
 8001c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c2a:	88da      	ldrh	r2, [r3, #6]
 8001c2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c30:	f005 fc21 	bl	8007476 <USB_ReadPMA>
 8001c34:	e082      	b.n	8001d3c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c38:	78db      	ldrb	r3, [r3, #3]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d10a      	bne.n	8001c54 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c3e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c42:	461a      	mov	r2, r3
 8001c44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f9d3 	bl	8001ff2 <HAL_PCD_EP_DB_Receive>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001c52:	e073      	b.n	8001d3c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	441a      	add	r2, r3
 8001c80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d022      	beq.n	8001cf8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001cda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02c      	beq.n	8001d3c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce8:	6959      	ldr	r1, [r3, #20]
 8001cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cec:	891a      	ldrh	r2, [r3, #8]
 8001cee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cf2:	f005 fbc0 	bl	8007476 <USB_ReadPMA>
 8001cf6:	e021      	b.n	8001d3c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001d20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2e:	6959      	ldr	r1, [r3, #20]
 8001d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d32:	895a      	ldrh	r2, [r3, #10]
 8001d34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d38:	f005 fb9d 	bl	8007476 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d44:	441a      	add	r2, r3
 8001d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d52:	441a      	add	r2, r3
 8001d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d56:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x4da>
 8001d60:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d206      	bcs.n	8001d7a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f007 fab8 	bl	80092e8 <HAL_PCD_DataOutStageCallback>
 8001d78:	e005      	b.n	8001d86 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 f92a 	bl	8005fda <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8121 	beq.w	8001fd6 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d94:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	441a      	add	r2, r3
 8001dd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de6:	78db      	ldrb	r3, [r3, #3]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	f000 80a2 	beq.w	8001f32 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8001dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df6:	7b1b      	ldrb	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8093 	beq.w	8001f24 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dfe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d046      	beq.n	8001e98 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d126      	bne.n	8001e60 <PCD_EP_ISR_Handler+0x5ce>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	4413      	add	r3, r2
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	00da      	lsls	r2, r3, #3
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	4413      	add	r3, r2
 8001e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e38:	623b      	str	r3, [r7, #32]
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	801a      	strh	r2, [r3, #0]
 8001e5e:	e061      	b.n	8001f24 <PCD_EP_ISR_Handler+0x692>
 8001e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d15d      	bne.n	8001f24 <PCD_EP_ISR_Handler+0x692>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	4413      	add	r3, r2
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	00da      	lsls	r2, r3, #3
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	4413      	add	r3, r2
 8001e8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	2200      	movs	r2, #0
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	e045      	b.n	8001f24 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea0:	785b      	ldrb	r3, [r3, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d126      	bne.n	8001ef4 <PCD_EP_ISR_Handler+0x662>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eba:	4413      	add	r3, r2
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	00da      	lsls	r2, r3, #3
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	801a      	strh	r2, [r3, #0]
 8001ef2:	e017      	b.n	8001f24 <PCD_EP_ISR_Handler+0x692>
 8001ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef6:	785b      	ldrb	r3, [r3, #1]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d113      	bne.n	8001f24 <PCD_EP_ISR_Handler+0x692>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f0a:	4413      	add	r3, r2
 8001f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	00da      	lsls	r2, r3, #3
 8001f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f16:	4413      	add	r3, r2
 8001f18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f20:	2200      	movs	r2, #0
 8001f22:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f007 f9f7 	bl	800931e <HAL_PCD_DataInStageCallback>
 8001f30:	e051      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d144      	bne.n	8001fc8 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d907      	bls.n	8001f82 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8001f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f7a:	1ad2      	subs	r2, r2, r3
 8001f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7e:	619a      	str	r2, [r3, #24]
 8001f80:	e002      	b.n	8001f88 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f007 f9c1 	bl	800931e <HAL_PCD_DataInStageCallback>
 8001f9c:	e01b      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fa6:	441a      	add	r2, r3
 8001fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001faa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fb4:	441a      	add	r2, r3
 8001fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 f80a 	bl	8005fda <USB_EPStartXfer>
 8001fc6:	e006      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fc8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001fcc:	461a      	mov	r2, r3
 8001fce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f917 	bl	8002204 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f6ff ac5a 	blt.w	800189c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3758      	adds	r7, #88	; 0x58
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b088      	sub	sp, #32
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d07c      	beq.n	8002104 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002012:	b29b      	uxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	4413      	add	r3, r2
 8002024:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	8b7b      	ldrh	r3, [r7, #26]
 8002036:	429a      	cmp	r2, r3
 8002038:	d306      	bcc.n	8002048 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	8b7b      	ldrh	r3, [r7, #26]
 8002040:	1ad2      	subs	r2, r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	619a      	str	r2, [r3, #24]
 8002046:	e002      	b.n	800204e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d123      	bne.n	800209e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800206c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002070:	833b      	strh	r3, [r7, #24]
 8002072:	8b3b      	ldrh	r3, [r7, #24]
 8002074:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002078:	833b      	strh	r3, [r7, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	441a      	add	r2, r3
 8002088:	8b3b      	ldrh	r3, [r7, #24]
 800208a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800208e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209a:	b29b      	uxth	r3, r3
 800209c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01f      	beq.n	80020e8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	82fb      	strh	r3, [r7, #22]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	8afb      	ldrh	r3, [r7, #22]
 80020d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020e8:	8b7b      	ldrh	r3, [r7, #26]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8085 	beq.w	80021fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	6959      	ldr	r1, [r3, #20]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	891a      	ldrh	r2, [r3, #8]
 80020fc:	8b7b      	ldrh	r3, [r7, #26]
 80020fe:	f005 f9ba 	bl	8007476 <USB_ReadPMA>
 8002102:	e07a      	b.n	80021fa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210c:	b29b      	uxth	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	4413      	add	r3, r2
 800211e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	8b7b      	ldrh	r3, [r7, #26]
 8002130:	429a      	cmp	r2, r3
 8002132:	d306      	bcc.n	8002142 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	8b7b      	ldrh	r3, [r7, #26]
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	e002      	b.n	8002148 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d123      	bne.n	8002198 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216a:	83fb      	strh	r3, [r7, #30]
 800216c:	8bfb      	ldrh	r3, [r7, #30]
 800216e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002172:	83fb      	strh	r3, [r7, #30]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	441a      	add	r2, r3
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800218c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002194:	b29b      	uxth	r3, r3
 8002196:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11f      	bne.n	80021e2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021bc:	83bb      	strh	r3, [r7, #28]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	441a      	add	r2, r3
 80021cc:	8bbb      	ldrh	r3, [r7, #28]
 80021ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021de:	b29b      	uxth	r3, r3
 80021e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021e2:	8b7b      	ldrh	r3, [r7, #26]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6959      	ldr	r1, [r3, #20]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	895a      	ldrh	r2, [r3, #10]
 80021f4:	8b7b      	ldrh	r3, [r7, #26]
 80021f6:	f005 f93e 	bl	8007476 <USB_ReadPMA>
    }
  }

  return count;
 80021fa:	8b7b      	ldrh	r3, [r7, #26]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0a2      	sub	sp, #136	; 0x88
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 81c5 	beq.w	80025a8 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	4413      	add	r3, r2
 8002238:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002242:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800224e:	429a      	cmp	r2, r3
 8002250:	d907      	bls.n	8002262 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800225a:	1ad2      	subs	r2, r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	619a      	str	r2, [r3, #24]
 8002260:	e002      	b.n	8002268 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 80b9 	bne.w	80023e4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d126      	bne.n	80022c8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002288:	b29b      	uxth	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	4413      	add	r3, r2
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00da      	lsls	r2, r3, #3
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	4413      	add	r3, r2
 800229c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	e01a      	b.n	80022fe <HAL_PCD_EP_DB_Transmit+0xfa>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	785b      	ldrb	r3, [r3, #1]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d116      	bne.n	80022fe <HAL_PCD_EP_DB_Transmit+0xfa>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	4413      	add	r3, r2
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00da      	lsls	r2, r3, #3
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	4413      	add	r3, r2
 80022f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	2200      	movs	r2, #0
 80022fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	623b      	str	r3, [r7, #32]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	785b      	ldrb	r3, [r3, #1]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d126      	bne.n	800235a <HAL_PCD_EP_DB_Transmit+0x156>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4413      	add	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	00da      	lsls	r2, r3, #3
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	4413      	add	r3, r2
 800232e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800233e:	b29a      	uxth	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	801a      	strh	r2, [r3, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002352:	b29a      	uxth	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	801a      	strh	r2, [r3, #0]
 8002358:	e017      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0x186>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	785b      	ldrb	r3, [r3, #1]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d113      	bne.n	800238a <HAL_PCD_EP_DB_Transmit+0x186>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800236a:	b29b      	uxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	4413      	add	r3, r2
 8002372:	623b      	str	r3, [r7, #32]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	00da      	lsls	r2, r3, #3
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	4413      	add	r3, r2
 800237e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2200      	movs	r2, #0
 8002388:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f006 ffc4 	bl	800931e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 82d2 	beq.w	8002946 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023bc:	827b      	strh	r3, [r7, #18]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	441a      	add	r2, r3
 80023cc:	8a7b      	ldrh	r3, [r7, #18]
 80023ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023de:	b29b      	uxth	r3, r3
 80023e0:	8013      	strh	r3, [r2, #0]
 80023e2:	e2b0      	b.n	8002946 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d021      	beq.n	8002432 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002408:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800241e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242e:	b29b      	uxth	r3, r3
 8002430:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002438:	2b01      	cmp	r3, #1
 800243a:	f040 8284 	bne.w	8002946 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002446:	441a      	add	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002454:	441a      	add	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	429a      	cmp	r2, r3
 8002464:	d309      	bcc.n	800247a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002472:	1ad2      	subs	r2, r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	621a      	str	r2, [r3, #32]
 8002478:	e015      	b.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002486:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002490:	e009      	b.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d155      	bne.n	800255a <HAL_PCD_EP_DB_Transmit+0x356>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	4413      	add	r3, r2
 80024c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	00da      	lsls	r2, r3, #3
 80024cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
 80024d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d8:	2b3e      	cmp	r3, #62	; 0x3e
 80024da:	d916      	bls.n	800250a <HAL_PCD_EP_DB_Transmit+0x306>
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80024ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ee:	3b01      	subs	r3, #1
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002502:	b29a      	uxth	r2, r3
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	e043      	b.n	8002592 <HAL_PCD_EP_DB_Transmit+0x38e>
 800250a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250c:	2b00      	cmp	r3, #0
 800250e:	d112      	bne.n	8002536 <HAL_PCD_EP_DB_Transmit+0x332>
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b29b      	uxth	r3, r3
 8002516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800251a:	b29a      	uxth	r2, r3
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	801a      	strh	r2, [r3, #0]
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252e:	b29a      	uxth	r2, r3
 8002530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	e02d      	b.n	8002592 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_PCD_EP_DB_Transmit+0x348>
 8002546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002548:	3301      	adds	r3, #1
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
 800254c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254e:	b29b      	uxth	r3, r3
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	b29a      	uxth	r2, r3
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	e01b      	b.n	8002592 <HAL_PCD_EP_DB_Transmit+0x38e>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d117      	bne.n	8002592 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	643b      	str	r3, [r7, #64]	; 0x40
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002570:	b29b      	uxth	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002576:	4413      	add	r3, r2
 8002578:	643b      	str	r3, [r7, #64]	; 0x40
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	00da      	lsls	r2, r3, #3
 8002580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002582:	4413      	add	r3, r2
 8002584:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258c:	b29a      	uxth	r2, r3
 800258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002590:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6959      	ldr	r1, [r3, #20]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	891a      	ldrh	r2, [r3, #8]
 800259e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f004 ff26 	bl	80073f2 <USB_WritePMA>
 80025a6:	e1ce      	b.n	8002946 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d8:	429a      	cmp	r2, r3
 80025da:	d307      	bcc.n	80025ec <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	1ad2      	subs	r2, r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	619a      	str	r2, [r3, #24]
 80025ea:	e002      	b.n	80025f2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 80c4 	bne.w	8002784 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d126      	bne.n	8002652 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	66bb      	str	r3, [r7, #104]	; 0x68
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002618:	4413      	add	r3, r2
 800261a:	66bb      	str	r3, [r7, #104]	; 0x68
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	00da      	lsls	r2, r3, #3
 8002622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002624:	4413      	add	r3, r2
 8002626:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800262a:	667b      	str	r3, [r7, #100]	; 0x64
 800262c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002636:	b29a      	uxth	r2, r3
 8002638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800263a:	801a      	strh	r2, [r3, #0]
 800263c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264a:	b29a      	uxth	r2, r3
 800264c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e01a      	b.n	8002688 <HAL_PCD_EP_DB_Transmit+0x484>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	785b      	ldrb	r3, [r3, #1]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d116      	bne.n	8002688 <HAL_PCD_EP_DB_Transmit+0x484>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	673b      	str	r3, [r7, #112]	; 0x70
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266e:	4413      	add	r3, r2
 8002670:	673b      	str	r3, [r7, #112]	; 0x70
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	00da      	lsls	r2, r3, #3
 8002678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800267a:	4413      	add	r3, r2
 800267c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002684:	2200      	movs	r2, #0
 8002686:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	785b      	ldrb	r3, [r3, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d12f      	bne.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ae:	4413      	add	r3, r2
 80026b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	00da      	lsls	r2, r3, #3
 80026ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026be:	4413      	add	r3, r2
 80026c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026da:	801a      	strh	r2, [r3, #0]
 80026dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	e017      	b.n	8002726 <HAL_PCD_EP_DB_Transmit+0x522>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	785b      	ldrb	r3, [r3, #1]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d113      	bne.n	8002726 <HAL_PCD_EP_DB_Transmit+0x522>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800270c:	4413      	add	r3, r2
 800270e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	00da      	lsls	r2, r3, #3
 8002716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002718:	4413      	add	r3, r2
 800271a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800271e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002722:	2200      	movs	r2, #0
 8002724:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f006 fdf6 	bl	800931e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 8104 	bne.w	8002946 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002758:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	441a      	add	r2, r3
 800276a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800276e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800277a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277e:	b29b      	uxth	r3, r3
 8002780:	8013      	strh	r3, [r2, #0]
 8002782:	e0e0      	b.n	8002946 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d121      	bne.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d8:	2b01      	cmp	r3, #1
 80027da:	f040 80b4 	bne.w	8002946 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027e6:	441a      	add	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f4:	441a      	add	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	429a      	cmp	r2, r3
 8002804:	d309      	bcc.n	800281a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002812:	1ad2      	subs	r2, r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	621a      	str	r2, [r3, #32]
 8002818:	e015      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002822:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002826:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002830:	e009      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	663b      	str	r3, [r7, #96]	; 0x60
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d155      	bne.n	8002900 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	65bb      	str	r3, [r7, #88]	; 0x58
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002868:	4413      	add	r3, r2
 800286a:	65bb      	str	r3, [r7, #88]	; 0x58
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	00da      	lsls	r2, r3, #3
 8002872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002874:	4413      	add	r3, r2
 8002876:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800287a:	657b      	str	r3, [r7, #84]	; 0x54
 800287c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287e:	2b3e      	cmp	r3, #62	; 0x3e
 8002880:	d916      	bls.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	677b      	str	r3, [r7, #116]	; 0x74
 8002888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_PCD_EP_DB_Transmit+0x694>
 8002892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002894:	3b01      	subs	r3, #1
 8002896:	677b      	str	r3, [r7, #116]	; 0x74
 8002898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289a:	b29b      	uxth	r3, r3
 800289c:	029b      	lsls	r3, r3, #10
 800289e:	b29b      	uxth	r3, r3
 80028a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	e040      	b.n	8002932 <HAL_PCD_EP_DB_Transmit+0x72e>
 80028b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d112      	bne.n	80028dc <HAL_PCD_EP_DB_Transmit+0x6d8>
 80028b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	801a      	strh	r2, [r3, #0]
 80028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	e02a      	b.n	8002932 <HAL_PCD_EP_DB_Transmit+0x72e>
 80028dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	677b      	str	r3, [r7, #116]	; 0x74
 80028e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80028ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ee:	3301      	adds	r3, #1
 80028f0:	677b      	str	r3, [r7, #116]	; 0x74
 80028f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	e018      	b.n	8002932 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d114      	bne.n	8002932 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002916:	4413      	add	r3, r2
 8002918:	663b      	str	r3, [r7, #96]	; 0x60
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	00da      	lsls	r2, r3, #3
 8002920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002922:	4413      	add	r3, r2
 8002924:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800292a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292c:	b29a      	uxth	r2, r3
 800292e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002930:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6959      	ldr	r1, [r3, #20]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	895a      	ldrh	r2, [r3, #10]
 800293e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002940:	b29b      	uxth	r3, r3
 8002942:	f004 fd56 	bl	80073f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002960:	823b      	strh	r3, [r7, #16]
 8002962:	8a3b      	ldrh	r3, [r7, #16]
 8002964:	f083 0310 	eor.w	r3, r3, #16
 8002968:	823b      	strh	r3, [r7, #16]
 800296a:	8a3b      	ldrh	r3, [r7, #16]
 800296c:	f083 0320 	eor.w	r3, r3, #32
 8002970:	823b      	strh	r3, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	441a      	add	r2, r3
 8002980:	8a3b      	ldrh	r3, [r7, #16]
 8002982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800298a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002992:	b29b      	uxth	r3, r3
 8002994:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3788      	adds	r7, #136	; 0x88
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	817b      	strh	r3, [r7, #10]
 80029ae:	4613      	mov	r3, r2
 80029b0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029b2:	897b      	ldrh	r3, [r7, #10]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e009      	b.n	80029ea <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029d6:	897a      	ldrh	r2, [r7, #10]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029ea:	893b      	ldrh	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d107      	bne.n	8002a00 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	80da      	strh	r2, [r3, #6]
 80029fe:	e00b      	b.n	8002a18 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2201      	movs	r2, #1
 8002a04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	58000400 	.word	0x58000400

08002a9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	58000400 	.word	0x58000400

08002ab8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac6:	6053      	str	r3, [r2, #4]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	58000400 	.word	0x58000400

08002ad8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aea:	d101      	bne.n	8002af0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b4a:	d101      	bne.n	8002b50 <LL_RCC_HSE_IsReady+0x18>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <LL_RCC_HSE_IsReady+0x1a>
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002baa:	d101      	bne.n	8002bb0 <LL_RCC_HSI_IsReady+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_RCC_HSI_IsReady+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d101      	bne.n	8002c42 <LL_RCC_HSI48_IsReady+0x18>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_RCC_HSI48_IsReady+0x1a>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d101      	bne.n	8002cee <LL_RCC_LSE_IsReady+0x18>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_RCC_LSE_IsReady+0x1a>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d101      	bne.n	8002d56 <LL_RCC_LSI1_IsReady+0x18>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_RCC_LSI1_IsReady+0x1a>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d101      	bne.n	8002dbe <LL_RCC_LSI2_IsReady+0x18>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_RCC_LSI2_IsReady+0x1a>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6013      	str	r3, [r2, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d101      	bne.n	8002e4a <LL_RCC_MSI_IsReady+0x16>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <LL_RCC_MSI_IsReady+0x18>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2bb0      	cmp	r3, #176	; 0xb0
 8002e94:	d901      	bls.n	8002e9a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002e96:	23b0      	movs	r3, #176	; 0xb0
 8002e98:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002e9a:	687b      	ldr	r3, [r7, #4]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 0203 	bic.w	r2, r3, #3
 8002ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003048:	6013      	str	r3, [r2, #0]
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003066:	d101      	bne.n	800306c <LL_RCC_PLL_IsReady+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_RCC_PLL_IsReady+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0303 	and.w	r3, r3, #3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d101      	bne.n	80030f2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003112:	d101      	bne.n	8003118 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003138:	d101      	bne.n	800313e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800314e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800315c:	d101      	bne.n	8003162 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003180:	d101      	bne.n	8003186 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b08d      	sub	sp, #52	; 0x34
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e37e      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8092 	beq.w	80032d8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b4:	f7ff fea1 	bl	8002efa <LL_RCC_GetSysClkSource>
 80031b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ba:	f7ff ff82 	bl	80030c2 <LL_RCC_PLL_GetMainSource>
 80031be:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x3e>
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d14c      	bne.n	8003266 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d149      	bne.n	8003266 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031d2:	f7ff fe2f 	bl	8002e34 <LL_RCC_MSI_IsReady>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_OscConfig+0x54>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e35d      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80031ec:	f7ff fe47 	bl	8002e7e <LL_RCC_MSI_GetRange>
 80031f0:	4603      	mov	r3, r0
 80031f2:	429c      	cmp	r4, r3
 80031f4:	d914      	bls.n	8003220 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd16 	bl	8003c2c <RCC_SetFlashLatencyFromMSIRange>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e34c      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fe21 	bl	8002e56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fe45 	bl	8002ea8 <LL_RCC_MSI_SetCalibTrimming>
 800321e:	e013      	b.n	8003248 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fe16 	bl	8002e56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fe3a 	bl	8002ea8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fcf7 	bl	8003c2c <RCC_SetFlashLatencyFromMSIRange>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e32d      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003248:	f000 fcdc 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 800324c:	4603      	mov	r3, r0
 800324e:	4ab3      	ldr	r2, [pc, #716]	; (800351c <HAL_RCC_OscConfig+0x388>)
 8003250:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003252:	4bb3      	ldr	r3, [pc, #716]	; (8003520 <HAL_RCC_OscConfig+0x38c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd fbaa 	bl	80009b0 <HAL_InitTick>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d039      	beq.n	80032d6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e31e      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01e      	beq.n	80032ac <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800326e:	f7ff fdc3 	bl	8002df8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003272:	f7fd fbeb 	bl	8000a4c <HAL_GetTick>
 8003276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800327a:	f7fd fbe7 	bl	8000a4c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e30b      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800328c:	f7ff fdd2 	bl	8002e34 <LL_RCC_MSI_IsReady>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f1      	beq.n	800327a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fddb 	bl	8002e56 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fdff 	bl	8002ea8 <LL_RCC_MSI_SetCalibTrimming>
 80032aa:	e015      	b.n	80032d8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ac:	f7ff fdb3 	bl	8002e16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032b0:	f7fd fbcc 	bl	8000a4c <HAL_GetTick>
 80032b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032b8:	f7fd fbc8 	bl	8000a4c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e2ec      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80032ca:	f7ff fdb3 	bl	8002e34 <LL_RCC_MSI_IsReady>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f1      	bne.n	80032b8 <HAL_RCC_OscConfig+0x124>
 80032d4:	e000      	b.n	80032d8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032d6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d04e      	beq.n	8003382 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e4:	f7ff fe09 	bl	8002efa <LL_RCC_GetSysClkSource>
 80032e8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ea:	f7ff feea 	bl	80030c2 <LL_RCC_PLL_GetMainSource>
 80032ee:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x16e>
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d10d      	bne.n	8003318 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d10a      	bne.n	8003318 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003302:	f7ff fc19 	bl	8002b38 <LL_RCC_HSE_IsReady>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d039      	beq.n	8003380 <HAL_RCC_OscConfig+0x1ec>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d135      	bne.n	8003380 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e2c5      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d102      	bne.n	8003328 <HAL_RCC_OscConfig+0x194>
 8003322:	f7ff fbeb 	bl	8002afc <LL_RCC_HSE_Enable>
 8003326:	e001      	b.n	800332c <HAL_RCC_OscConfig+0x198>
 8003328:	f7ff fbf7 	bl	8002b1a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fb8a 	bl	8000a4c <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333c:	f7fd fb86 	bl	8000a4c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e2aa      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800334e:	f7ff fbf3 	bl	8002b38 <LL_RCC_HSE_IsReady>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f1      	beq.n	800333c <HAL_RCC_OscConfig+0x1a8>
 8003358:	e013      	b.n	8003382 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fd fb77 	bl	8000a4c <HAL_GetTick>
 800335e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003362:	f7fd fb73 	bl	8000a4c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	; 0x64
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e297      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003374:	f7ff fbe0 	bl	8002b38 <LL_RCC_HSE_IsReady>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f1      	bne.n	8003362 <HAL_RCC_OscConfig+0x1ce>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d051      	beq.n	8003432 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338e:	f7ff fdb4 	bl	8002efa <LL_RCC_GetSysClkSource>
 8003392:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003394:	f7ff fe95 	bl	80030c2 <LL_RCC_PLL_GetMainSource>
 8003398:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d005      	beq.n	80033ac <HAL_RCC_OscConfig+0x218>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d113      	bne.n	80033ce <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d110      	bne.n	80033ce <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ac:	f7ff fbf4 	bl	8002b98 <LL_RCC_HSI_IsReady>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_RCC_OscConfig+0x22e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e270      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fbf8 	bl	8002bbc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033cc:	e031      	b.n	8003432 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d6:	f7ff fbc1 	bl	8002b5c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fd fb37 	bl	8000a4c <HAL_GetTick>
 80033de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fd fb33 	bl	8000a4c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e257      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80033f4:	f7ff fbd0 	bl	8002b98 <LL_RCC_HSI_IsReady>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f1      	beq.n	80033e2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fbda 	bl	8002bbc <LL_RCC_HSI_SetCalibTrimming>
 8003408:	e013      	b.n	8003432 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	f7ff fbb6 	bl	8002b7a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd fb1d 	bl	8000a4c <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003416:	f7fd fb19 	bl	8000a4c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e23d      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003428:	f7ff fbb6 	bl	8002b98 <LL_RCC_HSI_IsReady>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f1      	bne.n	8003416 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a3 	beq.w	8003592 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d076      	beq.n	8003542 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d046      	beq.n	80034ee <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003460:	f7ff fc6d 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d113      	bne.n	8003492 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800346a:	f7ff fc46 	bl	8002cfa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800346e:	f7fd faed 	bl	8000a4c <HAL_GetTick>
 8003472:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003476:	f7fd fae9 	bl	8000a4c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e20d      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003488:	f7ff fc59 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f1      	beq.n	8003476 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003492:	f7ff fc66 	bl	8002d62 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fd fad9 	bl	8000a4c <HAL_GetTick>
 800349a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800349e:	f7fd fad5 	bl	8000a4c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1f9      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034b0:	f7ff fc79 	bl	8002da6 <LL_RCC_LSI2_IsReady>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f1      	beq.n	800349e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fc83 	bl	8002dca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80034c4:	f7ff fc2a 	bl	8002d1c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd fac0 	bl	8000a4c <HAL_GetTick>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034d0:	f7fd fabc 	bl	8000a4c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1e0      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034e2:	f7ff fc2c 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f1      	bne.n	80034d0 <HAL_RCC_OscConfig+0x33c>
 80034ec:	e051      	b.n	8003592 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80034ee:	f7ff fc04 	bl	8002cfa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fd faab 	bl	8000a4c <HAL_GetTick>
 80034f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034fa:	f7fd faa7 	bl	8000a4c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e1cb      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800350c:	f7ff fc17 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f1      	beq.n	80034fa <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003516:	f7ff fc35 	bl	8002d84 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800351a:	e00c      	b.n	8003536 <HAL_RCC_OscConfig+0x3a2>
 800351c:	20000004 	.word	0x20000004
 8003520:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003524:	f7fd fa92 	bl	8000a4c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b03      	cmp	r3, #3
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1b6      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003536:	f7ff fc36 	bl	8002da6 <LL_RCC_LSI2_IsReady>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f1      	bne.n	8003524 <HAL_RCC_OscConfig+0x390>
 8003540:	e027      	b.n	8003592 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003542:	f7ff fc1f 	bl	8002d84 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fd fa81 	bl	8000a4c <HAL_GetTick>
 800354a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800354e:	f7fd fa7d 	bl	8000a4c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1a1      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003560:	f7ff fc21 	bl	8002da6 <LL_RCC_LSI2_IsReady>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f1      	bne.n	800354e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800356a:	f7ff fbd7 	bl	8002d1c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fd fa6d 	bl	8000a4c <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003576:	f7fd fa69 	bl	8000a4c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e18d      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003588:	f7ff fbd9 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f1      	bne.n	8003576 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d05b      	beq.n	8003656 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359e:	4bb5      	ldr	r3, [pc, #724]	; (8003874 <HAL_RCC_OscConfig+0x6e0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d114      	bne.n	80035d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80035aa:	f7ff fa67 	bl	8002a7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fd fa4d 	bl	8000a4c <HAL_GetTick>
 80035b2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fd fa49 	bl	8000a4c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e16d      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c8:	4baa      	ldr	r3, [pc, #680]	; (8003874 <HAL_RCC_OscConfig+0x6e0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d102      	bne.n	80035e2 <HAL_RCC_OscConfig+0x44e>
 80035dc:	f7ff fb37 	bl	8002c4e <LL_RCC_LSE_Enable>
 80035e0:	e00c      	b.n	80035fc <HAL_RCC_OscConfig+0x468>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d104      	bne.n	80035f4 <HAL_RCC_OscConfig+0x460>
 80035ea:	f7ff fb52 	bl	8002c92 <LL_RCC_LSE_EnableBypass>
 80035ee:	f7ff fb2e 	bl	8002c4e <LL_RCC_LSE_Enable>
 80035f2:	e003      	b.n	80035fc <HAL_RCC_OscConfig+0x468>
 80035f4:	f7ff fb3c 	bl	8002c70 <LL_RCC_LSE_Disable>
 80035f8:	f7ff fb5c 	bl	8002cb4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d014      	beq.n	800362e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fd fa22 	bl	8000a4c <HAL_GetTick>
 8003608:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fd fa1e 	bl	8000a4c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e140      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003622:	f7ff fb58 	bl	8002cd6 <LL_RCC_LSE_IsReady>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ef      	beq.n	800360c <HAL_RCC_OscConfig+0x478>
 800362c:	e013      	b.n	8003656 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fd fa0d 	bl	8000a4c <HAL_GetTick>
 8003632:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd fa09 	bl	8000a4c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e12b      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800364c:	f7ff fb43 	bl	8002cd6 <LL_RCC_LSE_IsReady>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ef      	bne.n	8003636 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02c      	beq.n	80036bc <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d014      	beq.n	8003694 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800366a:	f7ff fabc 	bl	8002be6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fd f9ed 	bl	8000a4c <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003676:	f7fd f9e9 	bl	8000a4c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e10d      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003688:	f7ff facf 	bl	8002c2a <LL_RCC_HSI48_IsReady>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f1      	beq.n	8003676 <HAL_RCC_OscConfig+0x4e2>
 8003692:	e013      	b.n	80036bc <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003694:	f7ff fab8 	bl	8002c08 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fd f9d8 	bl	8000a4c <HAL_GetTick>
 800369c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036a0:	f7fd f9d4 	bl	8000a4c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0f8      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80036b2:	f7ff faba 	bl	8002c2a <LL_RCC_HSI48_IsReady>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f1      	bne.n	80036a0 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80ee 	beq.w	80038a2 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c6:	f7ff fc18 	bl	8002efa <LL_RCC_GetSysClkSource>
 80036ca:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	2b02      	cmp	r3, #2
 80036da:	f040 80af 	bne.w	800383c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d123      	bne.n	8003734 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d11c      	bne.n	8003734 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d114      	bne.n	8003734 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d10d      	bne.n	8003734 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d106      	bne.n	8003734 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d05d      	beq.n	80037f0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d058      	beq.n	80037ec <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800373a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0ab      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800374c:	f7ff fc73 	bl	8003036 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003750:	f7fd f97c 	bl	8000a4c <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fd f978 	bl	8000a4c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e09c      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ef      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_RCC_OscConfig+0x6e4>)
 8003780:	4013      	ands	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800378a:	4311      	orrs	r1, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003790:	0212      	lsls	r2, r2, #8
 8003792:	4311      	orrs	r1, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003798:	4311      	orrs	r1, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037a4:	430a      	orrs	r2, r1
 80037a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037ae:	f7ff fc33 	bl	8003018 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037c2:	f7fd f943 	bl	8000a4c <HAL_GetTick>
 80037c6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fd f93f 	bl	8000a4c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e063      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0ef      	beq.n	80037ca <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ea:	e05a      	b.n	80038a2 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e059      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d151      	bne.n	80038a2 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037fe:	f7ff fc0b 	bl	8003018 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003812:	f7fd f91b 	bl	8000a4c <HAL_GetTick>
 8003816:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fd f917 	bl	8000a4c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e03b      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0ef      	beq.n	800381a <HAL_RCC_OscConfig+0x686>
 800383a:	e032      	b.n	80038a2 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d02d      	beq.n	800389e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	f7ff fbf8 	bl	8003036 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003850:	f023 0303 	bic.w	r3, r3, #3
 8003854:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003860:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003868:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd f8ef 	bl	8000a4c <HAL_GetTick>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003870:	e00d      	b.n	800388e <HAL_RCC_OscConfig+0x6fa>
 8003872:	bf00      	nop
 8003874:	58000400 	.word	0x58000400
 8003878:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd f8e6 	bl	8000a4c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ef      	bne.n	800387c <HAL_RCC_OscConfig+0x6e8>
 800389c:	e001      	b.n	80038a2 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3734      	adds	r7, #52	; 0x34
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd90      	pop	{r4, r7, pc}

080038ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e12d      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b98      	ldr	r3, [pc, #608]	; (8003b24 <HAL_RCC_ClockConfig+0x278>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d91b      	bls.n	8003906 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b95      	ldr	r3, [pc, #596]	; (8003b24 <HAL_RCC_ClockConfig+0x278>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 0207 	bic.w	r2, r3, #7
 80038d6:	4993      	ldr	r1, [pc, #588]	; (8003b24 <HAL_RCC_ClockConfig+0x278>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038de:	f7fd f8b5 	bl	8000a4c <HAL_GetTick>
 80038e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038e6:	f7fd f8b1 	bl	8000a4c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e111      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f8:	4b8a      	ldr	r3, [pc, #552]	; (8003b24 <HAL_RCC_ClockConfig+0x278>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d1ef      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fafb 	bl	8002f12 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800391c:	f7fd f896 	bl	8000a4c <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003924:	f7fd f892 	bl	8000a4c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0f2      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003936:	f7ff fbd0 	bl	80030da <LL_RCC_IsActiveFlag_HPRE>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f1      	beq.n	8003924 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d016      	beq.n	800397a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff faf2 	bl	8002f3a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003956:	f7fd f879 	bl	8000a4c <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800395e:	f7fd f875 	bl	8000a4c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0d5      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003970:	f7ff fbc5 	bl	80030fe <LL_RCC_IsActiveFlag_C2HPRE>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f1      	beq.n	800395e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff faeb 	bl	8002f66 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003990:	f7fd f85c 	bl	8000a4c <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003998:	f7fd f858 	bl	8000a4c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e0b8      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80039aa:	f7ff fbbb 	bl	8003124 <LL_RCC_IsActiveFlag_SHDHPRE>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f1      	beq.n	8003998 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fae5 	bl	8002f94 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039ca:	f7fd f83f 	bl	8000a4c <HAL_GetTick>
 80039ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039d2:	f7fd f83b 	bl	8000a4c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e09b      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039e4:	f7ff fbb1 	bl	800314a <LL_RCC_IsActiveFlag_PPRE1>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f1      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d017      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fadb 	bl	8002fbc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a06:	f7fd f821 	bl	8000a4c <HAL_GetTick>
 8003a0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a0e:	f7fd f81d 	bl	8000a4c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e07d      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a20:	f7ff fba5 	bl	800316e <LL_RCC_IsActiveFlag_PPRE2>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f1      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d043      	beq.n	8003abe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003a3e:	f7ff f87b 	bl	8002b38 <LL_RCC_HSE_IsReady>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d11e      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e067      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a54:	f7ff fafe 	bl	8003054 <LL_RCC_PLL_IsReady>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d113      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e05c      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a6a:	f7ff f9e3 	bl	8002e34 <LL_RCC_MSI_IsReady>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d108      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e051      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a78:	f7ff f88e 	bl	8002b98 <LL_RCC_HSI_IsReady>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e04a      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fa21 	bl	8002ed2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fc ffdc 	bl	8000a4c <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a98:	f7fc ffd8 	bl	8000a4c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e036      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	f7ff fa24 	bl	8002efa <LL_RCC_GetSysClkSource>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d1ec      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_ClockConfig+0x278>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d21b      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003acc:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <HAL_RCC_ClockConfig+0x278>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	4913      	ldr	r1, [pc, #76]	; (8003b24 <HAL_RCC_ClockConfig+0x278>)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003adc:	f7fc ffb6 	bl	8000a4c <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ae4:	f7fc ffb2 	bl	8000a4c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e012      	b.n	8003b1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_ClockConfig+0x278>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1ef      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b04:	f000 f87e 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <HAL_RCC_ClockConfig+0x27c>)
 8003b0c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003b0e:	f7fc ffa9 	bl	8000a64 <HAL_GetTickPrio>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fc ff4b 	bl	80009b0 <HAL_InitTick>
 8003b1a:	4603      	mov	r3, r0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	58004000 	.word	0x58004000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b32:	f7ff f9e2 	bl	8002efa <LL_RCC_GetSysClkSource>
 8003b36:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b3e:	f7ff f99e 	bl	8002e7e <LL_RCC_MSI_GetRange>
 8003b42:	4603      	mov	r3, r0
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e04b      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d102      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b5a:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e045      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d10a      	bne.n	8003b7c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b66:	f7fe ffb7 	bl	8002ad8 <LL_RCC_HSE_IsEnabledDiv2>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d102      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e03a      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003b76:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e037      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b7c:	f7ff faa1 	bl	80030c2 <LL_RCC_PLL_GetMainSource>
 8003b80:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d003      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x64>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x6a>
 8003b8e:	e00d      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b92:	60bb      	str	r3, [r7, #8]
        break;
 8003b94:	e015      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b96:	f7fe ff9f 	bl	8002ad8 <LL_RCC_HSE_IsEnabledDiv2>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ba2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003ba4:	e00d      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ba8:	60bb      	str	r3, [r7, #8]
        break;
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003bac:	f7ff f967 	bl	8002e7e <LL_RCC_MSI_GetRange>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbe:	60bb      	str	r3, [r7, #8]
        break;
 8003bc0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003bc2:	f7ff fa59 	bl	8003078 <LL_RCC_PLL_GetN>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	fb03 f402 	mul.w	r4, r3, r2
 8003bce:	f7ff fa6c 	bl	80030aa <LL_RCC_PLL_GetDivider>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003bdc:	f7ff fa59 	bl	8003092 <LL_RCC_PLL_GetR>
 8003be0:	4603      	mov	r3, r0
 8003be2:	0f5b      	lsrs	r3, r3, #29
 8003be4:	3301      	adds	r3, #1
 8003be6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003bec:	68fb      	ldr	r3, [r7, #12]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd90      	pop	{r4, r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	08009980 	.word	0x08009980
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	007a1200 	.word	0x007a1200

08003c04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c04:	b598      	push	{r3, r4, r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003c08:	f7ff ff90 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	f7ff f9e9 	bl	8002fe4 <LL_RCC_GetAHBPrescaler>
 8003c12:	4603      	mov	r3, r0
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	4a03      	ldr	r2, [pc, #12]	; (8003c28 <HAL_RCC_GetHCLKFreq+0x24>)
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd98      	pop	{r3, r4, r7, pc}
 8003c28:	08009940 	.word	0x08009940

08003c2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2bb0      	cmp	r3, #176	; 0xb0
 8003c38:	d903      	bls.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003c3a:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e007      	b.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003c52:	f7ff f9d3 	bl	8002ffc <LL_RCC_GetAHB4Prescaler>
 8003c56:	4603      	mov	r3, r0
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	0c9c      	lsrs	r4, r3, #18
 8003c76:	f7fe ff11 	bl	8002a9c <HAL_PWREx_GetVoltageRange>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f000 f80c 	bl	8003c9c <RCC_SetFlashLatency>
 8003c84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd90      	pop	{r4, r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08009980 	.word	0x08009980
 8003c94:	08009940 	.word	0x08009940
 8003c98:	431bde83 	.word	0x431bde83

08003c9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b093      	sub	sp, #76	; 0x4c
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003ca6:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <RCC_SetFlashLatency+0xf0>)
 8003ca8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003cac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <RCC_SetFlashLatency+0xf4>)
 8003cb4:	f107 031c 	add.w	r3, r7, #28
 8003cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003cbe:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <RCC_SetFlashLatency+0xf8>)
 8003cc0:	f107 040c 	add.w	r4, r7, #12
 8003cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003cca:	2300      	movs	r3, #0
 8003ccc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd4:	d11c      	bne.n	8003d10 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cda:	e015      	b.n	8003d08 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d808      	bhi.n	8003d02 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003cfe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003d00:	e022      	b.n	8003d48 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d04:	3301      	adds	r3, #1
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40
 8003d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d9e6      	bls.n	8003cdc <RCC_SetFlashLatency+0x40>
 8003d0e:	e01b      	b.n	8003d48 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d14:	e015      	b.n	8003d42 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d1e:	4413      	add	r3, r2
 8003d20:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d808      	bhi.n	8003d3c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d32:	4413      	add	r3, r2
 8003d34:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003d38:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003d3a:	e005      	b.n	8003d48 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3e:	3301      	adds	r3, #1
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d9e6      	bls.n	8003d16 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003d48:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <RCC_SetFlashLatency+0xfc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 0207 	bic.w	r2, r3, #7
 8003d50:	4911      	ldr	r1, [pc, #68]	; (8003d98 <RCC_SetFlashLatency+0xfc>)
 8003d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d58:	f7fc fe78 	bl	8000a4c <HAL_GetTick>
 8003d5c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d5e:	e008      	b.n	8003d72 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d60:	f7fc fe74 	bl	8000a4c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e007      	b.n	8003d82 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <RCC_SetFlashLatency+0xfc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d1ef      	bne.n	8003d60 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	374c      	adds	r7, #76	; 0x4c
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	080098cc 	.word	0x080098cc
 8003d90:	080098dc 	.word	0x080098dc
 8003d94:	080098e8 	.word	0x080098e8
 8003d98:	58004000 	.word	0x58004000

08003d9c <LL_RCC_LSE_IsEnabled>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <LL_RCC_LSE_IsEnabled+0x18>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <LL_RCC_LSE_IsEnabled+0x1a>
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_RCC_LSE_IsReady>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d101      	bne.n	8003dd8 <LL_RCC_LSE_IsReady+0x18>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <LL_RCC_LSE_IsReady+0x1a>
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_RCC_MSI_EnablePLLMode>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003df2:	f043 0304 	orr.w	r3, r3, #4
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <LL_RCC_SetRFWKPClockSource>:
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_RCC_SetSMPSClockSource>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	f023 0203 	bic.w	r2, r3, #3
 8003e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_RCC_SetSMPSPrescaler>:
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_SetUSARTClockSource>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_SetLPUARTClockSource>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_RCC_SetI2CClockSource>:
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_SetLPTIMClockSource>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	0c1b      	lsrs	r3, r3, #16
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	43db      	mvns	r3, r3
 8003f28:	401a      	ands	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_SetSAIClockSource>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_SetRNGClockSource>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_RCC_SetCLK48ClockSource>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_RCC_SetUSBClockSource>:
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe3 	bl	8003f9c <LL_RCC_SetCLK48ClockSource>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <LL_RCC_SetADCClockSource>:
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_SetRTCClockSource>:
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800401e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_RCC_GetRTCClockSource>:
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004046:	4618      	mov	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_RCC_ForceBackupDomainReset>:
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_PLLSAI1_Enable>:
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040a6:	6013      	str	r3, [r2, #0]
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_PLLSAI1_Disable>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_RCC_PLLSAI1_IsReady>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e2:	d101      	bne.n	80040e8 <LL_RCC_PLLSAI1_IsReady+0x18>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <LL_RCC_PLLSAI1_IsReady+0x1a>
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80040fc:	2300      	movs	r3, #0
 80040fe:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004100:	2300      	movs	r3, #0
 8004102:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d034      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004118:	d021      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800411a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800411e:	d81b      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004124:	d01d      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004126:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800412a:	d815      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004134:	d110      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004146:	e00d      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f94d 	bl	80043ec <RCCEx_PLLSAI1_ConfigNP>
 8004152:	4603      	mov	r3, r0
 8004154:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004156:	e005      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	77fb      	strb	r3, [r7, #31]
        break;
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004164:	7ffb      	ldrb	r3, [r7, #31]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d105      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fee8 	bl	8003f44 <LL_RCC_SetSAIClockSource>
 8004174:	e001      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004176:	7ffb      	ldrb	r3, [r7, #31]
 8004178:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004182:	2b00      	cmp	r3, #0
 8004184:	d046      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004186:	f7ff ff56 	bl	8004036 <LL_RCC_GetRTCClockSource>
 800418a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	429a      	cmp	r2, r3
 8004194:	d03c      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004196:	f7fe fc71 	bl	8002a7c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff30 	bl	800400a <LL_RCC_SetRTCClockSource>
 80041aa:	e02e      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80041ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80041b6:	f7ff ff4b 	bl	8004050 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80041ba:	f7ff ff5a 	bl	8004072 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80041cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80041d6:	f7ff fde1 	bl	8003d9c <LL_RCC_LSE_IsEnabled>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d114      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041e0:	f7fc fc34 	bl	8000a4c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80041e6:	e00b      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e8:	f7fc fc30 	bl	8000a4c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d902      	bls.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	77fb      	strb	r3, [r7, #31]
              break;
 80041fe:	e004      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004200:	f7ff fdde 	bl	8003dc0 <LL_RCC_LSE_IsReady>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d1ee      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800420a:	7ffb      	ldrb	r3, [r7, #31]
 800420c:	77bb      	strb	r3, [r7, #30]
 800420e:	e001      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	7ffb      	ldrb	r3, [r7, #31]
 8004212:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fe2a 	bl	8003e7e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fe35 	bl	8003eaa <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fe5d 	bl	8003f10 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fe52 	bl	8003f10 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fe2a 	bl	8003ed6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fe1f 	bl	8003ed6 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d022      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fe8d 	bl	8003fc8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b6:	d107      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042d0:	d10b      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f8e3 	bl	80044a2 <RCCEx_PLLSAI1_ConfigNQ>
 80042dc:	4603      	mov	r3, r0
 80042de:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80042e0:	7ffb      	ldrb	r3, [r7, #31]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d02b      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d008      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004308:	d003      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d105      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fe2a 	bl	8003f70 <LL_RCC_SetRNGClockSource>
 800431c:	e00a      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	2000      	movs	r0, #0
 800432a:	f7ff fe21 	bl	8003f70 <LL_RCC_SetRNGClockSource>
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff fe34 	bl	8003f9c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800433c:	d107      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004356:	2b00      	cmp	r3, #0
 8004358:	d022      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fe3d 	bl	8003fde <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800436c:	d107      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800436e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004386:	d10b      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f8e3 	bl	8004558 <RCCEx_PLLSAI1_ConfigNR>
 8004392:	4603      	mov	r3, r0
 8004394:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800439c:	7ffb      	ldrb	r3, [r7, #31]
 800439e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fd26 	bl	8003e02 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fd45 	bl	8003e56 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fd2c 	bl	8003e2e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80043d6:	7fbb      	ldrb	r3, [r7, #30]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80043e4:	f7ff fcfe 	bl	8003de4 <LL_RCC_MSI_EnablePLLMode>
}
 80043e8:	bf00      	nop
 80043ea:	bd80      	pop	{r7, pc}

080043ec <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043f8:	f7ff fe5b 	bl	80040b2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043fc:	f7fc fb26 	bl	8000a4c <HAL_GetTick>
 8004400:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004402:	e009      	b.n	8004418 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004404:	f7fc fb22 	bl	8000a4c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	73fb      	strb	r3, [r7, #15]
      break;
 8004416:	e004      	b.n	8004422 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004418:	f7ff fe5a 	bl	80040d0 <LL_RCC_PLLSAI1_IsReady>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d137      	bne.n	8004498 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800443c:	4313      	orrs	r3, r2
 800443e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004452:	4313      	orrs	r3, r2
 8004454:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004456:	f7ff fe1d 	bl	8004094 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445a:	f7fc faf7 	bl	8000a4c <HAL_GetTick>
 800445e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004460:	e009      	b.n	8004476 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004462:	f7fc faf3 	bl	8000a4c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d902      	bls.n	8004476 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	73fb      	strb	r3, [r7, #15]
        break;
 8004474:	e004      	b.n	8004480 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004476:	f7ff fe2b 	bl	80040d0 <LL_RCC_PLLSAI1_IsReady>
 800447a:	4603      	mov	r3, r0
 800447c:	2b01      	cmp	r3, #1
 800447e:	d1f0      	bne.n	8004462 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d108      	bne.n	8004498 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004494:	4313      	orrs	r3, r2
 8004496:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80044ae:	f7ff fe00 	bl	80040b2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044b2:	f7fc facb 	bl	8000a4c <HAL_GetTick>
 80044b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044b8:	e009      	b.n	80044ce <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ba:	f7fc fac7 	bl	8000a4c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d902      	bls.n	80044ce <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	73fb      	strb	r3, [r7, #15]
      break;
 80044cc:	e004      	b.n	80044d8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044ce:	f7ff fdff 	bl	80040d0 <LL_RCC_PLLSAI1_IsReady>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f0      	bne.n	80044ba <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d137      	bne.n	800454e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80044de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f2:	4313      	orrs	r3, r2
 80044f4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80044f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004508:	4313      	orrs	r3, r2
 800450a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800450c:	f7ff fdc2 	bl	8004094 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fc fa9c 	bl	8000a4c <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004516:	e009      	b.n	800452c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004518:	f7fc fa98 	bl	8000a4c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d902      	bls.n	800452c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	73fb      	strb	r3, [r7, #15]
        break;
 800452a:	e004      	b.n	8004536 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800452c:	f7ff fdd0 	bl	80040d0 <LL_RCC_PLLSAI1_IsReady>
 8004530:	4603      	mov	r3, r0
 8004532:	2b01      	cmp	r3, #1
 8004534:	d1f0      	bne.n	8004518 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800454a:	4313      	orrs	r3, r2
 800454c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004564:	f7ff fda5 	bl	80040b2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004568:	f7fc fa70 	bl	8000a4c <HAL_GetTick>
 800456c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800456e:	e009      	b.n	8004584 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004570:	f7fc fa6c 	bl	8000a4c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d902      	bls.n	8004584 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	73fb      	strb	r3, [r7, #15]
      break;
 8004582:	e004      	b.n	800458e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004584:	f7ff fda4 	bl	80040d0 <LL_RCC_PLLSAI1_IsReady>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d137      	bne.n	8004604 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a8:	4313      	orrs	r3, r2
 80045aa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045be:	4313      	orrs	r3, r2
 80045c0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045c2:	f7ff fd67 	bl	8004094 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c6:	f7fc fa41 	bl	8000a4c <HAL_GetTick>
 80045ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045cc:	e009      	b.n	80045e2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045ce:	f7fc fa3d 	bl	8000a4c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d902      	bls.n	80045e2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	73fb      	strb	r3, [r7, #15]
        break;
 80045e0:	e004      	b.n	80045ec <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045e2:	f7ff fd75 	bl	80040d0 <LL_RCC_PLLSAI1_IsReady>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d1f0      	bne.n	80045ce <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004600:	4313      	orrs	r3, r2
 8004602:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e095      	b.n	800474c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004630:	d009      	beq.n	8004646 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	61da      	str	r2, [r3, #28]
 8004638:	e005      	b.n	8004646 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fc f873 	bl	800074c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004686:	d902      	bls.n	800468e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	e002      	b.n	8004694 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800468e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004692:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800469c:	d007      	beq.n	80046ae <HAL_SPI_Init+0xa0>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046a6:	d002      	beq.n	80046ae <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	ea42 0103 	orr.w	r1, r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	f003 0204 	and.w	r2, r3, #4
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800472a:	ea42 0103 	orr.w	r1, r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_SPI_Transmit+0x22>
 8004772:	2302      	movs	r3, #2
 8004774:	e158      	b.n	8004a28 <HAL_SPI_Transmit+0x2d4>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800477e:	f7fc f965 	bl	8000a4c <HAL_GetTick>
 8004782:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d002      	beq.n	800479a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004794:	2302      	movs	r3, #2
 8004796:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004798:	e13d      	b.n	8004a16 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_SPI_Transmit+0x52>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047aa:	e134      	b.n	8004a16 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2203      	movs	r2, #3
 80047b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f6:	d10f      	bne.n	8004818 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004806:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004816:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d007      	beq.n	8004836 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004834:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800483e:	d94b      	bls.n	80048d8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SPI_Transmit+0xfa>
 8004848:	8afb      	ldrh	r3, [r7, #22]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d13e      	bne.n	80048cc <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	881a      	ldrh	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004872:	e02b      	b.n	80048cc <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d112      	bne.n	80048a8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048a6:	e011      	b.n	80048cc <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a8:	f7fc f8d0 	bl	8000a4c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d803      	bhi.n	80048c0 <HAL_SPI_Transmit+0x16c>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d102      	bne.n	80048c6 <HAL_SPI_Transmit+0x172>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ca:	e0a4      	b.n	8004a16 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ce      	bne.n	8004874 <HAL_SPI_Transmit+0x120>
 80048d6:	e07c      	b.n	80049d2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_SPI_Transmit+0x192>
 80048e0:	8afb      	ldrh	r3, [r7, #22]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d170      	bne.n	80049c8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d912      	bls.n	8004916 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b02      	subs	r3, #2
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004914:	e058      	b.n	80049c8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800493c:	e044      	b.n	80049c8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b02      	cmp	r3, #2
 800494a:	d12b      	bne.n	80049a4 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d912      	bls.n	800497c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	881a      	ldrh	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	1c9a      	adds	r2, r3, #2
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b02      	subs	r3, #2
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800497a:	e025      	b.n	80049c8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049a2:	e011      	b.n	80049c8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a4:	f7fc f852 	bl	8000a4c <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d803      	bhi.n	80049bc <HAL_SPI_Transmit+0x268>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d102      	bne.n	80049c2 <HAL_SPI_Transmit+0x26e>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049c6:	e026      	b.n	8004a16 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1b5      	bne.n	800493e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	6839      	ldr	r1, [r7, #0]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fce4 	bl	80053a4 <SPI_EndRxTxTransaction>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e000      	b.n	8004a16 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004a14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4c:	d112      	bne.n	8004a74 <HAL_SPI_Receive+0x44>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10e      	bne.n	8004a74 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f910 	bl	8004c90 <HAL_SPI_TransmitReceive>
 8004a70:	4603      	mov	r3, r0
 8004a72:	e109      	b.n	8004c88 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_SPI_Receive+0x52>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e102      	b.n	8004c88 <HAL_SPI_Receive+0x258>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a8a:	f7fb ffdf 	bl	8000a4c <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aa0:	e0e9      	b.n	8004c76 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_SPI_Receive+0x7e>
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ab2:	e0e0      	b.n	8004c76 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004afe:	d908      	bls.n	8004b12 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	e007      	b.n	8004b22 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b20:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2a:	d10f      	bne.n	8004b4c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b4a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d007      	beq.n	8004b6a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b72:	d867      	bhi.n	8004c44 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b74:	e030      	b.n	8004bd8 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d117      	bne.n	8004bb4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f103 020c 	add.w	r2, r3, #12
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	7812      	ldrb	r2, [r2, #0]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004bb2:	e011      	b.n	8004bd8 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb4:	f7fb ff4a 	bl	8000a4c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d803      	bhi.n	8004bcc <HAL_SPI_Receive+0x19c>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d102      	bne.n	8004bd2 <HAL_SPI_Receive+0x1a2>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bd6:	e04e      	b.n	8004c76 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1c8      	bne.n	8004b76 <HAL_SPI_Receive+0x146>
 8004be4:	e034      	b.n	8004c50 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d115      	bne.n	8004c20 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	b292      	uxth	r2, r2
 8004c00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	1c9a      	adds	r2, r3, #2
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004c1e:	e011      	b.n	8004c44 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c20:	f7fb ff14 	bl	8000a4c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d803      	bhi.n	8004c38 <HAL_SPI_Receive+0x208>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d102      	bne.n	8004c3e <HAL_SPI_Receive+0x20e>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c42:	e018      	b.n	8004c76 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1ca      	bne.n	8004be6 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fb4d 	bl	80052f4 <SPI_EndRxTransaction>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
 8004c72:	e000      	b.n	8004c76 <HAL_SPI_Receive+0x246>
  }

error :
 8004c74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x26>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e1fb      	b.n	80050ae <HAL_SPI_TransmitReceive+0x41e>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cbe:	f7fb fec5 	bl	8000a4c <HAL_GetTick>
 8004cc2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004cd2:	887b      	ldrh	r3, [r7, #2]
 8004cd4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cda:	7efb      	ldrb	r3, [r7, #27]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d00e      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x6e>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce6:	d106      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x66>
 8004cf0:	7efb      	ldrb	r3, [r7, #27]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d003      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004cfc:	e1cd      	b.n	800509a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_SPI_TransmitReceive+0x80>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_TransmitReceive+0x80>
 8004d0a:	887b      	ldrh	r3, [r7, #2]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d16:	e1c0      	b.n	800509a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d003      	beq.n	8004d2c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2205      	movs	r2, #5
 8004d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	887a      	ldrh	r2, [r7, #2]
 8004d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	887a      	ldrh	r2, [r7, #2]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	887a      	ldrh	r2, [r7, #2]
 8004d58:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d6e:	d802      	bhi.n	8004d76 <HAL_SPI_TransmitReceive+0xe6>
 8004d70:	8a3b      	ldrh	r3, [r7, #16]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d908      	bls.n	8004d88 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	e007      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d96:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d007      	beq.n	8004db6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dbe:	d97c      	bls.n	8004eba <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x13e>
 8004dc8:	8a7b      	ldrh	r3, [r7, #18]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d169      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	881a      	ldrh	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df2:	e056      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d11b      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x1aa>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d016      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x1aa>
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d113      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	881a      	ldrh	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	1c9a      	adds	r2, r3, #2
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d11c      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x1f2>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d016      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	b292      	uxth	r2, r2
 8004e60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	1c9a      	adds	r2, r3, #2
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e82:	f7fb fde3 	bl	8000a4c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d807      	bhi.n	8004ea2 <HAL_SPI_TransmitReceive+0x212>
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d003      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ea0:	e0fb      	b.n	800509a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1a3      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x164>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d19d      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x164>
 8004eb8:	e0df      	b.n	800507a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_SPI_TransmitReceive+0x23a>
 8004ec2:	8a7b      	ldrh	r3, [r7, #18]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	f040 80cb 	bne.w	8005060 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d912      	bls.n	8004efa <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	1c9a      	adds	r2, r3, #2
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b02      	subs	r3, #2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ef8:	e0b2      	b.n	8005060 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f20:	e09e      	b.n	8005060 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d134      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x30a>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d02f      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x30a>
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d12c      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d912      	bls.n	8004f70 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	881a      	ldrh	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b02      	subs	r3, #2
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f6e:	e012      	b.n	8004f96 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	7812      	ldrb	r2, [r2, #0]
 8004f7c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d148      	bne.n	800503a <HAL_SPI_TransmitReceive+0x3aa>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d042      	beq.n	800503a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d923      	bls.n	8005008 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	b292      	uxth	r2, r2
 8004fcc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b02      	subs	r3, #2
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d81f      	bhi.n	8005036 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	e016      	b.n	8005036 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f103 020c 	add.w	r2, r3, #12
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	7812      	ldrb	r2, [r2, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005036:	2301      	movs	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800503a:	f7fb fd07 	bl	8000a4c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	429a      	cmp	r2, r3
 8005048:	d803      	bhi.n	8005052 <HAL_SPI_TransmitReceive+0x3c2>
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d102      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x3c8>
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	2b00      	cmp	r3, #0
 8005056:	d103      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800505e:	e01c      	b.n	800509a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	f47f af5b 	bne.w	8004f22 <HAL_SPI_TransmitReceive+0x292>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f af54 	bne.w	8004f22 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f990 	bl	80053a4 <SPI_EndRxTxTransaction>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d006      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	661a      	str	r2, [r3, #96]	; 0x60
 8005096:	e000      	b.n	800509a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005098:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3728      	adds	r7, #40	; 0x28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	4613      	mov	r3, r2
 80050c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050c8:	f7fb fcc0 	bl	8000a4c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	4413      	add	r3, r2
 80050d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050d8:	f7fb fcb8 	bl	8000a4c <HAL_GetTick>
 80050dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050de:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	015b      	lsls	r3, r3, #5
 80050e4:	0d1b      	lsrs	r3, r3, #20
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ee:	e054      	b.n	800519a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d050      	beq.n	800519a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050f8:	f7fb fca8 	bl	8000a4c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	429a      	cmp	r2, r3
 8005106:	d902      	bls.n	800510e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d13d      	bne.n	800518a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800511c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005126:	d111      	bne.n	800514c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005130:	d004      	beq.n	800513c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513a:	d107      	bne.n	800514c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005154:	d10f      	bne.n	8005176 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e017      	b.n	80051ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3b01      	subs	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d19b      	bne.n	80050f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000004 	.word	0x20000004

080051c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051da:	f7fb fc37 	bl	8000a4c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	4413      	add	r3, r2
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80051ea:	f7fb fc2f 	bl	8000a4c <HAL_GetTick>
 80051ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051f8:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	00da      	lsls	r2, r3, #3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	0d1b      	lsrs	r3, r3, #20
 8005208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005210:	e060      	b.n	80052d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005218:	d107      	bne.n	800522a <SPI_WaitFifoStateUntilTimeout+0x62>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005228:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d050      	beq.n	80052d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005232:	f7fb fc0b 	bl	8000a4c <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523e:	429a      	cmp	r2, r3
 8005240:	d902      	bls.n	8005248 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d13d      	bne.n	80052c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005256:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005260:	d111      	bne.n	8005286 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800526a:	d004      	beq.n	8005276 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005274:	d107      	bne.n	8005286 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005284:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528e:	d10f      	bne.n	80052b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e010      	b.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d196      	bne.n	8005212 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3728      	adds	r7, #40	; 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000004 	.word	0x20000004

080052f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005308:	d111      	bne.n	800532e <SPI_EndRxTransaction+0x3a>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005312:	d004      	beq.n	800531e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531c:	d107      	bne.n	800532e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff febd 	bl	80050b8 <SPI_WaitFlagStateUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005348:	f043 0220 	orr.w	r2, r3, #32
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e023      	b.n	800539c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800535c:	d11d      	bne.n	800539a <SPI_EndRxTransaction+0xa6>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005366:	d004      	beq.n	8005372 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005370:	d113      	bne.n	800539a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff ff22 	bl	80051c8 <SPI_WaitFifoStateUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e000      	b.n	800539c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff ff03 	bl	80051c8 <SPI_WaitFifoStateUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e027      	b.n	8005428 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2200      	movs	r2, #0
 80053e0:	2180      	movs	r1, #128	; 0x80
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff fe68 	bl	80050b8 <SPI_WaitFlagStateUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e014      	b.n	8005428 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2200      	movs	r2, #0
 8005406:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fedc 	bl	80051c8 <SPI_WaitFifoStateUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e000      	b.n	8005428 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005440:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005444:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	b29a      	uxth	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005466:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800546a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	b29b      	uxth	r3, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	b29b      	uxth	r3, r3
 800547c:	4013      	ands	r3, r2
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005494:	b084      	sub	sp, #16
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	f107 0014 	add.w	r0, r7, #20
 80054a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	b004      	add	sp, #16
 80054d4:	4770      	bx	lr
	...

080054d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054d8:	b480      	push	{r7}
 80054da:	b09d      	sub	sp, #116	; 0x74
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d81f      	bhi.n	800554a <USB_ActivateEndpoint+0x72>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <USB_ActivateEndpoint+0x38>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005521 	.word	0x08005521
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005553 	.word	0x08005553
 800551c:	0800552f 	.word	0x0800552f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005520:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005528:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800552c:	e012      	b.n	8005554 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800552e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005532:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005536:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800553a:	e00b      	b.n	8005554 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800553c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005544:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005548:	e004      	b.n	8005554 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005550:	e000      	b.n	8005554 <USB_ActivateEndpoint+0x7c>
      break;
 8005552:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005572:	b29b      	uxth	r3, r3
 8005574:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	b21b      	sxth	r3, r3
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	b21a      	sxth	r2, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	b21b      	sxth	r3, r3
 8005596:	4313      	orrs	r3, r2
 8005598:	b21b      	sxth	r3, r3
 800559a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	441a      	add	r2, r3
 80055a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80055ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	7b1b      	ldrb	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f040 8149 	bne.w	800585c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8084 	beq.w	80056dc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	4413      	add	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	00da      	lsls	r2, r3, #3
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	88db      	ldrh	r3, [r3, #6]
 80055fc:	085b      	lsrs	r3, r3, #1
 80055fe:	b29b      	uxth	r3, r3
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	827b      	strh	r3, [r7, #18]
 8005616:	8a7b      	ldrh	r3, [r7, #18]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01b      	beq.n	8005658 <USB_ActivateEndpoint+0x180>
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005636:	823b      	strh	r3, [r7, #16]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	8a3b      	ldrh	r3, [r7, #16]
 8005644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005654:	b29b      	uxth	r3, r3
 8005656:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	78db      	ldrb	r3, [r3, #3]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d020      	beq.n	80056a2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005676:	81bb      	strh	r3, [r7, #12]
 8005678:	89bb      	ldrh	r3, [r7, #12]
 800567a:	f083 0320 	eor.w	r3, r3, #32
 800567e:	81bb      	strh	r3, [r7, #12]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	89bb      	ldrh	r3, [r7, #12]
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]
 80056a0:	e2a6      	b.n	8005bf0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b8:	81fb      	strh	r3, [r7, #14]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	441a      	add	r2, r3
 80056c4:	89fb      	ldrh	r3, [r7, #14]
 80056c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	8013      	strh	r3, [r2, #0]
 80056da:	e289      	b.n	8005bf0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	4413      	add	r3, r2
 80056ee:	633b      	str	r3, [r7, #48]	; 0x30
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	00da      	lsls	r2, r3, #3
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	4413      	add	r3, r2
 80056fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	88db      	ldrh	r3, [r3, #6]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	b29b      	uxth	r3, r3
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571a:	b29b      	uxth	r3, r3
 800571c:	461a      	mov	r2, r3
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	4413      	add	r3, r2
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	00da      	lsls	r2, r3, #3
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	4413      	add	r3, r2
 800572e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b3e      	cmp	r3, #62	; 0x3e
 800573a:	d918      	bls.n	800576e <USB_ActivateEndpoint+0x296>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	66bb      	str	r3, [r7, #104]	; 0x68
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <USB_ActivateEndpoint+0x27e>
 8005750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005752:	3b01      	subs	r3, #1
 8005754:	66bb      	str	r3, [r7, #104]	; 0x68
 8005756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005758:	b29b      	uxth	r3, r3
 800575a:	029b      	lsls	r3, r3, #10
 800575c:	b29b      	uxth	r3, r3
 800575e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005766:	b29a      	uxth	r2, r3
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e029      	b.n	80057c2 <USB_ActivateEndpoint+0x2ea>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d112      	bne.n	800579c <USB_ActivateEndpoint+0x2c4>
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005780:	b29a      	uxth	r2, r3
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005794:	b29a      	uxth	r2, r3
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	e012      	b.n	80057c2 <USB_ActivateEndpoint+0x2ea>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <USB_ActivateEndpoint+0x2de>
 80057b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057b2:	3301      	adds	r3, #1
 80057b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80057b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	b29a      	uxth	r2, r3
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80057d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01b      	beq.n	8005812 <USB_ActivateEndpoint+0x33a>
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	843b      	strh	r3, [r7, #32]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	8c3b      	ldrh	r3, [r7, #32]
 80057fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800580a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580e:	b29b      	uxth	r3, r3
 8005810:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005828:	83fb      	strh	r3, [r7, #30]
 800582a:	8bfb      	ldrh	r3, [r7, #30]
 800582c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005830:	83fb      	strh	r3, [r7, #30]
 8005832:	8bfb      	ldrh	r3, [r7, #30]
 8005834:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005838:	83fb      	strh	r3, [r7, #30]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	8bfb      	ldrh	r3, [r7, #30]
 8005846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005856:	b29b      	uxth	r3, r3
 8005858:	8013      	strh	r3, [r2, #0]
 800585a:	e1c9      	b.n	8005bf0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	78db      	ldrb	r3, [r3, #3]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d11e      	bne.n	80058a2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	441a      	add	r2, r3
 8005888:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800588c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005894:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589c:	b29b      	uxth	r3, r3
 800589e:	8013      	strh	r3, [r2, #0]
 80058a0:	e01d      	b.n	80058de <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	441a      	add	r2, r3
 80058c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058da:	b29b      	uxth	r3, r3
 80058dc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ee:	4413      	add	r3, r2
 80058f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	00da      	lsls	r2, r3, #3
 80058f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005900:	65bb      	str	r3, [r7, #88]	; 0x58
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	891b      	ldrh	r3, [r3, #8]
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	b29b      	uxth	r3, r3
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	657b      	str	r3, [r7, #84]	; 0x54
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591c:	b29b      	uxth	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005922:	4413      	add	r3, r2
 8005924:	657b      	str	r3, [r7, #84]	; 0x54
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	00da      	lsls	r2, r3, #3
 800592c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592e:	4413      	add	r3, r2
 8005930:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005934:	653b      	str	r3, [r7, #80]	; 0x50
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	895b      	ldrh	r3, [r3, #10]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	b29b      	uxth	r3, r3
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 8093 	bne.w	8005a76 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005960:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <USB_ActivateEndpoint+0x4cc>
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800599c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80059b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01b      	beq.n	80059f4 <USB_ActivateEndpoint+0x51c>
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	441a      	add	r2, r3
 80059de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80059e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a12:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a1a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a52:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]
 8005a74:	e0bc      	b.n	8005bf0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005a86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01d      	beq.n	8005ace <USB_ActivateEndpoint+0x5f6>
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	441a      	add	r2, r3
 8005ab6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ade:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01d      	beq.n	8005b26 <USB_ActivateEndpoint+0x64e>
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b00:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	78db      	ldrb	r3, [r3, #3]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d024      	beq.n	8005b78 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b4c:	f083 0320 	eor.w	r3, r3, #32
 8005b50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8013      	strh	r3, [r2, #0]
 8005b76:	e01d      	b.n	8005bb4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	441a      	add	r2, r3
 8005b9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	441a      	add	r2, r3
 8005bd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005bf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3774      	adds	r7, #116	; 0x74
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b08d      	sub	sp, #52	; 0x34
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	7b1b      	ldrb	r3, [r3, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 808e 	bne.w	8005d30 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d044      	beq.n	8005ca6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	81bb      	strh	r3, [r7, #12]
 8005c2a:	89bb      	ldrh	r3, [r7, #12]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01b      	beq.n	8005c6c <USB_DeactivateEndpoint+0x6c>
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	817b      	strh	r3, [r7, #10]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c82:	813b      	strh	r3, [r7, #8]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	441a      	add	r2, r3
 8005c8e:	893b      	ldrh	r3, [r7, #8]
 8005c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	8013      	strh	r3, [r2, #0]
 8005ca4:	e192      	b.n	8005fcc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	827b      	strh	r3, [r7, #18]
 8005cb4:	8a7b      	ldrh	r3, [r7, #18]
 8005cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01b      	beq.n	8005cf6 <USB_DeactivateEndpoint+0xf6>
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	823b      	strh	r3, [r7, #16]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	8a3b      	ldrh	r3, [r7, #16]
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	81fb      	strh	r3, [r7, #14]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	89fb      	ldrh	r3, [r7, #14]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
 8005d2e:	e14d      	b.n	8005fcc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 80a5 	bne.w	8005e84 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	843b      	strh	r3, [r7, #32]
 8005d48:	8c3b      	ldrh	r3, [r7, #32]
 8005d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01b      	beq.n	8005d8a <USB_DeactivateEndpoint+0x18a>
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d68:	83fb      	strh	r3, [r7, #30]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	8bfb      	ldrh	r3, [r7, #30]
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	83bb      	strh	r3, [r7, #28]
 8005d98:	8bbb      	ldrh	r3, [r7, #28]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01b      	beq.n	8005dda <USB_DeactivateEndpoint+0x1da>
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db8:	837b      	strh	r3, [r7, #26]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	8b7b      	ldrh	r3, [r7, #26]
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df0:	833b      	strh	r3, [r7, #24]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	8b3b      	ldrh	r3, [r7, #24]
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	82fb      	strh	r3, [r7, #22]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	441a      	add	r2, r3
 8005e34:	8afb      	ldrh	r3, [r7, #22]
 8005e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e60:	82bb      	strh	r3, [r7, #20]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	8abb      	ldrh	r3, [r7, #20]
 8005e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	8013      	strh	r3, [r2, #0]
 8005e82:	e0a3      	b.n	8005fcc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005e92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <USB_DeactivateEndpoint+0x2d4>
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ee2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <USB_DeactivateEndpoint+0x324>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	853b      	strh	r3, [r7, #40]	; 0x28
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	441a      	add	r2, r3
 8005f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	441a      	add	r2, r3
 8005f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005faa:	847b      	strh	r3, [r7, #34]	; 0x22
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	441a      	add	r2, r3
 8005fb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3734      	adds	r7, #52	; 0x34
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b0c2      	sub	sp, #264	; 0x108
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	6018      	str	r0, [r3, #0]
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fe8:	463b      	mov	r3, r7
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	f040 8509 	bne.w	8006a06 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	429a      	cmp	r2, r3
 8006002:	d905      	bls.n	8006010 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800600e:	e004      	b.n	800601a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006010:	463b      	mov	r3, r7
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	7b1b      	ldrb	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d128      	bne.n	8006076 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006024:	463b      	mov	r3, r7
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6959      	ldr	r1, [r3, #20]
 800602a:	463b      	mov	r3, r7
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	88da      	ldrh	r2, [r3, #6]
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006034:	b29b      	uxth	r3, r3
 8006036:	1d38      	adds	r0, r7, #4
 8006038:	6800      	ldr	r0, [r0, #0]
 800603a:	f001 f9da 	bl	80073f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800603e:	1d3b      	adds	r3, r7, #4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	463b      	mov	r3, r7
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	00da      	lsls	r2, r3, #3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	f000 bc9f 	b.w	80069b4 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006076:	463b      	mov	r3, r7
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	78db      	ldrb	r3, [r3, #3]
 800607c:	2b02      	cmp	r3, #2
 800607e:	f040 8347 	bne.w	8006710 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a1a      	ldr	r2, [r3, #32]
 8006088:	463b      	mov	r3, r7
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	429a      	cmp	r2, r3
 8006090:	f240 82eb 	bls.w	800666a <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006094:	1d3b      	adds	r3, r7, #4
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	463b      	mov	r3, r7
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	463b      	mov	r3, r7
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a1a      	ldr	r2, [r3, #32]
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	463b      	mov	r3, r7
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060ea:	1d3b      	adds	r3, r7, #4
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	463b      	mov	r3, r7
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8159 	beq.w	80063b8 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	633b      	str	r3, [r7, #48]	; 0x30
 800610c:	463b      	mov	r3, r7
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d164      	bne.n	80061e0 <USB_EPStartXfer+0x206>
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006124:	b29b      	uxth	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	4413      	add	r3, r2
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	00da      	lsls	r2, r3, #3
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	4413      	add	r3, r2
 800613a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006144:	2b3e      	cmp	r3, #62	; 0x3e
 8006146:	d91c      	bls.n	8006182 <USB_EPStartXfer+0x1a8>
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <USB_EPStartXfer+0x18e>
 800615e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006162:	3b01      	subs	r3, #1
 8006164:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006168:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800616c:	b29b      	uxth	r3, r3
 800616e:	029b      	lsls	r3, r3, #10
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617a:	b29a      	uxth	r2, r3
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e04a      	b.n	8006218 <USB_EPStartXfer+0x23e>
 8006182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006186:	2b00      	cmp	r3, #0
 8006188:	d112      	bne.n	80061b0 <USB_EPStartXfer+0x1d6>
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006194:	b29a      	uxth	r2, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	e033      	b.n	8006218 <USB_EPStartXfer+0x23e>
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <USB_EPStartXfer+0x1f6>
 80061c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061ca:	3301      	adds	r3, #1
 80061cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e01b      	b.n	8006218 <USB_EPStartXfer+0x23e>
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d116      	bne.n	8006218 <USB_EPStartXfer+0x23e>
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	4413      	add	r3, r2
 80061fa:	633b      	str	r3, [r7, #48]	; 0x30
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	00da      	lsls	r2, r3, #3
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	4413      	add	r3, r2
 8006208:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006212:	b29a      	uxth	r2, r3
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	895b      	ldrh	r3, [r3, #10]
 800621e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622c:	b29b      	uxth	r3, r3
 800622e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006232:	1d38      	adds	r0, r7, #4
 8006234:	6800      	ldr	r0, [r0, #0]
 8006236:	f001 f8dc 	bl	80073f2 <USB_WritePMA>
            ep->xfer_buff += len;
 800623a:	463b      	mov	r3, r7
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	441a      	add	r2, r3
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	463b      	mov	r3, r7
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d909      	bls.n	8006270 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800625c:	463b      	mov	r3, r7
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a1a      	ldr	r2, [r3, #32]
 8006262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	463b      	mov	r3, r7
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	621a      	str	r2, [r3, #32]
 800626e:	e008      	b.n	8006282 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8006270:	463b      	mov	r3, r7
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800627a:	463b      	mov	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006282:	463b      	mov	r3, r7
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d164      	bne.n	8006356 <USB_EPStartXfer+0x37c>
 800628c:	1d3b      	adds	r3, r7, #4
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	1d3b      	adds	r3, r7, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629a:	b29b      	uxth	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	4413      	add	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	463b      	mov	r3, r7
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	00da      	lsls	r2, r3, #3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	4413      	add	r3, r2
 80062b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ba:	2b3e      	cmp	r3, #62	; 0x3e
 80062bc:	d91c      	bls.n	80062f8 <USB_EPStartXfer+0x31e>
 80062be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <USB_EPStartXfer+0x304>
 80062d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d8:	3b01      	subs	r3, #1
 80062da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e04d      	b.n	8006394 <USB_EPStartXfer+0x3ba>
 80062f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d112      	bne.n	8006326 <USB_EPStartXfer+0x34c>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800630a:	b29a      	uxth	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631e:	b29a      	uxth	r2, r3
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	801a      	strh	r2, [r3, #0]
 8006324:	e036      	b.n	8006394 <USB_EPStartXfer+0x3ba>
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <USB_EPStartXfer+0x36c>
 800633c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006340:	3301      	adds	r3, #1
 8006342:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634a:	b29b      	uxth	r3, r3
 800634c:	029b      	lsls	r3, r3, #10
 800634e:	b29a      	uxth	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	e01e      	b.n	8006394 <USB_EPStartXfer+0x3ba>
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d119      	bne.n	8006394 <USB_EPStartXfer+0x3ba>
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	1d3b      	adds	r3, r7, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636e:	b29b      	uxth	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	4413      	add	r3, r2
 8006376:	623b      	str	r3, [r7, #32]
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	00da      	lsls	r2, r3, #3
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	4413      	add	r3, r2
 8006384:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638e:	b29a      	uxth	r2, r3
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006394:	463b      	mov	r3, r7
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	891b      	ldrh	r3, [r3, #8]
 800639a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6959      	ldr	r1, [r3, #20]
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063ae:	1d38      	adds	r0, r7, #4
 80063b0:	6800      	ldr	r0, [r0, #0]
 80063b2:	f001 f81e 	bl	80073f2 <USB_WritePMA>
 80063b6:	e2fd      	b.n	80069b4 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d164      	bne.n	800648c <USB_EPStartXfer+0x4b2>
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d6:	4413      	add	r3, r2
 80063d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063da:	463b      	mov	r3, r7
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	00da      	lsls	r2, r3, #3
 80063e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e4:	4413      	add	r3, r2
 80063e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063ea:	647b      	str	r3, [r7, #68]	; 0x44
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f0:	2b3e      	cmp	r3, #62	; 0x3e
 80063f2:	d91c      	bls.n	800642e <USB_EPStartXfer+0x454>
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <USB_EPStartXfer+0x43a>
 800640a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800640e:	3b01      	subs	r3, #1
 8006410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006418:	b29b      	uxth	r3, r3
 800641a:	029b      	lsls	r3, r3, #10
 800641c:	b29b      	uxth	r3, r3
 800641e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006426:	b29a      	uxth	r2, r3
 8006428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e04d      	b.n	80064ca <USB_EPStartXfer+0x4f0>
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006432:	2b00      	cmp	r3, #0
 8006434:	d112      	bne.n	800645c <USB_EPStartXfer+0x482>
 8006436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006440:	b29a      	uxth	r2, r3
 8006442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006454:	b29a      	uxth	r2, r3
 8006456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006458:	801a      	strh	r2, [r3, #0]
 800645a:	e036      	b.n	80064ca <USB_EPStartXfer+0x4f0>
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <USB_EPStartXfer+0x4a2>
 8006472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006476:	3301      	adds	r3, #1
 8006478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800647c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006480:	b29b      	uxth	r3, r3
 8006482:	029b      	lsls	r3, r3, #10
 8006484:	b29a      	uxth	r2, r3
 8006486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e01e      	b.n	80064ca <USB_EPStartXfer+0x4f0>
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d119      	bne.n	80064ca <USB_EPStartXfer+0x4f0>
 8006496:	1d3b      	adds	r3, r7, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	653b      	str	r3, [r7, #80]	; 0x50
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064aa:	4413      	add	r3, r2
 80064ac:	653b      	str	r3, [r7, #80]	; 0x50
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	00da      	lsls	r2, r3, #3
 80064b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064b8:	4413      	add	r3, r2
 80064ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064ca:	463b      	mov	r3, r7
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	891b      	ldrh	r3, [r3, #8]
 80064d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064d4:	463b      	mov	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6959      	ldr	r1, [r3, #20]
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064e4:	1d38      	adds	r0, r7, #4
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	f000 ff83 	bl	80073f2 <USB_WritePMA>
            ep->xfer_buff += len;
 80064ec:	463b      	mov	r3, r7
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f6:	441a      	add	r2, r3
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064fe:	463b      	mov	r3, r7
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	429a      	cmp	r2, r3
 800650c:	d909      	bls.n	8006522 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	1ad2      	subs	r2, r2, r3
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	621a      	str	r2, [r3, #32]
 8006520:	e008      	b.n	8006534 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2200      	movs	r2, #0
 8006532:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006534:	1d3b      	adds	r3, r7, #4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	643b      	str	r3, [r7, #64]	; 0x40
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d164      	bne.n	800660e <USB_EPStartXfer+0x634>
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
 800654a:	1d3b      	adds	r3, r7, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	4413      	add	r3, r2
 800655a:	63bb      	str	r3, [r7, #56]	; 0x38
 800655c:	463b      	mov	r3, r7
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	00da      	lsls	r2, r3, #3
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	4413      	add	r3, r2
 8006568:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006572:	2b3e      	cmp	r3, #62	; 0x3e
 8006574:	d91c      	bls.n	80065b0 <USB_EPStartXfer+0x5d6>
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <USB_EPStartXfer+0x5bc>
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006590:	3b01      	subs	r3, #1
 8006592:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	b29b      	uxth	r3, r3
 800659c:	029b      	lsls	r3, r3, #10
 800659e:	b29b      	uxth	r3, r3
 80065a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	e04a      	b.n	8006646 <USB_EPStartXfer+0x66c>
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d112      	bne.n	80065de <USB_EPStartXfer+0x604>
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e033      	b.n	8006646 <USB_EPStartXfer+0x66c>
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <USB_EPStartXfer+0x624>
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f8:	3301      	adds	r3, #1
 80065fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006602:	b29b      	uxth	r3, r3
 8006604:	029b      	lsls	r3, r3, #10
 8006606:	b29a      	uxth	r2, r3
 8006608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	e01b      	b.n	8006646 <USB_EPStartXfer+0x66c>
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d116      	bne.n	8006646 <USB_EPStartXfer+0x66c>
 8006618:	1d3b      	adds	r3, r7, #4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006620:	b29b      	uxth	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006626:	4413      	add	r3, r2
 8006628:	643b      	str	r3, [r7, #64]	; 0x40
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	00da      	lsls	r2, r3, #3
 8006632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006634:	4413      	add	r3, r2
 8006636:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006640:	b29a      	uxth	r2, r3
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	895b      	ldrh	r3, [r3, #10]
 800664c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006650:	463b      	mov	r3, r7
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6959      	ldr	r1, [r3, #20]
 8006656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665a:	b29b      	uxth	r3, r3
 800665c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006660:	1d38      	adds	r0, r7, #4
 8006662:	6800      	ldr	r0, [r0, #0]
 8006664:	f000 fec5 	bl	80073f2 <USB_WritePMA>
 8006668:	e1a4      	b.n	80069b4 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800666a:	463b      	mov	r3, r7
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006674:	1d3b      	adds	r3, r7, #4
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	463b      	mov	r3, r7
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80066a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066b8:	1d3b      	adds	r3, r7, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066be:	1d3b      	adds	r3, r7, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066cc:	4413      	add	r3, r2
 80066ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d0:	463b      	mov	r3, r7
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	00da      	lsls	r2, r3, #3
 80066d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066da:	4413      	add	r3, r2
 80066dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	891b      	ldrh	r3, [r3, #8]
 80066f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066f6:	463b      	mov	r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6959      	ldr	r1, [r3, #20]
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006700:	b29b      	uxth	r3, r3
 8006702:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006706:	1d38      	adds	r0, r7, #4
 8006708:	6800      	ldr	r0, [r0, #0]
 800670a:	f000 fe72 	bl	80073f2 <USB_WritePMA>
 800670e:	e151      	b.n	80069b4 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671a:	1ad2      	subs	r2, r2, r3
 800671c:	463b      	mov	r3, r7
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006722:	1d3b      	adds	r3, r7, #4
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	463b      	mov	r3, r7
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 809b 	beq.w	8006874 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	673b      	str	r3, [r7, #112]	; 0x70
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d164      	bne.n	8006818 <USB_EPStartXfer+0x83e>
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	66bb      	str	r3, [r7, #104]	; 0x68
 8006754:	1d3b      	adds	r3, r7, #4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675c:	b29b      	uxth	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006762:	4413      	add	r3, r2
 8006764:	66bb      	str	r3, [r7, #104]	; 0x68
 8006766:	463b      	mov	r3, r7
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	00da      	lsls	r2, r3, #3
 800676e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006770:	4413      	add	r3, r2
 8006772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006776:	667b      	str	r3, [r7, #100]	; 0x64
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677c:	2b3e      	cmp	r3, #62	; 0x3e
 800677e:	d91c      	bls.n	80067ba <USB_EPStartXfer+0x7e0>
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <USB_EPStartXfer+0x7c6>
 8006796:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800679a:	3b01      	subs	r3, #1
 800679c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	029b      	lsls	r3, r3, #10
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	e04a      	b.n	8006850 <USB_EPStartXfer+0x876>
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d112      	bne.n	80067e8 <USB_EPStartXfer+0x80e>
 80067c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e033      	b.n	8006850 <USB_EPStartXfer+0x876>
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ec:	085b      	lsrs	r3, r3, #1
 80067ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <USB_EPStartXfer+0x82e>
 80067fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006802:	3301      	adds	r3, #1
 8006804:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006808:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800680c:	b29b      	uxth	r3, r3
 800680e:	029b      	lsls	r3, r3, #10
 8006810:	b29a      	uxth	r2, r3
 8006812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	e01b      	b.n	8006850 <USB_EPStartXfer+0x876>
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d116      	bne.n	8006850 <USB_EPStartXfer+0x876>
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800682a:	b29b      	uxth	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006830:	4413      	add	r3, r2
 8006832:	673b      	str	r3, [r7, #112]	; 0x70
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	00da      	lsls	r2, r3, #3
 800683c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800683e:	4413      	add	r3, r2
 8006840:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684a:	b29a      	uxth	r2, r3
 800684c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	895b      	ldrh	r3, [r3, #10]
 8006856:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6959      	ldr	r1, [r3, #20]
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006864:	b29b      	uxth	r3, r3
 8006866:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800686a:	1d38      	adds	r0, r7, #4
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f000 fdc0 	bl	80073f2 <USB_WritePMA>
 8006872:	e09f      	b.n	80069b4 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d164      	bne.n	8006948 <USB_EPStartXfer+0x96e>
 800687e:	1d3b      	adds	r3, r7, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006884:	1d3b      	adds	r3, r7, #4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006892:	4413      	add	r3, r2
 8006894:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00da      	lsls	r2, r3, #3
 800689e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ac:	2b3e      	cmp	r3, #62	; 0x3e
 80068ae:	d91c      	bls.n	80068ea <USB_EPStartXfer+0x910>
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <USB_EPStartXfer+0x8f6>
 80068c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068ca:	3b01      	subs	r3, #1
 80068cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	029b      	lsls	r3, r3, #10
 80068d8:	b29b      	uxth	r3, r3
 80068da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	e053      	b.n	8006992 <USB_EPStartXfer+0x9b8>
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d112      	bne.n	8006918 <USB_EPStartXfer+0x93e>
 80068f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006910:	b29a      	uxth	r2, r3
 8006912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	e03c      	b.n	8006992 <USB_EPStartXfer+0x9b8>
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <USB_EPStartXfer+0x95e>
 800692e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006932:	3301      	adds	r3, #1
 8006934:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800693c:	b29b      	uxth	r3, r3
 800693e:	029b      	lsls	r3, r3, #10
 8006940:	b29a      	uxth	r2, r3
 8006942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e024      	b.n	8006992 <USB_EPStartXfer+0x9b8>
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d11f      	bne.n	8006992 <USB_EPStartXfer+0x9b8>
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800695a:	1d3b      	adds	r3, r7, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006962:	b29b      	uxth	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800696a:	4413      	add	r3, r2
 800696c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006970:	463b      	mov	r3, r7
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	00da      	lsls	r2, r3, #3
 8006978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800697c:	4413      	add	r3, r2
 800697e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006982:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006990:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006992:	463b      	mov	r3, r7
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	891b      	ldrh	r3, [r3, #8]
 8006998:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6959      	ldr	r1, [r3, #20]
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069ac:	1d38      	adds	r0, r7, #4
 80069ae:	6800      	ldr	r0, [r0, #0]
 80069b0:	f000 fd1f 	bl	80073f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069b4:	1d3b      	adds	r3, r7, #4
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	463b      	mov	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ce:	817b      	strh	r3, [r7, #10]
 80069d0:	897b      	ldrh	r3, [r7, #10]
 80069d2:	f083 0310 	eor.w	r3, r3, #16
 80069d6:	817b      	strh	r3, [r7, #10]
 80069d8:	897b      	ldrh	r3, [r7, #10]
 80069da:	f083 0320 	eor.w	r3, r3, #32
 80069de:	817b      	strh	r3, [r7, #10]
 80069e0:	1d3b      	adds	r3, r7, #4
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	463b      	mov	r3, r7
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	441a      	add	r2, r3
 80069ee:	897b      	ldrh	r3, [r7, #10]
 80069f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8013      	strh	r3, [r2, #0]
 8006a04:	e3b5      	b.n	8007172 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a06:	463b      	mov	r3, r7
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	7b1b      	ldrb	r3, [r3, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f040 8090 	bne.w	8006b32 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699a      	ldr	r2, [r3, #24]
 8006a18:	463b      	mov	r3, r7
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d90e      	bls.n	8006a40 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8006a22:	463b      	mov	r3, r7
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	463b      	mov	r3, r7
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	619a      	str	r2, [r3, #24]
 8006a3e:	e008      	b.n	8006a52 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8006a40:	463b      	mov	r3, r7
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a5a:	1d3b      	adds	r3, r7, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a70:	463b      	mov	r3, r7
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	00da      	lsls	r2, r3, #3
 8006a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a8c:	d91d      	bls.n	8006aca <USB_EPStartXfer+0xaf0>
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d104      	bne.n	8006aae <USB_EPStartXfer+0xad4>
 8006aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	029b      	lsls	r3, r3, #10
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e325      	b.n	8007116 <USB_EPStartXfer+0x113c>
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d116      	bne.n	8006b00 <USB_EPStartXfer+0xb26>
 8006ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ae4:	801a      	strh	r2, [r3, #0]
 8006ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006afc:	801a      	strh	r2, [r3, #0]
 8006afe:	e30a      	b.n	8007116 <USB_EPStartXfer+0x113c>
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <USB_EPStartXfer+0xb46>
 8006b16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e2f1      	b.n	8007116 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	78db      	ldrb	r3, [r3, #3]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	f040 818f 	bne.w	8006e5c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d175      	bne.n	8006c34 <USB_EPStartXfer+0xc5a>
 8006b48:	1d3b      	adds	r3, r7, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b50:	1d3b      	adds	r3, r7, #4
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b60:	4413      	add	r3, r2
 8006b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b66:	463b      	mov	r3, r7
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	00da      	lsls	r2, r3, #3
 8006b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b72:	4413      	add	r3, r2
 8006b74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b3e      	cmp	r3, #62	; 0x3e
 8006b84:	d91f      	bls.n	8006bc6 <USB_EPStartXfer+0xbec>
 8006b86:	463b      	mov	r3, r7
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b92:	463b      	mov	r3, r7
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <USB_EPStartXfer+0xbd0>
 8006ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e05c      	b.n	8006c80 <USB_EPStartXfer+0xca6>
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d116      	bne.n	8006bfe <USB_EPStartXfer+0xc24>
 8006bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	e040      	b.n	8006c80 <USB_EPStartXfer+0xca6>
 8006bfe:	463b      	mov	r3, r7
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <USB_EPStartXfer+0xc48>
 8006c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c30:	801a      	strh	r2, [r3, #0]
 8006c32:	e025      	b.n	8006c80 <USB_EPStartXfer+0xca6>
 8006c34:	463b      	mov	r3, r7
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d120      	bne.n	8006c80 <USB_EPStartXfer+0xca6>
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c46:	1d3b      	adds	r3, r7, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c56:	4413      	add	r3, r2
 8006c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	00da      	lsls	r2, r3, #3
 8006c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c68:	4413      	add	r3, r2
 8006c6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c72:	463b      	mov	r3, r7
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	1d3b      	adds	r3, r7, #4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c88:	463b      	mov	r3, r7
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	785b      	ldrb	r3, [r3, #1]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d175      	bne.n	8006d7e <USB_EPStartXfer+0xda4>
 8006c92:	1d3b      	adds	r3, r7, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006caa:	4413      	add	r3, r2
 8006cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	00da      	lsls	r2, r3, #3
 8006cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8006cce:	d91f      	bls.n	8006d10 <USB_EPStartXfer+0xd36>
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <USB_EPStartXfer+0xd1a>
 8006cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	029b      	lsls	r3, r3, #10
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e058      	b.n	8006dc2 <USB_EPStartXfer+0xde8>
 8006d10:	463b      	mov	r3, r7
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d116      	bne.n	8006d48 <USB_EPStartXfer+0xd6e>
 8006d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	e03c      	b.n	8006dc2 <USB_EPStartXfer+0xde8>
 8006d48:	463b      	mov	r3, r7
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d54:	463b      	mov	r3, r7
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <USB_EPStartXfer+0xd92>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d66:	3301      	adds	r3, #1
 8006d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e021      	b.n	8006dc2 <USB_EPStartXfer+0xde8>
 8006d7e:	463b      	mov	r3, r7
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d11c      	bne.n	8006dc2 <USB_EPStartXfer+0xde8>
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d98:	4413      	add	r3, r2
 8006d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d9e:	463b      	mov	r3, r7
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	00da      	lsls	r2, r3, #3
 8006da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006daa:	4413      	add	r3, r2
 8006dac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006db0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006db4:	463b      	mov	r3, r7
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dc0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 81a4 	beq.w	8007116 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006dce:	1d3b      	adds	r3, r7, #4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006de2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <USB_EPStartXfer+0xe20>
 8006dee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 8187 	bne.w	8007116 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 8180 	bne.w	8007116 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e16:	1d3b      	adds	r3, r7, #4
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006e34:	1d3b      	adds	r3, r7, #4
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	463b      	mov	r3, r7
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	441a      	add	r2, r3
 8006e42:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	8013      	strh	r3, [r2, #0]
 8006e5a:	e15c      	b.n	8007116 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	78db      	ldrb	r3, [r3, #3]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	f040 8155 	bne.w	8007112 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e68:	463b      	mov	r3, r7
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d90e      	bls.n	8006e96 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	463b      	mov	r3, r7
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	619a      	str	r2, [r3, #24]
 8006e94:	e008      	b.n	8006ea8 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8006e96:	463b      	mov	r3, r7
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d16f      	bne.n	8006f92 <USB_EPStartXfer+0xfb8>
 8006eb2:	1d3b      	adds	r3, r7, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eba:	1d3b      	adds	r3, r7, #4
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006eca:	4413      	add	r3, r2
 8006ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	00da      	lsls	r2, r3, #3
 8006ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006edc:	4413      	add	r3, r2
 8006ede:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eea:	2b3e      	cmp	r3, #62	; 0x3e
 8006eec:	d91d      	bls.n	8006f2a <USB_EPStartXfer+0xf50>
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <USB_EPStartXfer+0xf34>
 8006f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	029b      	lsls	r3, r3, #10
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	e058      	b.n	8006fdc <USB_EPStartXfer+0x1002>
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d116      	bne.n	8006f60 <USB_EPStartXfer+0xf86>
 8006f32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e03d      	b.n	8006fdc <USB_EPStartXfer+0x1002>
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <USB_EPStartXfer+0xfa6>
 8006f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	029b      	lsls	r3, r3, #10
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	e024      	b.n	8006fdc <USB_EPStartXfer+0x1002>
 8006f92:	463b      	mov	r3, r7
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d11f      	bne.n	8006fdc <USB_EPStartXfer+0x1002>
 8006f9c:	1d3b      	adds	r3, r7, #4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fa4:	1d3b      	adds	r3, r7, #4
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fba:	463b      	mov	r3, r7
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	00da      	lsls	r2, r3, #3
 8006fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	1d3b      	adds	r3, r7, #4
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fe4:	463b      	mov	r3, r7
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d16f      	bne.n	80070ce <USB_EPStartXfer+0x10f4>
 8006fee:	1d3b      	adds	r3, r7, #4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ff6:	1d3b      	adds	r3, r7, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	461a      	mov	r2, r3
 8007002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007006:	4413      	add	r3, r2
 8007008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800700c:	463b      	mov	r3, r7
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	00da      	lsls	r2, r3, #3
 8007014:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007018:	4413      	add	r3, r2
 800701a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800701e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007026:	2b3e      	cmp	r3, #62	; 0x3e
 8007028:	d91d      	bls.n	8007066 <USB_EPStartXfer+0x108c>
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007038:	f003 031f 	and.w	r3, r3, #31
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <USB_EPStartXfer+0x1070>
 8007040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007044:	3b01      	subs	r3, #1
 8007046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800704a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800704e:	b29b      	uxth	r3, r3
 8007050:	029b      	lsls	r3, r3, #10
 8007052:	b29b      	uxth	r3, r3
 8007054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e057      	b.n	8007116 <USB_EPStartXfer+0x113c>
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706a:	2b00      	cmp	r3, #0
 800706c:	d116      	bne.n	800709c <USB_EPStartXfer+0x10c2>
 800706e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800707a:	b29a      	uxth	r2, r3
 800707c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007092:	b29a      	uxth	r2, r3
 8007094:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	e03c      	b.n	8007116 <USB_EPStartXfer+0x113c>
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <USB_EPStartXfer+0x10e2>
 80070b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b6:	3301      	adds	r3, #1
 80070b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	029b      	lsls	r3, r3, #10
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	e023      	b.n	8007116 <USB_EPStartXfer+0x113c>
 80070ce:	463b      	mov	r3, r7
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d11e      	bne.n	8007116 <USB_EPStartXfer+0x113c>
 80070d8:	1d3b      	adds	r3, r7, #4
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070e8:	4413      	add	r3, r2
 80070ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	00da      	lsls	r2, r3, #3
 80070f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070fa:	4413      	add	r3, r2
 80070fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007108:	b29a      	uxth	r2, r3
 800710a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e001      	b.n	8007116 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e02e      	b.n	8007174 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007116:	1d3b      	adds	r3, r7, #4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	463b      	mov	r3, r7
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007130:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007134:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007138:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800713c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007140:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007144:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007148:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800714c:	1d3b      	adds	r3, r7, #4
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	463b      	mov	r3, r7
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	441a      	add	r2, r3
 800715a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800715e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800716a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716e:	b29b      	uxth	r3, r3
 8007170:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d020      	beq.n	80071d2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a6:	81bb      	strh	r3, [r7, #12]
 80071a8:	89bb      	ldrh	r3, [r7, #12]
 80071aa:	f083 0310 	eor.w	r3, r3, #16
 80071ae:	81bb      	strh	r3, [r7, #12]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	441a      	add	r2, r3
 80071ba:	89bb      	ldrh	r3, [r7, #12]
 80071bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8013      	strh	r3, [r2, #0]
 80071d0:	e01f      	b.n	8007212 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e8:	81fb      	strh	r3, [r7, #14]
 80071ea:	89fb      	ldrh	r3, [r7, #14]
 80071ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071f0:	81fb      	strh	r3, [r7, #14]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	441a      	add	r2, r3
 80071fc:	89fb      	ldrh	r3, [r7, #14]
 80071fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720e:	b29b      	uxth	r3, r3
 8007210:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	7b1b      	ldrb	r3, [r3, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f040 809d 	bne.w	800736e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d04c      	beq.n	80072d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	823b      	strh	r3, [r7, #16]
 800724a:	8a3b      	ldrh	r3, [r7, #16]
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01b      	beq.n	800728c <USB_EPClearStall+0x6c>
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	81fb      	strh	r3, [r7, #14]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	441a      	add	r2, r3
 8007276:	89fb      	ldrh	r3, [r7, #14]
 8007278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800727c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007288:	b29b      	uxth	r3, r3
 800728a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	78db      	ldrb	r3, [r3, #3]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d06c      	beq.n	800736e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072aa:	81bb      	strh	r3, [r7, #12]
 80072ac:	89bb      	ldrh	r3, [r7, #12]
 80072ae:	f083 0320 	eor.w	r3, r3, #32
 80072b2:	81bb      	strh	r3, [r7, #12]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	441a      	add	r2, r3
 80072be:	89bb      	ldrh	r3, [r7, #12]
 80072c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	8013      	strh	r3, [r2, #0]
 80072d4:	e04b      	b.n	800736e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	82fb      	strh	r3, [r7, #22]
 80072e4:	8afb      	ldrh	r3, [r7, #22]
 80072e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01b      	beq.n	8007326 <USB_EPClearStall+0x106>
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007304:	82bb      	strh	r3, [r7, #20]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	441a      	add	r2, r3
 8007310:	8abb      	ldrh	r3, [r7, #20]
 8007312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800731e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733c:	827b      	strh	r3, [r7, #18]
 800733e:	8a7b      	ldrh	r3, [r7, #18]
 8007340:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007344:	827b      	strh	r3, [r7, #18]
 8007346:	8a7b      	ldrh	r3, [r7, #18]
 8007348:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800734c:	827b      	strh	r3, [r7, #18]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	441a      	add	r2, r3
 8007358:	8a7b      	ldrh	r3, [r7, #18]
 800735a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800735e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736a:	b29b      	uxth	r3, r3
 800736c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2280      	movs	r2, #128	; 0x80
 8007392:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073bc:	b29a      	uxth	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80073e4:	68fb      	ldr	r3, [r7, #12]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b08d      	sub	sp, #52	; 0x34
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	4611      	mov	r1, r2
 80073fe:	461a      	mov	r2, r3
 8007400:	460b      	mov	r3, r1
 8007402:	80fb      	strh	r3, [r7, #6]
 8007404:	4613      	mov	r3, r2
 8007406:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007408:	88bb      	ldrh	r3, [r7, #4]
 800740a:	3301      	adds	r3, #1
 800740c:	085b      	lsrs	r3, r3, #1
 800740e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007418:	88fa      	ldrh	r2, [r7, #6]
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007428:	e01b      	b.n	8007462 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	3301      	adds	r3, #1
 8007434:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	b29b      	uxth	r3, r3
 8007440:	461a      	mov	r2, r3
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	b29a      	uxth	r2, r3
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	3302      	adds	r3, #2
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	3301      	adds	r3, #1
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	3b01      	subs	r3, #1
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e0      	bne.n	800742a <USB_WritePMA+0x38>
  }
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	3734      	adds	r7, #52	; 0x34
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007476:	b480      	push	{r7}
 8007478:	b08b      	sub	sp, #44	; 0x2c
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	4611      	mov	r1, r2
 8007482:	461a      	mov	r2, r3
 8007484:	460b      	mov	r3, r1
 8007486:	80fb      	strh	r3, [r7, #6]
 8007488:	4613      	mov	r3, r2
 800748a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800748c:	88bb      	ldrh	r3, [r7, #4]
 800748e:	085b      	lsrs	r3, r3, #1
 8007490:	b29b      	uxth	r3, r3
 8007492:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800749c:	88fa      	ldrh	r2, [r7, #6]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074a6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
 80074ac:	e018      	b.n	80074e0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	3302      	adds	r3, #2
 80074ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	3301      	adds	r3, #1
 80074c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	0a1b      	lsrs	r3, r3, #8
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	3b01      	subs	r3, #1
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e3      	bne.n	80074ae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80074e6:	88bb      	ldrh	r3, [r7, #4]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	701a      	strb	r2, [r3, #0]
  }
}
 8007502:	bf00      	nop
 8007504:	372c      	adds	r7, #44	; 0x2c
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800751a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800751e:	f002 f953 	bl	80097c8 <USBD_static_malloc>
 8007522:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d105      	bne.n	8007536 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007532:	2302      	movs	r3, #2
 8007534:	e066      	b.n	8007604 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	7c1b      	ldrb	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d119      	bne.n	800757a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800754a:	2202      	movs	r2, #2
 800754c:	2181      	movs	r1, #129	; 0x81
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 ffdf 	bl	8009512 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800755a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755e:	2202      	movs	r2, #2
 8007560:	2101      	movs	r1, #1
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 ffd5 	bl	8009512 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2210      	movs	r2, #16
 8007574:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007578:	e016      	b.n	80075a8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	2202      	movs	r2, #2
 800757e:	2181      	movs	r1, #129	; 0x81
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 ffc6 	bl	8009512 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	2202      	movs	r2, #2
 8007590:	2101      	movs	r1, #1
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 ffbd 	bl	8009512 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2210      	movs	r2, #16
 80075a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075a8:	2308      	movs	r3, #8
 80075aa:	2203      	movs	r2, #3
 80075ac:	2182      	movs	r1, #130	; 0x82
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 ffaf 	bl	8009512 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7c1b      	ldrb	r3, [r3, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e8:	2101      	movs	r1, #1
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f002 f881 	bl	80096f2 <USBD_LL_PrepareReceive>
 80075f0:	e007      	b.n	8007602 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075f8:	2340      	movs	r3, #64	; 0x40
 80075fa:	2101      	movs	r1, #1
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 f878 	bl	80096f2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007618:	2181      	movs	r1, #129	; 0x81
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 ff9f 	bl	800955e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007626:	2101      	movs	r1, #1
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 ff98 	bl	800955e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007636:	2182      	movs	r1, #130	; 0x82
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 ff90 	bl	800955e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00e      	beq.n	8007676 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007668:	4618      	mov	r0, r3
 800766a:	f002 f8bb 	bl	80097e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007690:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e0af      	b.n	8007808 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d03f      	beq.n	8007734 <USBD_CDC_Setup+0xb4>
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	f040 809f 	bne.w	80077f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	88db      	ldrh	r3, [r3, #6]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d02e      	beq.n	8007720 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	b25b      	sxtb	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da16      	bge.n	80076fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80076d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	88d2      	ldrh	r2, [r2, #6]
 80076de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	88db      	ldrh	r3, [r3, #6]
 80076e4:	2b07      	cmp	r3, #7
 80076e6:	bf28      	it	cs
 80076e8:	2307      	movcs	r3, #7
 80076ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	89fa      	ldrh	r2, [r7, #14]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 facf 	bl	8008c96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80076f8:	e085      	b.n	8007806 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	785a      	ldrb	r2, [r3, #1]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	88db      	ldrh	r3, [r3, #6]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007710:	6939      	ldr	r1, [r7, #16]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	88db      	ldrh	r3, [r3, #6]
 8007716:	461a      	mov	r2, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 fae8 	bl	8008cee <USBD_CtlPrepareRx>
      break;
 800771e:	e072      	b.n	8007806 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	7850      	ldrb	r0, [r2, #1]
 800772c:	2200      	movs	r2, #0
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	4798      	blx	r3
      break;
 8007732:	e068      	b.n	8007806 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b0b      	cmp	r3, #11
 800773a:	d852      	bhi.n	80077e2 <USBD_CDC_Setup+0x162>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <USBD_CDC_Setup+0xc4>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007775 	.word	0x08007775
 8007748:	080077f1 	.word	0x080077f1
 800774c:	080077e3 	.word	0x080077e3
 8007750:	080077e3 	.word	0x080077e3
 8007754:	080077e3 	.word	0x080077e3
 8007758:	080077e3 	.word	0x080077e3
 800775c:	080077e3 	.word	0x080077e3
 8007760:	080077e3 	.word	0x080077e3
 8007764:	080077e3 	.word	0x080077e3
 8007768:	080077e3 	.word	0x080077e3
 800776c:	0800779f 	.word	0x0800779f
 8007770:	080077c9 	.word	0x080077c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b03      	cmp	r3, #3
 800777e:	d107      	bne.n	8007790 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007780:	f107 030a 	add.w	r3, r7, #10
 8007784:	2202      	movs	r2, #2
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fa84 	bl	8008c96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800778e:	e032      	b.n	80077f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fa0e 	bl	8008bb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	75fb      	strb	r3, [r7, #23]
          break;
 800779c:	e02b      	b.n	80077f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d107      	bne.n	80077ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077aa:	f107 030d 	add.w	r3, r7, #13
 80077ae:	2201      	movs	r2, #1
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 fa6f 	bl	8008c96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077b8:	e01d      	b.n	80077f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 f9f9 	bl	8008bb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80077c2:	2303      	movs	r3, #3
 80077c4:	75fb      	strb	r3, [r7, #23]
          break;
 80077c6:	e016      	b.n	80077f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d00f      	beq.n	80077f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 f9ec 	bl	8008bb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80077dc:	2303      	movs	r3, #3
 80077de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077e0:	e008      	b.n	80077f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f9e5 	bl	8008bb4 <USBD_CtlError>
          ret = USBD_FAIL;
 80077ea:	2303      	movs	r3, #3
 80077ec:	75fb      	strb	r3, [r7, #23]
          break;
 80077ee:	e002      	b.n	80077f6 <USBD_CDC_Setup+0x176>
          break;
 80077f0:	bf00      	nop
 80077f2:	e008      	b.n	8007806 <USBD_CDC_Setup+0x186>
          break;
 80077f4:	bf00      	nop
      }
      break;
 80077f6:	e006      	b.n	8007806 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 f9da 	bl	8008bb4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	75fb      	strb	r3, [r7, #23]
      break;
 8007804:	bf00      	nop
  }

  return (uint8_t)ret;
 8007806:	7dfb      	ldrb	r3, [r7, #23]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007822:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800782e:	2303      	movs	r3, #3
 8007830:	e04f      	b.n	80078d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007838:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	3318      	adds	r3, #24
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d029      	beq.n	80078a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	3318      	adds	r3, #24
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	78f9      	ldrb	r1, [r7, #3]
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	460b      	mov	r3, r1
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	440b      	add	r3, r1
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4403      	add	r3, r0
 8007870:	3338      	adds	r3, #56	; 0x38
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	fbb2 f1f3 	udiv	r1, r2, r3
 8007878:	fb03 f301 	mul.w	r3, r3, r1
 800787c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800787e:	2b00      	cmp	r3, #0
 8007880:	d110      	bne.n	80078a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	3318      	adds	r3, #24
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007896:	78f9      	ldrb	r1, [r7, #3]
 8007898:	2300      	movs	r3, #0
 800789a:	2200      	movs	r2, #0
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 ff07 	bl	80096b0 <USBD_LL_Transmit>
 80078a2:	e015      	b.n	80078d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e015      	b.n	8007928 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 ff17 	bl	8009734 <USBD_LL_GetRxDataSize>
 8007906:	4602      	mov	r2, r0
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007922:	4611      	mov	r1, r2
 8007924:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800793e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007946:	2303      	movs	r3, #3
 8007948:	e01b      	b.n	8007982 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d015      	beq.n	8007980 <USBD_CDC_EP0_RxReady+0x50>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800795a:	2bff      	cmp	r3, #255	; 0xff
 800795c:	d010      	beq.n	8007980 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800796c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007974:	b292      	uxth	r2, r2
 8007976:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	22ff      	movs	r2, #255	; 0xff
 800797c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2243      	movs	r2, #67	; 0x43
 8007998:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800799a:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000098 	.word	0x20000098

080079ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2243      	movs	r2, #67	; 0x43
 80079b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80079ba:	4b03      	ldr	r3, [pc, #12]	; (80079c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	20000054 	.word	0x20000054

080079cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2243      	movs	r2, #67	; 0x43
 80079d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80079da:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	200000dc 	.word	0x200000dc

080079ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220a      	movs	r2, #10
 80079f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079fa:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	20000010 	.word	0x20000010

08007a0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e004      	b.n	8007a2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a48:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e008      	b.n	8007a66 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e004      	b.n	8007a98 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ab2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e01a      	b.n	8007afc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d114      	bne.n	8007afa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007aee:	2181      	movs	r1, #129	; 0x81
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fddd 	bl	80096b0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e016      	b.n	8007b50 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7c1b      	ldrb	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b34:	2101      	movs	r1, #1
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 fddb 	bl	80096f2 <USBD_LL_PrepareReceive>
 8007b3c:	e007      	b.n	8007b4e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b44:	2340      	movs	r3, #64	; 0x40
 8007b46:	2101      	movs	r1, #1
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 fdd2 	bl	80096f2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	4613      	mov	r3, r2
 8007b64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e01f      	b.n	8007bb0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	79fa      	ldrb	r2, [r7, #7]
 8007ba2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f001 fc37 	bl	8009418 <USBD_LL_Init>
 8007baa:	4603      	mov	r3, r0
 8007bac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e016      	b.n	8007bfe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	f107 020e 	add.w	r2, r7, #14
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fc64 	bl	80094dc <USBD_LL_Start>
 8007c14:	4603      	mov	r3, r0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	78fa      	ldrb	r2, [r7, #3]
 8007c58:	4611      	mov	r1, r2
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
  }

  return USBD_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 ff46 	bl	8008b40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d01a      	beq.n	8007d0e <USBD_LL_SetupStage+0x72>
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d822      	bhi.n	8007d22 <USBD_LL_SetupStage+0x86>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <USBD_LL_SetupStage+0x4a>
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d00a      	beq.n	8007cfa <USBD_LL_SetupStage+0x5e>
 8007ce4:	e01d      	b.n	8007d22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f9ee 	bl	80080d0 <USBD_StdDevReq>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf8:	e020      	b.n	8007d3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa52 	bl	80081ac <USBD_StdItfReq>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0c:	e016      	b.n	8007d3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa91 	bl	800823e <USBD_StdEPReq>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d20:	e00c      	b.n	8007d3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fc33 	bl	800959c <USBD_LL_StallEP>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73fb      	strb	r3, [r7, #15]
      break;
 8007d3a:	bf00      	nop
  }

  return ret;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b086      	sub	sp, #24
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d138      	bne.n	8007dcc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d14a      	bne.n	8007e02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d913      	bls.n	8007da0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	1ad2      	subs	r2, r2, r3
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	bf28      	it	cs
 8007d92:	4613      	movcs	r3, r2
 8007d94:	461a      	mov	r2, r3
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 ffc5 	bl	8008d28 <USBD_CtlContinueRx>
 8007d9e:	e030      	b.n	8007e02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d10b      	bne.n	8007dc4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 ffc0 	bl	8008d4a <USBD_CtlSendStatus>
 8007dca:	e01a      	b.n	8007e02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d114      	bne.n	8007e02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00e      	beq.n	8007e02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	7afa      	ldrb	r2, [r7, #11]
 8007dee:	4611      	mov	r1, r2
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	e000      	b.n	8007e04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	460b      	mov	r3, r1
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e1a:	7afb      	ldrb	r3, [r7, #11]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d16b      	bne.n	8007ef8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3314      	adds	r3, #20
 8007e24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d156      	bne.n	8007ede <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d914      	bls.n	8007e66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	1ad2      	subs	r2, r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 ff3a 	bl	8008ccc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f001 fc47 	bl	80096f2 <USBD_LL_PrepareReceive>
 8007e64:	e03b      	b.n	8007ede <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d11c      	bne.n	8007eac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d316      	bcc.n	8007eac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d20f      	bcs.n	8007eac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 ff1b 	bl	8008ccc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f001 fc24 	bl	80096f2 <USBD_LL_PrepareReceive>
 8007eaa:	e018      	b.n	8007ede <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d10b      	bne.n	8007ed0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ed0:	2180      	movs	r1, #128	; 0x80
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f001 fb62 	bl	800959c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 ff49 	bl	8008d70 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d122      	bne.n	8007f2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff fe98 	bl	8007c1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ef6:	e01a      	b.n	8007f2e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d114      	bne.n	8007f2e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00e      	beq.n	8007f2e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	7afa      	ldrb	r2, [r7, #11]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	4798      	blx	r3
 8007f20:	4603      	mov	r3, r0
 8007f22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	e000      	b.n	8007f30 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e02f      	b.n	8007fcc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00f      	beq.n	8007f96 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d009      	beq.n	8007f96 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6852      	ldr	r2, [r2, #4]
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	4611      	mov	r1, r2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fab8 	bl	8009512 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2240      	movs	r2, #64	; 0x40
 8007fae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fb2:	2340      	movs	r3, #64	; 0x40
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2180      	movs	r1, #128	; 0x80
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 faaa 	bl	8009512 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2240      	movs	r2, #64	; 0x40
 8007fc8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008002:	b2da      	uxtb	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2204      	movs	r2, #4
 800800e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b04      	cmp	r3, #4
 8008032:	d106      	bne.n	8008042 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800803a:	b2da      	uxtb	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	e012      	b.n	800808c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b03      	cmp	r3, #3
 8008070:	d10b      	bne.n	800808a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	3301      	adds	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080b2:	8a3b      	ldrh	r3, [r7, #16]
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	b21a      	sxth	r2, r3
 80080b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080bc:	4313      	orrs	r3, r2
 80080be:	b21b      	sxth	r3, r3
 80080c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80080c2:	89fb      	ldrh	r3, [r7, #14]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d005      	beq.n	80080f6 <USBD_StdDevReq+0x26>
 80080ea:	2b40      	cmp	r3, #64	; 0x40
 80080ec:	d853      	bhi.n	8008196 <USBD_StdDevReq+0xc6>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00b      	beq.n	800810a <USBD_StdDevReq+0x3a>
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d14f      	bne.n	8008196 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
      break;
 8008108:	e04a      	b.n	80081a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	2b09      	cmp	r3, #9
 8008110:	d83b      	bhi.n	800818a <USBD_StdDevReq+0xba>
 8008112:	a201      	add	r2, pc, #4	; (adr r2, 8008118 <USBD_StdDevReq+0x48>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	0800816d 	.word	0x0800816d
 800811c:	08008181 	.word	0x08008181
 8008120:	0800818b 	.word	0x0800818b
 8008124:	08008177 	.word	0x08008177
 8008128:	0800818b 	.word	0x0800818b
 800812c:	0800814b 	.word	0x0800814b
 8008130:	08008141 	.word	0x08008141
 8008134:	0800818b 	.word	0x0800818b
 8008138:	08008163 	.word	0x08008163
 800813c:	08008155 	.word	0x08008155
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f9de 	bl	8008504 <USBD_GetDescriptor>
          break;
 8008148:	e024      	b.n	8008194 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fb6d 	bl	800882c <USBD_SetAddress>
          break;
 8008152:	e01f      	b.n	8008194 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fbac 	bl	80088b4 <USBD_SetConfig>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
          break;
 8008160:	e018      	b.n	8008194 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fc4b 	bl	8008a00 <USBD_GetConfig>
          break;
 800816a:	e013      	b.n	8008194 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fc7c 	bl	8008a6c <USBD_GetStatus>
          break;
 8008174:	e00e      	b.n	8008194 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fcab 	bl	8008ad4 <USBD_SetFeature>
          break;
 800817e:	e009      	b.n	8008194 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fcba 	bl	8008afc <USBD_ClrFeature>
          break;
 8008188:	e004      	b.n	8008194 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fd11 	bl	8008bb4 <USBD_CtlError>
          break;
 8008192:	bf00      	nop
      }
      break;
 8008194:	e004      	b.n	80081a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fd0b 	bl	8008bb4 <USBD_CtlError>
      break;
 800819e:	bf00      	nop
  }

  return ret;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop

080081ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081c2:	2b40      	cmp	r3, #64	; 0x40
 80081c4:	d005      	beq.n	80081d2 <USBD_StdItfReq+0x26>
 80081c6:	2b40      	cmp	r3, #64	; 0x40
 80081c8:	d82f      	bhi.n	800822a <USBD_StdItfReq+0x7e>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <USBD_StdItfReq+0x26>
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d12b      	bne.n	800822a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d81d      	bhi.n	800821c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	889b      	ldrh	r3, [r3, #4]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d813      	bhi.n	8008212 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	88db      	ldrh	r3, [r3, #6]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d110      	bne.n	8008226 <USBD_StdItfReq+0x7a>
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10d      	bne.n	8008226 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fd9d 	bl	8008d4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008210:	e009      	b.n	8008226 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fccd 	bl	8008bb4 <USBD_CtlError>
          break;
 800821a:	e004      	b.n	8008226 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fcc8 	bl	8008bb4 <USBD_CtlError>
          break;
 8008224:	e000      	b.n	8008228 <USBD_StdItfReq+0x7c>
          break;
 8008226:	bf00      	nop
      }
      break;
 8008228:	e004      	b.n	8008234 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fcc1 	bl	8008bb4 <USBD_CtlError>
      break;
 8008232:	bf00      	nop
  }

  return ret;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	889b      	ldrh	r3, [r3, #4]
 8008250:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800825a:	2b40      	cmp	r3, #64	; 0x40
 800825c:	d007      	beq.n	800826e <USBD_StdEPReq+0x30>
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	f200 8145 	bhi.w	80084ee <USBD_StdEPReq+0x2b0>
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00c      	beq.n	8008282 <USBD_StdEPReq+0x44>
 8008268:	2b20      	cmp	r3, #32
 800826a:	f040 8140 	bne.w	80084ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4798      	blx	r3
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]
      break;
 8008280:	e13a      	b.n	80084f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d007      	beq.n	800829a <USBD_StdEPReq+0x5c>
 800828a:	2b03      	cmp	r3, #3
 800828c:	f300 8129 	bgt.w	80084e2 <USBD_StdEPReq+0x2a4>
 8008290:	2b00      	cmp	r3, #0
 8008292:	d07f      	beq.n	8008394 <USBD_StdEPReq+0x156>
 8008294:	2b01      	cmp	r3, #1
 8008296:	d03c      	beq.n	8008312 <USBD_StdEPReq+0xd4>
 8008298:	e123      	b.n	80084e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d002      	beq.n	80082ac <USBD_StdEPReq+0x6e>
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d016      	beq.n	80082d8 <USBD_StdEPReq+0x9a>
 80082aa:	e02c      	b.n	8008306 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00d      	beq.n	80082ce <USBD_StdEPReq+0x90>
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b80      	cmp	r3, #128	; 0x80
 80082b6:	d00a      	beq.n	80082ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 f96d 	bl	800959c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c2:	2180      	movs	r1, #128	; 0x80
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 f969 	bl	800959c <USBD_LL_StallEP>
 80082ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082cc:	e020      	b.n	8008310 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fc6f 	bl	8008bb4 <USBD_CtlError>
              break;
 80082d6:	e01b      	b.n	8008310 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	885b      	ldrh	r3, [r3, #2]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10e      	bne.n	80082fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <USBD_StdEPReq+0xc0>
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b80      	cmp	r3, #128	; 0x80
 80082ea:	d008      	beq.n	80082fe <USBD_StdEPReq+0xc0>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	88db      	ldrh	r3, [r3, #6]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f94f 	bl	800959c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fd23 	bl	8008d4a <USBD_CtlSendStatus>

              break;
 8008304:	e004      	b.n	8008310 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fc53 	bl	8008bb4 <USBD_CtlError>
              break;
 800830e:	bf00      	nop
          }
          break;
 8008310:	e0ec      	b.n	80084ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b02      	cmp	r3, #2
 800831c:	d002      	beq.n	8008324 <USBD_StdEPReq+0xe6>
 800831e:	2b03      	cmp	r3, #3
 8008320:	d016      	beq.n	8008350 <USBD_StdEPReq+0x112>
 8008322:	e030      	b.n	8008386 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00d      	beq.n	8008346 <USBD_StdEPReq+0x108>
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b80      	cmp	r3, #128	; 0x80
 800832e:	d00a      	beq.n	8008346 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f931 	bl	800959c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800833a:	2180      	movs	r1, #128	; 0x80
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f92d 	bl	800959c <USBD_LL_StallEP>
 8008342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008344:	e025      	b.n	8008392 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc33 	bl	8008bb4 <USBD_CtlError>
              break;
 800834e:	e020      	b.n	8008392 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	885b      	ldrh	r3, [r3, #2]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d11b      	bne.n	8008390 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 f937 	bl	80095da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fcec 	bl	8008d4a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	4798      	blx	r3
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008384:	e004      	b.n	8008390 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc13 	bl	8008bb4 <USBD_CtlError>
              break;
 800838e:	e000      	b.n	8008392 <USBD_StdEPReq+0x154>
              break;
 8008390:	bf00      	nop
          }
          break;
 8008392:	e0ab      	b.n	80084ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d002      	beq.n	80083a6 <USBD_StdEPReq+0x168>
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d032      	beq.n	800840a <USBD_StdEPReq+0x1cc>
 80083a4:	e097      	b.n	80084d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d007      	beq.n	80083bc <USBD_StdEPReq+0x17e>
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b80      	cmp	r3, #128	; 0x80
 80083b0:	d004      	beq.n	80083bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fbfd 	bl	8008bb4 <USBD_CtlError>
                break;
 80083ba:	e091      	b.n	80084e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da0b      	bge.n	80083dc <USBD_StdEPReq+0x19e>
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	3310      	adds	r3, #16
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	3304      	adds	r3, #4
 80083da:	e00b      	b.n	80083f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	4413      	add	r3, r2
 80083f2:	3304      	adds	r3, #4
 80083f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2202      	movs	r2, #2
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fc47 	bl	8008c96 <USBD_CtlSendData>
              break;
 8008408:	e06a      	b.n	80084e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800840a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800840e:	2b00      	cmp	r3, #0
 8008410:	da11      	bge.n	8008436 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	f003 020f 	and.w	r2, r3, #15
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	3324      	adds	r3, #36	; 0x24
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d117      	bne.n	800845c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fbc0 	bl	8008bb4 <USBD_CtlError>
                  break;
 8008434:	e054      	b.n	80084e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	f003 020f 	and.w	r2, r3, #15
 800843c:	6879      	ldr	r1, [r7, #4]
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d104      	bne.n	800845c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fbad 	bl	8008bb4 <USBD_CtlError>
                  break;
 800845a:	e041      	b.n	80084e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800845c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008460:	2b00      	cmp	r3, #0
 8008462:	da0b      	bge.n	800847c <USBD_StdEPReq+0x23e>
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	3310      	adds	r3, #16
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	3304      	adds	r3, #4
 800847a:	e00b      	b.n	8008494 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	4413      	add	r3, r2
 8008492:	3304      	adds	r3, #4
 8008494:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <USBD_StdEPReq+0x264>
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	d103      	bne.n	80084aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e00e      	b.n	80084c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 f8b2 	bl	8009618 <USBD_LL_IsStallEP>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2201      	movs	r2, #1
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	e002      	b.n	80084c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2202      	movs	r2, #2
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fbe1 	bl	8008c96 <USBD_CtlSendData>
              break;
 80084d4:	e004      	b.n	80084e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fb6b 	bl	8008bb4 <USBD_CtlError>
              break;
 80084de:	bf00      	nop
          }
          break;
 80084e0:	e004      	b.n	80084ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fb65 	bl	8008bb4 <USBD_CtlError>
          break;
 80084ea:	bf00      	nop
      }
      break;
 80084ec:	e004      	b.n	80084f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fb5f 	bl	8008bb4 <USBD_CtlError>
      break;
 80084f6:	bf00      	nop
  }

  return ret;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
	...

08008504 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	885b      	ldrh	r3, [r3, #2]
 800851e:	0a1b      	lsrs	r3, r3, #8
 8008520:	b29b      	uxth	r3, r3
 8008522:	3b01      	subs	r3, #1
 8008524:	2b0e      	cmp	r3, #14
 8008526:	f200 8152 	bhi.w	80087ce <USBD_GetDescriptor+0x2ca>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <USBD_GetDescriptor+0x2c>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	080085a1 	.word	0x080085a1
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080085f9 	.word	0x080085f9
 800853c:	080087cf 	.word	0x080087cf
 8008540:	080087cf 	.word	0x080087cf
 8008544:	0800876f 	.word	0x0800876f
 8008548:	0800879b 	.word	0x0800879b
 800854c:	080087cf 	.word	0x080087cf
 8008550:	080087cf 	.word	0x080087cf
 8008554:	080087cf 	.word	0x080087cf
 8008558:	080087cf 	.word	0x080087cf
 800855c:	080087cf 	.word	0x080087cf
 8008560:	080087cf 	.word	0x080087cf
 8008564:	080087cf 	.word	0x080087cf
 8008568:	0800856d 	.word	0x0800856d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	7c12      	ldrb	r2, [r2, #16]
 8008584:	f107 0108 	add.w	r1, r7, #8
 8008588:	4610      	mov	r0, r2
 800858a:	4798      	blx	r3
 800858c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800858e:	e126      	b.n	80087de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fb0e 	bl	8008bb4 <USBD_CtlError>
        err++;
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	3301      	adds	r3, #1
 800859c:	72fb      	strb	r3, [r7, #11]
      break;
 800859e:	e11e      	b.n	80087de <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	7c12      	ldrb	r2, [r2, #16]
 80085ac:	f107 0108 	add.w	r1, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
      break;
 80085b6:	e112      	b.n	80087de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7c1b      	ldrb	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10d      	bne.n	80085dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	f107 0208 	add.w	r2, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	2202      	movs	r2, #2
 80085d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085da:	e100      	b.n	80087de <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	f107 0208 	add.w	r2, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	2202      	movs	r2, #2
 80085f4:	701a      	strb	r2, [r3, #0]
      break;
 80085f6:	e0f2      	b.n	80087de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b05      	cmp	r3, #5
 8008600:	f200 80ac 	bhi.w	800875c <USBD_GetDescriptor+0x258>
 8008604:	a201      	add	r2, pc, #4	; (adr r2, 800860c <USBD_GetDescriptor+0x108>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	08008625 	.word	0x08008625
 8008610:	08008659 	.word	0x08008659
 8008614:	0800868d 	.word	0x0800868d
 8008618:	080086c1 	.word	0x080086c1
 800861c:	080086f5 	.word	0x080086f5
 8008620:	08008729 	.word	0x08008729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7c12      	ldrb	r2, [r2, #16]
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
 8008644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008646:	e091      	b.n	800876c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fab2 	bl	8008bb4 <USBD_CtlError>
            err++;
 8008650:	7afb      	ldrb	r3, [r7, #11]
 8008652:	3301      	adds	r3, #1
 8008654:	72fb      	strb	r3, [r7, #11]
          break;
 8008656:	e089      	b.n	800876c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867a:	e077      	b.n	800876c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa98 	bl	8008bb4 <USBD_CtlError>
            err++;
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	3301      	adds	r3, #1
 8008688:	72fb      	strb	r3, [r7, #11]
          break;
 800868a:	e06f      	b.n	800876c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e05d      	b.n	800876c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa7e 	bl	8008bb4 <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e055      	b.n	800876c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e043      	b.n	800876c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa64 	bl	8008bb4 <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e03b      	b.n	800876c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e029      	b.n	800876c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa4a 	bl	8008bb4 <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e021      	b.n	800876c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7c12      	ldrb	r2, [r2, #16]
 8008740:	f107 0108 	add.w	r1, r7, #8
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
 8008748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874a:	e00f      	b.n	800876c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa30 	bl	8008bb4 <USBD_CtlError>
            err++;
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	3301      	adds	r3, #1
 8008758:	72fb      	strb	r3, [r7, #11]
          break;
 800875a:	e007      	b.n	800876c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa28 	bl	8008bb4 <USBD_CtlError>
          err++;
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	3301      	adds	r3, #1
 8008768:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800876a:	bf00      	nop
      }
      break;
 800876c:	e037      	b.n	80087de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7c1b      	ldrb	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d109      	bne.n	800878a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877e:	f107 0208 	add.w	r2, r7, #8
 8008782:	4610      	mov	r0, r2
 8008784:	4798      	blx	r3
 8008786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008788:	e029      	b.n	80087de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa11 	bl	8008bb4 <USBD_CtlError>
        err++;
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	3301      	adds	r3, #1
 8008796:	72fb      	strb	r3, [r7, #11]
      break;
 8008798:	e021      	b.n	80087de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7c1b      	ldrb	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10d      	bne.n	80087be <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f107 0208 	add.w	r2, r7, #8
 80087ae:	4610      	mov	r0, r2
 80087b0:	4798      	blx	r3
 80087b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	2207      	movs	r2, #7
 80087ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087bc:	e00f      	b.n	80087de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f9f7 	bl	8008bb4 <USBD_CtlError>
        err++;
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	3301      	adds	r3, #1
 80087ca:	72fb      	strb	r3, [r7, #11]
      break;
 80087cc:	e007      	b.n	80087de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f9ef 	bl	8008bb4 <USBD_CtlError>
      err++;
 80087d6:	7afb      	ldrb	r3, [r7, #11]
 80087d8:	3301      	adds	r3, #1
 80087da:	72fb      	strb	r3, [r7, #11]
      break;
 80087dc:	bf00      	nop
  }

  if (err != 0U)
 80087de:	7afb      	ldrb	r3, [r7, #11]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d11e      	bne.n	8008822 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	88db      	ldrh	r3, [r3, #6]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d016      	beq.n	800881a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80087ec:	893b      	ldrh	r3, [r7, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00e      	beq.n	8008810 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	88da      	ldrh	r2, [r3, #6]
 80087f6:	893b      	ldrh	r3, [r7, #8]
 80087f8:	4293      	cmp	r3, r2
 80087fa:	bf28      	it	cs
 80087fc:	4613      	movcs	r3, r2
 80087fe:	b29b      	uxth	r3, r3
 8008800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008802:	893b      	ldrh	r3, [r7, #8]
 8008804:	461a      	mov	r2, r3
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa44 	bl	8008c96 <USBD_CtlSendData>
 800880e:	e009      	b.n	8008824 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9ce 	bl	8008bb4 <USBD_CtlError>
 8008818:	e004      	b.n	8008824 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa95 	bl	8008d4a <USBD_CtlSendStatus>
 8008820:	e000      	b.n	8008824 <USBD_GetDescriptor+0x320>
    return;
 8008822:	bf00      	nop
  }
}
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	889b      	ldrh	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d131      	bne.n	80088a2 <USBD_SetAddress+0x76>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d12d      	bne.n	80088a2 <USBD_SetAddress+0x76>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	2b7f      	cmp	r3, #127	; 0x7f
 800884c:	d829      	bhi.n	80088a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b03      	cmp	r3, #3
 8008864:	d104      	bne.n	8008870 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f9a3 	bl	8008bb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886e:	e01d      	b.n	80088ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7bfa      	ldrb	r2, [r7, #15]
 8008874:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fef8 	bl	8009672 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa61 	bl	8008d4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d004      	beq.n	8008898 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2202      	movs	r2, #2
 8008892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	e009      	b.n	80088ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a0:	e004      	b.n	80088ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f985 	bl	8008bb4 <USBD_CtlError>
  }
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	4b4c      	ldr	r3, [pc, #304]	; (80089fc <USBD_SetConfig+0x148>)
 80088ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088cc:	4b4b      	ldr	r3, [pc, #300]	; (80089fc <USBD_SetConfig+0x148>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d905      	bls.n	80088e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f96c 	bl	8008bb4 <USBD_CtlError>
    return USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	e088      	b.n	80089f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d002      	beq.n	80088f2 <USBD_SetConfig+0x3e>
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d025      	beq.n	800893c <USBD_SetConfig+0x88>
 80088f0:	e071      	b.n	80089d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088f2:	4b42      	ldr	r3, [pc, #264]	; (80089fc <USBD_SetConfig+0x148>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01c      	beq.n	8008934 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80088fa:	4b40      	ldr	r3, [pc, #256]	; (80089fc <USBD_SetConfig+0x148>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008904:	4b3d      	ldr	r3, [pc, #244]	; (80089fc <USBD_SetConfig+0x148>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff f992 	bl	8007c34 <USBD_SetClassConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f949 	bl	8008bb4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008922:	e065      	b.n	80089f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fa10 	bl	8008d4a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2203      	movs	r2, #3
 800892e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008932:	e05d      	b.n	80089f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fa08 	bl	8008d4a <USBD_CtlSendStatus>
      break;
 800893a:	e059      	b.n	80089f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800893c:	4b2f      	ldr	r3, [pc, #188]	; (80089fc <USBD_SetConfig+0x148>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d112      	bne.n	800896a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800894c:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <USBD_SetConfig+0x148>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008956:	4b29      	ldr	r3, [pc, #164]	; (80089fc <USBD_SetConfig+0x148>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff f985 	bl	8007c6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9f1 	bl	8008d4a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008968:	e042      	b.n	80089f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800896a:	4b24      	ldr	r3, [pc, #144]	; (80089fc <USBD_SetConfig+0x148>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	d02a      	beq.n	80089ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff f973 	bl	8007c6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008986:	4b1d      	ldr	r3, [pc, #116]	; (80089fc <USBD_SetConfig+0x148>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008990:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <USBD_SetConfig+0x148>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff f94c 	bl	8007c34 <USBD_SetClassConfig>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00f      	beq.n	80089c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f903 	bl	8008bb4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff f958 	bl	8007c6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089c4:	e014      	b.n	80089f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f9bf 	bl	8008d4a <USBD_CtlSendStatus>
      break;
 80089cc:	e010      	b.n	80089f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9bb 	bl	8008d4a <USBD_CtlSendStatus>
      break;
 80089d4:	e00c      	b.n	80089f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f8eb 	bl	8008bb4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089de:	4b07      	ldr	r3, [pc, #28]	; (80089fc <USBD_SetConfig+0x148>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff f941 	bl	8007c6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089ea:	2303      	movs	r3, #3
 80089ec:	73fb      	strb	r3, [r7, #15]
      break;
 80089ee:	bf00      	nop
  }

  return ret;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200001a9 	.word	0x200001a9

08008a00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	88db      	ldrh	r3, [r3, #6]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d004      	beq.n	8008a1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f8cd 	bl	8008bb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a1a:	e023      	b.n	8008a64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	dc02      	bgt.n	8008a2e <USBD_GetConfig+0x2e>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dc03      	bgt.n	8008a34 <USBD_GetConfig+0x34>
 8008a2c:	e015      	b.n	8008a5a <USBD_GetConfig+0x5a>
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d00b      	beq.n	8008a4a <USBD_GetConfig+0x4a>
 8008a32:	e012      	b.n	8008a5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f927 	bl	8008c96 <USBD_CtlSendData>
        break;
 8008a48:	e00c      	b.n	8008a64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	2201      	movs	r2, #1
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f91f 	bl	8008c96 <USBD_CtlSendData>
        break;
 8008a58:	e004      	b.n	8008a64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8a9 	bl	8008bb4 <USBD_CtlError>
        break;
 8008a62:	bf00      	nop
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d81e      	bhi.n	8008ac2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	88db      	ldrh	r3, [r3, #6]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d004      	beq.n	8008a96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f890 	bl	8008bb4 <USBD_CtlError>
        break;
 8008a94:	e01a      	b.n	8008acc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f043 0202 	orr.w	r2, r3, #2
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	330c      	adds	r3, #12
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f8eb 	bl	8008c96 <USBD_CtlSendData>
      break;
 8008ac0:	e004      	b.n	8008acc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f875 	bl	8008bb4 <USBD_CtlError>
      break;
 8008aca:	bf00      	nop
  }
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d106      	bne.n	8008af4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f92b 	bl	8008d4a <USBD_CtlSendStatus>
  }
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d80b      	bhi.n	8008b2c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	885b      	ldrh	r3, [r3, #2]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d10c      	bne.n	8008b36 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f910 	bl	8008d4a <USBD_CtlSendStatus>
      }
      break;
 8008b2a:	e004      	b.n	8008b36 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f840 	bl	8008bb4 <USBD_CtlError>
      break;
 8008b34:	e000      	b.n	8008b38 <USBD_ClrFeature+0x3c>
      break;
 8008b36:	bf00      	nop
  }
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	781a      	ldrb	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	781a      	ldrb	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff fa92 	bl	8008094 <SWAPBYTE>
 8008b70:	4603      	mov	r3, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7ff fa85 	bl	8008094 <SWAPBYTE>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3301      	adds	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7ff fa78 	bl	8008094 <SWAPBYTE>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	80da      	strh	r2, [r3, #6]
}
 8008bac:	bf00      	nop
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bbe:	2180      	movs	r1, #128	; 0x80
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fceb 	bl	800959c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fce7 	bl	800959c <USBD_LL_StallEP>
}
 8008bce:	bf00      	nop
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b086      	sub	sp, #24
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d036      	beq.n	8008c5a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bf0:	6938      	ldr	r0, [r7, #16]
 8008bf2:	f000 f836 	bl	8008c62 <USBD_GetLen>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	4413      	add	r3, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	7812      	ldrb	r2, [r2, #0]
 8008c0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	3301      	adds	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	2203      	movs	r2, #3
 8008c1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	3301      	adds	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c26:	e013      	b.n	8008c50 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	7812      	ldrb	r2, [r2, #0]
 8008c32:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	3301      	adds	r3, #1
 8008c38:	613b      	str	r3, [r7, #16]
    idx++;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	4413      	add	r3, r2
 8008c46:	2200      	movs	r2, #0
 8008c48:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e7      	bne.n	8008c28 <USBD_GetString+0x52>
 8008c58:	e000      	b.n	8008c5c <USBD_GetString+0x86>
    return;
 8008c5a:	bf00      	nop
  }
}
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c72:	e005      	b.n	8008c80 <USBD_GetLen+0x1e>
  {
    len++;
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	3301      	adds	r3, #1
 8008c78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f5      	bne.n	8008c74 <USBD_GetLen+0x12>
  }

  return len;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fcf7 	bl	80096b0 <USBD_LL_Transmit>

  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fce6 	bl	80096b0 <USBD_LL_Transmit>

  return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	2100      	movs	r1, #0
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 fcea 	bl	80096f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	2100      	movs	r1, #0
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fcd9 	bl	80096f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2204      	movs	r2, #4
 8008d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2100      	movs	r1, #0
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fca5 	bl	80096b0 <USBD_LL_Transmit>

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2205      	movs	r2, #5
 8008d7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d80:	2300      	movs	r3, #0
 8008d82:	2200      	movs	r2, #0
 8008d84:	2100      	movs	r1, #0
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fcb3 	bl	80096f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4912      	ldr	r1, [pc, #72]	; (8008de8 <MX_USB_Device_Init+0x50>)
 8008da0:	4812      	ldr	r0, [pc, #72]	; (8008dec <MX_USB_Device_Init+0x54>)
 8008da2:	f7fe fed9 	bl	8007b58 <USBD_Init>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008dac:	f7f7 fc59 	bl	8000662 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008db0:	490f      	ldr	r1, [pc, #60]	; (8008df0 <MX_USB_Device_Init+0x58>)
 8008db2:	480e      	ldr	r0, [pc, #56]	; (8008dec <MX_USB_Device_Init+0x54>)
 8008db4:	f7fe ff00 	bl	8007bb8 <USBD_RegisterClass>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008dbe:	f7f7 fc50 	bl	8000662 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008dc2:	490c      	ldr	r1, [pc, #48]	; (8008df4 <MX_USB_Device_Init+0x5c>)
 8008dc4:	4809      	ldr	r0, [pc, #36]	; (8008dec <MX_USB_Device_Init+0x54>)
 8008dc6:	f7fe fe21 	bl	8007a0c <USBD_CDC_RegisterInterface>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008dd0:	f7f7 fc47 	bl	8000662 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008dd4:	4805      	ldr	r0, [pc, #20]	; (8008dec <MX_USB_Device_Init+0x54>)
 8008dd6:	f7fe ff16 	bl	8007c06 <USBD_Start>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008de0:	f7f7 fc3f 	bl	8000662 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008de4:	bf00      	nop
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000134 	.word	0x20000134
 8008dec:	2000043c 	.word	0x2000043c
 8008df0:	2000001c 	.word	0x2000001c
 8008df4:	20000120 	.word	0x20000120

08008df8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4905      	ldr	r1, [pc, #20]	; (8008e14 <CDC_Init_FS+0x1c>)
 8008e00:	4805      	ldr	r0, [pc, #20]	; (8008e18 <CDC_Init_FS+0x20>)
 8008e02:	f7fe fe18 	bl	8007a36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e06:	4905      	ldr	r1, [pc, #20]	; (8008e1c <CDC_Init_FS+0x24>)
 8008e08:	4803      	ldr	r0, [pc, #12]	; (8008e18 <CDC_Init_FS+0x20>)
 8008e0a:	f7fe fe32 	bl	8007a72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20000f0c 	.word	0x20000f0c
 8008e18:	2000043c 	.word	0x2000043c
 8008e1c:	2000070c 	.word	0x2000070c

08008e20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	6039      	str	r1, [r7, #0]
 8008e3a:	71fb      	strb	r3, [r7, #7]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	2b23      	cmp	r3, #35	; 0x23
 8008e44:	d84a      	bhi.n	8008edc <CDC_Control_FS+0xac>
 8008e46:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <CDC_Control_FS+0x1c>)
 8008e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4c:	08008edd 	.word	0x08008edd
 8008e50:	08008edd 	.word	0x08008edd
 8008e54:	08008edd 	.word	0x08008edd
 8008e58:	08008edd 	.word	0x08008edd
 8008e5c:	08008edd 	.word	0x08008edd
 8008e60:	08008edd 	.word	0x08008edd
 8008e64:	08008edd 	.word	0x08008edd
 8008e68:	08008edd 	.word	0x08008edd
 8008e6c:	08008edd 	.word	0x08008edd
 8008e70:	08008edd 	.word	0x08008edd
 8008e74:	08008edd 	.word	0x08008edd
 8008e78:	08008edd 	.word	0x08008edd
 8008e7c:	08008edd 	.word	0x08008edd
 8008e80:	08008edd 	.word	0x08008edd
 8008e84:	08008edd 	.word	0x08008edd
 8008e88:	08008edd 	.word	0x08008edd
 8008e8c:	08008edd 	.word	0x08008edd
 8008e90:	08008edd 	.word	0x08008edd
 8008e94:	08008edd 	.word	0x08008edd
 8008e98:	08008edd 	.word	0x08008edd
 8008e9c:	08008edd 	.word	0x08008edd
 8008ea0:	08008edd 	.word	0x08008edd
 8008ea4:	08008edd 	.word	0x08008edd
 8008ea8:	08008edd 	.word	0x08008edd
 8008eac:	08008edd 	.word	0x08008edd
 8008eb0:	08008edd 	.word	0x08008edd
 8008eb4:	08008edd 	.word	0x08008edd
 8008eb8:	08008edd 	.word	0x08008edd
 8008ebc:	08008edd 	.word	0x08008edd
 8008ec0:	08008edd 	.word	0x08008edd
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008edd 	.word	0x08008edd
 8008ecc:	08008edd 	.word	0x08008edd
 8008ed0:	08008edd 	.word	0x08008edd
 8008ed4:	08008edd 	.word	0x08008edd
 8008ed8:	08008edd 	.word	0x08008edd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008edc:	bf00      	nop
  }

  return (USBD_OK);
 8008ede:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <CDC_Receive_FS+0x24>)
 8008efa:	f7fe fdba 	bl	8007a72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008efe:	4804      	ldr	r0, [pc, #16]	; (8008f10 <CDC_Receive_FS+0x24>)
 8008f00:	f7fe fe00 	bl	8007b04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	2000043c 	.word	0x2000043c

08008f14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f24:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <CDC_Transmit_FS+0x48>)
 8008f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e00b      	b.n	8008f52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f3a:	887b      	ldrh	r3, [r7, #2]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	4806      	ldr	r0, [pc, #24]	; (8008f5c <CDC_Transmit_FS+0x48>)
 8008f42:	f7fe fd78 	bl	8007a36 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f46:	4805      	ldr	r0, [pc, #20]	; (8008f5c <CDC_Transmit_FS+0x48>)
 8008f48:	f7fe fdac 	bl	8007aa4 <USBD_CDC_TransmitPacket>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	2000043c 	.word	0x2000043c

08008f60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
	...

08008f84 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	6039      	str	r1, [r7, #0]
 8008f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2212      	movs	r2, #18
 8008f94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008f96:	4b03      	ldr	r3, [pc, #12]	; (8008fa4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	20000154 	.word	0x20000154

08008fa8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	6039      	str	r1, [r7, #0]
 8008fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fba:	4b03      	ldr	r3, [pc, #12]	; (8008fc8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	20000168 	.word	0x20000168

08008fcc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	6039      	str	r1, [r7, #0]
 8008fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d105      	bne.n	8008fea <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	4907      	ldr	r1, [pc, #28]	; (8009000 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008fe2:	4808      	ldr	r0, [pc, #32]	; (8009004 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008fe4:	f7ff fdf7 	bl	8008bd6 <USBD_GetString>
 8008fe8:	e004      	b.n	8008ff4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	4904      	ldr	r1, [pc, #16]	; (8009000 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008fee:	4805      	ldr	r0, [pc, #20]	; (8009004 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008ff0:	f7ff fdf1 	bl	8008bd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	2000170c 	.word	0x2000170c
 8009004:	080098f8 	.word	0x080098f8

08009008 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	4904      	ldr	r1, [pc, #16]	; (8009028 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009018:	4804      	ldr	r0, [pc, #16]	; (800902c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800901a:	f7ff fddc 	bl	8008bd6 <USBD_GetString>
  return USBD_StrDesc;
 800901e:	4b02      	ldr	r3, [pc, #8]	; (8009028 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	2000170c 	.word	0x2000170c
 800902c:	08009910 	.word	0x08009910

08009030 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	221a      	movs	r2, #26
 8009040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009042:	f000 f843 	bl	80090cc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009046:	4b02      	ldr	r3, [pc, #8]	; (8009050 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	2000016c 	.word	0x2000016c

08009054 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d105      	bne.n	8009072 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	4907      	ldr	r1, [pc, #28]	; (8009088 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800906a:	4808      	ldr	r0, [pc, #32]	; (800908c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800906c:	f7ff fdb3 	bl	8008bd6 <USBD_GetString>
 8009070:	e004      	b.n	800907c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	4904      	ldr	r1, [pc, #16]	; (8009088 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009076:	4805      	ldr	r0, [pc, #20]	; (800908c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009078:	f7ff fdad 	bl	8008bd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	2000170c 	.word	0x2000170c
 800908c:	08009924 	.word	0x08009924

08009090 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4907      	ldr	r1, [pc, #28]	; (80090c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80090a6:	4808      	ldr	r0, [pc, #32]	; (80090c8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80090a8:	f7ff fd95 	bl	8008bd6 <USBD_GetString>
 80090ac:	e004      	b.n	80090b8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	4904      	ldr	r1, [pc, #16]	; (80090c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80090b2:	4805      	ldr	r0, [pc, #20]	; (80090c8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80090b4:	f7ff fd8f 	bl	8008bd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090b8:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	2000170c 	.word	0x2000170c
 80090c8:	08009930 	.word	0x08009930

080090cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090d2:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <Get_SerialNum+0x44>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090d8:	4b0e      	ldr	r3, [pc, #56]	; (8009114 <Get_SerialNum+0x48>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090de:	4b0e      	ldr	r3, [pc, #56]	; (8009118 <Get_SerialNum+0x4c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4413      	add	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d009      	beq.n	8009106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090f2:	2208      	movs	r2, #8
 80090f4:	4909      	ldr	r1, [pc, #36]	; (800911c <Get_SerialNum+0x50>)
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 f814 	bl	8009124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090fc:	2204      	movs	r2, #4
 80090fe:	4908      	ldr	r1, [pc, #32]	; (8009120 <Get_SerialNum+0x54>)
 8009100:	68b8      	ldr	r0, [r7, #8]
 8009102:	f000 f80f 	bl	8009124 <IntToUnicode>
  }
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	1fff7590 	.word	0x1fff7590
 8009114:	1fff7594 	.word	0x1fff7594
 8009118:	1fff7598 	.word	0x1fff7598
 800911c:	2000016e 	.word	0x2000016e
 8009120:	2000017e 	.word	0x2000017e

08009124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	4613      	mov	r3, r2
 8009130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009136:	2300      	movs	r3, #0
 8009138:	75fb      	strb	r3, [r7, #23]
 800913a:	e027      	b.n	800918c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	0f1b      	lsrs	r3, r3, #28
 8009140:	2b09      	cmp	r3, #9
 8009142:	d80b      	bhi.n	800915c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	0f1b      	lsrs	r3, r3, #28
 8009148:	b2da      	uxtb	r2, r3
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	4619      	mov	r1, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	440b      	add	r3, r1
 8009154:	3230      	adds	r2, #48	; 0x30
 8009156:	b2d2      	uxtb	r2, r2
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	e00a      	b.n	8009172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	0f1b      	lsrs	r3, r3, #28
 8009160:	b2da      	uxtb	r2, r3
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	4619      	mov	r1, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	440b      	add	r3, r1
 800916c:	3237      	adds	r2, #55	; 0x37
 800916e:	b2d2      	uxtb	r2, r2
 8009170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	011b      	lsls	r3, r3, #4
 8009176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	3301      	adds	r3, #1
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	3301      	adds	r3, #1
 800918a:	75fb      	strb	r3, [r7, #23]
 800918c:	7dfa      	ldrb	r2, [r7, #23]
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	429a      	cmp	r2, r3
 8009192:	d3d3      	bcc.n	800913c <IntToUnicode+0x18>
  }
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	371c      	adds	r7, #28
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <LL_AHB2_GRP1_EnableClock>:
{
 80091a2:	b480      	push	{r7}
 80091a4:	b085      	sub	sp, #20
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80091aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80091ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4013      	ands	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80091c6:	68fb      	ldr	r3, [r7, #12]
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <LL_APB1_GRP1_EnableClock>:
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80091dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80091ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4013      	ands	r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80091f8:	68fb      	ldr	r3, [r7, #12]
}
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b09c      	sub	sp, #112	; 0x70
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009210:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	605a      	str	r2, [r3, #4]
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009220:	f107 030c 	add.w	r3, r7, #12
 8009224:	2250      	movs	r2, #80	; 0x50
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fb3b 	bl	80098a4 <memset>
  if(pcdHandle->Instance==USB)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a23      	ldr	r2, [pc, #140]	; (80092c0 <HAL_PCD_MspInit+0xb8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d13e      	bne.n	80092b6 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800923c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800923e:	2318      	movs	r3, #24
 8009240:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009246:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800924c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800924e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009252:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8009254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009258:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800925a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800925e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009260:	f107 030c 	add.w	r3, r7, #12
 8009264:	4618      	mov	r0, r3
 8009266:	f7fa ff45 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8009270:	f7f7 f9f7 	bl	8000662 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009274:	2001      	movs	r0, #1
 8009276:	f7ff ff94 	bl	80091a2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800927a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800927e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009280:	2302      	movs	r3, #2
 8009282:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009284:	2300      	movs	r3, #0
 8009286:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009288:	2300      	movs	r3, #0
 800928a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800928c:	230a      	movs	r3, #10
 800928e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009290:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009294:	4619      	mov	r1, r3
 8009296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800929a:	f7f7 fd23 	bl	8000ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800929e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80092a2:	f7ff ff97 	bl	80091d4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80092a6:	2200      	movs	r2, #0
 80092a8:	2100      	movs	r1, #0
 80092aa:	2014      	movs	r0, #20
 80092ac:	f7f7 fce5 	bl	8000c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80092b0:	2014      	movs	r0, #20
 80092b2:	f7f7 fcfc 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092b6:	bf00      	nop
 80092b8:	3770      	adds	r7, #112	; 0x70
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	40006800 	.word	0x40006800

080092c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f7fe fcde 	bl	8007c9c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	440b      	add	r3, r1
 8009308:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	4619      	mov	r1, r3
 8009312:	f7fe fd18 	bl	8007d46 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	460b      	mov	r3, r1
 8009328:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009330:	78fa      	ldrb	r2, [r7, #3]
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	4613      	mov	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	440b      	add	r3, r1
 800933e:	333c      	adds	r3, #60	; 0x3c
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	4619      	mov	r1, r3
 8009346:	f7fe fd61 	bl	8007e0c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800934a:	bf00      	nop
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fe75 	bl	8008050 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009376:	2301      	movs	r3, #1
 8009378:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	2b02      	cmp	r3, #2
 8009380:	d001      	beq.n	8009386 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009382:	f7f7 f96e 	bl	8000662 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800938c:	7bfa      	ldrb	r2, [r7, #15]
 800938e:	4611      	mov	r1, r2
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe fe1f 	bl	8007fd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fdcb 	bl	8007f38 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fe1a 	bl	8007ff4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093c8:	4b04      	ldr	r3, [pc, #16]	; (80093dc <HAL_PCD_SuspendCallback+0x30>)
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	4a03      	ldr	r2, [pc, #12]	; (80093dc <HAL_PCD_SuspendCallback+0x30>)
 80093ce:	f043 0306 	orr.w	r3, r3, #6
 80093d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	e000ed00 	.word	0xe000ed00

080093e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093f0:	4b08      	ldr	r3, [pc, #32]	; (8009414 <HAL_PCD_ResumeCallback+0x34>)
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	4a07      	ldr	r2, [pc, #28]	; (8009414 <HAL_PCD_ResumeCallback+0x34>)
 80093f6:	f023 0306 	bic.w	r3, r3, #6
 80093fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80093fc:	f000 f9fc 	bl	80097f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fe0a 	bl	8008020 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	e000ed00 	.word	0xe000ed00

08009418 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009420:	4a2c      	ldr	r2, [pc, #176]	; (80094d4 <USBD_LL_Init+0xbc>)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a2a      	ldr	r2, [pc, #168]	; (80094d4 <USBD_LL_Init+0xbc>)
 800942c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009430:	f7f9 fb42 	bl	8002ab8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009434:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <USBD_LL_Init+0xbc>)
 8009436:	4a28      	ldr	r2, [pc, #160]	; (80094d8 <USBD_LL_Init+0xc0>)
 8009438:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800943a:	4b26      	ldr	r3, [pc, #152]	; (80094d4 <USBD_LL_Init+0xbc>)
 800943c:	2208      	movs	r2, #8
 800943e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009440:	4b24      	ldr	r3, [pc, #144]	; (80094d4 <USBD_LL_Init+0xbc>)
 8009442:	2202      	movs	r2, #2
 8009444:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009446:	4b23      	ldr	r3, [pc, #140]	; (80094d4 <USBD_LL_Init+0xbc>)
 8009448:	2202      	movs	r2, #2
 800944a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800944c:	4b21      	ldr	r3, [pc, #132]	; (80094d4 <USBD_LL_Init+0xbc>)
 800944e:	2200      	movs	r2, #0
 8009450:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009452:	4b20      	ldr	r3, [pc, #128]	; (80094d4 <USBD_LL_Init+0xbc>)
 8009454:	2200      	movs	r2, #0
 8009456:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009458:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <USBD_LL_Init+0xbc>)
 800945a:	2200      	movs	r2, #0
 800945c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800945e:	4b1d      	ldr	r3, [pc, #116]	; (80094d4 <USBD_LL_Init+0xbc>)
 8009460:	2200      	movs	r2, #0
 8009462:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009464:	481b      	ldr	r0, [pc, #108]	; (80094d4 <USBD_LL_Init+0xbc>)
 8009466:	f7f7 fdd5 	bl	8001014 <HAL_PCD_Init>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009470:	f7f7 f8f7 	bl	8000662 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800947a:	2318      	movs	r3, #24
 800947c:	2200      	movs	r2, #0
 800947e:	2100      	movs	r1, #0
 8009480:	f7f9 fa8e 	bl	80029a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800948a:	2358      	movs	r3, #88	; 0x58
 800948c:	2200      	movs	r2, #0
 800948e:	2180      	movs	r1, #128	; 0x80
 8009490:	f7f9 fa86 	bl	80029a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800949a:	23c0      	movs	r3, #192	; 0xc0
 800949c:	2200      	movs	r2, #0
 800949e:	2181      	movs	r1, #129	; 0x81
 80094a0:	f7f9 fa7e 	bl	80029a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80094ae:	2200      	movs	r2, #0
 80094b0:	2101      	movs	r1, #1
 80094b2:	f7f9 fa75 	bl	80029a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094c0:	2200      	movs	r2, #0
 80094c2:	2182      	movs	r1, #130	; 0x82
 80094c4:	f7f9 fa6c 	bl	80029a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	2000190c 	.word	0x2000190c
 80094d8:	40006800 	.word	0x40006800

080094dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7f7 fe73 	bl	80011de <HAL_PCD_Start>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f980 	bl	8009804 <USBD_Get_USB_Status>
 8009504:	4603      	mov	r3, r0
 8009506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009508:	7bbb      	ldrb	r3, [r7, #14]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	4608      	mov	r0, r1
 800951c:	4611      	mov	r1, r2
 800951e:	461a      	mov	r2, r3
 8009520:	4603      	mov	r3, r0
 8009522:	70fb      	strb	r3, [r7, #3]
 8009524:	460b      	mov	r3, r1
 8009526:	70bb      	strb	r3, [r7, #2]
 8009528:	4613      	mov	r3, r2
 800952a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800953a:	78bb      	ldrb	r3, [r7, #2]
 800953c:	883a      	ldrh	r2, [r7, #0]
 800953e:	78f9      	ldrb	r1, [r7, #3]
 8009540:	f7f7 ffbb 	bl	80014ba <HAL_PCD_EP_Open>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f95a 	bl	8009804 <USBD_Get_USB_Status>
 8009550:	4603      	mov	r3, r0
 8009552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009554:	7bbb      	ldrb	r3, [r7, #14]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009578:	78fa      	ldrb	r2, [r7, #3]
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f7f8 f802 	bl	8001586 <HAL_PCD_EP_Close>
 8009582:	4603      	mov	r3, r0
 8009584:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009586:	7bfb      	ldrb	r3, [r7, #15]
 8009588:	4618      	mov	r0, r3
 800958a:	f000 f93b 	bl	8009804 <USBD_Get_USB_Status>
 800958e:	4603      	mov	r3, r0
 8009590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009592:	7bbb      	ldrb	r3, [r7, #14]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095b6:	78fa      	ldrb	r2, [r7, #3]
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7f8 f8c3 	bl	8001746 <HAL_PCD_EP_SetStall>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 f91c 	bl	8009804 <USBD_Get_USB_Status>
 80095cc:	4603      	mov	r3, r0
 80095ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095f4:	78fa      	ldrb	r2, [r7, #3]
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7f8 f8f6 	bl	80017ea <HAL_PCD_EP_ClrStall>
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	4618      	mov	r0, r3
 8009606:	f000 f8fd 	bl	8009804 <USBD_Get_USB_Status>
 800960a:	4603      	mov	r3, r0
 800960c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800962a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800962c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009630:	2b00      	cmp	r3, #0
 8009632:	da0c      	bge.n	800964e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963a:	68f9      	ldr	r1, [r7, #12]
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	4613      	mov	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	440b      	add	r3, r1
 8009648:	3302      	adds	r3, #2
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	e00b      	b.n	8009666 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009654:	68f9      	ldr	r1, [r7, #12]
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	440b      	add	r3, r1
 8009660:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009664:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	4611      	mov	r1, r2
 8009690:	4618      	mov	r0, r3
 8009692:	f7f7 feed 	bl	8001470 <HAL_PCD_SetAddress>
 8009696:	4603      	mov	r3, r0
 8009698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f8b1 	bl	8009804 <USBD_Get_USB_Status>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	460b      	mov	r3, r1
 80096be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ce:	7af9      	ldrb	r1, [r7, #11]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	f7f7 fff4 	bl	80016c0 <HAL_PCD_EP_Transmit>
 80096d8:	4603      	mov	r3, r0
 80096da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f890 	bl	8009804 <USBD_Get_USB_Status>
 80096e4:	4603      	mov	r3, r0
 80096e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b086      	sub	sp, #24
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
 80096fe:	460b      	mov	r3, r1
 8009700:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009710:	7af9      	ldrb	r1, [r7, #11]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	f7f7 ff7e 	bl	8001616 <HAL_PCD_EP_Receive>
 800971a:	4603      	mov	r3, r0
 800971c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f86f 	bl	8009804 <USBD_Get_USB_Status>
 8009726:	4603      	mov	r3, r0
 8009728:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800972a:	7dbb      	ldrb	r3, [r7, #22]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7f7 ffa0 	bl	8001690 <HAL_PCD_EP_GetRxCount>
 8009750:	4603      	mov	r3, r0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <HAL_PCDEx_LPM_Callback+0x18>
 800976e:	2b01      	cmp	r3, #1
 8009770:	d013      	beq.n	800979a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009772:	e023      	b.n	80097bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800977c:	f000 f83c 	bl	80097f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009780:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	4a0f      	ldr	r2, [pc, #60]	; (80097c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009786:	f023 0306 	bic.w	r3, r3, #6
 800978a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fc44 	bl	8008020 <USBD_LL_Resume>
    break;
 8009798:	e010      	b.n	80097bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe fc27 	bl	8007ff4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d005      	beq.n	80097ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097ae:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	4a04      	ldr	r2, [pc, #16]	; (80097c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80097b4:	f043 0306 	orr.w	r3, r3, #6
 80097b8:	6113      	str	r3, [r2, #16]
    break;
 80097ba:	bf00      	nop
}
 80097bc:	bf00      	nop
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	e000ed00 	.word	0xe000ed00

080097c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097d0:	4b03      	ldr	r3, [pc, #12]	; (80097e0 <USBD_static_malloc+0x18>)
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	200001ac 	.word	0x200001ac

080097e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]

}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80097fc:	f7f6 fea8 	bl	8000550 <SystemClock_Config>
}
 8009800:	bf00      	nop
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	2b03      	cmp	r3, #3
 8009816:	d817      	bhi.n	8009848 <USBD_Get_USB_Status+0x44>
 8009818:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <USBD_Get_USB_Status+0x1c>)
 800981a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981e:	bf00      	nop
 8009820:	08009831 	.word	0x08009831
 8009824:	08009837 	.word	0x08009837
 8009828:	0800983d 	.word	0x0800983d
 800982c:	08009843 	.word	0x08009843
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
    break;
 8009834:	e00b      	b.n	800984e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009836:	2303      	movs	r3, #3
 8009838:	73fb      	strb	r3, [r7, #15]
    break;
 800983a:	e008      	b.n	800984e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
    break;
 8009840:	e005      	b.n	800984e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009842:	2303      	movs	r3, #3
 8009844:	73fb      	strb	r3, [r7, #15]
    break;
 8009846:	e002      	b.n	800984e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009848:	2303      	movs	r3, #3
 800984a:	73fb      	strb	r3, [r7, #15]
    break;
 800984c:	bf00      	nop
  }
  return usb_status;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <__libc_init_array>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	4d0d      	ldr	r5, [pc, #52]	; (8009894 <__libc_init_array+0x38>)
 8009860:	4c0d      	ldr	r4, [pc, #52]	; (8009898 <__libc_init_array+0x3c>)
 8009862:	1b64      	subs	r4, r4, r5
 8009864:	10a4      	asrs	r4, r4, #2
 8009866:	2600      	movs	r6, #0
 8009868:	42a6      	cmp	r6, r4
 800986a:	d109      	bne.n	8009880 <__libc_init_array+0x24>
 800986c:	4d0b      	ldr	r5, [pc, #44]	; (800989c <__libc_init_array+0x40>)
 800986e:	4c0c      	ldr	r4, [pc, #48]	; (80098a0 <__libc_init_array+0x44>)
 8009870:	f000 f820 	bl	80098b4 <_init>
 8009874:	1b64      	subs	r4, r4, r5
 8009876:	10a4      	asrs	r4, r4, #2
 8009878:	2600      	movs	r6, #0
 800987a:	42a6      	cmp	r6, r4
 800987c:	d105      	bne.n	800988a <__libc_init_array+0x2e>
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	f855 3b04 	ldr.w	r3, [r5], #4
 8009884:	4798      	blx	r3
 8009886:	3601      	adds	r6, #1
 8009888:	e7ee      	b.n	8009868 <__libc_init_array+0xc>
 800988a:	f855 3b04 	ldr.w	r3, [r5], #4
 800988e:	4798      	blx	r3
 8009890:	3601      	adds	r6, #1
 8009892:	e7f2      	b.n	800987a <__libc_init_array+0x1e>
 8009894:	080099c0 	.word	0x080099c0
 8009898:	080099c0 	.word	0x080099c0
 800989c:	080099c0 	.word	0x080099c0
 80098a0:	080099c4 	.word	0x080099c4

080098a4 <memset>:
 80098a4:	4402      	add	r2, r0
 80098a6:	4603      	mov	r3, r0
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d100      	bne.n	80098ae <memset+0xa>
 80098ac:	4770      	bx	lr
 80098ae:	f803 1b01 	strb.w	r1, [r3], #1
 80098b2:	e7f9      	b.n	80098a8 <memset+0x4>

080098b4 <_init>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	bf00      	nop
 80098b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ba:	bc08      	pop	{r3}
 80098bc:	469e      	mov	lr, r3
 80098be:	4770      	bx	lr

080098c0 <_fini>:
 80098c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c2:	bf00      	nop
 80098c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098c6:	bc08      	pop	{r3}
 80098c8:	469e      	mov	lr, r3
 80098ca:	4770      	bx	lr

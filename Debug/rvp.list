
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009894  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009ac8  08009ac8  00019ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  20000004  08009acc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2000016c  08009c34  0002016c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000a24  08009c34  00020a24  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021f9f  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000044b8  00000000  00000000  0004213b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001cd8  00000000  00000000  000465f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b18  00000000  00000000  000482d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024462  00000000  00000000  00049de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d0f6  00000000  00000000  0006e24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8aaa  00000000  00000000  0008b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00163dea  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000077a4  00000000  00000000  00163e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000016c 	.word	0x2000016c
 8000158:	00000000 	.word	0x00000000
 800015c:	080099b8 	.word	0x080099b8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000170 	.word	0x20000170
 8000178:	080099b8 	.word	0x080099b8

0800017c <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000188:	f000 fff4 	bl	8001174 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <update_buttons+0x1c>
		left_down = 0;
 8000192:	4b30      	ldr	r3, [pc, #192]	; (8000254 <update_buttons+0xd8>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000198:	2108      	movs	r1, #8
 800019a:	482f      	ldr	r0, [pc, #188]	; (8000258 <update_buttons+0xdc>)
 800019c:	f000 ffea 	bl	8001174 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <update_buttons+0x30>
		left_down = 1;
 80001a6:	4b2b      	ldr	r3, [pc, #172]	; (8000254 <update_buttons+0xd8>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 80001ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001b4:	f000 ffde 	bl	8001174 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d002      	beq.n	80001c4 <update_buttons+0x48>
		middle_down = 0;
 80001be:	4b27      	ldr	r3, [pc, #156]	; (800025c <update_buttons+0xe0>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 80001c4:	2110      	movs	r1, #16
 80001c6:	4826      	ldr	r0, [pc, #152]	; (8000260 <update_buttons+0xe4>)
 80001c8:	f000 ffd4 	bl	8001174 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d002      	beq.n	80001d8 <update_buttons+0x5c>
		middle_down = 1;
 80001d2:	4b22      	ldr	r3, [pc, #136]	; (800025c <update_buttons+0xe0>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 80001d8:	2102      	movs	r1, #2
 80001da:	481f      	ldr	r0, [pc, #124]	; (8000258 <update_buttons+0xdc>)
 80001dc:	f000 ffca 	bl	8001174 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d002      	beq.n	80001ec <update_buttons+0x70>
		right_down = 0;
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <update_buttons+0xe8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 80001ec:	2101      	movs	r1, #1
 80001ee:	481a      	ldr	r0, [pc, #104]	; (8000258 <update_buttons+0xdc>)
 80001f0:	f000 ffc0 	bl	8001174 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <update_buttons+0x84>
		right_down = 1;
 80001fa:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <update_buttons+0xe8>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000200:	2120      	movs	r1, #32
 8000202:	4815      	ldr	r0, [pc, #84]	; (8000258 <update_buttons+0xdc>)
 8000204:	f000 ffb6 	bl	8001174 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d002      	beq.n	8000214 <update_buttons+0x98>
		b4_down = 0;
 800020e:	4b16      	ldr	r3, [pc, #88]	; (8000268 <update_buttons+0xec>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000214:	2110      	movs	r1, #16
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <update_buttons+0xdc>)
 8000218:	f000 ffac 	bl	8001174 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <update_buttons+0xac>
		b4_down = 1;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <update_buttons+0xec>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000228:	2180      	movs	r1, #128	; 0x80
 800022a:	480b      	ldr	r0, [pc, #44]	; (8000258 <update_buttons+0xdc>)
 800022c:	f000 ffa2 	bl	8001174 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <update_buttons+0xc0>
		b5_down = 0;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <update_buttons+0xf0>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4806      	ldr	r0, [pc, #24]	; (8000258 <update_buttons+0xdc>)
 8000240:	f000 ff98 	bl	8001174 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <update_buttons+0xd4>
		b5_down = 1;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <update_buttons+0xf0>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
	}
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000188 	.word	0x20000188
 8000258:	48000400 	.word	0x48000400
 800025c:	20000189 	.word	0x20000189
 8000260:	48001000 	.word	0x48001000
 8000264:	2000018a 	.word	0x2000018a
 8000268:	2000018b 	.word	0x2000018b
 800026c:	2000018c 	.word	0x2000018c

08000270 <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000280:	b2db      	uxtb	r3, r3
 8000282:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000284:	2300      	movs	r3, #0
 8000286:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000290:	f000 ff88 	bl	80011a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000294:	f107 010c 	add.w	r1, r7, #12
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	2201      	movs	r2, #1
 800029e:	480b      	ldr	r0, [pc, #44]	; (80002cc <read_register+0x5c>)
 80002a0:	f004 fb20 	bl	80048e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 80002a4:	f107 0108 	add.w	r1, r7, #8
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ac:	2201      	movs	r2, #1
 80002ae:	4807      	ldr	r0, [pc, #28]	; (80002cc <read_register+0x5c>)
 80002b0:	f004 fc86 	bl	8004bc0 <HAL_SPI_Receive>
	CS_END();
 80002b4:	2201      	movs	r2, #1
 80002b6:	2110      	movs	r1, #16
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f000 ff72 	bl	80011a4 <HAL_GPIO_WritePin>
	return pRxData[0];
 80002c0:	7a3b      	ldrb	r3, [r7, #8]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200001ac 	.word	0x200001ac

080002d0 <write_register>:

void write_register(uint8_t r, uint8_t value) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	733b      	strb	r3, [r7, #12]
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	737b      	strb	r3, [r7, #13]
	CS_START();
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f000 ff58 	bl	80011a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 80002f4:	f107 010c 	add.w	r1, r7, #12
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	2202      	movs	r2, #2
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <write_register+0x48>)
 8000300:	f004 faf0 	bl	80048e4 <HAL_SPI_Transmit>
	CS_END();
 8000304:	2201      	movs	r2, #1
 8000306:	2110      	movs	r1, #16
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f000 ff4a 	bl	80011a4 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200001ac 	.word	0x200001ac

0800031c <imu_setup>:

#pragma GCC push_options
#pragma GCC optimize ("O0")
void imu_setup() {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	206b      	movs	r0, #107	; 0x6b
 8000326:	f7ff ffd3 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800032a:	2064      	movs	r0, #100	; 0x64
 800032c:	f000 fc86 	bl	8000c3c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000330:	206b      	movs	r0, #107	; 0x6b
 8000332:	f7ff ff9d 	bl	8000270 <read_register>
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
		if (reg & (1UL << 6)) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0ee      	beq.n	8000322 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000344:	2101      	movs	r1, #1
 8000346:	206b      	movs	r0, #107	; 0x6b
 8000348:	f7ff ffc2 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800034c:	2064      	movs	r0, #100	; 0x64
 800034e:	f000 fc75 	bl	8000c3c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000352:	206b      	movs	r0, #107	; 0x6b
 8000354:	f7ff ff8c 	bl	8000270 <read_register>
 8000358:	4603      	mov	r3, r0
 800035a:	71bb      	strb	r3, [r7, #6]
		if (reg & (1 << 0)) {
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0ee      	beq.n	8000344 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000366:	2110      	movs	r1, #16
 8000368:	206a      	movs	r0, #106	; 0x6a
 800036a:	f7ff ffb1 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f000 fc64 	bl	8000c3c <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000374:	206a      	movs	r0, #106	; 0x6a
 8000376:	f7ff ff7b 	bl	8000270 <read_register>
 800037a:	4603      	mov	r3, r0
 800037c:	717b      	strb	r3, [r7, #5]
		if (reg & (1 << 4)) {
 800037e:	797b      	ldrb	r3, [r7, #5]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0ee      	beq.n	8000366 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000388:	2118      	movs	r1, #24
 800038a:	201c      	movs	r0, #28
 800038c:	f7ff ffa0 	bl	80002d0 <write_register>
		HAL_Delay(100);
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f000 fc53 	bl	8000c3c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000396:	201c      	movs	r0, #28
 8000398:	f7ff ff6a 	bl	8000270 <read_register>
 800039c:	4603      	mov	r3, r0
 800039e:	713b      	strb	r3, [r7, #4]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 80003a0:	793b      	ldrb	r3, [r7, #4]
 80003a2:	f003 0310 	and.w	r3, r3, #16
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0ee      	beq.n	8000388 <imu_setup+0x6c>
 80003aa:	793b      	ldrb	r3, [r7, #4]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0e9      	beq.n	8000388 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	201d      	movs	r0, #29
 80003b8:	f7ff ff8a 	bl	80002d0 <write_register>
		HAL_Delay(100);
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 fc3d 	bl	8000c3c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 80003c2:	201d      	movs	r0, #29
 80003c4:	f7ff ff54 	bl	8000270 <read_register>
 80003c8:	4603      	mov	r3, r0
 80003ca:	70fb      	strb	r3, [r7, #3]
		if (reg == 0) {
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d000      	beq.n	80003d4 <imu_setup+0xb8>
	while (1) {
 80003d2:	e7ef      	b.n	80003b4 <imu_setup+0x98>
			break;
 80003d4:	bf00      	nop
		}
	}
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4013      	ands	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	2002      	movs	r0, #2
 8000426:	f7ff ffda 	bl	80003de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff ffd7 	bl	80003de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000430:	2010      	movs	r0, #16
 8000432:	f7ff ffd4 	bl	80003de <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043c:	4825      	ldr	r0, [pc, #148]	; (80004d4 <MX_GPIO_Init+0xc4>)
 800043e:	f000 feb1 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2110      	movs	r1, #16
 8000446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044a:	f000 feab 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800044e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000452:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4619      	mov	r1, r3
 8000464:	481b      	ldr	r0, [pc, #108]	; (80004d4 <MX_GPIO_Init+0xc4>)
 8000466:	f000 fd1d 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800046a:	2310      	movs	r3, #16
 800046c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046e:	2301      	movs	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4619      	mov	r1, r3
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f000 fd0f 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 8000486:	23fb      	movs	r3, #251	; 0xfb
 8000488:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	480f      	ldr	r0, [pc, #60]	; (80004d4 <MX_GPIO_Init+0xc4>)
 8000498:	f000 fd04 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 800049c:	2310      	movs	r3, #16
 800049e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	480a      	ldr	r0, [pc, #40]	; (80004d8 <MX_GPIO_Init+0xc8>)
 80004ae:	f000 fcf9 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 80004b2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80004b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f000 fcec 	bl	8000ea4 <HAL_GPIO_Init>

}
 80004cc:	bf00      	nop
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	48000400 	.word	0x48000400
 80004d8:	48001000 	.word	0x48001000

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fb25 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f857 	bl	8000598 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004ea:	f000 f8c1 	bl	8000670 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f7ff ff8f 	bl	8000410 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80004f2:	f008 fdc9 	bl	8009088 <MX_USB_Device_Init>
  MX_SPI1_Init();
 80004f6:	f000 f90f 	bl	8000718 <MX_SPI1_Init>
  MX_TIM1_Init();
 80004fa:	f000 fa57 	bl	80009ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004fe:	2104      	movs	r1, #4
 8000500:	481c      	ldr	r0, [pc, #112]	; (8000574 <main+0x98>)
 8000502:	f005 f903 	bl	800570c <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	imu_setup();
 8000506:	f7ff ff09 	bl	800031c <imu_setup>

	while (1) {
		update_buttons();
 800050a:	f7ff fe37 	bl	800017c <update_buttons>
		feedback.left = left_down;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <main+0x9c>)
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <main+0xa0>)
 8000514:	701a      	strb	r2, [r3, #0]
		feedback.middle = middle_down;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <main+0xa4>)
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <main+0xa0>)
 800051c:	705a      	strb	r2, [r3, #1]
		feedback.right = right_down;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <main+0xa8>)
 8000520:	781a      	ldrb	r2, [r3, #0]
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <main+0xa0>)
 8000524:	709a      	strb	r2, [r3, #2]
		feedback.b4 = b4_down;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <main+0xac>)
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <main+0xa0>)
 800052c:	70da      	strb	r2, [r3, #3]
		feedback.b5 = b5_down;
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <main+0xb0>)
 8000530:	781a      	ldrb	r2, [r3, #0]
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0xa0>)
 8000534:	711a      	strb	r2, [r3, #4]

		uint32_t encoder = TIM1->CNT;
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <main+0xb4>)
 8000538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053a:	60bb      	str	r3, [r7, #8]
		uint8_t buttons = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
//		uint8_t buttons = (2 << left_down) | (1 << middle_down) | (0 << right_down);// | (3 << feedback.b4) | (4 << feedback.b5);
		if (left_down) {
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0x9c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <main+0x70>
			// 1 - left click
			// 2 - right click
			// 3 - right click
			// (4 << 1) - back
			// (5 << 1) - b
			buttons = (1 << 4);
 8000548:	2310      	movs	r3, #16
 800054a:	73fb      	strb	r3, [r7, #15]
		}

		uint8_t click_report[5] = {buttons, 0, 0, 0, 0};
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	703b      	strb	r3, [r7, #0]
 8000550:	2300      	movs	r3, #0
 8000552:	707b      	strb	r3, [r7, #1]
 8000554:	2300      	movs	r3, #0
 8000556:	70bb      	strb	r3, [r7, #2]
 8000558:	2300      	movs	r3, #0
 800055a:	70fb      	strb	r3, [r7, #3]
 800055c:	2300      	movs	r3, #0
 800055e:	713b      	strb	r3, [r7, #4]
		USBD_HID_SendReport(&hUsbDeviceFS, click_report, 5);
 8000560:	463b      	mov	r3, r7
 8000562:	2205      	movs	r2, #5
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <main+0xb8>)
 8000568:	f007 fc12 	bl	8007d90 <USBD_HID_SendReport>
//		int16_t y = 0;
//		int16_t z = 0;

//		get_xyz(&feedback.x, &feedback.y, &feedback.z);
//		CDC_Transmit_FS(&feedback, sizeof(feedback));
		HAL_Delay(1);
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fb65 	bl	8000c3c <HAL_Delay>
	while (1) {
 8000572:	e7ca      	b.n	800050a <main+0x2e>
 8000574:	20000210 	.word	0x20000210
 8000578:	20000188 	.word	0x20000188
 800057c:	200001a4 	.word	0x200001a4
 8000580:	20000189 	.word	0x20000189
 8000584:	2000018a 	.word	0x2000018a
 8000588:	2000018b 	.word	0x2000018b
 800058c:	2000018c 	.word	0x2000018c
 8000590:	40012c00 	.word	0x40012c00
 8000594:	20000260 	.word	0x20000260

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2248      	movs	r2, #72	; 0x48
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f009 f9fe 	bl	80099a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <SystemClock_Config+0xd4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005c6:	4a29      	ldr	r2, [pc, #164]	; (800066c <SystemClock_Config+0xd4>)
 80005c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	4b27      	ldr	r3, [pc, #156]	; (800066c <SystemClock_Config+0xd4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80005da:	2326      	movs	r3, #38	; 0x26
 80005dc:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2340      	movs	r3, #64	; 0x40
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f4:	2360      	movs	r3, #96	; 0x60
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005fc:	2301      	movs	r3, #1
 80005fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000604:	2320      	movs	r3, #32
 8000606:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800060c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000612:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000618:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fe80 	bl	8003324 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f000 f83e 	bl	80006aa <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800062e:	236f      	movs	r3, #111	; 0x6f
 8000630:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2103      	movs	r1, #3
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f9f4 	bl	8003a3c <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800065a:	f000 f826 	bl	80006aa <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800065e:	f003 ff87 	bl	8004570 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000662:	bf00      	nop
 8000664:	3768      	adds	r7, #104	; 0x68
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	58000400 	.word	0x58000400

08000670 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2250      	movs	r2, #80	; 0x50
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f009 f993 	bl	80099a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000686:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800068c:	2310      	movs	r3, #16
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fdf6 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800069e:	f000 f804 	bl	80006aa <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ae:	b672      	cpsid	i
}
 80006b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006b2:	e7fe      	b.n	80006b2 <Error_Handler+0x8>

080006b4 <LL_AHB2_GRP1_EnableClock>:
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000702:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4013      	ands	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_SPI1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_SPI1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_SPI1_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x74>)
 8000732:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x74>)
 800073a:	2202      	movs	r2, #2
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_SPI1_Init+0x74>)
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x74>)
 800074e:	2210      	movs	r2, #16
 8000750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_SPI1_Init+0x74>)
 8000778:	f004 f811 	bl	800479e <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f7ff ff92 	bl	80006aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001ac 	.word	0x200001ac
 8000790:	40013000 	.word	0x40013000

08000794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_SPI_MspInit+0x5c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d117      	bne.n	80007e6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007ba:	f7ff ff94 	bl	80006e6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff78 	bl	80006b4 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80007c4:	23c2      	movs	r3, #194	; 0xc2
 80007c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d4:	2305      	movs	r3, #5
 80007d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fb5f 	bl	8000ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40013000 	.word	0x40013000

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2101      	movs	r1, #1
 80007fc:	f06f 000b 	mvn.w	r0, #11
 8000800:	f000 fb1b 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	f06f 000a 	mvn.w	r0, #10
 800080c:	f000 fb15 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2101      	movs	r1, #1
 8000814:	f06f 0009 	mvn.w	r0, #9
 8000818:	f000 fb0f 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2101      	movs	r1, #1
 8000820:	f06f 0004 	mvn.w	r0, #4
 8000824:	f000 fb09 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2101      	movs	r1, #1
 800082c:	f06f 0003 	mvn.w	r0, #3
 8000830:	f000 fb03 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	f06f 0001 	mvn.w	r0, #1
 800083c:	f000 fafd 	bl	8000e3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f9a8 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USB_LP_IRQHandler+0x10>)
 800089e:	f000 fda0 	bl	80013e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000730 	.word	0x20000730

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <SystemInit+0x90>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a21      	ldr	r2, [pc, #132]	; (800093c <SystemInit+0x90>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80008d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80008d8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80008da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <SystemInit+0x94>)
 80008e6:	4013      	ands	r3, r2
 80008e8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80008ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008f6:	f023 0305 	bic.w	r3, r3, #5
 80008fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80008fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800090a:	f023 0301 	bic.w	r3, r3, #1
 800090e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <SystemInit+0x98>)
 8000918:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800091a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000928:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800092a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00
 8000940:	faf6fefb 	.word	0xfaf6fefb
 8000944:	22041000 	.word	0x22041000

08000948 <LL_AHB2_GRP1_EnableClock>:
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4313      	orrs	r3, r2
 800095e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800096c:	68fb      	ldr	r3, [r7, #12]
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_APB2_GRP1_EnableClock>:
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000986:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4313      	orrs	r3, r2
 8000990:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000996:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4013      	ands	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2224      	movs	r2, #36	; 0x24
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f008 fff4 	bl	80099a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_TIM1_Init+0xac>)
 80009cc:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <MX_TIM1_Init+0xb0>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_TIM1_Init+0xac>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <MX_TIM1_Init+0xac>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_TIM1_Init+0xac>)
 80009de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_TIM1_Init+0xac>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_TIM1_Init+0xac>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM1_Init+0xac>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_TIM1_Init+0xac>)
 8000a22:	f004 fdcd 	bl	80055c0 <HAL_TIM_Encoder_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a2c:	f7ff fe3d 	bl	80006aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_TIM1_Init+0xac>)
 8000a42:	f004 ff7b 	bl	800593c <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a4c:	f7ff fe2d 	bl	80006aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000210 	.word	0x20000210
 8000a5c:	40012c00 	.word	0x40012c00

08000a60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <HAL_TIM_Encoder_MspInit+0x5c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d118      	bne.n	8000ab4 <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a86:	f7ff ff78 	bl	800097a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff ff5c 	bl	8000948 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f000 f9f8 	bl	8000ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40012c00 	.word	0x40012c00

08000ac0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ac0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac4:	3304      	adds	r3, #4

08000ac6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000aca:	d3f9      	bcc.n	8000ac0 <CopyDataInit>
  bx lr
 8000acc:	4770      	bx	lr

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ace:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ad0:	3004      	adds	r0, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ad2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>
  bx lr
 8000ad6:	4770      	bx	lr

08000ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000adc:	f7ff fee6 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <LoopForever+0x8>)
 8000ae2:	490c      	ldr	r1, [pc, #48]	; (8000b14 <LoopForever+0xc>)
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <LoopForever+0x10>)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f7ff ffed 	bl	8000ac6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <LoopForever+0x14>)
 8000aee:	490c      	ldr	r1, [pc, #48]	; (8000b20 <LoopForever+0x18>)
 8000af0:	2300      	movs	r3, #0
 8000af2:	f7ff ffee 	bl	8000ad2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <LoopForever+0x1c>)
 8000af8:	490b      	ldr	r1, [pc, #44]	; (8000b28 <LoopForever+0x20>)
 8000afa:	2300      	movs	r3, #0
 8000afc:	f7ff ffe9 	bl	8000ad2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b00:	f008 ff2e 	bl	8009960 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000b04:	f7ff fcea 	bl	80004dc <main>

08000b08 <LoopForever>:

LoopForever:
  b LoopForever
 8000b08:	e7fe      	b.n	8000b08 <LoopForever>
 8000b0a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000b0c:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8000b10:	20000004 	.word	0x20000004
 8000b14:	2000016c 	.word	0x2000016c
 8000b18:	08009acc 	.word	0x08009acc
  INIT_BSS _sbss, _ebss
 8000b1c:	2000016c 	.word	0x2000016c
 8000b20:	20000a24 	.word	0x20000a24
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000b24:	20030000 	.word	0x20030000
 8000b28:	20030000 	.word	0x20030000

08000b2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_Init+0x3c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <HAL_Init+0x3c>)
 8000b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b46:	2003      	movs	r0, #3
 8000b48:	f000 f96c 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f80f 	bl	8000b70 <HAL_InitTick>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	e001      	b.n	8000b62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5e:	f7ff fe49 	bl	80007f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	58004000 	.word	0x58004000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d024      	beq.n	8000bce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b84:	f003 f906 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b94:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f974 	bl	8000e8a <HAL_SYSTICK_Config>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d10f      	bne.n	8000bc8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b0f      	cmp	r3, #15
 8000bac:	d809      	bhi.n	8000bc2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb6:	f000 f940 	bl	8000e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <HAL_InitTick+0x70>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e007      	b.n	8000bd2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e004      	b.n	8000bd2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e001      	b.n	8000bd2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2000000c 	.word	0x2000000c
 8000c08:	2000025c 	.word	0x2000025c

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000025c 	.word	0x2000025c

08000c24 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTickPrio+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff ffe2 	bl	8000c0c <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffd2 	bl	8000c0c <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
    {
    }
  }
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000000c 	.word	0x2000000c

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff29 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff40 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff90 	bl	8000d78 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5f 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff33 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa4 	bl	8000de0 <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e146      	b.n	8001142 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8138 	beq.w	800113c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x40>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	f003 0201 	and.w	r2, r3, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d017      	beq.n	8000f82 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d123      	bne.n	8000fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	6939      	ldr	r1, [r7, #16]
 8000fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0203 	and.w	r2, r3, #3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8092 	beq.w	800113c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001018:	4a51      	ldr	r2, [pc, #324]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001042:	d013      	beq.n	800106c <HAL_GPIO_Init+0x1c8>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a47      	ldr	r2, [pc, #284]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d00d      	beq.n	8001068 <HAL_GPIO_Init+0x1c4>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a46      	ldr	r2, [pc, #280]	; (8001168 <HAL_GPIO_Init+0x2c4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x1c0>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a45      	ldr	r2, [pc, #276]	; (800116c <HAL_GPIO_Init+0x2c8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d101      	bne.n	8001060 <HAL_GPIO_Init+0x1bc>
 800105c:	2304      	movs	r3, #4
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x1ca>
 8001060:	2307      	movs	r3, #7
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x1ca>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x1ca>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x1ca>
 800106c:	2300      	movs	r3, #0
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800107e:	4938      	ldr	r1, [pc, #224]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b0:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010da:	4a25      	ldr	r2, [pc, #148]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 80010e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001106:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 8001110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3301      	adds	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa22 f303 	lsr.w	r3, r2, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	f47f aeb1 	bne.w	8000eb4 <HAL_GPIO_Init+0x10>
  }
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40010000 	.word	0x40010000
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	48001000 	.word	0x48001000
 8001170:	58000800 	.word	0x58000800

08001174 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e001      	b.n	8001196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b08b      	sub	sp, #44	; 0x2c
 80011d8:	af06      	add	r7, sp, #24
 80011da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0d7      	b.n	8001396 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d106      	bne.n	8001200 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f008 f8ac 	bl	8009358 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f004 fc0c 	bl	8005a2a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	e04c      	b.n	80012b2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	3301      	adds	r3, #1
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	b298      	uxth	r0, r3
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	3336      	adds	r3, #54	; 0x36
 8001256:	4602      	mov	r2, r0
 8001258:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	3303      	adds	r3, #3
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	3338      	adds	r3, #56	; 0x38
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	333c      	adds	r3, #60	; 0x3c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3340      	adds	r3, #64	; 0x40
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3ad      	bcc.n	8001218 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e044      	b.n	800134c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3301      	adds	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	d3b5      	bcc.n	80012c2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	687e      	ldr	r6, [r7, #4]
 800135e:	466d      	mov	r5, sp
 8001360:	f106 0410 	add.w	r4, r6, #16
 8001364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	602b      	str	r3, [r5, #0]
 800136c:	1d33      	adds	r3, r6, #4
 800136e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f004 fb75 	bl	8005a60 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d102      	bne.n	8001394 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f001 fc11 	bl	8002bb6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800139e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_PCD_Start+0x16>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e012      	b.n	80013da <HAL_PCD_Start+0x3c>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 fb1b 	bl	80059fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fad0 	bl	8007970 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f006 fad5 	bl	800799e <USB_ReadInterrupts>
 80013f4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fb0e 	bl	8001a22 <PCD_EP_ISR_Handler>

    return;
 8001406:	e110      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140e:	2b00      	cmp	r3, #0
 8001410:	d013      	beq.n	800143a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001424:	b292      	uxth	r2, r2
 8001426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f008 f847 	bl	80094be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001430:	2100      	movs	r1, #0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f8fc 	bl	8001630 <HAL_PCD_SetAddress>

    return;
 8001438:	e0f7      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00c      	beq.n	800145e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800144c:	b29a      	uxth	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001456:	b292      	uxth	r2, r2
 8001458:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800145c:	e0e5      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00c      	beq.n	8001482 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800147a:	b292      	uxth	r2, r2
 800147c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001480:	e0d3      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d034      	beq.n	80014f6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001494:	b29a      	uxth	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	b292      	uxth	r2, r2
 80014a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0208 	bic.w	r2, r2, #8
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d107      	bne.n	80014d6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014ce:	2100      	movs	r1, #0
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f008 f9c5 	bl	8009860 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f008 f82a 	bl	8009530 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014ee:	b292      	uxth	r2, r2
 80014f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014f4:	e099      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d027      	beq.n	8001550 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001508:	b29a      	uxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0208 	orr.w	r2, r2, #8
 8001512:	b292      	uxth	r2, r2
 8001514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800152a:	b292      	uxth	r2, r2
 800152c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0204 	orr.w	r2, r2, #4
 8001542:	b292      	uxth	r2, r2
 8001544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f007 ffd7 	bl	80094fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800154e:	e06c      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	2b00      	cmp	r3, #0
 8001558:	d040      	beq.n	80015dc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800156c:	b292      	uxth	r2, r2
 800156e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d12b      	bne.n	80015d4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001584:	b29a      	uxth	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0204 	orr.w	r2, r2, #4
 800158e:	b292      	uxth	r2, r2
 8001590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0208 	orr.w	r2, r2, #8
 80015a6:	b292      	uxth	r2, r2
 80015a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80015bc:	b29b      	uxth	r3, r3
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80015ca:	2101      	movs	r1, #1
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f008 f947 	bl	8009860 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80015d2:	e02a      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f007 ff91 	bl	80094fc <HAL_PCD_SuspendCallback>
    return;
 80015da:	e026      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00f      	beq.n	8001606 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015f8:	b292      	uxth	r2, r2
 80015fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f007 ff4f 	bl	80094a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001604:	e011      	b.n	800162a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001618:	b29a      	uxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001622:	b292      	uxth	r2, r2
 8001624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001628:	bf00      	nop
  }
}
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_PCD_SetAddress+0x1a>
 8001646:	2302      	movs	r3, #2
 8001648:	e013      	b.n	8001672 <HAL_PCD_SetAddress+0x42>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f006 f970 	bl	8007948 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	4608      	mov	r0, r1
 8001684:	4611      	mov	r1, r2
 8001686:	461a      	mov	r2, r3
 8001688:	4603      	mov	r3, r0
 800168a:	70fb      	strb	r3, [r7, #3]
 800168c:	460b      	mov	r3, r1
 800168e:	803b      	strh	r3, [r7, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	da0e      	bge.n	80016be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	705a      	strb	r2, [r3, #1]
 80016bc:	e00e      	b.n	80016dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	f003 0207 	and.w	r2, r3, #7
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016e8:	883a      	ldrh	r2, [r7, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	78ba      	ldrb	r2, [r7, #2]
 80016f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001706:	78bb      	ldrb	r3, [r7, #2]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d102      	bne.n	8001712 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_PCD_EP_Open+0xa6>
 800171c:	2302      	movs	r3, #2
 800171e:	e00e      	b.n	800173e <HAL_PCD_EP_Open+0xc4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	4618      	mov	r0, r3
 8001730:	f004 f9b8 	bl	8005aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800173c:	7afb      	ldrb	r3, [r7, #11]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001756:	2b00      	cmp	r3, #0
 8001758:	da0e      	bge.n	8001778 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	705a      	strb	r2, [r3, #1]
 8001776:	e00e      	b.n	8001796 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	f003 0207 	and.w	r2, r3, #7
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	b2da      	uxtb	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_PCD_EP_Close+0x6a>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e00e      	b.n	80017ce <HAL_PCD_EP_Close+0x88>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fd04 	bl	80061cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	460b      	mov	r3, r1
 80017e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e6:	7afb      	ldrb	r3, [r7, #11]
 80017e8:	f003 0207 	and.w	r2, r3, #7
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2200      	movs	r2, #0
 8001814:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001816:	7afb      	ldrb	r3, [r7, #11]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	b2da      	uxtb	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6979      	ldr	r1, [r7, #20]
 8001832:	4618      	mov	r0, r3
 8001834:	f004 feb7 	bl	80065a6 <USB_EPStartXfer>
 8001838:	e005      	b.n	8001846 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6979      	ldr	r1, [r7, #20]
 8001840:	4618      	mov	r0, r3
 8001842:	f004 feb0 	bl	80065a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	460b      	mov	r3, r1
 800185e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001860:	7afb      	ldrb	r3, [r7, #11]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2201      	movs	r2, #1
 800189a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018a8:	7afb      	ldrb	r3, [r7, #11]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f004 fe74 	bl	80065a6 <USB_EPStartXfer>
 80018be:	e005      	b.n	80018cc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6979      	ldr	r1, [r7, #20]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 fe6d 	bl	80065a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	f003 0207 	and.w	r2, r3, #7
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d901      	bls.n	80018f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e03e      	b.n	8001972 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da0e      	bge.n	800191a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	705a      	strb	r2, [r3, #1]
 8001918:	e00c      	b.n	8001934 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	b2da      	uxtb	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_PCD_EP_SetStall+0x7e>
 8001950:	2302      	movs	r3, #2
 8001952:	e00e      	b.n	8001972 <HAL_PCD_EP_SetStall+0x9c>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	4618      	mov	r0, r3
 8001964:	f005 fef1 	bl	800774a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f003 020f 	and.w	r2, r3, #15
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	d901      	bls.n	8001998 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e040      	b.n	8001a1a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	da0e      	bge.n	80019be <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	705a      	strb	r2, [r3, #1]
 80019bc:	e00e      	b.n	80019dc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	f003 0207 	and.w	r2, r3, #7
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_PCD_EP_ClrStall+0x82>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e00e      	b.n	8001a1a <HAL_PCD_EP_ClrStall+0xa0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 feee 	bl	80077ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b096      	sub	sp, #88	; 0x58
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a2a:	e39c      	b.n	8002166 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001a46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 815e 	bne.w	8001d0c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d150      	bne.n	8001afe <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6c:	81fb      	strh	r3, [r7, #14]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3328      	adds	r3, #40	; 0x28
 8001a84:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001abc:	2100      	movs	r1, #0
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f007 fcd5 	bl	800946e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 834a 	beq.w	8002166 <PCD_EP_ISR_Handler+0x744>
 8001ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 8345 	bne.w	8002166 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b292      	uxth	r2, r2
 8001af0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001afc:	e333      	b.n	8002166 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b04:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d032      	beq.n	8001b82 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f005 ff73 	bl	8007a42 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b68:	4013      	ands	r3, r2
 8001b6a:	823b      	strh	r3, [r7, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	8a3a      	ldrh	r2, [r7, #16]
 8001b72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b76:	b292      	uxth	r2, r2
 8001b78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f007 fc4a 	bl	8009414 <HAL_PCD_SetupStageCallback>
 8001b80:	e2f1      	b.n	8002166 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b82:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f280 82ed 	bge.w	8002166 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b98:	4013      	ands	r3, r2
 8001b9a:	83fb      	strh	r3, [r7, #30]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	8bfa      	ldrh	r2, [r7, #30]
 8001ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d019      	beq.n	8001c0e <PCD_EP_ISR_Handler+0x1ec>
 8001bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d015      	beq.n	8001c0e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be8:	6959      	ldr	r1, [r3, #20]
 8001bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f005 ff25 	bl	8007a42 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	441a      	add	r2, r3
 8001c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c06:	2100      	movs	r1, #0
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f007 fc15 	bl	8009438 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 82a3 	bne.w	8002166 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4413      	add	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b3e      	cmp	r3, #62	; 0x3e
 8001c46:	d918      	bls.n	8001c7a <PCD_EP_ISR_Handler+0x258>
 8001c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <PCD_EP_ISR_Handler+0x240>
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
 8001c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	801a      	strh	r2, [r3, #0]
 8001c78:	e029      	b.n	8001cce <PCD_EP_ISR_Handler+0x2ac>
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d112      	bne.n	8001ca8 <PCD_EP_ISR_Handler+0x286>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	801a      	strh	r2, [r3, #0]
 8001ca6:	e012      	b.n	8001cce <PCD_EP_ISR_Handler+0x2ac>
 8001ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <PCD_EP_ISR_Handler+0x2a0>
 8001cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	029b      	lsls	r3, r3, #10
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	827b      	strh	r3, [r7, #18]
 8001ce0:	8a7b      	ldrh	r3, [r7, #18]
 8001ce2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ce6:	827b      	strh	r3, [r7, #18]
 8001ce8:	8a7b      	ldrh	r3, [r7, #18]
 8001cea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cee:	827b      	strh	r3, [r7, #18]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	8a7b      	ldrh	r3, [r7, #18]
 8001cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	8013      	strh	r3, [r2, #0]
 8001d0a:	e22c      	b.n	8002166 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d20:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f280 80f6 	bge.w	8001f16 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d40:	4013      	ands	r3, r2
 8001d42:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d60:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d78:	7b1b      	ldrb	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d123      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001da6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 808e 	beq.w	8001ecc <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db6:	6959      	ldr	r1, [r3, #20]
 8001db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dba:	88da      	ldrh	r2, [r3, #6]
 8001dbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001dc0:	f005 fe3f 	bl	8007a42 <USB_ReadPMA>
 8001dc4:	e082      	b.n	8001ecc <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc8:	78db      	ldrb	r3, [r3, #3]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d10a      	bne.n	8001de4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f9d3 	bl	8002182 <HAL_PCD_EP_DB_Receive>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001de2:	e073      	b.n	8001ecc <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	441a      	add	r2, r3
 8001e10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d022      	beq.n	8001e88 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001e6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d02c      	beq.n	8001ecc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e78:	6959      	ldr	r1, [r3, #20]
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	891a      	ldrh	r2, [r3, #8]
 8001e7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e82:	f005 fdde 	bl	8007a42 <USB_ReadPMA>
 8001e86:	e021      	b.n	8001ecc <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001eb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ebe:	6959      	ldr	r1, [r3, #20]
 8001ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec2:	895a      	ldrh	r2, [r3, #10]
 8001ec4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ec8:	f005 fdbb 	bl	8007a42 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ed4:	441a      	add	r2, r3
 8001ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ee2:	441a      	add	r2, r3
 8001ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <PCD_EP_ISR_Handler+0x4da>
 8001ef0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d206      	bcs.n	8001f0a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f007 fa98 	bl	8009438 <HAL_PCD_DataOutStageCallback>
 8001f08:	e005      	b.n	8001f16 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fb48 	bl	80065a6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f16:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8121 	beq.w	8002166 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f24:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	441a      	add	r2, r3
 8001f64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f76:	78db      	ldrb	r3, [r3, #3]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	f000 80a2 	beq.w	80020c2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8001f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f86:	7b1b      	ldrb	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8093 	beq.w	80020b4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f8e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d046      	beq.n	8002028 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d126      	bne.n	8001ff0 <PCD_EP_ISR_Handler+0x5ce>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	4413      	add	r3, r2
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	00da      	lsls	r2, r3, #3
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fc8:	623b      	str	r3, [r7, #32]
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	e061      	b.n	80020b4 <PCD_EP_ISR_Handler+0x692>
 8001ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d15d      	bne.n	80020b4 <PCD_EP_ISR_Handler+0x692>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	4413      	add	r3, r2
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	00da      	lsls	r2, r3, #3
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	4413      	add	r3, r2
 800201a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	2200      	movs	r2, #0
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	e045      	b.n	80020b4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d126      	bne.n	8002084 <PCD_EP_ISR_Handler+0x662>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204a:	4413      	add	r3, r2
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
 800204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	00da      	lsls	r2, r3, #3
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	4413      	add	r3, r2
 8002058:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002068:	b29a      	uxth	r2, r3
 800206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206c:	801a      	strh	r2, [r3, #0]
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800207c:	b29a      	uxth	r2, r3
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	e017      	b.n	80020b4 <PCD_EP_ISR_Handler+0x692>
 8002084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002086:	785b      	ldrb	r3, [r3, #1]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d113      	bne.n	80020b4 <PCD_EP_ISR_Handler+0x692>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002094:	b29b      	uxth	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209a:	4413      	add	r3, r2
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	00da      	lsls	r2, r3, #3
 80020a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a6:	4413      	add	r3, r2
 80020a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b0:	2200      	movs	r2, #0
 80020b2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f007 f9d7 	bl	800946e <HAL_PCD_DataInStageCallback>
 80020c0:	e051      	b.n	8002166 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d144      	bne.n	8002158 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80020f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020fe:	429a      	cmp	r2, r3
 8002100:	d907      	bls.n	8002112 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800210a:	1ad2      	subs	r2, r2, r3
 800210c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210e:	619a      	str	r2, [r3, #24]
 8002110:	e002      	b.n	8002118 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f007 f9a1 	bl	800946e <HAL_PCD_DataInStageCallback>
 800212c:	e01b      	b.n	8002166 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800212e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002136:	441a      	add	r2, r3
 8002138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800213c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002144:	441a      	add	r2, r3
 8002146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002148:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002150:	4618      	mov	r0, r3
 8002152:	f004 fa28 	bl	80065a6 <USB_EPStartXfer>
 8002156:	e006      	b.n	8002166 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002158:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800215c:	461a      	mov	r2, r3
 800215e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f917 	bl	8002394 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216e:	b29b      	uxth	r3, r3
 8002170:	b21b      	sxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f6ff ac5a 	blt.w	8001a2c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3758      	adds	r7, #88	; 0x58
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b088      	sub	sp, #32
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	4613      	mov	r3, r2
 800218e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d07c      	beq.n	8002294 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	8b7b      	ldrh	r3, [r7, #26]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d306      	bcc.n	80021d8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	1ad2      	subs	r2, r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	619a      	str	r2, [r3, #24]
 80021d6:	e002      	b.n	80021de <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d123      	bne.n	800222e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002200:	833b      	strh	r3, [r7, #24]
 8002202:	8b3b      	ldrh	r3, [r7, #24]
 8002204:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002208:	833b      	strh	r3, [r7, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	441a      	add	r2, r3
 8002218:	8b3b      	ldrh	r3, [r7, #24]
 800221a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222a:	b29b      	uxth	r3, r3
 800222c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01f      	beq.n	8002278 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	82fb      	strh	r3, [r7, #22]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	441a      	add	r2, r3
 8002262:	8afb      	ldrh	r3, [r7, #22]
 8002264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800226c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002274:	b29b      	uxth	r3, r3
 8002276:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002278:	8b7b      	ldrh	r3, [r7, #26]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8085 	beq.w	800238a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	6959      	ldr	r1, [r3, #20]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	891a      	ldrh	r2, [r3, #8]
 800228c:	8b7b      	ldrh	r3, [r7, #26]
 800228e:	f005 fbd8 	bl	8007a42 <USB_ReadPMA>
 8002292:	e07a      	b.n	800238a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	8b7b      	ldrh	r3, [r7, #26]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d306      	bcc.n	80022d2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	8b7b      	ldrh	r3, [r7, #26]
 80022ca:	1ad2      	subs	r2, r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	619a      	str	r2, [r3, #24]
 80022d0:	e002      	b.n	80022d8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d123      	bne.n	8002328 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fa:	83fb      	strh	r3, [r7, #30]
 80022fc:	8bfb      	ldrh	r3, [r7, #30]
 80022fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002302:	83fb      	strh	r3, [r7, #30]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	441a      	add	r2, r3
 8002312:	8bfb      	ldrh	r3, [r7, #30]
 8002314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002324:	b29b      	uxth	r3, r3
 8002326:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d11f      	bne.n	8002372 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234c:	83bb      	strh	r3, [r7, #28]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	441a      	add	r2, r3
 800235c:	8bbb      	ldrh	r3, [r7, #28]
 800235e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800236e:	b29b      	uxth	r3, r3
 8002370:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002372:	8b7b      	ldrh	r3, [r7, #26]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6959      	ldr	r1, [r3, #20]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	895a      	ldrh	r2, [r3, #10]
 8002384:	8b7b      	ldrh	r3, [r7, #26]
 8002386:	f005 fb5c 	bl	8007a42 <USB_ReadPMA>
    }
  }

  return count;
 800238a:	8b7b      	ldrh	r3, [r7, #26]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0a2      	sub	sp, #136	; 0x88
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 81c5 	beq.w	8002738 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023de:	429a      	cmp	r2, r3
 80023e0:	d907      	bls.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ea:	1ad2      	subs	r2, r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	619a      	str	r2, [r3, #24]
 80023f0:	e002      	b.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 80b9 	bne.w	8002574 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	785b      	ldrb	r3, [r3, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d126      	bne.n	8002458 <HAL_PCD_EP_DB_Transmit+0xc4>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	4413      	add	r3, r2
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	00da      	lsls	r2, r3, #3
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	4413      	add	r3, r2
 800242c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800243c:	b29a      	uxth	r2, r3
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002450:	b29a      	uxth	r2, r3
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	e01a      	b.n	800248e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	785b      	ldrb	r3, [r3, #1]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d116      	bne.n	800248e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	4413      	add	r3, r2
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00da      	lsls	r2, r3, #3
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	4413      	add	r3, r2
 8002482:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	2200      	movs	r2, #0
 800248c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	623b      	str	r3, [r7, #32]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d126      	bne.n	80024ea <HAL_PCD_EP_DB_Transmit+0x156>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4413      	add	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	00da      	lsls	r2, r3, #3
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4413      	add	r3, r2
 80024be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	e017      	b.n	800251a <HAL_PCD_EP_DB_Transmit+0x186>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d113      	bne.n	800251a <HAL_PCD_EP_DB_Transmit+0x186>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	4413      	add	r3, r2
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00da      	lsls	r2, r3, #3
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	4413      	add	r3, r2
 800250e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f006 ffa4 	bl	800946e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 82d2 	beq.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	827b      	strh	r3, [r7, #18]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	441a      	add	r2, r3
 800255c:	8a7b      	ldrh	r3, [r7, #18]
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800256a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
 8002572:	e2b0      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d021      	beq.n	80025c2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002598:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	441a      	add	r2, r3
 80025aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025be:	b29b      	uxth	r3, r3
 80025c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	f040 8284 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d6:	441a      	add	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	441a      	add	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d309      	bcc.n	800260a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	6a1a      	ldr	r2, [r3, #32]
 8002600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002602:	1ad2      	subs	r2, r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	621a      	str	r2, [r3, #32]
 8002608:	e015      	b.n	8002636 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d107      	bne.n	8002622 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002616:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002620:	e009      	b.n	8002636 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d155      	bne.n	80026ea <HAL_PCD_EP_DB_Transmit+0x356>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	00da      	lsls	r2, r3, #3
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	4413      	add	r3, r2
 8002660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002668:	2b3e      	cmp	r3, #62	; 0x3e
 800266a:	d916      	bls.n	800269a <HAL_PCD_EP_DB_Transmit+0x306>
 800266c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	64bb      	str	r3, [r7, #72]	; 0x48
 8002672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800267c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267e:	3b01      	subs	r3, #1
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
 8002682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002684:	b29b      	uxth	r3, r3
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	b29b      	uxth	r3, r3
 800268a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002692:	b29a      	uxth	r2, r3
 8002694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002696:	801a      	strh	r2, [r3, #0]
 8002698:	e043      	b.n	8002722 <HAL_PCD_EP_DB_Transmit+0x38e>
 800269a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269c:	2b00      	cmp	r3, #0
 800269e:	d112      	bne.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x332>
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	801a      	strh	r2, [r3, #0]
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026be:	b29a      	uxth	r2, r3
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	801a      	strh	r2, [r3, #0]
 80026c4:	e02d      	b.n	8002722 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80026cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_PCD_EP_DB_Transmit+0x348>
 80026d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d8:	3301      	adds	r3, #1
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48
 80026dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026de:	b29b      	uxth	r3, r3
 80026e0:	029b      	lsls	r3, r3, #10
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e01b      	b.n	8002722 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d117      	bne.n	8002722 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002706:	4413      	add	r3, r2
 8002708:	643b      	str	r3, [r7, #64]	; 0x40
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	00da      	lsls	r2, r3, #3
 8002710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002712:	4413      	add	r3, r2
 8002714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271c:	b29a      	uxth	r2, r3
 800271e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002720:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6959      	ldr	r1, [r3, #20]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	891a      	ldrh	r2, [r3, #8]
 800272e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	f005 f944 	bl	80079be <USB_WritePMA>
 8002736:	e1ce      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	4413      	add	r3, r2
 8002752:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002768:	429a      	cmp	r2, r3
 800276a:	d307      	bcc.n	800277c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002774:	1ad2      	subs	r2, r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	619a      	str	r2, [r3, #24]
 800277a:	e002      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 80c4 	bne.w	8002914 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d126      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	66bb      	str	r3, [r7, #104]	; 0x68
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a8:	4413      	add	r3, r2
 80027aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	00da      	lsls	r2, r3, #3
 80027b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b4:	4413      	add	r3, r2
 80027b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027ba:	667b      	str	r3, [r7, #100]	; 0x64
 80027bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	e01a      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x484>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d116      	bne.n	8002818 <HAL_PCD_EP_DB_Transmit+0x484>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	673b      	str	r3, [r7, #112]	; 0x70
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fe:	4413      	add	r3, r2
 8002800:	673b      	str	r3, [r7, #112]	; 0x70
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	00da      	lsls	r2, r3, #3
 8002808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280a:	4413      	add	r3, r2
 800280c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002814:	2200      	movs	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12f      	bne.n	8002886 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800283e:	4413      	add	r3, r2
 8002840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	00da      	lsls	r2, r3, #3
 800284a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284e:	4413      	add	r3, r2
 8002850:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002854:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002864:	b29a      	uxth	r2, r3
 8002866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287c:	b29a      	uxth	r2, r3
 800287e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	e017      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x522>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d113      	bne.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x522>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002896:	b29b      	uxth	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800289c:	4413      	add	r3, r2
 800289e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	00da      	lsls	r2, r3, #3
 80028a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a8:	4413      	add	r3, r2
 80028aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80028b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b2:	2200      	movs	r2, #0
 80028b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f006 fdd6 	bl	800946e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 8104 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	441a      	add	r2, r3
 80028fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290e:	b29b      	uxth	r3, r3
 8002910:	8013      	strh	r3, [r2, #0]
 8002912:	e0e0      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d121      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	441a      	add	r2, r3
 800294a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800294e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	b29b      	uxth	r3, r3
 8002960:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 80b4 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002976:	441a      	add	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002984:	441a      	add	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	6a1a      	ldr	r2, [r3, #32]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	429a      	cmp	r2, r3
 8002994:	d309      	bcc.n	80029aa <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	6a1a      	ldr	r2, [r3, #32]
 80029a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	621a      	str	r2, [r3, #32]
 80029a8:	e015      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80029b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029c0:	e009      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	663b      	str	r3, [r7, #96]	; 0x60
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d155      	bne.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f8:	4413      	add	r3, r2
 80029fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	00da      	lsls	r2, r3, #3
 8002a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a04:	4413      	add	r3, r2
 8002a06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002a10:	d916      	bls.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	677b      	str	r3, [r7, #116]	; 0x74
 8002a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <HAL_PCD_EP_DB_Transmit+0x694>
 8002a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a24:	3b01      	subs	r3, #1
 8002a26:	677b      	str	r3, [r7, #116]	; 0x74
 8002a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3c:	801a      	strh	r2, [r3, #0]
 8002a3e:	e040      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d112      	bne.n	8002a6c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a54:	801a      	strh	r2, [r3, #0]
 8002a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	801a      	strh	r2, [r3, #0]
 8002a6a:	e02a      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	677b      	str	r3, [r7, #116]	; 0x74
 8002a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7e:	3301      	adds	r3, #1
 8002a80:	677b      	str	r3, [r7, #116]	; 0x74
 8002a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8c:	801a      	strh	r2, [r3, #0]
 8002a8e:	e018      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d114      	bne.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa6:	4413      	add	r3, r2
 8002aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	00da      	lsls	r2, r3, #3
 8002ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6959      	ldr	r1, [r3, #20]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	895a      	ldrh	r2, [r3, #10]
 8002ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f004 ff74 	bl	80079be <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af0:	823b      	strh	r3, [r7, #16]
 8002af2:	8a3b      	ldrh	r3, [r7, #16]
 8002af4:	f083 0310 	eor.w	r3, r3, #16
 8002af8:	823b      	strh	r3, [r7, #16]
 8002afa:	8a3b      	ldrh	r3, [r7, #16]
 8002afc:	f083 0320 	eor.w	r3, r3, #32
 8002b00:	823b      	strh	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	8a3b      	ldrh	r3, [r7, #16]
 8002b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3788      	adds	r7, #136	; 0x88
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e009      	b.n	8002b7a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b66:	897a      	ldrh	r2, [r7, #10]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b7a:	893b      	ldrh	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2200      	movs	r2, #0
 8002b84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	80da      	strh	r2, [r3, #6]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2201      	movs	r2, #1
 8002b94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	58000400 	.word	0x58000400

08002c2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	58000400 	.word	0x58000400

08002c48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c56:	6053      	str	r3, [r2, #4]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	58000400 	.word	0x58000400

08002c68 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7a:	d101      	bne.n	8002c80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cda:	d101      	bne.n	8002ce0 <LL_RCC_HSE_IsReady+0x18>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <LL_RCC_HSE_IsReady+0x1a>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfe:	6013      	str	r3, [r2, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3a:	d101      	bne.n	8002d40 <LL_RCC_HSI_IsReady+0x18>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <LL_RCC_HSI_IsReady+0x1a>
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d101      	bne.n	8002dd2 <LL_RCC_HSI48_IsReady+0x18>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_RCC_HSI48_IsReady+0x1a>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d101      	bne.n	8002e7e <LL_RCC_LSE_IsReady+0x18>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <LL_RCC_LSE_IsReady+0x1a>
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d101      	bne.n	8002ee6 <LL_RCC_LSI1_IsReady+0x18>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <LL_RCC_LSI1_IsReady+0x1a>
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d101      	bne.n	8002f4e <LL_RCC_LSI2_IsReady+0x18>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_RCC_LSI2_IsReady+0x1a>
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6013      	str	r3, [r2, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d101      	bne.n	8002fda <LL_RCC_MSI_IsReady+0x16>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_RCC_MSI_IsReady+0x18>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2bb0      	cmp	r3, #176	; 0xb0
 8003024:	d901      	bls.n	800302a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003026:	23b0      	movs	r3, #176	; 0xb0
 8003028:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800302a:	687b      	ldr	r3, [r7, #4]
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 0203 	bic.w	r2, r3, #3
 8003074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003102:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003106:	f023 020f 	bic.w	r2, r3, #15
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	608b      	str	r3, [r1, #8]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800315e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d8:	6013      	str	r3, [r2, #0]
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031f6:	d101      	bne.n	80031fc <LL_RCC_PLL_IsReady+0x18>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_RCC_PLL_IsReady+0x1a>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800320c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0303 	and.w	r3, r3, #3
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d101      	bne.n	8003282 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a2:	d101      	bne.n	80032a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d101      	bne.n	80032ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ec:	d101      	bne.n	80032f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003310:	d101      	bne.n	8003316 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b08d      	sub	sp, #52	; 0x34
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e37e      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8092 	beq.w	8003468 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003344:	f7ff fea1 	bl	800308a <LL_RCC_GetSysClkSource>
 8003348:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334a:	f7ff ff82 	bl	8003252 <LL_RCC_PLL_GetMainSource>
 800334e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RCC_OscConfig+0x3e>
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d14c      	bne.n	80033f6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	2b01      	cmp	r3, #1
 8003360:	d149      	bne.n	80033f6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003362:	f7ff fe2f 	bl	8002fc4 <LL_RCC_MSI_IsReady>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_OscConfig+0x54>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e35d      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800337c:	f7ff fe47 	bl	800300e <LL_RCC_MSI_GetRange>
 8003380:	4603      	mov	r3, r0
 8003382:	429c      	cmp	r4, r3
 8003384:	d914      	bls.n	80033b0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fd16 	bl	8003dbc <RCC_SetFlashLatencyFromMSIRange>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e34c      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe21 	bl	8002fe6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fe45 	bl	8003038 <LL_RCC_MSI_SetCalibTrimming>
 80033ae:	e013      	b.n	80033d8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fe16 	bl	8002fe6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fe3a 	bl	8003038 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fcf7 	bl	8003dbc <RCC_SetFlashLatencyFromMSIRange>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e32d      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033d8:	f000 fcdc 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 80033dc:	4603      	mov	r3, r0
 80033de:	4ab3      	ldr	r2, [pc, #716]	; (80036ac <HAL_RCC_OscConfig+0x388>)
 80033e0:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033e2:	4bb3      	ldr	r3, [pc, #716]	; (80036b0 <HAL_RCC_OscConfig+0x38c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fbc2 	bl	8000b70 <HAL_InitTick>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d039      	beq.n	8003466 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e31e      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01e      	beq.n	800343c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033fe:	f7ff fdc3 	bl	8002f88 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003402:	f7fd fc03 	bl	8000c0c <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340a:	f7fd fbff 	bl	8000c0c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e30b      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800341c:	f7ff fdd2 	bl	8002fc4 <LL_RCC_MSI_IsReady>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f1      	beq.n	800340a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fddb 	bl	8002fe6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fdff 	bl	8003038 <LL_RCC_MSI_SetCalibTrimming>
 800343a:	e015      	b.n	8003468 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800343c:	f7ff fdb3 	bl	8002fa6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003440:	f7fd fbe4 	bl	8000c0c <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003448:	f7fd fbe0 	bl	8000c0c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e2ec      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800345a:	f7ff fdb3 	bl	8002fc4 <LL_RCC_MSI_IsReady>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f1      	bne.n	8003448 <HAL_RCC_OscConfig+0x124>
 8003464:	e000      	b.n	8003468 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003466:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d04e      	beq.n	8003512 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003474:	f7ff fe09 	bl	800308a <LL_RCC_GetSysClkSource>
 8003478:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800347a:	f7ff feea 	bl	8003252 <LL_RCC_PLL_GetMainSource>
 800347e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	2b08      	cmp	r3, #8
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x16e>
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	2b0c      	cmp	r3, #12
 800348a:	d10d      	bne.n	80034a8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d10a      	bne.n	80034a8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003492:	f7ff fc19 	bl	8002cc8 <LL_RCC_HSE_IsReady>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d039      	beq.n	8003510 <HAL_RCC_OscConfig+0x1ec>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d135      	bne.n	8003510 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e2c5      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_OscConfig+0x194>
 80034b2:	f7ff fbeb 	bl	8002c8c <LL_RCC_HSE_Enable>
 80034b6:	e001      	b.n	80034bc <HAL_RCC_OscConfig+0x198>
 80034b8:	f7ff fbf7 	bl	8002caa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fba2 	bl	8000c0c <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd fb9e 	bl	8000c0c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e2aa      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034de:	f7ff fbf3 	bl	8002cc8 <LL_RCC_HSE_IsReady>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f1      	beq.n	80034cc <HAL_RCC_OscConfig+0x1a8>
 80034e8:	e013      	b.n	8003512 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fd fb8f 	bl	8000c0c <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f2:	f7fd fb8b 	bl	8000c0c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	; 0x64
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e297      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003504:	f7ff fbe0 	bl	8002cc8 <LL_RCC_HSE_IsReady>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f1      	bne.n	80034f2 <HAL_RCC_OscConfig+0x1ce>
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d051      	beq.n	80035c2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351e:	f7ff fdb4 	bl	800308a <LL_RCC_GetSysClkSource>
 8003522:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003524:	f7ff fe95 	bl	8003252 <LL_RCC_PLL_GetMainSource>
 8003528:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b04      	cmp	r3, #4
 800352e:	d005      	beq.n	800353c <HAL_RCC_OscConfig+0x218>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d113      	bne.n	800355e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d110      	bne.n	800355e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800353c:	f7ff fbf4 	bl	8002d28 <LL_RCC_HSI_IsReady>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x22e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e270      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fbf8 	bl	8002d4c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800355c:	e031      	b.n	80035c2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003566:	f7ff fbc1 	bl	8002cec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fb4f 	bl	8000c0c <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003572:	f7fd fb4b 	bl	8000c0c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e257      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003584:	f7ff fbd0 	bl	8002d28 <LL_RCC_HSI_IsReady>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f1      	beq.n	8003572 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fbda 	bl	8002d4c <LL_RCC_HSI_SetCalibTrimming>
 8003598:	e013      	b.n	80035c2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	f7ff fbb6 	bl	8002d0a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fd fb35 	bl	8000c0c <HAL_GetTick>
 80035a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fd fb31 	bl	8000c0c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e23d      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80035b8:	f7ff fbb6 	bl	8002d28 <LL_RCC_HSI_IsReady>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f1      	bne.n	80035a6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80a3 	beq.w	8003722 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d076      	beq.n	80036d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d046      	beq.n	800367e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80035f0:	f7ff fc6d 	bl	8002ece <LL_RCC_LSI1_IsReady>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d113      	bne.n	8003622 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80035fa:	f7ff fc46 	bl	8002e8a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035fe:	f7fd fb05 	bl	8000c0c <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003606:	f7fd fb01 	bl	8000c0c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e20d      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003618:	f7ff fc59 	bl	8002ece <LL_RCC_LSI1_IsReady>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f1      	beq.n	8003606 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003622:	f7ff fc66 	bl	8002ef2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fd faf1 	bl	8000c0c <HAL_GetTick>
 800362a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800362e:	f7fd faed 	bl	8000c0c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b03      	cmp	r3, #3
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e1f9      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003640:	f7ff fc79 	bl	8002f36 <LL_RCC_LSI2_IsReady>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f1      	beq.n	800362e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fc83 	bl	8002f5a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003654:	f7ff fc2a 	bl	8002eac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fad8 	bl	8000c0c <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003660:	f7fd fad4 	bl	8000c0c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e1e0      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003672:	f7ff fc2c 	bl	8002ece <LL_RCC_LSI1_IsReady>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f1      	bne.n	8003660 <HAL_RCC_OscConfig+0x33c>
 800367c:	e051      	b.n	8003722 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800367e:	f7ff fc04 	bl	8002e8a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd fac3 	bl	8000c0c <HAL_GetTick>
 8003686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800368a:	f7fd fabf 	bl	8000c0c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1cb      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800369c:	f7ff fc17 	bl	8002ece <LL_RCC_LSI1_IsReady>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f1      	beq.n	800368a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80036a6:	f7ff fc35 	bl	8002f14 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036aa:	e00c      	b.n	80036c6 <HAL_RCC_OscConfig+0x3a2>
 80036ac:	20000004 	.word	0x20000004
 80036b0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036b4:	f7fd faaa 	bl	8000c0c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1b6      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036c6:	f7ff fc36 	bl	8002f36 <LL_RCC_LSI2_IsReady>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f1      	bne.n	80036b4 <HAL_RCC_OscConfig+0x390>
 80036d0:	e027      	b.n	8003722 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80036d2:	f7ff fc1f 	bl	8002f14 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd fa99 	bl	8000c0c <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036de:	f7fd fa95 	bl	8000c0c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1a1      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036f0:	f7ff fc21 	bl	8002f36 <LL_RCC_LSI2_IsReady>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f1      	bne.n	80036de <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80036fa:	f7ff fbd7 	bl	8002eac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fd fa85 	bl	8000c0c <HAL_GetTick>
 8003702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003706:	f7fd fa81 	bl	8000c0c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e18d      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003718:	f7ff fbd9 	bl	8002ece <LL_RCC_LSI1_IsReady>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f1      	bne.n	8003706 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d05b      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372e:	4bb5      	ldr	r3, [pc, #724]	; (8003a04 <HAL_RCC_OscConfig+0x6e0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d114      	bne.n	8003764 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800373a:	f7ff fa67 	bl	8002c0c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373e:	f7fd fa65 	bl	8000c0c <HAL_GetTick>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003746:	f7fd fa61 	bl	8000c0c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e16d      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003758:	4baa      	ldr	r3, [pc, #680]	; (8003a04 <HAL_RCC_OscConfig+0x6e0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_RCC_OscConfig+0x44e>
 800376c:	f7ff fb37 	bl	8002dde <LL_RCC_LSE_Enable>
 8003770:	e00c      	b.n	800378c <HAL_RCC_OscConfig+0x468>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b05      	cmp	r3, #5
 8003778:	d104      	bne.n	8003784 <HAL_RCC_OscConfig+0x460>
 800377a:	f7ff fb52 	bl	8002e22 <LL_RCC_LSE_EnableBypass>
 800377e:	f7ff fb2e 	bl	8002dde <LL_RCC_LSE_Enable>
 8003782:	e003      	b.n	800378c <HAL_RCC_OscConfig+0x468>
 8003784:	f7ff fb3c 	bl	8002e00 <LL_RCC_LSE_Disable>
 8003788:	f7ff fb5c 	bl	8002e44 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d014      	beq.n	80037be <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fd fa3a 	bl	8000c0c <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fd fa36 	bl	8000c0c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e140      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037b2:	f7ff fb58 	bl	8002e66 <LL_RCC_LSE_IsReady>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ef      	beq.n	800379c <HAL_RCC_OscConfig+0x478>
 80037bc:	e013      	b.n	80037e6 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd fa25 	bl	8000c0c <HAL_GetTick>
 80037c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd fa21 	bl	8000c0c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e12b      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037dc:	f7ff fb43 	bl	8002e66 <LL_RCC_LSE_IsReady>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02c      	beq.n	800384c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d014      	beq.n	8003824 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037fa:	f7ff fabc 	bl	8002d76 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fd fa05 	bl	8000c0c <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003806:	f7fd fa01 	bl	8000c0c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e10d      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003818:	f7ff facf 	bl	8002dba <LL_RCC_HSI48_IsReady>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f1      	beq.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003822:	e013      	b.n	800384c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003824:	f7ff fab8 	bl	8002d98 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fd f9f0 	bl	8000c0c <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003830:	f7fd f9ec 	bl	8000c0c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0f8      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003842:	f7ff faba 	bl	8002dba <LL_RCC_HSI48_IsReady>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f1      	bne.n	8003830 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80ee 	beq.w	8003a32 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003856:	f7ff fc18 	bl	800308a <LL_RCC_GetSysClkSource>
 800385a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	2b02      	cmp	r3, #2
 800386a:	f040 80af 	bne.w	80039cc <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	429a      	cmp	r2, r3
 800387a:	d123      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d11c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d114      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d10d      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d106      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d05d      	beq.n	8003980 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d058      	beq.n	800397c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0ab      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038dc:	f7ff fc73 	bl	80031c6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038e0:	f7fd f994 	bl	8000c0c <HAL_GetTick>
 80038e4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fd f990 	bl	8000c0c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e09c      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ef      	bne.n	80038e8 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_RCC_OscConfig+0x6e4>)
 8003910:	4013      	ands	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800391a:	4311      	orrs	r1, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003920:	0212      	lsls	r2, r2, #8
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003928:	4311      	orrs	r1, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003934:	430a      	orrs	r2, r1
 8003936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393a:	4313      	orrs	r3, r2
 800393c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800393e:	f7ff fc33 	bl	80031a8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003952:	f7fd f95b 	bl	8000c0c <HAL_GetTick>
 8003956:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395a:	f7fd f957 	bl	8000c0c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e063      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0ef      	beq.n	800395a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397a:	e05a      	b.n	8003a32 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e059      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d151      	bne.n	8003a32 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800398e:	f7ff fc0b 	bl	80031a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039a2:	f7fd f933 	bl	8000c0c <HAL_GetTick>
 80039a6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fd f92f 	bl	8000c0c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e03b      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ef      	beq.n	80039aa <HAL_RCC_OscConfig+0x686>
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d02d      	beq.n	8003a2e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	f7ff fbf8 	bl	80031c6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e0:	f023 0303 	bic.w	r3, r3, #3
 80039e4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fa:	f7fd f907 	bl	8000c0c <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a00:	e00d      	b.n	8003a1e <HAL_RCC_OscConfig+0x6fa>
 8003a02:	bf00      	nop
 8003a04:	58000400 	.word	0x58000400
 8003a08:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fd f8fe 	bl	8000c0c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ef      	bne.n	8003a0c <HAL_RCC_OscConfig+0x6e8>
 8003a2c:	e001      	b.n	8003a32 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3734      	adds	r7, #52	; 0x34
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd90      	pop	{r4, r7, pc}

08003a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e12d      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b98      	ldr	r3, [pc, #608]	; (8003cb4 <HAL_RCC_ClockConfig+0x278>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d91b      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b95      	ldr	r3, [pc, #596]	; (8003cb4 <HAL_RCC_ClockConfig+0x278>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 0207 	bic.w	r2, r3, #7
 8003a66:	4993      	ldr	r1, [pc, #588]	; (8003cb4 <HAL_RCC_ClockConfig+0x278>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6e:	f7fd f8cd 	bl	8000c0c <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a76:	f7fd f8c9 	bl	8000c0c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e111      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a88:	4b8a      	ldr	r3, [pc, #552]	; (8003cb4 <HAL_RCC_ClockConfig+0x278>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d1ef      	bne.n	8003a76 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fafb 	bl	80030a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aac:	f7fd f8ae 	bl	8000c0c <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ab4:	f7fd f8aa 	bl	8000c0c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0f2      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ac6:	f7ff fbd0 	bl	800326a <LL_RCC_IsActiveFlag_HPRE>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f1      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d016      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff faf2 	bl	80030ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ae6:	f7fd f891 	bl	8000c0c <HAL_GetTick>
 8003aea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aee:	f7fd f88d 	bl	8000c0c <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e0d5      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b00:	f7ff fbc5 	bl	800328e <LL_RCC_IsActiveFlag_C2HPRE>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f1      	beq.n	8003aee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff faeb 	bl	80030f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b20:	f7fd f874 	bl	8000c0c <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b28:	f7fd f870 	bl	8000c0c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0b8      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b3a:	f7ff fbbb 	bl	80032b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f1      	beq.n	8003b28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d016      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fae5 	bl	8003124 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd f857 	bl	8000c0c <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b62:	f7fd f853 	bl	8000c0c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e09b      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b74:	f7ff fbb1 	bl	80032da <LL_RCC_IsActiveFlag_PPRE1>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f1      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d017      	beq.n	8003bba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fadb 	bl	800314c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b96:	f7fd f839 	bl	8000c0c <HAL_GetTick>
 8003b9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b9e:	f7fd f835 	bl	8000c0c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e07d      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003bb0:	f7ff fba5 	bl	80032fe <LL_RCC_IsActiveFlag_PPRE2>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f1      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d043      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d106      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003bce:	f7ff f87b 	bl	8002cc8 <LL_RCC_HSE_IsReady>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11e      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e067      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003be4:	f7ff fafe 	bl	80031e4 <LL_RCC_PLL_IsReady>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d113      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e05c      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bfa:	f7ff f9e3 	bl	8002fc4 <LL_RCC_MSI_IsReady>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e051      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c08:	f7ff f88e 	bl	8002d28 <LL_RCC_HSI_IsReady>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e04a      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fa21 	bl	8003062 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c20:	f7fc fff4 	bl	8000c0c <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7fc fff0 	bl	8000c0c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e036      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	f7ff fa24 	bl	800308a <LL_RCC_GetSysClkSource>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d1ec      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4e:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_RCC_ClockConfig+0x278>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d21b      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5c:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_RCC_ClockConfig+0x278>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 0207 	bic.w	r2, r3, #7
 8003c64:	4913      	ldr	r1, [pc, #76]	; (8003cb4 <HAL_RCC_ClockConfig+0x278>)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fc ffce 	bl	8000c0c <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c74:	f7fc ffca 	bl	8000c0c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e012      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_ClockConfig+0x278>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1ef      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c94:	f000 f87e 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <HAL_RCC_ClockConfig+0x27c>)
 8003c9c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c9e:	f7fc ffc1 	bl	8000c24 <HAL_GetTickPrio>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc ff63 	bl	8000b70 <HAL_InitTick>
 8003caa:	4603      	mov	r3, r0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	58004000 	.word	0x58004000
 8003cb8:	20000004 	.word	0x20000004

08003cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc2:	f7ff f9e2 	bl	800308a <LL_RCC_GetSysClkSource>
 8003cc6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003cce:	f7ff f99e 	bl	800300e <LL_RCC_MSI_GetRange>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	4a2b      	ldr	r2, [pc, #172]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e04b      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d102      	bne.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e045      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d10a      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cf6:	f7fe ffb7 	bl	8002c68 <LL_RCC_HSE_IsEnabledDiv2>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e03a      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e037      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d0c:	f7ff faa1 	bl	8003252 <LL_RCC_PLL_GetMainSource>
 8003d10:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d003      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x64>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0x6a>
 8003d1e:	e00d      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d22:	60bb      	str	r3, [r7, #8]
        break;
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d26:	f7fe ff9f 	bl	8002c68 <LL_RCC_HSE_IsEnabledDiv2>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d102      	bne.n	8003d36 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d32:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d34:	e00d      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d38:	60bb      	str	r3, [r7, #8]
        break;
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d3c:	f7ff f967 	bl	800300e <LL_RCC_MSI_GetRange>
 8003d40:	4603      	mov	r3, r0
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	4a0f      	ldr	r2, [pc, #60]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4e:	60bb      	str	r3, [r7, #8]
        break;
 8003d50:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003d52:	f7ff fa59 	bl	8003208 <LL_RCC_PLL_GetN>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	fb03 f402 	mul.w	r4, r3, r2
 8003d5e:	f7ff fa6c 	bl	800323a <LL_RCC_PLL_GetDivider>
 8003d62:	4603      	mov	r3, r0
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	3301      	adds	r3, #1
 8003d68:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d6c:	f7ff fa59 	bl	8003222 <LL_RCC_PLL_GetR>
 8003d70:	4603      	mov	r3, r0
 8003d72:	0f5b      	lsrs	r3, r3, #29
 8003d74:	3301      	adds	r3, #1
 8003d76:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d7a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd90      	pop	{r4, r7, pc}
 8003d86:	bf00      	nop
 8003d88:	08009a84 	.word	0x08009a84
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	007a1200 	.word	0x007a1200

08003d94 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b598      	push	{r3, r4, r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d98:	f7ff ff90 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	f7ff f9e9 	bl	8003174 <LL_RCC_GetAHBPrescaler>
 8003da2:	4603      	mov	r3, r0
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <HAL_RCC_GetHCLKFreq+0x24>)
 8003dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd98      	pop	{r3, r4, r7, pc}
 8003db8:	08009a44 	.word	0x08009a44

08003dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2bb0      	cmp	r3, #176	; 0xb0
 8003dc8:	d903      	bls.n	8003dd2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e007      	b.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003de2:	f7ff f9d3 	bl	800318c <LL_RCC_GetAHB4Prescaler>
 8003de6:	4603      	mov	r3, r0
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003e00:	fba2 2303 	umull	r2, r3, r2, r3
 8003e04:	0c9c      	lsrs	r4, r3, #18
 8003e06:	f7fe ff11 	bl	8002c2c <HAL_PWREx_GetVoltageRange>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f000 f80c 	bl	8003e2c <RCC_SetFlashLatency>
 8003e14:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd90      	pop	{r4, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	08009a84 	.word	0x08009a84
 8003e24:	08009a44 	.word	0x08009a44
 8003e28:	431bde83 	.word	0x431bde83

08003e2c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b093      	sub	sp, #76	; 0x4c
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <RCC_SetFlashLatency+0xf0>)
 8003e38:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003e42:	4a37      	ldr	r2, [pc, #220]	; (8003f20 <RCC_SetFlashLatency+0xf4>)
 8003e44:	f107 031c 	add.w	r3, r7, #28
 8003e48:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003e4e:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <RCC_SetFlashLatency+0xf8>)
 8003e50:	f107 040c 	add.w	r4, r7, #12
 8003e54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e64:	d11c      	bne.n	8003ea0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	643b      	str	r3, [r7, #64]	; 0x40
 8003e6a:	e015      	b.n	8003e98 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e74:	4413      	add	r3, r2
 8003e76:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d808      	bhi.n	8003e92 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e88:	4413      	add	r3, r2
 8003e8a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e8e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003e90:	e022      	b.n	8003ed8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e94:	3301      	adds	r3, #1
 8003e96:	643b      	str	r3, [r7, #64]	; 0x40
 8003e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d9e6      	bls.n	8003e6c <RCC_SetFlashLatency+0x40>
 8003e9e:	e01b      	b.n	8003ed8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea4:	e015      	b.n	8003ed2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003eae:	4413      	add	r3, r2
 8003eb0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d808      	bhi.n	8003ecc <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ec8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003eca:	e005      	b.n	8003ed8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	3301      	adds	r3, #1
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d9e6      	bls.n	8003ea6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <RCC_SetFlashLatency+0xfc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 0207 	bic.w	r2, r3, #7
 8003ee0:	4911      	ldr	r1, [pc, #68]	; (8003f28 <RCC_SetFlashLatency+0xfc>)
 8003ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ee8:	f7fc fe90 	bl	8000c0c <HAL_GetTick>
 8003eec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003eee:	e008      	b.n	8003f02 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ef0:	f7fc fe8c 	bl	8000c0c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e007      	b.n	8003f12 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <RCC_SetFlashLatency+0xfc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d1ef      	bne.n	8003ef0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	374c      	adds	r7, #76	; 0x4c
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd90      	pop	{r4, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	080099d0 	.word	0x080099d0
 8003f20:	080099e0 	.word	0x080099e0
 8003f24:	080099ec 	.word	0x080099ec
 8003f28:	58004000 	.word	0x58004000

08003f2c <LL_RCC_LSE_IsEnabled>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <LL_RCC_LSE_IsEnabled+0x18>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <LL_RCC_LSE_IsEnabled+0x1a>
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_RCC_LSE_IsReady>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d101      	bne.n	8003f68 <LL_RCC_LSE_IsReady+0x18>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <LL_RCC_LSE_IsReady+0x1a>
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_MSI_EnablePLLMode>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_SetRFWKPClockSource>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_SetSMPSClockSource>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f023 0203 	bic.w	r2, r3, #3
 8003fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <LL_RCC_SetSMPSPrescaler>:
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_RCC_SetUSARTClockSource>:
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_RCC_SetLPUARTClockSource>:
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800404e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_RCC_SetI2CClockSource>:
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004072:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800407e:	43db      	mvns	r3, r3
 8004080:	401a      	ands	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800408a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_SetLPTIMClockSource>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	0c1b      	lsrs	r3, r3, #16
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	43db      	mvns	r3, r3
 80040b8:	401a      	ands	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_SetSAIClockSource>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_SetRNGClockSource>:
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_RCC_SetCLK48ClockSource>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_RCC_SetUSBClockSource>:
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ffe3 	bl	800412c <LL_RCC_SetCLK48ClockSource>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <LL_RCC_SetADCClockSource>:
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_RCC_SetRTCClockSource>:
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_RCC_GetRTCClockSource>:
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80041ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_RCC_ForceBackupDomainReset>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_RCC_PLLSAI1_Enable>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004236:	6013      	str	r3, [r2, #0]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_RCC_PLLSAI1_Disable>:
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004250:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004254:	6013      	str	r3, [r2, #0]
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_RCC_PLLSAI1_IsReady>:
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800426e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004272:	d101      	bne.n	8004278 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800428c:	2300      	movs	r3, #0
 800428e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004290:	2300      	movs	r3, #0
 8004292:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d034      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a8:	d021      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80042aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ae:	d81b      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b4:	d01d      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80042b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ba:	d815      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00b      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c4:	d110      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80042d6:	e00d      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f94d 	bl	800457c <RCCEx_PLLSAI1_ConfigNP>
 80042e2:	4603      	mov	r3, r0
 80042e4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042e6:	e005      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	77fb      	strb	r3, [r7, #31]
        break;
 80042ec:	e002      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f4:	7ffb      	ldrb	r3, [r7, #31]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fee8 	bl	80040d4 <LL_RCC_SetSAIClockSource>
 8004304:	e001      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	7ffb      	ldrb	r3, [r7, #31]
 8004308:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004312:	2b00      	cmp	r3, #0
 8004314:	d046      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004316:	f7ff ff56 	bl	80041c6 <LL_RCC_GetRTCClockSource>
 800431a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	429a      	cmp	r2, r3
 8004324:	d03c      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004326:	f7fe fc71 	bl	8002c0c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ff30 	bl	800419a <LL_RCC_SetRTCClockSource>
 800433a:	e02e      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004346:	f7ff ff4b 	bl	80041e0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800434a:	f7ff ff5a 	bl	8004202 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800435c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004366:	f7ff fde1 	bl	8003f2c <LL_RCC_LSE_IsEnabled>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d114      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004370:	f7fc fc4c 	bl	8000c0c <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004376:	e00b      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fc fc48 	bl	8000c0c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	; 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d902      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	77fb      	strb	r3, [r7, #31]
              break;
 800438e:	e004      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004390:	f7ff fdde 	bl	8003f50 <LL_RCC_LSE_IsReady>
 8004394:	4603      	mov	r3, r0
 8004396:	2b01      	cmp	r3, #1
 8004398:	d1ee      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800439a:	7ffb      	ldrb	r3, [r7, #31]
 800439c:	77bb      	strb	r3, [r7, #30]
 800439e:	e001      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	7ffb      	ldrb	r3, [r7, #31]
 80043a2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fe2a 	bl	800400e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fe35 	bl	800403a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fe5d 	bl	80040a0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fe52 	bl	80040a0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fe2a 	bl	8004066 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fe1f 	bl	8004066 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d022      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fe8d 	bl	8004158 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004446:	d107      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004456:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004460:	d10b      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f8e3 	bl	8004632 <RCCEx_PLLSAI1_ConfigNQ>
 800446c:	4603      	mov	r3, r0
 800446e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004470:	7ffb      	ldrb	r3, [r7, #31]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004476:	7ffb      	ldrb	r3, [r7, #31]
 8004478:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02b      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d008      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004498:	d003      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fe2a 	bl	8004100 <LL_RCC_SetRNGClockSource>
 80044ac:	e00a      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	2000      	movs	r0, #0
 80044ba:	f7ff fe21 	bl	8004100 <LL_RCC_SetRNGClockSource>
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff fe34 	bl	800412c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80044cc:	d107      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d022      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fe3d 	bl	800416e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fc:	d107      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004516:	d10b      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4618      	mov	r0, r3
 800451e:	f000 f8e3 	bl	80046e8 <RCCEx_PLLSAI1_ConfigNR>
 8004522:	4603      	mov	r3, r0
 8004524:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800452c:	7ffb      	ldrb	r3, [r7, #31]
 800452e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fd26 	bl	8003f92 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fd45 	bl	8003fe6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fd2c 	bl	8003fbe <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004566:	7fbb      	ldrb	r3, [r7, #30]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004574:	f7ff fcfe 	bl	8003f74 <LL_RCC_MSI_EnablePLLMode>
}
 8004578:	bf00      	nop
 800457a:	bd80      	pop	{r7, pc}

0800457c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004588:	f7ff fe5b 	bl	8004242 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800458c:	f7fc fb3e 	bl	8000c0c <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004592:	e009      	b.n	80045a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004594:	f7fc fb3a 	bl	8000c0c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d902      	bls.n	80045a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
      break;
 80045a6:	e004      	b.n	80045b2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045a8:	f7ff fe5a 	bl	8004260 <LL_RCC_PLLSAI1_IsReady>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d137      	bne.n	8004628 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80045b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80045d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e2:	4313      	orrs	r3, r2
 80045e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045e6:	f7ff fe1d 	bl	8004224 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ea:	f7fc fb0f 	bl	8000c0c <HAL_GetTick>
 80045ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045f0:	e009      	b.n	8004606 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f2:	f7fc fb0b 	bl	8000c0c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d902      	bls.n	8004606 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	73fb      	strb	r3, [r7, #15]
        break;
 8004604:	e004      	b.n	8004610 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004606:	f7ff fe2b 	bl	8004260 <LL_RCC_PLLSAI1_IsReady>
 800460a:	4603      	mov	r3, r0
 800460c:	2b01      	cmp	r3, #1
 800460e:	d1f0      	bne.n	80045f2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800463e:	f7ff fe00 	bl	8004242 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004642:	f7fc fae3 	bl	8000c0c <HAL_GetTick>
 8004646:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004648:	e009      	b.n	800465e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800464a:	f7fc fadf 	bl	8000c0c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d902      	bls.n	800465e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e004      	b.n	8004668 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800465e:	f7ff fdff 	bl	8004260 <LL_RCC_PLLSAI1_IsReady>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d137      	bne.n	80046de <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800466e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004682:	4313      	orrs	r3, r2
 8004684:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004698:	4313      	orrs	r3, r2
 800469a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800469c:	f7ff fdc2 	bl	8004224 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a0:	f7fc fab4 	bl	8000c0c <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046a6:	e009      	b.n	80046bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046a8:	f7fc fab0 	bl	8000c0c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d902      	bls.n	80046bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	73fb      	strb	r3, [r7, #15]
        break;
 80046ba:	e004      	b.n	80046c6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046bc:	f7ff fdd0 	bl	8004260 <LL_RCC_PLLSAI1_IsReady>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d1f0      	bne.n	80046a8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d108      	bne.n	80046de <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80046cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046da:	4313      	orrs	r3, r2
 80046dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046f4:	f7ff fda5 	bl	8004242 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046f8:	f7fc fa88 	bl	8000c0c <HAL_GetTick>
 80046fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046fe:	e009      	b.n	8004714 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004700:	f7fc fa84 	bl	8000c0c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d902      	bls.n	8004714 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	73fb      	strb	r3, [r7, #15]
      break;
 8004712:	e004      	b.n	800471e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004714:	f7ff fda4 	bl	8004260 <LL_RCC_PLLSAI1_IsReady>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d137      	bne.n	8004794 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800473c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004752:	f7ff fd67 	bl	8004224 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004756:	f7fc fa59 	bl	8000c0c <HAL_GetTick>
 800475a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800475c:	e009      	b.n	8004772 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800475e:	f7fc fa55 	bl	8000c0c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d902      	bls.n	8004772 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	73fb      	strb	r3, [r7, #15]
        break;
 8004770:	e004      	b.n	800477c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004772:	f7ff fd75 	bl	8004260 <LL_RCC_PLLSAI1_IsReady>
 8004776:	4603      	mov	r3, r0
 8004778:	2b01      	cmp	r3, #1
 800477a:	d1f0      	bne.n	800475e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d108      	bne.n	8004794 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004790:	4313      	orrs	r3, r2
 8004792:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e095      	b.n	80048dc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d108      	bne.n	80047ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c0:	d009      	beq.n	80047d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	61da      	str	r2, [r3, #28]
 80047c8:	e005      	b.n	80047d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fb ffcf 	bl	8000794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004816:	d902      	bls.n	800481e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e002      	b.n	8004824 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800481e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004822:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800482c:	d007      	beq.n	800483e <HAL_SPI_Init+0xa0>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004836:	d002      	beq.n	800483e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	ea42 0103 	orr.w	r1, r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	f003 0204 	and.w	r2, r3, #4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048ba:	ea42 0103 	orr.w	r1, r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Transmit+0x22>
 8004902:	2302      	movs	r3, #2
 8004904:	e158      	b.n	8004bb8 <HAL_SPI_Transmit+0x2d4>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800490e:	f7fc f97d 	bl	8000c0c <HAL_GetTick>
 8004912:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d002      	beq.n	800492a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004928:	e13d      	b.n	8004ba6 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_Transmit+0x52>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	77fb      	strb	r3, [r7, #31]
    goto error;
 800493a:	e134      	b.n	8004ba6 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2203      	movs	r2, #3
 8004940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004986:	d10f      	bne.n	80049a8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004996:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d007      	beq.n	80049c6 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ce:	d94b      	bls.n	8004a68 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_SPI_Transmit+0xfa>
 80049d8:	8afb      	ldrh	r3, [r7, #22]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d13e      	bne.n	8004a5c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	881a      	ldrh	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a02:	e02b      	b.n	8004a5c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d112      	bne.n	8004a38 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	881a      	ldrh	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a36:	e011      	b.n	8004a5c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a38:	f7fc f8e8 	bl	8000c0c <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d803      	bhi.n	8004a50 <HAL_SPI_Transmit+0x16c>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_Transmit+0x172>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a5a:	e0a4      	b.n	8004ba6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ce      	bne.n	8004a04 <HAL_SPI_Transmit+0x120>
 8004a66:	e07c      	b.n	8004b62 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <HAL_SPI_Transmit+0x192>
 8004a70:	8afb      	ldrh	r3, [r7, #22]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d170      	bne.n	8004b58 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d912      	bls.n	8004aa6 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	881a      	ldrh	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b02      	subs	r3, #2
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa4:	e058      	b.n	8004b58 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	330c      	adds	r3, #12
 8004ab0:	7812      	ldrb	r2, [r2, #0]
 8004ab2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004acc:	e044      	b.n	8004b58 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d12b      	bne.n	8004b34 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d912      	bls.n	8004b0c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b02      	subs	r3, #2
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b0a:	e025      	b.n	8004b58 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	7812      	ldrb	r2, [r2, #0]
 8004b18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b32:	e011      	b.n	8004b58 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b34:	f7fc f86a 	bl	8000c0c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d803      	bhi.n	8004b4c <HAL_SPI_Transmit+0x268>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d102      	bne.n	8004b52 <HAL_SPI_Transmit+0x26e>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b56:	e026      	b.n	8004ba6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1b5      	bne.n	8004ace <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fce4 	bl	8005534 <SPI_EndRxTxTransaction>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e000      	b.n	8004ba6 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ba4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bdc:	d112      	bne.n	8004c04 <HAL_SPI_Receive+0x44>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10e      	bne.n	8004c04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2204      	movs	r2, #4
 8004bea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f910 	bl	8004e20 <HAL_SPI_TransmitReceive>
 8004c00:	4603      	mov	r3, r0
 8004c02:	e109      	b.n	8004e18 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_Receive+0x52>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e102      	b.n	8004e18 <HAL_SPI_Receive+0x258>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1a:	f7fb fff7 	bl	8000c0c <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d002      	beq.n	8004c32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c30:	e0e9      	b.n	8004e06 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_SPI_Receive+0x7e>
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c42:	e0e0      	b.n	8004e06 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2204      	movs	r2, #4
 8004c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c8e:	d908      	bls.n	8004ca2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c9e:	605a      	str	r2, [r3, #4]
 8004ca0:	e007      	b.n	8004cb2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cb0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cba:	d10f      	bne.n	8004cdc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d007      	beq.n	8004cfa <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d02:	d867      	bhi.n	8004dd4 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d04:	e030      	b.n	8004d68 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d117      	bne.n	8004d44 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f103 020c 	add.w	r2, r3, #12
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d42:	e011      	b.n	8004d68 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d44:	f7fb ff62 	bl	8000c0c <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d803      	bhi.n	8004d5c <HAL_SPI_Receive+0x19c>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Receive+0x1a2>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d66:	e04e      	b.n	8004e06 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1c8      	bne.n	8004d06 <HAL_SPI_Receive+0x146>
 8004d74:	e034      	b.n	8004de0 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d115      	bne.n	8004db0 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004dae:	e011      	b.n	8004dd4 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004db0:	f7fb ff2c 	bl	8000c0c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d803      	bhi.n	8004dc8 <HAL_SPI_Receive+0x208>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d102      	bne.n	8004dce <HAL_SPI_Receive+0x20e>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dd2:	e018      	b.n	8004e06 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ca      	bne.n	8004d76 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	6839      	ldr	r1, [r7, #0]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fb4d 	bl	8005484 <SPI_EndRxTransaction>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
 8004e02:	e000      	b.n	8004e06 <HAL_SPI_Receive+0x246>
  }

error :
 8004e04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_SPI_TransmitReceive+0x26>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e1fb      	b.n	800523e <HAL_SPI_TransmitReceive+0x41e>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e4e:	f7fb fedd 	bl	8000c0c <HAL_GetTick>
 8004e52:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e5a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e6a:	7efb      	ldrb	r3, [r7, #27]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d00e      	beq.n	8004e8e <HAL_SPI_TransmitReceive+0x6e>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e76:	d106      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x66>
 8004e80:	7efb      	ldrb	r3, [r7, #27]
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d003      	beq.n	8004e8e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
 8004e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e8c:	e1cd      	b.n	800522a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x80>
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ea6:	e1c0      	b.n	800522a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d003      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	887a      	ldrh	r2, [r7, #2]
 8004ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	887a      	ldrh	r2, [r7, #2]
 8004ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	887a      	ldrh	r2, [r7, #2]
 8004ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	887a      	ldrh	r2, [r7, #2]
 8004ee8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004efe:	d802      	bhi.n	8004f06 <HAL_SPI_TransmitReceive+0xe6>
 8004f00:	8a3b      	ldrh	r3, [r7, #16]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d908      	bls.n	8004f18 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	e007      	b.n	8004f28 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d007      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f4e:	d97c      	bls.n	800504a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x13e>
 8004f58:	8a7b      	ldrh	r3, [r7, #18]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d169      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	881a      	ldrh	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	1c9a      	adds	r2, r3, #2
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f82:	e056      	b.n	8005032 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d11b      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x1aa>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d016      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x1aa>
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d113      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	881a      	ldrh	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	1c9a      	adds	r2, r3, #2
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d11c      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x1f2>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d016      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	b292      	uxth	r2, r2
 8004ff0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	1c9a      	adds	r2, r3, #2
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800500e:	2301      	movs	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005012:	f7fb fdfb 	bl	8000c0c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501e:	429a      	cmp	r2, r3
 8005020:	d807      	bhi.n	8005032 <HAL_SPI_TransmitReceive+0x212>
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d003      	beq.n	8005032 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005030:	e0fb      	b.n	800522a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1a3      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x164>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d19d      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x164>
 8005048:	e0df      	b.n	800520a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_SPI_TransmitReceive+0x23a>
 8005052:	8a7b      	ldrh	r3, [r7, #18]
 8005054:	2b01      	cmp	r3, #1
 8005056:	f040 80cb 	bne.w	80051f0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d912      	bls.n	800508a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b02      	subs	r3, #2
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005088:	e0b2      	b.n	80051f0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b0:	e09e      	b.n	80051f0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d134      	bne.n	800512a <HAL_SPI_TransmitReceive+0x30a>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d02f      	beq.n	800512a <HAL_SPI_TransmitReceive+0x30a>
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d12c      	bne.n	800512a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d912      	bls.n	8005100 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	881a      	ldrh	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b02      	subs	r3, #2
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050fe:	e012      	b.n	8005126 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	7812      	ldrb	r2, [r2, #0]
 800510c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d148      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x3aa>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d042      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d923      	bls.n	8005198 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	b292      	uxth	r2, r2
 800515c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b02      	subs	r3, #2
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d81f      	bhi.n	80051c6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	e016      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f103 020c 	add.w	r2, r3, #12
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051c6:	2301      	movs	r3, #1
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051ca:	f7fb fd1f 	bl	8000c0c <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d803      	bhi.n	80051e2 <HAL_SPI_TransmitReceive+0x3c2>
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d102      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x3c8>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051ee:	e01c      	b.n	800522a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f47f af5b 	bne.w	80050b2 <HAL_SPI_TransmitReceive+0x292>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	f47f af54 	bne.w	80050b2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f990 	bl	8005534 <SPI_EndRxTxTransaction>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	661a      	str	r2, [r3, #96]	; 0x60
 8005226:	e000      	b.n	800522a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005228:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800523a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800523e:	4618      	mov	r0, r3
 8005240:	3728      	adds	r7, #40	; 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005258:	f7fb fcd8 	bl	8000c0c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	4413      	add	r3, r2
 8005266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005268:	f7fb fcd0 	bl	8000c0c <HAL_GetTick>
 800526c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800526e:	4b39      	ldr	r3, [pc, #228]	; (8005354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	015b      	lsls	r3, r3, #5
 8005274:	0d1b      	lsrs	r3, r3, #20
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800527e:	e054      	b.n	800532a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d050      	beq.n	800532a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005288:	f7fb fcc0 	bl	8000c0c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	429a      	cmp	r2, r3
 8005296:	d902      	bls.n	800529e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d13d      	bne.n	800531a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b6:	d111      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c0:	d004      	beq.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ca:	d107      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d10f      	bne.n	8005306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e017      	b.n	800534a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3b01      	subs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4013      	ands	r3, r2
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	bf0c      	ite	eq
 800533a:	2301      	moveq	r3, #1
 800533c:	2300      	movne	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	429a      	cmp	r2, r3
 8005346:	d19b      	bne.n	8005280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000004 	.word	0x20000004

08005358 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800536a:	f7fb fc4f 	bl	8000c0c <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	4413      	add	r3, r2
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800537a:	f7fb fc47 	bl	8000c0c <HAL_GetTick>
 800537e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005388:	4b3d      	ldr	r3, [pc, #244]	; (8005480 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	00da      	lsls	r2, r3, #3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	0d1b      	lsrs	r3, r3, #20
 8005398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053a0:	e060      	b.n	8005464 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053a8:	d107      	bne.n	80053ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d050      	beq.n	8005464 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053c2:	f7fb fc23 	bl	8000c0c <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d902      	bls.n	80053d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d13d      	bne.n	8005454 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f0:	d111      	bne.n	8005416 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fa:	d004      	beq.n	8005406 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d107      	bne.n	8005416 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005414:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541e:	d10f      	bne.n	8005440 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800543e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e010      	b.n	8005476 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	3b01      	subs	r3, #1
 8005462:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4013      	ands	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d196      	bne.n	80053a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3728      	adds	r7, #40	; 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000004 	.word	0x20000004

08005484 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005498:	d111      	bne.n	80054be <SPI_EndRxTransaction+0x3a>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a2:	d004      	beq.n	80054ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ac:	d107      	bne.n	80054be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff febd 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e023      	b.n	800552c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ec:	d11d      	bne.n	800552a <SPI_EndRxTransaction+0xa6>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f6:	d004      	beq.n	8005502 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d113      	bne.n	800552a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2200      	movs	r2, #0
 800550a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff ff22 	bl	8005358 <SPI_WaitFifoStateUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551e:	f043 0220 	orr.w	r2, r3, #32
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e000      	b.n	800552c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2200      	movs	r2, #0
 8005548:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ff03 	bl	8005358 <SPI_WaitFifoStateUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e027      	b.n	80055b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	2180      	movs	r1, #128	; 0x80
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff fe68 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e014      	b.n	80055b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7ff fedc 	bl	8005358 <SPI_WaitFifoStateUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e000      	b.n	80055b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e097      	b.n	8005704 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7fb fa39 	bl	8000a60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f000 f907 	bl	8005828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005642:	f023 0303 	bic.w	r3, r3, #3
 8005646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	4313      	orrs	r3, r2
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005660:	f023 030c 	bic.w	r3, r3, #12
 8005664:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800566c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	4313      	orrs	r3, r2
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	011a      	lsls	r2, r3, #4
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	031b      	lsls	r3, r3, #12
 8005690:	4313      	orrs	r3, r2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	4313      	orrs	r3, r2
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005724:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800572c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005734:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d110      	bne.n	800575e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d102      	bne.n	8005748 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005742:	7b7b      	ldrb	r3, [r7, #13]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d001      	beq.n	800574c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e069      	b.n	8005820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575c:	e031      	b.n	80057c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d110      	bne.n	8005786 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005764:	7bbb      	ldrb	r3, [r7, #14]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800576a:	7b3b      	ldrb	r3, [r7, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d001      	beq.n	8005774 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e055      	b.n	8005820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005784:	e01d      	b.n	80057c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d108      	bne.n	800579e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005792:	7b7b      	ldrb	r3, [r7, #13]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d102      	bne.n	800579e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005798:	7b3b      	ldrb	r3, [r7, #12]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d001      	beq.n	80057a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e03e      	b.n	8005820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2202      	movs	r2, #2
 80057b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_TIM_Encoder_Start+0xc4>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d008      	beq.n	80057e0 <HAL_TIM_Encoder_Start+0xd4>
 80057ce:	e00f      	b.n	80057f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2201      	movs	r2, #1
 80057d6:	2100      	movs	r1, #0
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 f889 	bl	80058f0 <TIM_CCxChannelCmd>
      break;
 80057de:	e016      	b.n	800580e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2201      	movs	r2, #1
 80057e6:	2104      	movs	r1, #4
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 f881 	bl	80058f0 <TIM_CCxChannelCmd>
      break;
 80057ee:	e00e      	b.n	800580e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2201      	movs	r2, #1
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f879 	bl	80058f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	2104      	movs	r1, #4
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f872 	bl	80058f0 <TIM_CCxChannelCmd>
      break;
 800580c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <TIM_Base_SetConfig+0xbc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x20>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d108      	bne.n	800585a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <TIM_Base_SetConfig+0xbc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_Base_SetConfig+0x52>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005868:	d007      	beq.n	800587a <TIM_Base_SetConfig+0x52>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <TIM_Base_SetConfig+0xc0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_Base_SetConfig+0x52>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <TIM_Base_SetConfig+0xc4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0c      	ldr	r2, [pc, #48]	; (80058e4 <TIM_Base_SetConfig+0xbc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d007      	beq.n	80058c8 <TIM_Base_SetConfig+0xa0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a0b      	ldr	r2, [pc, #44]	; (80058e8 <TIM_Base_SetConfig+0xc0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_Base_SetConfig+0xa0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <TIM_Base_SetConfig+0xc4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d103      	bne.n	80058d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	615a      	str	r2, [r3, #20]
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	40012c00 	.word	0x40012c00
 80058e8:	40014400 	.word	0x40014400
 80058ec:	40014800 	.word	0x40014800

080058f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2201      	movs	r2, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e04a      	b.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d108      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005984:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a12      	ldr	r2, [pc, #72]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d10c      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40012c00 	.word	0x40012c00

080059fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a0c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a32:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	43db      	mvns	r3, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	4013      	ands	r3, r2
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a60:	b084      	sub	sp, #16
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	f107 0014 	add.w	r0, r7, #20
 8005a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	b004      	add	sp, #16
 8005aa0:	4770      	bx	lr
	...

08005aa4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b09d      	sub	sp, #116	; 0x74
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	78db      	ldrb	r3, [r3, #3]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d81f      	bhi.n	8005b16 <USB_ActivateEndpoint+0x72>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <USB_ActivateEndpoint+0x38>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005b09 	.word	0x08005b09
 8005ae4:	08005b1f 	.word	0x08005b1f
 8005ae8:	08005afb 	.word	0x08005afb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005aec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005af4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005af8:	e012      	b.n	8005b20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005afa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005afe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b02:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005b06:	e00b      	b.n	8005b20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005b14:	e004      	b.n	8005b20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005b1c:	e000      	b.n	8005b20 <USB_ActivateEndpoint+0x7c>
      break;
 8005b1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	b21b      	sxth	r3, r3
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	b21a      	sxth	r2, r3
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	b21b      	sxth	r3, r3
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b21b      	sxth	r3, r3
 8005b66:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	7b1b      	ldrb	r3, [r3, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8149 	bne.w	8005e28 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8084 	beq.w	8005ca8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00da      	lsls	r2, r3, #3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	88db      	ldrh	r3, [r3, #6]
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	827b      	strh	r3, [r7, #18]
 8005be2:	8a7b      	ldrh	r3, [r7, #18]
 8005be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <USB_ActivateEndpoint+0x180>
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	823b      	strh	r3, [r7, #16]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	441a      	add	r2, r3
 8005c0e:	8a3b      	ldrh	r3, [r7, #16]
 8005c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d020      	beq.n	8005c6e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c42:	81bb      	strh	r3, [r7, #12]
 8005c44:	89bb      	ldrh	r3, [r7, #12]
 8005c46:	f083 0320 	eor.w	r3, r3, #32
 8005c4a:	81bb      	strh	r3, [r7, #12]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	89bb      	ldrh	r3, [r7, #12]
 8005c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	8013      	strh	r3, [r2, #0]
 8005c6c:	e2a6      	b.n	80061bc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c84:	81fb      	strh	r3, [r7, #14]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	89fb      	ldrh	r3, [r7, #14]
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]
 8005ca6:	e289      	b.n	80061bc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	633b      	str	r3, [r7, #48]	; 0x30
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	4413      	add	r3, r2
 8005cba:	633b      	str	r3, [r7, #48]	; 0x30
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	00da      	lsls	r2, r3, #3
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	88db      	ldrh	r3, [r3, #6]
 8005cd0:	085b      	lsrs	r3, r3, #1
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	4413      	add	r3, r2
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	00da      	lsls	r2, r3, #3
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	2b3e      	cmp	r3, #62	; 0x3e
 8005d06:	d918      	bls.n	8005d3a <USB_ActivateEndpoint+0x296>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <USB_ActivateEndpoint+0x27e>
 8005d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	e029      	b.n	8005d8e <USB_ActivateEndpoint+0x2ea>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d112      	bne.n	8005d68 <USB_ActivateEndpoint+0x2c4>
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	e012      	b.n	8005d8e <USB_ActivateEndpoint+0x2ea>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <USB_ActivateEndpoint+0x2de>
 8005d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d7e:	3301      	adds	r3, #1
 8005d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	029b      	lsls	r3, r3, #10
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01b      	beq.n	8005dde <USB_ActivateEndpoint+0x33a>
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbc:	843b      	strh	r3, [r7, #32]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	8c3b      	ldrh	r3, [r7, #32]
 8005dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df4:	83fb      	strh	r3, [r7, #30]
 8005df6:	8bfb      	ldrh	r3, [r7, #30]
 8005df8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dfc:	83fb      	strh	r3, [r7, #30]
 8005dfe:	8bfb      	ldrh	r3, [r7, #30]
 8005e00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e04:	83fb      	strh	r3, [r7, #30]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	8bfb      	ldrh	r3, [r7, #30]
 8005e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]
 8005e26:	e1c9      	b.n	80061bc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d11e      	bne.n	8005e6e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8013      	strh	r3, [r2, #0]
 8005e6c:	e01d      	b.n	8005eaa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eba:	4413      	add	r3, r2
 8005ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	00da      	lsls	r2, r3, #3
 8005ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	891b      	ldrh	r3, [r3, #8]
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eee:	4413      	add	r3, r2
 8005ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	00da      	lsls	r2, r3, #3
 8005ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efa:	4413      	add	r3, r2
 8005efc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f00:	653b      	str	r3, [r7, #80]	; 0x50
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	895b      	ldrh	r3, [r3, #10]
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f10:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 8093 	bne.w	8006042 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <USB_ActivateEndpoint+0x4cc>
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <USB_ActivateEndpoint+0x51c>
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	441a      	add	r2, r3
 8005faa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fde:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fe0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fe2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fe6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	441a      	add	r2, r3
 8005ff2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006004:	b29b      	uxth	r3, r3
 8006006:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	441a      	add	r2, r3
 800602a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]
 8006040:	e0bc      	b.n	80061bc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006052:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01d      	beq.n	800609a <USB_ActivateEndpoint+0x5f6>
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006074:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01d      	beq.n	80060f2 <USB_ActivateEndpoint+0x64e>
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	78db      	ldrb	r3, [r3, #3]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d024      	beq.n	8006144 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006110:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006114:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006118:	f083 0320 	eor.w	r3, r3, #32
 800611c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800612e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613e:	b29b      	uxth	r3, r3
 8006140:	8013      	strh	r3, [r2, #0]
 8006142:	e01d      	b.n	8006180 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800616c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617c:	b29b      	uxth	r3, r3
 800617e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80061bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3774      	adds	r7, #116	; 0x74
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b08d      	sub	sp, #52	; 0x34
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	7b1b      	ldrb	r3, [r3, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f040 808e 	bne.w	80062fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d044      	beq.n	8006272 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	81bb      	strh	r3, [r7, #12]
 80061f6:	89bb      	ldrh	r3, [r7, #12]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01b      	beq.n	8006238 <USB_DeactivateEndpoint+0x6c>
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	817b      	strh	r3, [r7, #10]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	897b      	ldrh	r3, [r7, #10]
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624e:	813b      	strh	r3, [r7, #8]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	893b      	ldrh	r3, [r7, #8]
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
 8006270:	e192      	b.n	8006598 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	827b      	strh	r3, [r7, #18]
 8006280:	8a7b      	ldrh	r3, [r7, #18]
 8006282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01b      	beq.n	80062c2 <USB_DeactivateEndpoint+0xf6>
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a0:	823b      	strh	r3, [r7, #16]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	8a3b      	ldrh	r3, [r7, #16]
 80062ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062be:	b29b      	uxth	r3, r3
 80062c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d8:	81fb      	strh	r3, [r7, #14]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	441a      	add	r2, r3
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	8013      	strh	r3, [r2, #0]
 80062fa:	e14d      	b.n	8006598 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 80a5 	bne.w	8006450 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	843b      	strh	r3, [r7, #32]
 8006314:	8c3b      	ldrh	r3, [r7, #32]
 8006316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01b      	beq.n	8006356 <USB_DeactivateEndpoint+0x18a>
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006334:	83fb      	strh	r3, [r7, #30]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	441a      	add	r2, r3
 8006340:	8bfb      	ldrh	r3, [r7, #30]
 8006342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800634e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006352:	b29b      	uxth	r3, r3
 8006354:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	83bb      	strh	r3, [r7, #28]
 8006364:	8bbb      	ldrh	r3, [r7, #28]
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01b      	beq.n	80063a6 <USB_DeactivateEndpoint+0x1da>
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006384:	837b      	strh	r3, [r7, #26]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	8b7b      	ldrh	r3, [r7, #26]
 8006392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	833b      	strh	r3, [r7, #24]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	8b3b      	ldrh	r3, [r7, #24]
 80063ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063da:	b29b      	uxth	r3, r3
 80063dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	82fb      	strh	r3, [r7, #22]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	441a      	add	r2, r3
 8006400:	8afb      	ldrh	r3, [r7, #22]
 8006402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006412:	b29b      	uxth	r3, r3
 8006414:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642c:	82bb      	strh	r3, [r7, #20]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	8abb      	ldrh	r3, [r7, #20]
 800643a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644a:	b29b      	uxth	r3, r3
 800644c:	8013      	strh	r3, [r2, #0]
 800644e:	e0a3      	b.n	8006598 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800645e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01b      	beq.n	80064a0 <USB_DeactivateEndpoint+0x2d4>
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	441a      	add	r2, r3
 800648a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800648c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80064ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01b      	beq.n	80064f0 <USB_DeactivateEndpoint+0x324>
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29b      	uxth	r3, r3
 8006536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800654c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655c:	b29b      	uxth	r3, r3
 800655e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	847b      	strh	r3, [r7, #34]	; 0x22
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006594:	b29b      	uxth	r3, r3
 8006596:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3734      	adds	r7, #52	; 0x34
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b0c2      	sub	sp, #264	; 0x108
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	1d3b      	adds	r3, r7, #4
 80065ae:	6018      	str	r0, [r3, #0]
 80065b0:	463b      	mov	r3, r7
 80065b2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	f040 8509 	bne.w	8006fd2 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d905      	bls.n	80065dc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065da:	e004      	b.n	80065e6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	7b1b      	ldrb	r3, [r3, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d128      	bne.n	8006642 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6959      	ldr	r1, [r3, #20]
 80065f6:	463b      	mov	r3, r7
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	88da      	ldrh	r2, [r3, #6]
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006600:	b29b      	uxth	r3, r3
 8006602:	1d38      	adds	r0, r7, #4
 8006604:	6800      	ldr	r0, [r0, #0]
 8006606:	f001 f9da 	bl	80079be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800660a:	1d3b      	adds	r3, r7, #4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	1d3b      	adds	r3, r7, #4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	00da      	lsls	r2, r3, #3
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4413      	add	r3, r2
 800662e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	f000 bc9f 	b.w	8006f80 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006642:	463b      	mov	r3, r7
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	78db      	ldrb	r3, [r3, #3]
 8006648:	2b02      	cmp	r3, #2
 800664a:	f040 8347 	bne.w	8006cdc <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6a1a      	ldr	r2, [r3, #32]
 8006654:	463b      	mov	r3, r7
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	429a      	cmp	r2, r3
 800665c:	f240 82eb 	bls.w	8006c36 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	463b      	mov	r3, r7
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	463b      	mov	r3, r7
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006698:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800669c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066a4:	463b      	mov	r3, r7
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	463b      	mov	r3, r7
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066b6:	1d3b      	adds	r3, r7, #4
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8159 	beq.w	8006984 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066d2:	1d3b      	adds	r3, r7, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	633b      	str	r3, [r7, #48]	; 0x30
 80066d8:	463b      	mov	r3, r7
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d164      	bne.n	80067ac <USB_EPStartXfer+0x206>
 80066e2:	1d3b      	adds	r3, r7, #4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e8:	1d3b      	adds	r3, r7, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	4413      	add	r3, r2
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	00da      	lsls	r2, r3, #3
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	4413      	add	r3, r2
 8006706:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	2b3e      	cmp	r3, #62	; 0x3e
 8006712:	d91c      	bls.n	800674e <USB_EPStartXfer+0x1a8>
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006722:	f003 031f 	and.w	r3, r3, #31
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <USB_EPStartXfer+0x18e>
 800672a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800672e:	3b01      	subs	r3, #1
 8006730:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006734:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006738:	b29b      	uxth	r3, r3
 800673a:	029b      	lsls	r3, r3, #10
 800673c:	b29b      	uxth	r3, r3
 800673e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006746:	b29a      	uxth	r2, r3
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	e04a      	b.n	80067e4 <USB_EPStartXfer+0x23e>
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006752:	2b00      	cmp	r3, #0
 8006754:	d112      	bne.n	800677c <USB_EPStartXfer+0x1d6>
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006760:	b29a      	uxth	r2, r3
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e033      	b.n	80067e4 <USB_EPStartXfer+0x23e>
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <USB_EPStartXfer+0x1f6>
 8006792:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006796:	3301      	adds	r3, #1
 8006798:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800679c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	029b      	lsls	r3, r3, #10
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e01b      	b.n	80067e4 <USB_EPStartXfer+0x23e>
 80067ac:	463b      	mov	r3, r7
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d116      	bne.n	80067e4 <USB_EPStartXfer+0x23e>
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067be:	b29b      	uxth	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	4413      	add	r3, r2
 80067c6:	633b      	str	r3, [r7, #48]	; 0x30
 80067c8:	463b      	mov	r3, r7
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	00da      	lsls	r2, r3, #3
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	4413      	add	r3, r2
 80067d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	b29a      	uxth	r2, r3
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067e4:	463b      	mov	r3, r7
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	895b      	ldrh	r3, [r3, #10]
 80067ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ee:	463b      	mov	r3, r7
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6959      	ldr	r1, [r3, #20]
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067fe:	1d38      	adds	r0, r7, #4
 8006800:	6800      	ldr	r0, [r0, #0]
 8006802:	f001 f8dc 	bl	80079be <USB_WritePMA>
            ep->xfer_buff += len;
 8006806:	463b      	mov	r3, r7
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695a      	ldr	r2, [r3, #20]
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	441a      	add	r2, r3
 8006812:	463b      	mov	r3, r7
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6a1a      	ldr	r2, [r3, #32]
 800681e:	463b      	mov	r3, r7
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	429a      	cmp	r2, r3
 8006826:	d909      	bls.n	800683c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a1a      	ldr	r2, [r3, #32]
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006832:	1ad2      	subs	r2, r2, r3
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	621a      	str	r2, [r3, #32]
 800683a:	e008      	b.n	800684e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800683c:	463b      	mov	r3, r7
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006846:	463b      	mov	r3, r7
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2200      	movs	r2, #0
 800684c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800684e:	463b      	mov	r3, r7
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d164      	bne.n	8006922 <USB_EPStartXfer+0x37c>
 8006858:	1d3b      	adds	r3, r7, #4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	1d3b      	adds	r3, r7, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	4413      	add	r3, r2
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	463b      	mov	r3, r7
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	00da      	lsls	r2, r3, #3
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	4413      	add	r3, r2
 800687c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006886:	2b3e      	cmp	r3, #62	; 0x3e
 8006888:	d91c      	bls.n	80068c4 <USB_EPStartXfer+0x31e>
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006898:	f003 031f 	and.w	r3, r3, #31
 800689c:	2b00      	cmp	r3, #0
 800689e:	d104      	bne.n	80068aa <USB_EPStartXfer+0x304>
 80068a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a4:	3b01      	subs	r3, #1
 80068a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e04d      	b.n	8006960 <USB_EPStartXfer+0x3ba>
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d112      	bne.n	80068f2 <USB_EPStartXfer+0x34c>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	801a      	strh	r2, [r3, #0]
 80068f0:	e036      	b.n	8006960 <USB_EPStartXfer+0x3ba>
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <USB_EPStartXfer+0x36c>
 8006908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690c:	3301      	adds	r3, #1
 800690e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006916:	b29b      	uxth	r3, r3
 8006918:	029b      	lsls	r3, r3, #10
 800691a:	b29a      	uxth	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	801a      	strh	r2, [r3, #0]
 8006920:	e01e      	b.n	8006960 <USB_EPStartXfer+0x3ba>
 8006922:	463b      	mov	r3, r7
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d119      	bne.n	8006960 <USB_EPStartXfer+0x3ba>
 800692c:	1d3b      	adds	r3, r7, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	623b      	str	r3, [r7, #32]
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693a:	b29b      	uxth	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	4413      	add	r3, r2
 8006942:	623b      	str	r3, [r7, #32]
 8006944:	463b      	mov	r3, r7
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	00da      	lsls	r2, r3, #3
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	4413      	add	r3, r2
 8006950:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695a:	b29a      	uxth	r2, r3
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006960:	463b      	mov	r3, r7
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	891b      	ldrh	r3, [r3, #8]
 8006966:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800696a:	463b      	mov	r3, r7
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6959      	ldr	r1, [r3, #20]
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006974:	b29b      	uxth	r3, r3
 8006976:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800697a:	1d38      	adds	r0, r7, #4
 800697c:	6800      	ldr	r0, [r0, #0]
 800697e:	f001 f81e 	bl	80079be <USB_WritePMA>
 8006982:	e2fd      	b.n	8006f80 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006984:	463b      	mov	r3, r7
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d164      	bne.n	8006a58 <USB_EPStartXfer+0x4b2>
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699c:	b29b      	uxth	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a2:	4413      	add	r3, r2
 80069a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069a6:	463b      	mov	r3, r7
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	00da      	lsls	r2, r3, #3
 80069ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b0:	4413      	add	r3, r2
 80069b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069bc:	2b3e      	cmp	r3, #62	; 0x3e
 80069be:	d91c      	bls.n	80069fa <USB_EPStartXfer+0x454>
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d104      	bne.n	80069e0 <USB_EPStartXfer+0x43a>
 80069d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069da:	3b01      	subs	r3, #1
 80069dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	029b      	lsls	r3, r3, #10
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	e04d      	b.n	8006a96 <USB_EPStartXfer+0x4f0>
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d112      	bne.n	8006a28 <USB_EPStartXfer+0x482>
 8006a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	e036      	b.n	8006a96 <USB_EPStartXfer+0x4f0>
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <USB_EPStartXfer+0x4a2>
 8006a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a42:	3301      	adds	r3, #1
 8006a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	029b      	lsls	r3, r3, #10
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a54:	801a      	strh	r2, [r3, #0]
 8006a56:	e01e      	b.n	8006a96 <USB_EPStartXfer+0x4f0>
 8006a58:	463b      	mov	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d119      	bne.n	8006a96 <USB_EPStartXfer+0x4f0>
 8006a62:	1d3b      	adds	r3, r7, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	653b      	str	r3, [r7, #80]	; 0x50
 8006a68:	1d3b      	adds	r3, r7, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a76:	4413      	add	r3, r2
 8006a78:	653b      	str	r3, [r7, #80]	; 0x50
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	00da      	lsls	r2, r3, #3
 8006a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a84:	4413      	add	r3, r2
 8006a86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a96:	463b      	mov	r3, r7
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	891b      	ldrh	r3, [r3, #8]
 8006a9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6959      	ldr	r1, [r3, #20]
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ab0:	1d38      	adds	r0, r7, #4
 8006ab2:	6800      	ldr	r0, [r0, #0]
 8006ab4:	f000 ff83 	bl	80079be <USB_WritePMA>
            ep->xfer_buff += len;
 8006ab8:	463b      	mov	r3, r7
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac2:	441a      	add	r2, r3
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aca:	463b      	mov	r3, r7
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a1a      	ldr	r2, [r3, #32]
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d909      	bls.n	8006aee <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8006ada:	463b      	mov	r3, r7
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6a1a      	ldr	r2, [r3, #32]
 8006ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae4:	1ad2      	subs	r2, r2, r3
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	621a      	str	r2, [r3, #32]
 8006aec:	e008      	b.n	8006b00 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2200      	movs	r2, #0
 8006afe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b00:	1d3b      	adds	r3, r7, #4
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	643b      	str	r3, [r7, #64]	; 0x40
 8006b06:	463b      	mov	r3, r7
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d164      	bne.n	8006bda <USB_EPStartXfer+0x634>
 8006b10:	1d3b      	adds	r3, r7, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b16:	1d3b      	adds	r3, r7, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	4413      	add	r3, r2
 8006b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	00da      	lsls	r2, r3, #3
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	4413      	add	r3, r2
 8006b34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b40:	d91c      	bls.n	8006b7c <USB_EPStartXfer+0x5d6>
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <USB_EPStartXfer+0x5bc>
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	029b      	lsls	r3, r3, #10
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	e04a      	b.n	8006c12 <USB_EPStartXfer+0x66c>
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d112      	bne.n	8006baa <USB_EPStartXfer+0x604>
 8006b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	801a      	strh	r2, [r3, #0]
 8006b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e033      	b.n	8006c12 <USB_EPStartXfer+0x66c>
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <USB_EPStartXfer+0x624>
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	e01b      	b.n	8006c12 <USB_EPStartXfer+0x66c>
 8006bda:	463b      	mov	r3, r7
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d116      	bne.n	8006c12 <USB_EPStartXfer+0x66c>
 8006be4:	1d3b      	adds	r3, r7, #4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf2:	4413      	add	r3, r2
 8006bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	00da      	lsls	r2, r3, #3
 8006bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c12:	463b      	mov	r3, r7
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	895b      	ldrh	r3, [r3, #10]
 8006c18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c1c:	463b      	mov	r3, r7
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6959      	ldr	r1, [r3, #20]
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c2c:	1d38      	adds	r0, r7, #4
 8006c2e:	6800      	ldr	r0, [r0, #0]
 8006c30:	f000 fec5 	bl	80079be <USB_WritePMA>
 8006c34:	e1a4      	b.n	8006f80 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c36:	463b      	mov	r3, r7
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c40:	1d3b      	adds	r3, r7, #4
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	463b      	mov	r3, r7
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c5e:	1d3b      	adds	r3, r7, #4
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	463b      	mov	r3, r7
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c84:	1d3b      	adds	r3, r7, #4
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8a:	1d3b      	adds	r3, r7, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c98:	4413      	add	r3, r2
 8006c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	00da      	lsls	r2, r3, #3
 8006ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	891b      	ldrh	r3, [r3, #8]
 8006cbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6959      	ldr	r1, [r3, #20]
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cd2:	1d38      	adds	r0, r7, #4
 8006cd4:	6800      	ldr	r0, [r0, #0]
 8006cd6:	f000 fe72 	bl	80079be <USB_WritePMA>
 8006cda:	e151      	b.n	8006f80 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a1a      	ldr	r2, [r3, #32]
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	1ad2      	subs	r2, r2, r3
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cee:	1d3b      	adds	r3, r7, #4
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 809b 	beq.w	8006e40 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d0a:	1d3b      	adds	r3, r7, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d10:	463b      	mov	r3, r7
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d164      	bne.n	8006de4 <USB_EPStartXfer+0x83e>
 8006d1a:	1d3b      	adds	r3, r7, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d20:	1d3b      	adds	r3, r7, #4
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d2e:	4413      	add	r3, r2
 8006d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d32:	463b      	mov	r3, r7
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	00da      	lsls	r2, r3, #3
 8006d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d42:	667b      	str	r3, [r7, #100]	; 0x64
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d48:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4a:	d91c      	bls.n	8006d86 <USB_EPStartXfer+0x7e0>
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <USB_EPStartXfer+0x7c6>
 8006d62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d66:	3b01      	subs	r3, #1
 8006d68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e04a      	b.n	8006e1c <USB_EPStartXfer+0x876>
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d112      	bne.n	8006db4 <USB_EPStartXfer+0x80e>
 8006d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e033      	b.n	8006e1c <USB_EPStartXfer+0x876>
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <USB_EPStartXfer+0x82e>
 8006dca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	029b      	lsls	r3, r3, #10
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	e01b      	b.n	8006e1c <USB_EPStartXfer+0x876>
 8006de4:	463b      	mov	r3, r7
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d116      	bne.n	8006e1c <USB_EPStartXfer+0x876>
 8006dee:	1d3b      	adds	r3, r7, #4
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dfc:	4413      	add	r3, r2
 8006dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8006e00:	463b      	mov	r3, r7
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	00da      	lsls	r2, r3, #3
 8006e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	895b      	ldrh	r3, [r3, #10]
 8006e22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e26:	463b      	mov	r3, r7
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6959      	ldr	r1, [r3, #20]
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e36:	1d38      	adds	r0, r7, #4
 8006e38:	6800      	ldr	r0, [r0, #0]
 8006e3a:	f000 fdc0 	bl	80079be <USB_WritePMA>
 8006e3e:	e09f      	b.n	8006f80 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d164      	bne.n	8006f14 <USB_EPStartXfer+0x96e>
 8006e4a:	1d3b      	adds	r3, r7, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e50:	1d3b      	adds	r3, r7, #4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e5e:	4413      	add	r3, r2
 8006e60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	00da      	lsls	r2, r3, #3
 8006e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e72:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e78:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7a:	d91c      	bls.n	8006eb6 <USB_EPStartXfer+0x910>
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d104      	bne.n	8006e9c <USB_EPStartXfer+0x8f6>
 8006e92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e96:	3b01      	subs	r3, #1
 8006e98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	e053      	b.n	8006f5e <USB_EPStartXfer+0x9b8>
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d112      	bne.n	8006ee4 <USB_EPStartXfer+0x93e>
 8006ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ecc:	801a      	strh	r2, [r3, #0]
 8006ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	e03c      	b.n	8006f5e <USB_EPStartXfer+0x9b8>
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <USB_EPStartXfer+0x95e>
 8006efa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006efe:	3301      	adds	r3, #1
 8006f00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	e024      	b.n	8006f5e <USB_EPStartXfer+0x9b8>
 8006f14:	463b      	mov	r3, r7
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d11f      	bne.n	8006f5e <USB_EPStartXfer+0x9b8>
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f26:	1d3b      	adds	r3, r7, #4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f36:	4413      	add	r3, r2
 8006f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	00da      	lsls	r2, r3, #3
 8006f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f48:	4413      	add	r3, r2
 8006f4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f5e:	463b      	mov	r3, r7
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	891b      	ldrh	r3, [r3, #8]
 8006f64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f68:	463b      	mov	r3, r7
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6959      	ldr	r1, [r3, #20]
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f78:	1d38      	adds	r0, r7, #4
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	f000 fd1f 	bl	80079be <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f80:	1d3b      	adds	r3, r7, #4
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	463b      	mov	r3, r7
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9a:	817b      	strh	r3, [r7, #10]
 8006f9c:	897b      	ldrh	r3, [r7, #10]
 8006f9e:	f083 0310 	eor.w	r3, r3, #16
 8006fa2:	817b      	strh	r3, [r7, #10]
 8006fa4:	897b      	ldrh	r3, [r7, #10]
 8006fa6:	f083 0320 	eor.w	r3, r3, #32
 8006faa:	817b      	strh	r3, [r7, #10]
 8006fac:	1d3b      	adds	r3, r7, #4
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	441a      	add	r2, r3
 8006fba:	897b      	ldrh	r3, [r7, #10]
 8006fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	8013      	strh	r3, [r2, #0]
 8006fd0:	e3b5      	b.n	800773e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	7b1b      	ldrb	r3, [r3, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 8090 	bne.w	80070fe <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006fde:	463b      	mov	r3, r7
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699a      	ldr	r2, [r3, #24]
 8006fe4:	463b      	mov	r3, r7
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d90e      	bls.n	800700c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8006fee:	463b      	mov	r3, r7
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	463b      	mov	r3, r7
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	619a      	str	r2, [r3, #24]
 800700a:	e008      	b.n	800701e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800700c:	463b      	mov	r3, r7
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007016:	463b      	mov	r3, r7
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2200      	movs	r2, #0
 800701c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800701e:	1d3b      	adds	r3, r7, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007036:	4413      	add	r3, r2
 8007038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	00da      	lsls	r2, r3, #3
 8007044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007048:	4413      	add	r3, r2
 800704a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800704e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007056:	2b3e      	cmp	r3, #62	; 0x3e
 8007058:	d91d      	bls.n	8007096 <USB_EPStartXfer+0xaf0>
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <USB_EPStartXfer+0xad4>
 8007070:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007074:	3b01      	subs	r3, #1
 8007076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800707a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800707e:	b29b      	uxth	r3, r3
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	b29b      	uxth	r3, r3
 8007084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708c:	b29a      	uxth	r2, r3
 800708e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e325      	b.n	80076e2 <USB_EPStartXfer+0x113c>
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709a:	2b00      	cmp	r3, #0
 800709c:	d116      	bne.n	80070cc <USB_EPStartXfer+0xb26>
 800709e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	e30a      	b.n	80076e2 <USB_EPStartXfer+0x113c>
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <USB_EPStartXfer+0xb46>
 80070e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070e6:	3301      	adds	r3, #1
 80070e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	029b      	lsls	r3, r3, #10
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e2f1      	b.n	80076e2 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80070fe:	463b      	mov	r3, r7
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	78db      	ldrb	r3, [r3, #3]
 8007104:	2b02      	cmp	r3, #2
 8007106:	f040 818f 	bne.w	8007428 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800710a:	463b      	mov	r3, r7
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d175      	bne.n	8007200 <USB_EPStartXfer+0xc5a>
 8007114:	1d3b      	adds	r3, r7, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007124:	b29b      	uxth	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800712c:	4413      	add	r3, r2
 800712e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	00da      	lsls	r2, r3, #3
 800713a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800713e:	4413      	add	r3, r2
 8007140:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007148:	463b      	mov	r3, r7
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b3e      	cmp	r3, #62	; 0x3e
 8007150:	d91f      	bls.n	8007192 <USB_EPStartXfer+0xbec>
 8007152:	463b      	mov	r3, r7
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800715e:	463b      	mov	r3, r7
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 031f 	and.w	r3, r3, #31
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <USB_EPStartXfer+0xbd0>
 800716c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007170:	3b01      	subs	r3, #1
 8007172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717a:	b29b      	uxth	r3, r3
 800717c:	029b      	lsls	r3, r3, #10
 800717e:	b29b      	uxth	r3, r3
 8007180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007188:	b29a      	uxth	r2, r3
 800718a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	e05c      	b.n	800724c <USB_EPStartXfer+0xca6>
 8007192:	463b      	mov	r3, r7
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d116      	bne.n	80071ca <USB_EPStartXfer+0xc24>
 800719c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071c6:	801a      	strh	r2, [r3, #0]
 80071c8:	e040      	b.n	800724c <USB_EPStartXfer+0xca6>
 80071ca:	463b      	mov	r3, r7
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071d6:	463b      	mov	r3, r7
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <USB_EPStartXfer+0xc48>
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e8:	3301      	adds	r3, #1
 80071ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	e025      	b.n	800724c <USB_EPStartXfer+0xca6>
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d120      	bne.n	800724c <USB_EPStartXfer+0xca6>
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007212:	1d3b      	adds	r3, r7, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007222:	4413      	add	r3, r2
 8007224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007228:	463b      	mov	r3, r7
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	00da      	lsls	r2, r3, #3
 8007230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007234:	4413      	add	r3, r2
 8007236:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800723a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800723e:	463b      	mov	r3, r7
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	b29a      	uxth	r2, r3
 8007246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007254:	463b      	mov	r3, r7
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d175      	bne.n	800734a <USB_EPStartXfer+0xda4>
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007276:	4413      	add	r3, r2
 8007278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800727c:	463b      	mov	r3, r7
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	00da      	lsls	r2, r3, #3
 8007284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007288:	4413      	add	r3, r2
 800728a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800728e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007292:	463b      	mov	r3, r7
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b3e      	cmp	r3, #62	; 0x3e
 800729a:	d91f      	bls.n	80072dc <USB_EPStartXfer+0xd36>
 800729c:	463b      	mov	r3, r7
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072a8:	463b      	mov	r3, r7
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 031f 	and.w	r3, r3, #31
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <USB_EPStartXfer+0xd1a>
 80072b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ba:	3b01      	subs	r3, #1
 80072bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	029b      	lsls	r3, r3, #10
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	e058      	b.n	800738e <USB_EPStartXfer+0xde8>
 80072dc:	463b      	mov	r3, r7
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d116      	bne.n	8007314 <USB_EPStartXfer+0xd6e>
 80072e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	b29b      	uxth	r3, r3
 8007302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e03c      	b.n	800738e <USB_EPStartXfer+0xde8>
 8007314:	463b      	mov	r3, r7
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007320:	463b      	mov	r3, r7
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <USB_EPStartXfer+0xd92>
 800732e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007332:	3301      	adds	r3, #1
 8007334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733c:	b29b      	uxth	r3, r3
 800733e:	029b      	lsls	r3, r3, #10
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	e021      	b.n	800738e <USB_EPStartXfer+0xde8>
 800734a:	463b      	mov	r3, r7
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d11c      	bne.n	800738e <USB_EPStartXfer+0xde8>
 8007354:	1d3b      	adds	r3, r7, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007364:	4413      	add	r3, r2
 8007366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	00da      	lsls	r2, r3, #3
 8007372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007376:	4413      	add	r3, r2
 8007378:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800737c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007380:	463b      	mov	r3, r7
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	b29a      	uxth	r2, r3
 8007388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800738c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800738e:	463b      	mov	r3, r7
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 81a4 	beq.w	80076e2 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800739a:	1d3b      	adds	r3, r7, #4
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	463b      	mov	r3, r7
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d005      	beq.n	80073c6 <USB_EPStartXfer+0xe20>
 80073ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10d      	bne.n	80073e2 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 8187 	bne.w	80076e2 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 8180 	bne.w	80076e2 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073e2:	1d3b      	adds	r3, r7, #4
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	463b      	mov	r3, r7
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007400:	1d3b      	adds	r3, r7, #4
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	463b      	mov	r3, r7
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	441a      	add	r2, r3
 800740e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007422:	b29b      	uxth	r3, r3
 8007424:	8013      	strh	r3, [r2, #0]
 8007426:	e15c      	b.n	80076e2 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007428:	463b      	mov	r3, r7
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	78db      	ldrb	r3, [r3, #3]
 800742e:	2b01      	cmp	r3, #1
 8007430:	f040 8155 	bne.w	80076de <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007434:	463b      	mov	r3, r7
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	463b      	mov	r3, r7
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	429a      	cmp	r2, r3
 8007442:	d90e      	bls.n	8007462 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8007444:	463b      	mov	r3, r7
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800744e:	463b      	mov	r3, r7
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699a      	ldr	r2, [r3, #24]
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007458:	1ad2      	subs	r2, r2, r3
 800745a:	463b      	mov	r3, r7
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	619a      	str	r2, [r3, #24]
 8007460:	e008      	b.n	8007474 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8007462:	463b      	mov	r3, r7
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800746c:	463b      	mov	r3, r7
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2200      	movs	r2, #0
 8007472:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007474:	463b      	mov	r3, r7
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d16f      	bne.n	800755e <USB_EPStartXfer+0xfb8>
 800747e:	1d3b      	adds	r3, r7, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007486:	1d3b      	adds	r3, r7, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748e:	b29b      	uxth	r3, r3
 8007490:	461a      	mov	r2, r3
 8007492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007496:	4413      	add	r3, r2
 8007498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800749c:	463b      	mov	r3, r7
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	00da      	lsls	r2, r3, #3
 80074a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074a8:	4413      	add	r3, r2
 80074aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b6:	2b3e      	cmp	r3, #62	; 0x3e
 80074b8:	d91d      	bls.n	80074f6 <USB_EPStartXfer+0xf50>
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <USB_EPStartXfer+0xf34>
 80074d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d4:	3b01      	subs	r3, #1
 80074d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074de:	b29b      	uxth	r3, r3
 80074e0:	029b      	lsls	r3, r3, #10
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	e058      	b.n	80075a8 <USB_EPStartXfer+0x1002>
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d116      	bne.n	800752c <USB_EPStartXfer+0xf86>
 80074fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	b29b      	uxth	r3, r3
 8007506:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800750a:	b29a      	uxth	r2, r3
 800750c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800751e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007522:	b29a      	uxth	r2, r3
 8007524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	e03d      	b.n	80075a8 <USB_EPStartXfer+0x1002>
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d004      	beq.n	800754c <USB_EPStartXfer+0xfa6>
 8007542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007546:	3301      	adds	r3, #1
 8007548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800754c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007550:	b29b      	uxth	r3, r3
 8007552:	029b      	lsls	r3, r3, #10
 8007554:	b29a      	uxth	r2, r3
 8007556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e024      	b.n	80075a8 <USB_EPStartXfer+0x1002>
 800755e:	463b      	mov	r3, r7
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	785b      	ldrb	r3, [r3, #1]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d11f      	bne.n	80075a8 <USB_EPStartXfer+0x1002>
 8007568:	1d3b      	adds	r3, r7, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007578:	b29b      	uxth	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007580:	4413      	add	r3, r2
 8007582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007586:	463b      	mov	r3, r7
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	00da      	lsls	r2, r3, #3
 800758e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007592:	4413      	add	r3, r2
 8007594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	1d3b      	adds	r3, r7, #4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075b0:	463b      	mov	r3, r7
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d16f      	bne.n	800769a <USB_EPStartXfer+0x10f4>
 80075ba:	1d3b      	adds	r3, r7, #4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075d2:	4413      	add	r3, r2
 80075d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075d8:	463b      	mov	r3, r7
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	00da      	lsls	r2, r3, #3
 80075e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075e4:	4413      	add	r3, r2
 80075e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f2:	2b3e      	cmp	r3, #62	; 0x3e
 80075f4:	d91d      	bls.n	8007632 <USB_EPStartXfer+0x108c>
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	2b00      	cmp	r3, #0
 800760a:	d104      	bne.n	8007616 <USB_EPStartXfer+0x1070>
 800760c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007610:	3b01      	subs	r3, #1
 8007612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761a:	b29b      	uxth	r3, r3
 800761c:	029b      	lsls	r3, r3, #10
 800761e:	b29b      	uxth	r3, r3
 8007620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007628:	b29a      	uxth	r2, r3
 800762a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800762e:	801a      	strh	r2, [r3, #0]
 8007630:	e057      	b.n	80076e2 <USB_EPStartXfer+0x113c>
 8007632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007636:	2b00      	cmp	r3, #0
 8007638:	d116      	bne.n	8007668 <USB_EPStartXfer+0x10c2>
 800763a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007646:	b29a      	uxth	r2, r3
 8007648:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800764c:	801a      	strh	r2, [r3, #0]
 800764e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e03c      	b.n	80076e2 <USB_EPStartXfer+0x113c>
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <USB_EPStartXfer+0x10e2>
 800767e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007682:	3301      	adds	r3, #1
 8007684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768c:	b29b      	uxth	r3, r3
 800768e:	029b      	lsls	r3, r3, #10
 8007690:	b29a      	uxth	r2, r3
 8007692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	e023      	b.n	80076e2 <USB_EPStartXfer+0x113c>
 800769a:	463b      	mov	r3, r7
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	785b      	ldrb	r3, [r3, #1]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d11e      	bne.n	80076e2 <USB_EPStartXfer+0x113c>
 80076a4:	1d3b      	adds	r3, r7, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076b4:	4413      	add	r3, r2
 80076b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076ba:	463b      	mov	r3, r7
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	00da      	lsls	r2, r3, #3
 80076c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076c6:	4413      	add	r3, r2
 80076c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	e001      	b.n	80076e2 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e02e      	b.n	8007740 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076e2:	1d3b      	adds	r3, r7, #4
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	463b      	mov	r3, r7
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007700:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007704:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007708:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800770c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007710:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007714:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007718:	1d3b      	adds	r3, r7, #4
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	463b      	mov	r3, r7
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	441a      	add	r2, r3
 8007726:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800772a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800773a:	b29b      	uxth	r3, r3
 800773c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d020      	beq.n	800779e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007772:	81bb      	strh	r3, [r7, #12]
 8007774:	89bb      	ldrh	r3, [r7, #12]
 8007776:	f083 0310 	eor.w	r3, r3, #16
 800777a:	81bb      	strh	r3, [r7, #12]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	89bb      	ldrh	r3, [r7, #12]
 8007788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007798:	b29b      	uxth	r3, r3
 800779a:	8013      	strh	r3, [r2, #0]
 800779c:	e01f      	b.n	80077de <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b4:	81fb      	strh	r3, [r7, #14]
 80077b6:	89fb      	ldrh	r3, [r7, #14]
 80077b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077bc:	81fb      	strh	r3, [r7, #14]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	441a      	add	r2, r3
 80077c8:	89fb      	ldrh	r3, [r7, #14]
 80077ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	7b1b      	ldrb	r3, [r3, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f040 809d 	bne.w	800793a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d04c      	beq.n	80078a2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	823b      	strh	r3, [r7, #16]
 8007816:	8a3b      	ldrh	r3, [r7, #16]
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01b      	beq.n	8007858 <USB_EPClearStall+0x6c>
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007836:	81fb      	strh	r3, [r7, #14]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	89fb      	ldrh	r3, [r7, #14]
 8007844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007850:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007854:	b29b      	uxth	r3, r3
 8007856:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	78db      	ldrb	r3, [r3, #3]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d06c      	beq.n	800793a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007876:	81bb      	strh	r3, [r7, #12]
 8007878:	89bb      	ldrh	r3, [r7, #12]
 800787a:	f083 0320 	eor.w	r3, r3, #32
 800787e:	81bb      	strh	r3, [r7, #12]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	441a      	add	r2, r3
 800788a:	89bb      	ldrh	r3, [r7, #12]
 800788c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789c:	b29b      	uxth	r3, r3
 800789e:	8013      	strh	r3, [r2, #0]
 80078a0:	e04b      	b.n	800793a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	82fb      	strh	r3, [r7, #22]
 80078b0:	8afb      	ldrh	r3, [r7, #22]
 80078b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01b      	beq.n	80078f2 <USB_EPClearStall+0x106>
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d0:	82bb      	strh	r3, [r7, #20]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	441a      	add	r2, r3
 80078dc:	8abb      	ldrh	r3, [r7, #20]
 80078de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007908:	827b      	strh	r3, [r7, #18]
 800790a:	8a7b      	ldrh	r3, [r7, #18]
 800790c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007910:	827b      	strh	r3, [r7, #18]
 8007912:	8a7b      	ldrh	r3, [r7, #18]
 8007914:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007918:	827b      	strh	r3, [r7, #18]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	441a      	add	r2, r3
 8007924:	8a7b      	ldrh	r3, [r7, #18]
 8007926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800792e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007936:	b29b      	uxth	r3, r3
 8007938:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	371c      	adds	r7, #28
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d103      	bne.n	8007962 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2280      	movs	r2, #128	; 0x80
 800795e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800797e:	b29b      	uxth	r3, r3
 8007980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007988:	b29a      	uxth	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80079b0:	68fb      	ldr	r3, [r7, #12]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079be:	b480      	push	{r7}
 80079c0:	b08d      	sub	sp, #52	; 0x34
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	4611      	mov	r1, r2
 80079ca:	461a      	mov	r2, r3
 80079cc:	460b      	mov	r3, r1
 80079ce:	80fb      	strh	r3, [r7, #6]
 80079d0:	4613      	mov	r3, r2
 80079d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079d4:	88bb      	ldrh	r3, [r7, #4]
 80079d6:	3301      	adds	r3, #1
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079e4:	88fa      	ldrh	r2, [r7, #6]
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079f4:	e01b      	b.n	8007a2e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	3301      	adds	r3, #1
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	3302      	adds	r3, #2
 8007a20:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	3301      	adds	r3, #1
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e0      	bne.n	80079f6 <USB_WritePMA+0x38>
  }
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	3734      	adds	r7, #52	; 0x34
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b08b      	sub	sp, #44	; 0x2c
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	461a      	mov	r2, r3
 8007a50:	460b      	mov	r3, r1
 8007a52:	80fb      	strh	r3, [r7, #6]
 8007a54:	4613      	mov	r3, r2
 8007a56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a58:	88bb      	ldrh	r3, [r7, #4]
 8007a5a:	085b      	lsrs	r3, r3, #1
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a68:	88fa      	ldrh	r2, [r7, #6]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a72:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
 8007a78:	e018      	b.n	8007aac <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	3302      	adds	r3, #2
 8007a86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	3301      	adds	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	0a1b      	lsrs	r3, r3, #8
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e3      	bne.n	8007a7a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ab2:	88bb      	ldrh	r3, [r7, #4]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	701a      	strb	r2, [r3, #0]
  }
}
 8007ace:	bf00      	nop
 8007ad0:	372c      	adds	r7, #44	; 0x2c
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007ae6:	2010      	movs	r0, #16
 8007ae8:	f001 fef0 	bl	80098cc <USBD_static_malloc>
 8007aec:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007afc:	2302      	movs	r3, #2
 8007afe:	e01b      	b.n	8007b38 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7c1b      	ldrb	r3, [r3, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d103      	bne.n	8007b18 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2207      	movs	r2, #7
 8007b14:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007b16:	e002      	b.n	8007b1e <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	220a      	movs	r2, #10
 8007b1c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007b1e:	2304      	movs	r3, #4
 8007b20:	2203      	movs	r2, #3
 8007b22:	2181      	movs	r1, #129	; 0x81
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fd8a 	bl	800963e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007b4c:	2181      	movs	r1, #129	; 0x81
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 fd9b 	bl	800968a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 feb9 	bl	80098e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b98:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e0e8      	b.n	8007d7e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d046      	beq.n	8007c46 <USBD_HID_Setup+0xbe>
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	f040 80d8 	bne.w	8007d6e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	3b02      	subs	r3, #2
 8007bc4:	2b09      	cmp	r3, #9
 8007bc6:	d836      	bhi.n	8007c36 <USBD_HID_Setup+0xae>
 8007bc8:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <USBD_HID_Setup+0x48>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c27 	.word	0x08007c27
 8007bd4:	08007c07 	.word	0x08007c07
 8007bd8:	08007c37 	.word	0x08007c37
 8007bdc:	08007c37 	.word	0x08007c37
 8007be0:	08007c37 	.word	0x08007c37
 8007be4:	08007c37 	.word	0x08007c37
 8007be8:	08007c37 	.word	0x08007c37
 8007bec:	08007c37 	.word	0x08007c37
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007bf9 	.word	0x08007bf9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	885b      	ldrh	r3, [r3, #2]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	601a      	str	r2, [r3, #0]
          break;
 8007c04:	e01e      	b.n	8007c44 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 f9d8 	bl	8008fc2 <USBD_CtlSendData>
          break;
 8007c12:	e017      	b.n	8007c44 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	885b      	ldrh	r3, [r3, #2]
 8007c18:	0a1b      	lsrs	r3, r3, #8
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	605a      	str	r2, [r3, #4]
          break;
 8007c24:	e00e      	b.n	8007c44 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 f9c7 	bl	8008fc2 <USBD_CtlSendData>
          break;
 8007c34:	e006      	b.n	8007c44 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 f951 	bl	8008ee0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	75fb      	strb	r3, [r7, #23]
          break;
 8007c42:	bf00      	nop
      }
      break;
 8007c44:	e09a      	b.n	8007d7c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	2b0b      	cmp	r3, #11
 8007c4c:	f200 8086 	bhi.w	8007d5c <USBD_HID_Setup+0x1d4>
 8007c50:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <USBD_HID_Setup+0xd0>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007c89 	.word	0x08007c89
 8007c5c:	08007d6b 	.word	0x08007d6b
 8007c60:	08007d5d 	.word	0x08007d5d
 8007c64:	08007d5d 	.word	0x08007d5d
 8007c68:	08007d5d 	.word	0x08007d5d
 8007c6c:	08007d5d 	.word	0x08007d5d
 8007c70:	08007cb3 	.word	0x08007cb3
 8007c74:	08007d5d 	.word	0x08007d5d
 8007c78:	08007d5d 	.word	0x08007d5d
 8007c7c:	08007d5d 	.word	0x08007d5d
 8007c80:	08007d0b 	.word	0x08007d0b
 8007c84:	08007d35 	.word	0x08007d35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d107      	bne.n	8007ca4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c94:	f107 030a 	add.w	r3, r7, #10
 8007c98:	2202      	movs	r2, #2
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 f990 	bl	8008fc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ca2:	e063      	b.n	8007d6c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f91a 	bl	8008ee0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb0:	e05c      	b.n	8007d6c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b22      	cmp	r3, #34	; 0x22
 8007cbc:	d108      	bne.n	8007cd0 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	88db      	ldrh	r3, [r3, #6]
 8007cc2:	2b4a      	cmp	r3, #74	; 0x4a
 8007cc4:	bf28      	it	cs
 8007cc6:	234a      	movcs	r3, #74	; 0x4a
 8007cc8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007cca:	4b2f      	ldr	r3, [pc, #188]	; (8007d88 <USBD_HID_Setup+0x200>)
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	e015      	b.n	8007cfc <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	0a1b      	lsrs	r3, r3, #8
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b21      	cmp	r3, #33	; 0x21
 8007cda:	d108      	bne.n	8007cee <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007cdc:	4b2b      	ldr	r3, [pc, #172]	; (8007d8c <USBD_HID_Setup+0x204>)
 8007cde:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	2b09      	cmp	r3, #9
 8007ce6:	bf28      	it	cs
 8007ce8:	2309      	movcs	r3, #9
 8007cea:	82bb      	strh	r3, [r7, #20]
 8007cec:	e006      	b.n	8007cfc <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f8f5 	bl	8008ee0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	75fb      	strb	r3, [r7, #23]
            break;
 8007cfa:	e037      	b.n	8007d6c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cfc:	8abb      	ldrh	r3, [r7, #20]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	6939      	ldr	r1, [r7, #16]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 f95d 	bl	8008fc2 <USBD_CtlSendData>
          break;
 8007d08:	e030      	b.n	8007d6c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d107      	bne.n	8007d26 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 f94f 	bl	8008fc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d24:	e022      	b.n	8007d6c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f8d9 	bl	8008ee0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	75fb      	strb	r3, [r7, #23]
          break;
 8007d32:	e01b      	b.n	8007d6c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d106      	bne.n	8007d4e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	885b      	ldrh	r3, [r3, #2]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d4c:	e00e      	b.n	8007d6c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 f8c5 	bl	8008ee0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d56:	2303      	movs	r3, #3
 8007d58:	75fb      	strb	r3, [r7, #23]
          break;
 8007d5a:	e007      	b.n	8007d6c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 f8be 	bl	8008ee0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	75fb      	strb	r3, [r7, #23]
          break;
 8007d68:	e000      	b.n	8007d6c <USBD_HID_Setup+0x1e4>
          break;
 8007d6a:	bf00      	nop
      }
      break;
 8007d6c:	e006      	b.n	8007d7c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 f8b5 	bl	8008ee0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d76:	2303      	movs	r3, #3
 8007d78:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	200000cc 	.word	0x200000cc
 8007d8c:	200000b4 	.word	0x200000b4

08007d90 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007da4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e013      	b.n	8007dd8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d10c      	bne.n	8007dd6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	7b1b      	ldrb	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d108      	bne.n	8007dd6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	2181      	movs	r1, #129	; 0x81
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f001 fd03 	bl	80097dc <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2222      	movs	r2, #34	; 0x22
 8007dec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007dee:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	20000048 	.word	0x20000048

08007e00 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2222      	movs	r2, #34	; 0x22
 8007e0c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007e0e:	4b03      	ldr	r3, [pc, #12]	; (8007e1c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	2000006c 	.word	0x2000006c

08007e20 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2222      	movs	r2, #34	; 0x22
 8007e2c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007e2e:	4b03      	ldr	r3, [pc, #12]	; (8007e3c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000090 	.word	0x20000090

08007e40 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e52:	2200      	movs	r2, #0
 8007e54:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	220a      	movs	r2, #10
 8007e70:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007e72:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	200000c0 	.word	0x200000c0

08007e84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e01f      	b.n	8007edc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	79fa      	ldrb	r2, [r7, #7]
 8007ece:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f001 fb49 	bl	8009568 <USBD_LL_Init>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e016      	b.n	8007f2a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	f107 020e 	add.w	r2, r7, #14
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4798      	blx	r3
 8007f20:	4602      	mov	r2, r0
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fb64 	bl	8009608 <USBD_LL_Start>
 8007f40:	4603      	mov	r3, r0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d009      	beq.n	8007f8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	78fa      	ldrb	r2, [r7, #3]
 8007f84:	4611      	mov	r1, r2
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
  }

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 ff46 	bl	8008e6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ffc:	f003 031f 	and.w	r3, r3, #31
 8008000:	2b02      	cmp	r3, #2
 8008002:	d01a      	beq.n	800803a <USBD_LL_SetupStage+0x72>
 8008004:	2b02      	cmp	r3, #2
 8008006:	d822      	bhi.n	800804e <USBD_LL_SetupStage+0x86>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <USBD_LL_SetupStage+0x4a>
 800800c:	2b01      	cmp	r3, #1
 800800e:	d00a      	beq.n	8008026 <USBD_LL_SetupStage+0x5e>
 8008010:	e01d      	b.n	800804e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9ee 	bl	80083fc <USBD_StdDevReq>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]
      break;
 8008024:	e020      	b.n	8008068 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa52 	bl	80084d8 <USBD_StdItfReq>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
      break;
 8008038:	e016      	b.n	8008068 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa91 	bl	800856a <USBD_StdEPReq>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]
      break;
 800804c:	e00c      	b.n	8008068 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008054:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008058:	b2db      	uxtb	r3, r3
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 fb33 	bl	80096c8 <USBD_LL_StallEP>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
      break;
 8008066:	bf00      	nop
  }

  return ret;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b086      	sub	sp, #24
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	460b      	mov	r3, r1
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008080:	7afb      	ldrb	r3, [r7, #11]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d138      	bne.n	80080f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800808c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008094:	2b03      	cmp	r3, #3
 8008096:	d14a      	bne.n	800812e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d913      	bls.n	80080cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	1ad2      	subs	r2, r2, r3
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	4293      	cmp	r3, r2
 80080bc:	bf28      	it	cs
 80080be:	4613      	movcs	r3, r2
 80080c0:	461a      	mov	r2, r3
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 ffa8 	bl	800901a <USBD_CtlContinueRx>
 80080ca:	e030      	b.n	800812e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d10b      	bne.n	80080f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 ffa3 	bl	800903c <USBD_CtlSendStatus>
 80080f6:	e01a      	b.n	800812e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b03      	cmp	r3, #3
 8008102:	d114      	bne.n	800812e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00e      	beq.n	800812e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	7afa      	ldrb	r2, [r7, #11]
 800811a:	4611      	mov	r1, r2
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	4798      	blx	r3
 8008120:	4603      	mov	r3, r0
 8008122:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	e000      	b.n	8008130 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	460b      	mov	r3, r1
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d16b      	bne.n	8008224 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3314      	adds	r3, #20
 8008150:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008158:	2b02      	cmp	r3, #2
 800815a:	d156      	bne.n	800820a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	429a      	cmp	r2, r3
 8008166:	d914      	bls.n	8008192 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	1ad2      	subs	r2, r2, r3
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	461a      	mov	r2, r3
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 ff3a 	bl	8008ff8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008184:	2300      	movs	r3, #0
 8008186:	2200      	movs	r2, #0
 8008188:	2100      	movs	r1, #0
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f001 fb47 	bl	800981e <USBD_LL_PrepareReceive>
 8008190:	e03b      	b.n	800820a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	429a      	cmp	r2, r3
 800819c:	d11c      	bne.n	80081d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d316      	bcc.n	80081d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d20f      	bcs.n	80081d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081b8:	2200      	movs	r2, #0
 80081ba:	2100      	movs	r1, #0
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 ff1b 	bl	8008ff8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ca:	2300      	movs	r3, #0
 80081cc:	2200      	movs	r2, #0
 80081ce:	2100      	movs	r1, #0
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 fb24 	bl	800981e <USBD_LL_PrepareReceive>
 80081d6:	e018      	b.n	800820a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d10b      	bne.n	80081fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081fc:	2180      	movs	r1, #128	; 0x80
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f001 fa62 	bl	80096c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 ff2c 	bl	8009062 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008210:	2b01      	cmp	r3, #1
 8008212:	d122      	bne.n	800825a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fe98 	bl	8007f4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008222:	e01a      	b.n	800825a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b03      	cmp	r3, #3
 800822e:	d114      	bne.n	800825a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00e      	beq.n	800825a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	7afa      	ldrb	r2, [r7, #11]
 8008246:	4611      	mov	r1, r2
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	4798      	blx	r3
 800824c:	4603      	mov	r3, r0
 800824e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	e000      	b.n	800825c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	e02f      	b.n	80082f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00f      	beq.n	80082c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6852      	ldr	r2, [r2, #4]
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	4611      	mov	r1, r2
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c2:	2340      	movs	r3, #64	; 0x40
 80082c4:	2200      	movs	r2, #0
 80082c6:	2100      	movs	r1, #0
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 f9b8 	bl	800963e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2240      	movs	r2, #64	; 0x40
 80082da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082de:	2340      	movs	r3, #64	; 0x40
 80082e0:	2200      	movs	r2, #0
 80082e2:	2180      	movs	r1, #128	; 0x80
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f9aa 	bl	800963e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2240      	movs	r2, #64	; 0x40
 80082f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832e:	b2da      	uxtb	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2204      	movs	r2, #4
 800833a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b04      	cmp	r3, #4
 800835e:	d106      	bne.n	800836e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008366:	b2da      	uxtb	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800838e:	2303      	movs	r3, #3
 8008390:	e012      	b.n	80083b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b03      	cmp	r3, #3
 800839c:	d10b      	bne.n	80083b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	3301      	adds	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083de:	8a3b      	ldrh	r3, [r7, #16]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	b21a      	sxth	r2, r3
 80083e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b21b      	sxth	r3, r3
 80083ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083ee:	89fb      	ldrh	r3, [r7, #14]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d005      	beq.n	8008422 <USBD_StdDevReq+0x26>
 8008416:	2b40      	cmp	r3, #64	; 0x40
 8008418:	d853      	bhi.n	80084c2 <USBD_StdDevReq+0xc6>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <USBD_StdDevReq+0x3a>
 800841e:	2b20      	cmp	r3, #32
 8008420:	d14f      	bne.n	80084c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	4798      	blx	r3
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	e04a      	b.n	80084cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	2b09      	cmp	r3, #9
 800843c:	d83b      	bhi.n	80084b6 <USBD_StdDevReq+0xba>
 800843e:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <USBD_StdDevReq+0x48>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008499 	.word	0x08008499
 8008448:	080084ad 	.word	0x080084ad
 800844c:	080084b7 	.word	0x080084b7
 8008450:	080084a3 	.word	0x080084a3
 8008454:	080084b7 	.word	0x080084b7
 8008458:	08008477 	.word	0x08008477
 800845c:	0800846d 	.word	0x0800846d
 8008460:	080084b7 	.word	0x080084b7
 8008464:	0800848f 	.word	0x0800848f
 8008468:	08008481 	.word	0x08008481
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9de 	bl	8008830 <USBD_GetDescriptor>
          break;
 8008474:	e024      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fb6d 	bl	8008b58 <USBD_SetAddress>
          break;
 800847e:	e01f      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fbac 	bl	8008be0 <USBD_SetConfig>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
          break;
 800848c:	e018      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fc4b 	bl	8008d2c <USBD_GetConfig>
          break;
 8008496:	e013      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fc7c 	bl	8008d98 <USBD_GetStatus>
          break;
 80084a0:	e00e      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fcab 	bl	8008e00 <USBD_SetFeature>
          break;
 80084aa:	e009      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fcba 	bl	8008e28 <USBD_ClrFeature>
          break;
 80084b4:	e004      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fd11 	bl	8008ee0 <USBD_CtlError>
          break;
 80084be:	bf00      	nop
      }
      break;
 80084c0:	e004      	b.n	80084cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fd0b 	bl	8008ee0 <USBD_CtlError>
      break;
 80084ca:	bf00      	nop
  }

  return ret;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop

080084d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084ee:	2b40      	cmp	r3, #64	; 0x40
 80084f0:	d005      	beq.n	80084fe <USBD_StdItfReq+0x26>
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d82f      	bhi.n	8008556 <USBD_StdItfReq+0x7e>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <USBD_StdItfReq+0x26>
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d12b      	bne.n	8008556 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008504:	b2db      	uxtb	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	2b02      	cmp	r3, #2
 800850a:	d81d      	bhi.n	8008548 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	889b      	ldrh	r3, [r3, #4]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b01      	cmp	r3, #1
 8008514:	d813      	bhi.n	800853e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	4798      	blx	r3
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	88db      	ldrh	r3, [r3, #6]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d110      	bne.n	8008552 <USBD_StdItfReq+0x7a>
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10d      	bne.n	8008552 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fd80 	bl	800903c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800853c:	e009      	b.n	8008552 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fccd 	bl	8008ee0 <USBD_CtlError>
          break;
 8008546:	e004      	b.n	8008552 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fcc8 	bl	8008ee0 <USBD_CtlError>
          break;
 8008550:	e000      	b.n	8008554 <USBD_StdItfReq+0x7c>
          break;
 8008552:	bf00      	nop
      }
      break;
 8008554:	e004      	b.n	8008560 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fcc1 	bl	8008ee0 <USBD_CtlError>
      break;
 800855e:	bf00      	nop
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	889b      	ldrh	r3, [r3, #4]
 800857c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d007      	beq.n	800859a <USBD_StdEPReq+0x30>
 800858a:	2b40      	cmp	r3, #64	; 0x40
 800858c:	f200 8145 	bhi.w	800881a <USBD_StdEPReq+0x2b0>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00c      	beq.n	80085ae <USBD_StdEPReq+0x44>
 8008594:	2b20      	cmp	r3, #32
 8008596:	f040 8140 	bne.w	800881a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
      break;
 80085ac:	e13a      	b.n	8008824 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d007      	beq.n	80085c6 <USBD_StdEPReq+0x5c>
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	f300 8129 	bgt.w	800880e <USBD_StdEPReq+0x2a4>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d07f      	beq.n	80086c0 <USBD_StdEPReq+0x156>
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d03c      	beq.n	800863e <USBD_StdEPReq+0xd4>
 80085c4:	e123      	b.n	800880e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d002      	beq.n	80085d8 <USBD_StdEPReq+0x6e>
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d016      	beq.n	8008604 <USBD_StdEPReq+0x9a>
 80085d6:	e02c      	b.n	8008632 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00d      	beq.n	80085fa <USBD_StdEPReq+0x90>
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b80      	cmp	r3, #128	; 0x80
 80085e2:	d00a      	beq.n	80085fa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 f86d 	bl	80096c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ee:	2180      	movs	r1, #128	; 0x80
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f869 	bl	80096c8 <USBD_LL_StallEP>
 80085f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f8:	e020      	b.n	800863c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fc6f 	bl	8008ee0 <USBD_CtlError>
              break;
 8008602:	e01b      	b.n	800863c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	885b      	ldrh	r3, [r3, #2]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10e      	bne.n	800862a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <USBD_StdEPReq+0xc0>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d008      	beq.n	800862a <USBD_StdEPReq+0xc0>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	88db      	ldrh	r3, [r3, #6]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 f84f 	bl	80096c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fd06 	bl	800903c <USBD_CtlSendStatus>

              break;
 8008630:	e004      	b.n	800863c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc53 	bl	8008ee0 <USBD_CtlError>
              break;
 800863a:	bf00      	nop
          }
          break;
 800863c:	e0ec      	b.n	8008818 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d002      	beq.n	8008650 <USBD_StdEPReq+0xe6>
 800864a:	2b03      	cmp	r3, #3
 800864c:	d016      	beq.n	800867c <USBD_StdEPReq+0x112>
 800864e:	e030      	b.n	80086b2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00d      	beq.n	8008672 <USBD_StdEPReq+0x108>
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d00a      	beq.n	8008672 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f831 	bl	80096c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 f82d 	bl	80096c8 <USBD_LL_StallEP>
 800866e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008670:	e025      	b.n	80086be <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc33 	bl	8008ee0 <USBD_CtlError>
              break;
 800867a:	e020      	b.n	80086be <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	885b      	ldrh	r3, [r3, #2]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11b      	bne.n	80086bc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 f837 	bl	8009706 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fccf 	bl	800903c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80086b0:	e004      	b.n	80086bc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc13 	bl	8008ee0 <USBD_CtlError>
              break;
 80086ba:	e000      	b.n	80086be <USBD_StdEPReq+0x154>
              break;
 80086bc:	bf00      	nop
          }
          break;
 80086be:	e0ab      	b.n	8008818 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d002      	beq.n	80086d2 <USBD_StdEPReq+0x168>
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d032      	beq.n	8008736 <USBD_StdEPReq+0x1cc>
 80086d0:	e097      	b.n	8008802 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <USBD_StdEPReq+0x17e>
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b80      	cmp	r3, #128	; 0x80
 80086dc:	d004      	beq.n	80086e8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fbfd 	bl	8008ee0 <USBD_CtlError>
                break;
 80086e6:	e091      	b.n	800880c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da0b      	bge.n	8008708 <USBD_StdEPReq+0x19e>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	3310      	adds	r3, #16
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	e00b      	b.n	8008720 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	3304      	adds	r3, #4
 8008720:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2202      	movs	r2, #2
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fc47 	bl	8008fc2 <USBD_CtlSendData>
              break;
 8008734:	e06a      	b.n	800880c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873a:	2b00      	cmp	r3, #0
 800873c:	da11      	bge.n	8008762 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	f003 020f 	and.w	r2, r3, #15
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	3324      	adds	r3, #36	; 0x24
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d117      	bne.n	8008788 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fbc0 	bl	8008ee0 <USBD_CtlError>
                  break;
 8008760:	e054      	b.n	800880c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	f003 020f 	and.w	r2, r3, #15
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fbad 	bl	8008ee0 <USBD_CtlError>
                  break;
 8008786:	e041      	b.n	800880c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da0b      	bge.n	80087a8 <USBD_StdEPReq+0x23e>
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	3310      	adds	r3, #16
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	4413      	add	r3, r2
 80087a4:	3304      	adds	r3, #4
 80087a6:	e00b      	b.n	80087c0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	4413      	add	r3, r2
 80087be:	3304      	adds	r3, #4
 80087c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <USBD_StdEPReq+0x264>
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	2b80      	cmp	r3, #128	; 0x80
 80087cc:	d103      	bne.n	80087d6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e00e      	b.n	80087f4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 ffb2 	bl	8009744 <USBD_LL_IsStallEP>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2201      	movs	r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e002      	b.n	80087f4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2202      	movs	r2, #2
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fbe1 	bl	8008fc2 <USBD_CtlSendData>
              break;
 8008800:	e004      	b.n	800880c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fb6b 	bl	8008ee0 <USBD_CtlError>
              break;
 800880a:	bf00      	nop
          }
          break;
 800880c:	e004      	b.n	8008818 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fb65 	bl	8008ee0 <USBD_CtlError>
          break;
 8008816:	bf00      	nop
      }
      break;
 8008818:	e004      	b.n	8008824 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fb5f 	bl	8008ee0 <USBD_CtlError>
      break;
 8008822:	bf00      	nop
  }

  return ret;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	2b0e      	cmp	r3, #14
 8008852:	f200 8152 	bhi.w	8008afa <USBD_GetDescriptor+0x2ca>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <USBD_GetDescriptor+0x2c>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	080088cd 	.word	0x080088cd
 8008860:	080088e5 	.word	0x080088e5
 8008864:	08008925 	.word	0x08008925
 8008868:	08008afb 	.word	0x08008afb
 800886c:	08008afb 	.word	0x08008afb
 8008870:	08008a9b 	.word	0x08008a9b
 8008874:	08008ac7 	.word	0x08008ac7
 8008878:	08008afb 	.word	0x08008afb
 800887c:	08008afb 	.word	0x08008afb
 8008880:	08008afb 	.word	0x08008afb
 8008884:	08008afb 	.word	0x08008afb
 8008888:	08008afb 	.word	0x08008afb
 800888c:	08008afb 	.word	0x08008afb
 8008890:	08008afb 	.word	0x08008afb
 8008894:	08008899 	.word	0x08008899
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00b      	beq.n	80088bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	7c12      	ldrb	r2, [r2, #16]
 80088b0:	f107 0108 	add.w	r1, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088ba:	e126      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fb0e 	bl	8008ee0 <USBD_CtlError>
        err++;
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	3301      	adds	r3, #1
 80088c8:	72fb      	strb	r3, [r7, #11]
      break;
 80088ca:	e11e      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
      break;
 80088e2:	e112      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7c1b      	ldrb	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10d      	bne.n	8008908 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008906:	e100      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
      break;
 8008922:	e0f2      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	885b      	ldrh	r3, [r3, #2]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b05      	cmp	r3, #5
 800892c:	f200 80ac 	bhi.w	8008a88 <USBD_GetDescriptor+0x258>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBD_GetDescriptor+0x108>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008951 	.word	0x08008951
 800893c:	08008985 	.word	0x08008985
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089ed 	.word	0x080089ed
 8008948:	08008a21 	.word	0x08008a21
 800894c:	08008a55 	.word	0x08008a55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008972:	e091      	b.n	8008a98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fab2 	bl	8008ee0 <USBD_CtlError>
            err++;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3301      	adds	r3, #1
 8008980:	72fb      	strb	r3, [r7, #11]
          break;
 8008982:	e089      	b.n	8008a98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a6:	e077      	b.n	8008a98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa98 	bl	8008ee0 <USBD_CtlError>
            err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
          break;
 80089b6:	e06f      	b.n	8008a98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7c12      	ldrb	r2, [r2, #16]
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089da:	e05d      	b.n	8008a98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa7e 	bl	8008ee0 <USBD_CtlError>
            err++;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	3301      	adds	r3, #1
 80089e8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ea:	e055      	b.n	8008a98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	7c12      	ldrb	r2, [r2, #16]
 8008a04:	f107 0108 	add.w	r1, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a0e:	e043      	b.n	8008a98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa64 	bl	8008ee0 <USBD_CtlError>
            err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a1e:	e03b      	b.n	8008a98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a42:	e029      	b.n	8008a98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa4a 	bl	8008ee0 <USBD_CtlError>
            err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
          break;
 8008a52:	e021      	b.n	8008a98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a76:	e00f      	b.n	8008a98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa30 	bl	8008ee0 <USBD_CtlError>
            err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
          break;
 8008a86:	e007      	b.n	8008a98 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa28 	bl	8008ee0 <USBD_CtlError>
          err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e037      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ab4:	e029      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa11 	bl	8008ee0 <USBD_CtlError>
        err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac4:	e021      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7c1b      	ldrb	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10d      	bne.n	8008aea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4610      	mov	r0, r2
 8008adc:	4798      	blx	r3
 8008ade:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae8:	e00f      	b.n	8008b0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f9f7 	bl	8008ee0 <USBD_CtlError>
        err++;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	3301      	adds	r3, #1
 8008af6:	72fb      	strb	r3, [r7, #11]
      break;
 8008af8:	e007      	b.n	8008b0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f9ef 	bl	8008ee0 <USBD_CtlError>
      err++;
 8008b02:	7afb      	ldrb	r3, [r7, #11]
 8008b04:	3301      	adds	r3, #1
 8008b06:	72fb      	strb	r3, [r7, #11]
      break;
 8008b08:	bf00      	nop
  }

  if (err != 0U)
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11e      	bne.n	8008b4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	88db      	ldrh	r3, [r3, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d016      	beq.n	8008b46 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00e      	beq.n	8008b3c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88da      	ldrh	r2, [r3, #6]
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bf28      	it	cs
 8008b28:	4613      	movcs	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fa44 	bl	8008fc2 <USBD_CtlSendData>
 8008b3a:	e009      	b.n	8008b50 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9ce 	bl	8008ee0 <USBD_CtlError>
 8008b44:	e004      	b.n	8008b50 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa78 	bl	800903c <USBD_CtlSendStatus>
 8008b4c:	e000      	b.n	8008b50 <USBD_GetDescriptor+0x320>
    return;
 8008b4e:	bf00      	nop
  }
}
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	889b      	ldrh	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d131      	bne.n	8008bce <USBD_SetAddress+0x76>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	88db      	ldrh	r3, [r3, #6]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d12d      	bne.n	8008bce <USBD_SetAddress+0x76>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	2b7f      	cmp	r3, #127	; 0x7f
 8008b78:	d829      	bhi.n	8008bce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d104      	bne.n	8008b9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f9a3 	bl	8008ee0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	e01d      	b.n	8008bd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ba0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fdf8 	bl	800979e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa44 	bl	800903c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc2:	e009      	b.n	8008bd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bcc:	e004      	b.n	8008bd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f985 	bl	8008ee0 <USBD_CtlError>
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	4b4c      	ldr	r3, [pc, #304]	; (8008d28 <USBD_SetConfig+0x148>)
 8008bf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf8:	4b4b      	ldr	r3, [pc, #300]	; (8008d28 <USBD_SetConfig+0x148>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d905      	bls.n	8008c0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f96c 	bl	8008ee0 <USBD_CtlError>
    return USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e088      	b.n	8008d1e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_SetConfig+0x3e>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d025      	beq.n	8008c68 <USBD_SetConfig+0x88>
 8008c1c:	e071      	b.n	8008d02 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c1e:	4b42      	ldr	r3, [pc, #264]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d01c      	beq.n	8008c60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c26:	4b40      	ldr	r3, [pc, #256]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c30:	4b3d      	ldr	r3, [pc, #244]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff f992 	bl	8007f60 <USBD_SetClassConfig>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f949 	bl	8008ee0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c4e:	e065      	b.n	8008d1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f9f3 	bl	800903c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c5e:	e05d      	b.n	8008d1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f9eb 	bl	800903c <USBD_CtlSendStatus>
      break;
 8008c66:	e059      	b.n	8008d1c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c68:	4b2f      	ldr	r3, [pc, #188]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d112      	bne.n	8008c96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c78:	4b2b      	ldr	r3, [pc, #172]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c82:	4b29      	ldr	r3, [pc, #164]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff f985 	bl	8007f98 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f9d4 	bl	800903c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c94:	e042      	b.n	8008d1c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c96:	4b24      	ldr	r3, [pc, #144]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d02a      	beq.n	8008cfa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff f973 	bl	8007f98 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cb2:	4b1d      	ldr	r3, [pc, #116]	; (8008d28 <USBD_SetConfig+0x148>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cbc:	4b1a      	ldr	r3, [pc, #104]	; (8008d28 <USBD_SetConfig+0x148>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff f94c 	bl	8007f60 <USBD_SetClassConfig>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00f      	beq.n	8008cf2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f903 	bl	8008ee0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff f958 	bl	8007f98 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cf0:	e014      	b.n	8008d1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f9a2 	bl	800903c <USBD_CtlSendStatus>
      break;
 8008cf8:	e010      	b.n	8008d1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f99e 	bl	800903c <USBD_CtlSendStatus>
      break;
 8008d00:	e00c      	b.n	8008d1c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f8eb 	bl	8008ee0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <USBD_SetConfig+0x148>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff f941 	bl	8007f98 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d16:	2303      	movs	r3, #3
 8008d18:	73fb      	strb	r3, [r7, #15]
      break;
 8008d1a:	bf00      	nop
  }

  return ret;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	2000018d 	.word	0x2000018d

08008d2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	88db      	ldrh	r3, [r3, #6]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d004      	beq.n	8008d48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f8cd 	bl	8008ee0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d46:	e023      	b.n	8008d90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	dc02      	bgt.n	8008d5a <USBD_GetConfig+0x2e>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dc03      	bgt.n	8008d60 <USBD_GetConfig+0x34>
 8008d58:	e015      	b.n	8008d86 <USBD_GetConfig+0x5a>
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d00b      	beq.n	8008d76 <USBD_GetConfig+0x4a>
 8008d5e:	e012      	b.n	8008d86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f927 	bl	8008fc2 <USBD_CtlSendData>
        break;
 8008d74:	e00c      	b.n	8008d90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f91f 	bl	8008fc2 <USBD_CtlSendData>
        break;
 8008d84:	e004      	b.n	8008d90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8a9 	bl	8008ee0 <USBD_CtlError>
        break;
 8008d8e:	bf00      	nop
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	3b01      	subs	r3, #1
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d81e      	bhi.n	8008dee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	88db      	ldrh	r3, [r3, #6]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d004      	beq.n	8008dc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f890 	bl	8008ee0 <USBD_CtlError>
        break;
 8008dc0:	e01a      	b.n	8008df8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f043 0202 	orr.w	r2, r3, #2
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	330c      	adds	r3, #12
 8008de2:	2202      	movs	r2, #2
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8eb 	bl	8008fc2 <USBD_CtlSendData>
      break;
 8008dec:	e004      	b.n	8008df8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f875 	bl	8008ee0 <USBD_CtlError>
      break;
 8008df6:	bf00      	nop
  }
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	885b      	ldrh	r3, [r3, #2]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d106      	bne.n	8008e20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f90e 	bl	800903c <USBD_CtlSendStatus>
  }
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d80b      	bhi.n	8008e58 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	885b      	ldrh	r3, [r3, #2]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d10c      	bne.n	8008e62 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f8f3 	bl	800903c <USBD_CtlSendStatus>
      }
      break;
 8008e56:	e004      	b.n	8008e62 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f840 	bl	8008ee0 <USBD_CtlError>
      break;
 8008e60:	e000      	b.n	8008e64 <USBD_ClrFeature+0x3c>
      break;
 8008e62:	bf00      	nop
  }
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	781a      	ldrb	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7ff fa92 	bl	80083c0 <SWAPBYTE>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3301      	adds	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff fa85 	bl	80083c0 <SWAPBYTE>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7ff fa78 	bl	80083c0 <SWAPBYTE>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	80da      	strh	r2, [r3, #6]
}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eea:	2180      	movs	r1, #128	; 0x80
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fbeb 	bl	80096c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fbe7 	bl	80096c8 <USBD_LL_StallEP>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b086      	sub	sp, #24
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d036      	beq.n	8008f86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f1c:	6938      	ldr	r0, [r7, #16]
 8008f1e:	f000 f836 	bl	8008f8e <USBD_GetLen>
 8008f22:	4603      	mov	r3, r0
 8008f24:	3301      	adds	r3, #1
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	4413      	add	r3, r2
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	4413      	add	r3, r2
 8008f48:	2203      	movs	r2, #3
 8008f4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f52:	e013      	b.n	8008f7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4413      	add	r3, r2
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	7812      	ldrb	r2, [r2, #0]
 8008f5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	3301      	adds	r3, #1
 8008f64:	613b      	str	r3, [r7, #16]
    idx++;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4413      	add	r3, r2
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e7      	bne.n	8008f54 <USBD_GetString+0x52>
 8008f84:	e000      	b.n	8008f88 <USBD_GetString+0x86>
    return;
 8008f86:	bf00      	nop
  }
}
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f9e:	e005      	b.n	8008fac <USBD_GetLen+0x1e>
  {
    len++;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1f5      	bne.n	8008fa0 <USBD_GetLen+0x12>
  }

  return len;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 fbf7 	bl	80097dc <USBD_LL_Transmit>

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	2100      	movs	r1, #0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fbe6 	bl	80097dc <USBD_LL_Transmit>

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	2100      	movs	r1, #0
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 fbf6 	bl	800981e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2204      	movs	r2, #4
 8009048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800904c:	2300      	movs	r3, #0
 800904e:	2200      	movs	r2, #0
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fbc2 	bl	80097dc <USBD_LL_Transmit>

  return USBD_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2205      	movs	r2, #5
 800906e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009072:	2300      	movs	r3, #0
 8009074:	2200      	movs	r2, #0
 8009076:	2100      	movs	r1, #0
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fbd0 	bl	800981e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800908c:	2200      	movs	r2, #0
 800908e:	490e      	ldr	r1, [pc, #56]	; (80090c8 <MX_USB_Device_Init+0x40>)
 8009090:	480e      	ldr	r0, [pc, #56]	; (80090cc <MX_USB_Device_Init+0x44>)
 8009092:	f7fe fef7 	bl	8007e84 <USBD_Init>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800909c:	f7f7 fb05 	bl	80006aa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 80090a0:	490b      	ldr	r1, [pc, #44]	; (80090d0 <MX_USB_Device_Init+0x48>)
 80090a2:	480a      	ldr	r0, [pc, #40]	; (80090cc <MX_USB_Device_Init+0x44>)
 80090a4:	f7fe ff1e 	bl	8007ee4 <USBD_RegisterClass>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80090ae:	f7f7 fafc 	bl	80006aa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090b2:	4806      	ldr	r0, [pc, #24]	; (80090cc <MX_USB_Device_Init+0x44>)
 80090b4:	f7fe ff3d 	bl	8007f32 <USBD_Start>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 80090be:	f7f7 faf4 	bl	80006aa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090c2:	bf00      	nop
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000118 	.word	0x20000118
 80090cc:	20000260 	.word	0x20000260
 80090d0:	20000010 	.word	0x20000010

080090d4 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2212      	movs	r2, #18
 80090e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 80090e6:	4b03      	ldr	r3, [pc, #12]	; (80090f4 <USBD_HID_DeviceDescriptor+0x20>)
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	20000138 	.word	0x20000138

080090f8 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2204      	movs	r2, #4
 8009108:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800910a:	4b03      	ldr	r3, [pc, #12]	; (8009118 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	2000014c 	.word	0x2000014c

0800911c <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	6039      	str	r1, [r7, #0]
 8009126:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d105      	bne.n	800913a <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	4907      	ldr	r1, [pc, #28]	; (8009150 <USBD_HID_ProductStrDescriptor+0x34>)
 8009132:	4808      	ldr	r0, [pc, #32]	; (8009154 <USBD_HID_ProductStrDescriptor+0x38>)
 8009134:	f7ff fee5 	bl	8008f02 <USBD_GetString>
 8009138:	e004      	b.n	8009144 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	4904      	ldr	r1, [pc, #16]	; (8009150 <USBD_HID_ProductStrDescriptor+0x34>)
 800913e:	4805      	ldr	r0, [pc, #20]	; (8009154 <USBD_HID_ProductStrDescriptor+0x38>)
 8009140:	f7ff fedf 	bl	8008f02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009144:	4b02      	ldr	r3, [pc, #8]	; (8009150 <USBD_HID_ProductStrDescriptor+0x34>)
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000530 	.word	0x20000530
 8009154:	080099fc 	.word	0x080099fc

08009158 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	6039      	str	r1, [r7, #0]
 8009162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	4904      	ldr	r1, [pc, #16]	; (8009178 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8009168:	4804      	ldr	r0, [pc, #16]	; (800917c <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800916a:	f7ff feca 	bl	8008f02 <USBD_GetString>
  return USBD_StrDesc;
 800916e:	4b02      	ldr	r3, [pc, #8]	; (8009178 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000530 	.word	0x20000530
 800917c:	08009a14 	.word	0x08009a14

08009180 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	221a      	movs	r2, #26
 8009190:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009192:	f000 f843 	bl	800921c <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009196:	4b02      	ldr	r3, [pc, #8]	; (80091a0 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20000150 	.word	0x20000150

080091a4 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	6039      	str	r1, [r7, #0]
 80091ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d105      	bne.n	80091c2 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	4907      	ldr	r1, [pc, #28]	; (80091d8 <USBD_HID_ConfigStrDescriptor+0x34>)
 80091ba:	4808      	ldr	r0, [pc, #32]	; (80091dc <USBD_HID_ConfigStrDescriptor+0x38>)
 80091bc:	f7ff fea1 	bl	8008f02 <USBD_GetString>
 80091c0:	e004      	b.n	80091cc <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4904      	ldr	r1, [pc, #16]	; (80091d8 <USBD_HID_ConfigStrDescriptor+0x34>)
 80091c6:	4805      	ldr	r0, [pc, #20]	; (80091dc <USBD_HID_ConfigStrDescriptor+0x38>)
 80091c8:	f7ff fe9b 	bl	8008f02 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091cc:	4b02      	ldr	r3, [pc, #8]	; (80091d8 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000530 	.word	0x20000530
 80091dc:	08009a28 	.word	0x08009a28

080091e0 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d105      	bne.n	80091fe <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	4907      	ldr	r1, [pc, #28]	; (8009214 <USBD_HID_InterfaceStrDescriptor+0x34>)
 80091f6:	4808      	ldr	r0, [pc, #32]	; (8009218 <USBD_HID_InterfaceStrDescriptor+0x38>)
 80091f8:	f7ff fe83 	bl	8008f02 <USBD_GetString>
 80091fc:	e004      	b.n	8009208 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	4904      	ldr	r1, [pc, #16]	; (8009214 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8009202:	4805      	ldr	r0, [pc, #20]	; (8009218 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009204:	f7ff fe7d 	bl	8008f02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009208:	4b02      	ldr	r3, [pc, #8]	; (8009214 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20000530 	.word	0x20000530
 8009218:	08009a34 	.word	0x08009a34

0800921c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009222:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <Get_SerialNum+0x44>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009228:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <Get_SerialNum+0x48>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800922e:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <Get_SerialNum+0x4c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4413      	add	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009242:	2208      	movs	r2, #8
 8009244:	4909      	ldr	r1, [pc, #36]	; (800926c <Get_SerialNum+0x50>)
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 f814 	bl	8009274 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800924c:	2204      	movs	r2, #4
 800924e:	4908      	ldr	r1, [pc, #32]	; (8009270 <Get_SerialNum+0x54>)
 8009250:	68b8      	ldr	r0, [r7, #8]
 8009252:	f000 f80f 	bl	8009274 <IntToUnicode>
  }
}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	1fff7590 	.word	0x1fff7590
 8009264:	1fff7594 	.word	0x1fff7594
 8009268:	1fff7598 	.word	0x1fff7598
 800926c:	20000152 	.word	0x20000152
 8009270:	20000162 	.word	0x20000162

08009274 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009286:	2300      	movs	r3, #0
 8009288:	75fb      	strb	r3, [r7, #23]
 800928a:	e027      	b.n	80092dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	0f1b      	lsrs	r3, r3, #28
 8009290:	2b09      	cmp	r3, #9
 8009292:	d80b      	bhi.n	80092ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	0f1b      	lsrs	r3, r3, #28
 8009298:	b2da      	uxtb	r2, r3
 800929a:	7dfb      	ldrb	r3, [r7, #23]
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	4619      	mov	r1, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	440b      	add	r3, r1
 80092a4:	3230      	adds	r2, #48	; 0x30
 80092a6:	b2d2      	uxtb	r2, r2
 80092a8:	701a      	strb	r2, [r3, #0]
 80092aa:	e00a      	b.n	80092c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	0f1b      	lsrs	r3, r3, #28
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	4619      	mov	r1, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	440b      	add	r3, r1
 80092bc:	3237      	adds	r2, #55	; 0x37
 80092be:	b2d2      	uxtb	r2, r2
 80092c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	011b      	lsls	r3, r3, #4
 80092c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	3301      	adds	r3, #1
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	4413      	add	r3, r2
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	3301      	adds	r3, #1
 80092da:	75fb      	strb	r3, [r7, #23]
 80092dc:	7dfa      	ldrb	r2, [r7, #23]
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d3d3      	bcc.n	800928c <IntToUnicode+0x18>
  }
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <LL_AHB2_GRP1_EnableClock>:
{
 80092f2:	b480      	push	{r7}
 80092f4:	b085      	sub	sp, #20
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80092fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4313      	orrs	r3, r2
 8009308:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800930a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800930e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4013      	ands	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009316:	68fb      	ldr	r3, [r7, #12]
}
 8009318:	bf00      	nop
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <LL_APB1_GRP1_EnableClock>:
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800932c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4313      	orrs	r3, r2
 800933a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800933c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4013      	ands	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009348:	68fb      	ldr	r3, [r7, #12]
}
 800934a:	bf00      	nop
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
	...

08009358 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b09c      	sub	sp, #112	; 0x70
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009360:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	605a      	str	r2, [r3, #4]
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	60da      	str	r2, [r3, #12]
 800936e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009370:	f107 030c 	add.w	r3, r7, #12
 8009374:	2250      	movs	r2, #80	; 0x50
 8009376:	2100      	movs	r1, #0
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fb15 	bl	80099a8 <memset>
  if(pcdHandle->Instance==USB)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a23      	ldr	r2, [pc, #140]	; (8009410 <HAL_PCD_MspInit+0xb8>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d13e      	bne.n	8009406 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800938c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800938e:	2318      	movs	r3, #24
 8009390:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009396:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800939c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800939e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80093a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80093a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80093aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80093ae:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80093b0:	f107 030c 	add.w	r3, r7, #12
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fa ff65 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80093c0:	f7f7 f973 	bl	80006aa <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093c4:	2001      	movs	r0, #1
 80093c6:	f7ff ff94 	bl	80092f2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80093ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093d0:	2302      	movs	r3, #2
 80093d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d4:	2300      	movs	r3, #0
 80093d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093d8:	2300      	movs	r3, #0
 80093da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80093dc:	230a      	movs	r3, #10
 80093de:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80093e4:	4619      	mov	r1, r3
 80093e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80093ea:	f7f7 fd5b 	bl	8000ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80093ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80093f2:	f7ff ff97 	bl	8009324 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80093f6:	2200      	movs	r2, #0
 80093f8:	2100      	movs	r1, #0
 80093fa:	2014      	movs	r0, #20
 80093fc:	f7f7 fd1d 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009400:	2014      	movs	r0, #20
 8009402:	f7f7 fd34 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009406:	bf00      	nop
 8009408:	3770      	adds	r7, #112	; 0x70
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	40006800 	.word	0x40006800

08009414 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009428:	4619      	mov	r1, r3
 800942a:	4610      	mov	r0, r2
 800942c:	f7fe fdcc 	bl	8007fc8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	00db      	lsls	r3, r3, #3
 8009456:	440b      	add	r3, r1
 8009458:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	4619      	mov	r1, r3
 8009462:	f7fe fe06 	bl	8008072 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009480:	78fa      	ldrb	r2, [r7, #3]
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	440b      	add	r3, r1
 800948e:	333c      	adds	r3, #60	; 0x3c
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	78fb      	ldrb	r3, [r7, #3]
 8009494:	4619      	mov	r1, r3
 8009496:	f7fe fe4f 	bl	8008138 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800949a:	bf00      	nop
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe ff63 	bl	800837c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094c6:	2301      	movs	r3, #1
 80094c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d001      	beq.n	80094d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094d2:	f7f7 f8ea 	bl	80006aa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094dc:	7bfa      	ldrb	r2, [r7, #15]
 80094de:	4611      	mov	r1, r2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe ff0d 	bl	8008300 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fe feb9 	bl	8008264 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe ff08 	bl	8008320 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d005      	beq.n	8009524 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <HAL_PCD_SuspendCallback+0x30>)
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	4a03      	ldr	r2, [pc, #12]	; (800952c <HAL_PCD_SuspendCallback+0x30>)
 800951e:	f043 0306 	orr.w	r3, r3, #6
 8009522:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	e000ed00 	.word	0xe000ed00

08009530 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d007      	beq.n	8009550 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009540:	4b08      	ldr	r3, [pc, #32]	; (8009564 <HAL_PCD_ResumeCallback+0x34>)
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	4a07      	ldr	r2, [pc, #28]	; (8009564 <HAL_PCD_ResumeCallback+0x34>)
 8009546:	f023 0306 	bic.w	r3, r3, #6
 800954a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800954c:	f000 f9d6 	bl	80098fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fef8 	bl	800834c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	e000ed00 	.word	0xe000ed00

08009568 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009570:	4a23      	ldr	r2, [pc, #140]	; (8009600 <USBD_LL_Init+0x98>)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a21      	ldr	r2, [pc, #132]	; (8009600 <USBD_LL_Init+0x98>)
 800957c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009580:	f7f9 fb62 	bl	8002c48 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009584:	4b1e      	ldr	r3, [pc, #120]	; (8009600 <USBD_LL_Init+0x98>)
 8009586:	4a1f      	ldr	r2, [pc, #124]	; (8009604 <USBD_LL_Init+0x9c>)
 8009588:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800958a:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <USBD_LL_Init+0x98>)
 800958c:	2208      	movs	r2, #8
 800958e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009590:	4b1b      	ldr	r3, [pc, #108]	; (8009600 <USBD_LL_Init+0x98>)
 8009592:	2202      	movs	r2, #2
 8009594:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009596:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <USBD_LL_Init+0x98>)
 8009598:	2202      	movs	r2, #2
 800959a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800959c:	4b18      	ldr	r3, [pc, #96]	; (8009600 <USBD_LL_Init+0x98>)
 800959e:	2200      	movs	r2, #0
 80095a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095a2:	4b17      	ldr	r3, [pc, #92]	; (8009600 <USBD_LL_Init+0x98>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095a8:	4b15      	ldr	r3, [pc, #84]	; (8009600 <USBD_LL_Init+0x98>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095ae:	4b14      	ldr	r3, [pc, #80]	; (8009600 <USBD_LL_Init+0x98>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095b4:	4812      	ldr	r0, [pc, #72]	; (8009600 <USBD_LL_Init+0x98>)
 80095b6:	f7f7 fe0d 	bl	80011d4 <HAL_PCD_Init>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80095c0:	f7f7 f873 	bl	80006aa <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095ca:	2318      	movs	r3, #24
 80095cc:	2200      	movs	r2, #0
 80095ce:	2100      	movs	r1, #0
 80095d0:	f7f9 faae 	bl	8002b30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095da:	2358      	movs	r3, #88	; 0x58
 80095dc:	2200      	movs	r2, #0
 80095de:	2180      	movs	r1, #128	; 0x80
 80095e0:	f7f9 faa6 	bl	8002b30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ee:	2200      	movs	r2, #0
 80095f0:	2181      	movs	r1, #129	; 0x81
 80095f2:	f7f9 fa9d 	bl	8002b30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20000730 	.word	0x20000730
 8009604:	40006800 	.word	0x40006800

08009608 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800961e:	4618      	mov	r0, r3
 8009620:	f7f7 febd 	bl	800139e <HAL_PCD_Start>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	4618      	mov	r0, r3
 800962c:	f000 f96c 	bl	8009908 <USBD_Get_USB_Status>
 8009630:	4603      	mov	r3, r0
 8009632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009634:	7bbb      	ldrb	r3, [r7, #14]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	4608      	mov	r0, r1
 8009648:	4611      	mov	r1, r2
 800964a:	461a      	mov	r2, r3
 800964c:	4603      	mov	r3, r0
 800964e:	70fb      	strb	r3, [r7, #3]
 8009650:	460b      	mov	r3, r1
 8009652:	70bb      	strb	r3, [r7, #2]
 8009654:	4613      	mov	r3, r2
 8009656:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009666:	78bb      	ldrb	r3, [r7, #2]
 8009668:	883a      	ldrh	r2, [r7, #0]
 800966a:	78f9      	ldrb	r1, [r7, #3]
 800966c:	f7f8 f805 	bl	800167a <HAL_PCD_EP_Open>
 8009670:	4603      	mov	r3, r0
 8009672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 f946 	bl	8009908 <USBD_Get_USB_Status>
 800967c:	4603      	mov	r3, r0
 800967e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009680:	7bbb      	ldrb	r3, [r7, #14]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096a4:	78fa      	ldrb	r2, [r7, #3]
 80096a6:	4611      	mov	r1, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7f8 f84c 	bl	8001746 <HAL_PCD_EP_Close>
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f927 	bl	8009908 <USBD_Get_USB_Status>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096be:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096e2:	78fa      	ldrb	r2, [r7, #3]
 80096e4:	4611      	mov	r1, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7f8 f8f5 	bl	80018d6 <HAL_PCD_EP_SetStall>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 f908 	bl	8009908 <USBD_Get_USB_Status>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009720:	78fa      	ldrb	r2, [r7, #3]
 8009722:	4611      	mov	r1, r2
 8009724:	4618      	mov	r0, r3
 8009726:	f7f8 f928 	bl	800197a <HAL_PCD_EP_ClrStall>
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f8e9 	bl	8009908 <USBD_Get_USB_Status>
 8009736:	4603      	mov	r3, r0
 8009738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973a:	7bbb      	ldrb	r3, [r7, #14]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009756:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800975c:	2b00      	cmp	r3, #0
 800975e:	da0c      	bge.n	800977a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009766:	68f9      	ldr	r1, [r7, #12]
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	440b      	add	r3, r1
 8009774:	3302      	adds	r3, #2
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	e00b      	b.n	8009792 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009780:	68f9      	ldr	r1, [r7, #12]
 8009782:	4613      	mov	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	00db      	lsls	r3, r3, #3
 800978a:	440b      	add	r3, r1
 800978c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009790:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	4611      	mov	r1, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f7 ff37 	bl	8001630 <HAL_PCD_SetAddress>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 f89d 	bl	8009908 <USBD_Get_USB_Status>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	460b      	mov	r3, r1
 80097ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097fa:	7af9      	ldrb	r1, [r7, #11]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	f7f8 f826 	bl	8001850 <HAL_PCD_EP_Transmit>
 8009804:	4603      	mov	r3, r0
 8009806:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f87c 	bl	8009908 <USBD_Get_USB_Status>
 8009810:	4603      	mov	r3, r0
 8009812:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009814:	7dbb      	ldrb	r3, [r7, #22]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b086      	sub	sp, #24
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
 800982a:	460b      	mov	r3, r1
 800982c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800983c:	7af9      	ldrb	r1, [r7, #11]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	f7f7 ffc8 	bl	80017d6 <HAL_PCD_EP_Receive>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f85b 	bl	8009908 <USBD_Get_USB_Status>
 8009852:	4603      	mov	r3, r0
 8009854:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009856:	7dbb      	ldrb	r3, [r7, #22]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <HAL_PCDEx_LPM_Callback+0x18>
 8009872:	2b01      	cmp	r3, #1
 8009874:	d013      	beq.n	800989e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009876:	e023      	b.n	80098c0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d007      	beq.n	8009890 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009880:	f000 f83c 	bl	80098fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009884:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	4a0f      	ldr	r2, [pc, #60]	; (80098c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800988a:	f023 0306 	bic.w	r3, r3, #6
 800988e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe fd58 	bl	800834c <USBD_LL_Resume>
    break;
 800989c:	e010      	b.n	80098c0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fd3b 	bl	8008320 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d005      	beq.n	80098be <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <HAL_PCDEx_LPM_Callback+0x68>)
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	4a04      	ldr	r2, [pc, #16]	; (80098c8 <HAL_PCDEx_LPM_Callback+0x68>)
 80098b8:	f043 0306 	orr.w	r3, r3, #6
 80098bc:	6113      	str	r3, [r2, #16]
    break;
 80098be:	bf00      	nop
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	e000ed00 	.word	0xe000ed00

080098cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098d4:	4b03      	ldr	r3, [pc, #12]	; (80098e4 <USBD_static_malloc+0x18>)
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	20000190 	.word	0x20000190

080098e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]

}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009900:	f7f6 fe4a 	bl	8000598 <SystemClock_Config>
}
 8009904:	bf00      	nop
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	2b03      	cmp	r3, #3
 800991a:	d817      	bhi.n	800994c <USBD_Get_USB_Status+0x44>
 800991c:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <USBD_Get_USB_Status+0x1c>)
 800991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009922:	bf00      	nop
 8009924:	08009935 	.word	0x08009935
 8009928:	0800993b 	.word	0x0800993b
 800992c:	08009941 	.word	0x08009941
 8009930:	08009947 	.word	0x08009947
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
    break;
 8009938:	e00b      	b.n	8009952 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800993a:	2303      	movs	r3, #3
 800993c:	73fb      	strb	r3, [r7, #15]
    break;
 800993e:	e008      	b.n	8009952 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009940:	2301      	movs	r3, #1
 8009942:	73fb      	strb	r3, [r7, #15]
    break;
 8009944:	e005      	b.n	8009952 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009946:	2303      	movs	r3, #3
 8009948:	73fb      	strb	r3, [r7, #15]
    break;
 800994a:	e002      	b.n	8009952 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800994c:	2303      	movs	r3, #3
 800994e:	73fb      	strb	r3, [r7, #15]
    break;
 8009950:	bf00      	nop
  }
  return usb_status;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <__libc_init_array>:
 8009960:	b570      	push	{r4, r5, r6, lr}
 8009962:	4d0d      	ldr	r5, [pc, #52]	; (8009998 <__libc_init_array+0x38>)
 8009964:	4c0d      	ldr	r4, [pc, #52]	; (800999c <__libc_init_array+0x3c>)
 8009966:	1b64      	subs	r4, r4, r5
 8009968:	10a4      	asrs	r4, r4, #2
 800996a:	2600      	movs	r6, #0
 800996c:	42a6      	cmp	r6, r4
 800996e:	d109      	bne.n	8009984 <__libc_init_array+0x24>
 8009970:	4d0b      	ldr	r5, [pc, #44]	; (80099a0 <__libc_init_array+0x40>)
 8009972:	4c0c      	ldr	r4, [pc, #48]	; (80099a4 <__libc_init_array+0x44>)
 8009974:	f000 f820 	bl	80099b8 <_init>
 8009978:	1b64      	subs	r4, r4, r5
 800997a:	10a4      	asrs	r4, r4, #2
 800997c:	2600      	movs	r6, #0
 800997e:	42a6      	cmp	r6, r4
 8009980:	d105      	bne.n	800998e <__libc_init_array+0x2e>
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	f855 3b04 	ldr.w	r3, [r5], #4
 8009988:	4798      	blx	r3
 800998a:	3601      	adds	r6, #1
 800998c:	e7ee      	b.n	800996c <__libc_init_array+0xc>
 800998e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009992:	4798      	blx	r3
 8009994:	3601      	adds	r6, #1
 8009996:	e7f2      	b.n	800997e <__libc_init_array+0x1e>
 8009998:	08009ac4 	.word	0x08009ac4
 800999c:	08009ac4 	.word	0x08009ac4
 80099a0:	08009ac4 	.word	0x08009ac4
 80099a4:	08009ac8 	.word	0x08009ac8

080099a8 <memset>:
 80099a8:	4402      	add	r2, r0
 80099aa:	4603      	mov	r3, r0
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d100      	bne.n	80099b2 <memset+0xa>
 80099b0:	4770      	bx	lr
 80099b2:	f803 1b01 	strb.w	r1, [r3], #1
 80099b6:	e7f9      	b.n	80099ac <memset+0x4>

080099b8 <_init>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	bf00      	nop
 80099bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099be:	bc08      	pop	{r3}
 80099c0:	469e      	mov	lr, r3
 80099c2:	4770      	bx	lr

080099c4 <_fini>:
 80099c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c6:	bf00      	nop
 80099c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ca:	bc08      	pop	{r3}
 80099cc:	469e      	mov	lr, r3
 80099ce:	4770      	bx	lr

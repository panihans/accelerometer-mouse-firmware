
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b94  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009cd0  08009cd0  00019cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009dc4  08009dc4  00019dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000004  08009dcc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008f4  20000184  08009f4c  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a78  08009f4c  00020a78  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002206a  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000044e7  00000000  00000000  0004221e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ce0  00000000  00000000  00046708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b20  00000000  00000000  000483e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024474  00000000  00000000  00049f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d1c8  00000000  00000000  0006e37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8b5c  00000000  00000000  0008b544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001640a0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000077cc  00000000  00000000  001640f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	08009cb8 	.word	0x08009cb8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	08009cb8 	.word	0x08009cb8

0800017c <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000188:	f001 f974 	bl	8001474 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <update_buttons+0x1c>
		left_down = 0;
 8000192:	4b30      	ldr	r3, [pc, #192]	; (8000254 <update_buttons+0xd8>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000198:	2108      	movs	r1, #8
 800019a:	482f      	ldr	r0, [pc, #188]	; (8000258 <update_buttons+0xdc>)
 800019c:	f001 f96a 	bl	8001474 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <update_buttons+0x30>
		left_down = 1;
 80001a6:	4b2b      	ldr	r3, [pc, #172]	; (8000254 <update_buttons+0xd8>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 80001ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001b4:	f001 f95e 	bl	8001474 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d002      	beq.n	80001c4 <update_buttons+0x48>
		middle_down = 0;
 80001be:	4b27      	ldr	r3, [pc, #156]	; (800025c <update_buttons+0xe0>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 80001c4:	2110      	movs	r1, #16
 80001c6:	4826      	ldr	r0, [pc, #152]	; (8000260 <update_buttons+0xe4>)
 80001c8:	f001 f954 	bl	8001474 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d002      	beq.n	80001d8 <update_buttons+0x5c>
		middle_down = 1;
 80001d2:	4b22      	ldr	r3, [pc, #136]	; (800025c <update_buttons+0xe0>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 80001d8:	2102      	movs	r1, #2
 80001da:	481f      	ldr	r0, [pc, #124]	; (8000258 <update_buttons+0xdc>)
 80001dc:	f001 f94a 	bl	8001474 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d002      	beq.n	80001ec <update_buttons+0x70>
		right_down = 0;
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <update_buttons+0xe8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 80001ec:	2101      	movs	r1, #1
 80001ee:	481a      	ldr	r0, [pc, #104]	; (8000258 <update_buttons+0xdc>)
 80001f0:	f001 f940 	bl	8001474 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <update_buttons+0x84>
		right_down = 1;
 80001fa:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <update_buttons+0xe8>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000200:	2120      	movs	r1, #32
 8000202:	4815      	ldr	r0, [pc, #84]	; (8000258 <update_buttons+0xdc>)
 8000204:	f001 f936 	bl	8001474 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d002      	beq.n	8000214 <update_buttons+0x98>
		b4_down = 0;
 800020e:	4b16      	ldr	r3, [pc, #88]	; (8000268 <update_buttons+0xec>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000214:	2110      	movs	r1, #16
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <update_buttons+0xdc>)
 8000218:	f001 f92c 	bl	8001474 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <update_buttons+0xac>
		b4_down = 1;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <update_buttons+0xec>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000228:	2180      	movs	r1, #128	; 0x80
 800022a:	480b      	ldr	r0, [pc, #44]	; (8000258 <update_buttons+0xdc>)
 800022c:	f001 f922 	bl	8001474 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <update_buttons+0xc0>
		b5_down = 0;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <update_buttons+0xf0>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4806      	ldr	r0, [pc, #24]	; (8000258 <update_buttons+0xdc>)
 8000240:	f001 f918 	bl	8001474 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <update_buttons+0xd4>
		b5_down = 1;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <update_buttons+0xf0>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
	}
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200001a0 	.word	0x200001a0
 8000258:	48000400 	.word	0x48000400
 800025c:	200001a1 	.word	0x200001a1
 8000260:	48001000 	.word	0x48001000
 8000264:	200001a2 	.word	0x200001a2
 8000268:	200001a3 	.word	0x200001a3
 800026c:	200001a4 	.word	0x200001a4

08000270 <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000280:	b2db      	uxtb	r3, r3
 8000282:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000284:	2300      	movs	r3, #0
 8000286:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000290:	f001 f908 	bl	80014a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000294:	f107 010c 	add.w	r1, r7, #12
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	2201      	movs	r2, #1
 800029e:	480b      	ldr	r0, [pc, #44]	; (80002cc <read_register+0x5c>)
 80002a0:	f004 fca0 	bl	8004be4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 80002a4:	f107 0108 	add.w	r1, r7, #8
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ac:	2201      	movs	r2, #1
 80002ae:	4807      	ldr	r0, [pc, #28]	; (80002cc <read_register+0x5c>)
 80002b0:	f004 fe06 	bl	8004ec0 <HAL_SPI_Receive>
	CS_END();
 80002b4:	2201      	movs	r2, #1
 80002b6:	2110      	movs	r1, #16
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f001 f8f2 	bl	80014a4 <HAL_GPIO_WritePin>
	return pRxData[0];
 80002c0:	7a3b      	ldrb	r3, [r7, #8]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000200 	.word	0x20000200

080002d0 <write_register>:

void write_register(uint8_t r, uint8_t value) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	733b      	strb	r3, [r7, #12]
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	737b      	strb	r3, [r7, #13]
	CS_START();
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f001 f8d8 	bl	80014a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 80002f4:	f107 010c 	add.w	r1, r7, #12
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	2202      	movs	r2, #2
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <write_register+0x48>)
 8000300:	f004 fc70 	bl	8004be4 <HAL_SPI_Transmit>
	CS_END();
 8000304:	2201      	movs	r2, #1
 8000306:	2110      	movs	r1, #16
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f001 f8ca 	bl	80014a4 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000200 	.word	0x20000200

0800031c <imu_setup>:

#pragma GCC push_options
#pragma GCC optimize ("O0")
void imu_setup() {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	206b      	movs	r0, #107	; 0x6b
 8000326:	f7ff ffd3 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800032a:	2064      	movs	r0, #100	; 0x64
 800032c:	f000 fe06 	bl	8000f3c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000330:	206b      	movs	r0, #107	; 0x6b
 8000332:	f7ff ff9d 	bl	8000270 <read_register>
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
		if (reg & (1UL << 6)) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0ee      	beq.n	8000322 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000344:	2101      	movs	r1, #1
 8000346:	206b      	movs	r0, #107	; 0x6b
 8000348:	f7ff ffc2 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800034c:	2064      	movs	r0, #100	; 0x64
 800034e:	f000 fdf5 	bl	8000f3c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000352:	206b      	movs	r0, #107	; 0x6b
 8000354:	f7ff ff8c 	bl	8000270 <read_register>
 8000358:	4603      	mov	r3, r0
 800035a:	71bb      	strb	r3, [r7, #6]
		if (reg & (1 << 0)) {
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0ee      	beq.n	8000344 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000366:	2110      	movs	r1, #16
 8000368:	206a      	movs	r0, #106	; 0x6a
 800036a:	f7ff ffb1 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f000 fde4 	bl	8000f3c <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000374:	206a      	movs	r0, #106	; 0x6a
 8000376:	f7ff ff7b 	bl	8000270 <read_register>
 800037a:	4603      	mov	r3, r0
 800037c:	717b      	strb	r3, [r7, #5]
		if (reg & (1 << 4)) {
 800037e:	797b      	ldrb	r3, [r7, #5]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0ee      	beq.n	8000366 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000388:	2118      	movs	r1, #24
 800038a:	201c      	movs	r0, #28
 800038c:	f7ff ffa0 	bl	80002d0 <write_register>
		HAL_Delay(100);
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f000 fdd3 	bl	8000f3c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000396:	201c      	movs	r0, #28
 8000398:	f7ff ff6a 	bl	8000270 <read_register>
 800039c:	4603      	mov	r3, r0
 800039e:	713b      	strb	r3, [r7, #4]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 80003a0:	793b      	ldrb	r3, [r7, #4]
 80003a2:	f003 0310 	and.w	r3, r3, #16
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0ee      	beq.n	8000388 <imu_setup+0x6c>
 80003aa:	793b      	ldrb	r3, [r7, #4]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0e9      	beq.n	8000388 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	201d      	movs	r0, #29
 80003b8:	f7ff ff8a 	bl	80002d0 <write_register>
		HAL_Delay(100);
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 fdbd 	bl	8000f3c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 80003c2:	201d      	movs	r0, #29
 80003c4:	f7ff ff54 	bl	8000270 <read_register>
 80003c8:	4603      	mov	r3, r0
 80003ca:	70fb      	strb	r3, [r7, #3]
		if (reg == 0) {
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d000      	beq.n	80003d4 <imu_setup+0xb8>
	while (1) {
 80003d2:	e7ef      	b.n	80003b4 <imu_setup+0x98>
			break;
 80003d4:	bf00      	nop
		}
	}
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <read_x>:
#pragma GCC pop_options

int16_t read_x() {
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_XOUT_H);
 80003e4:	203b      	movs	r0, #59	; 0x3b
 80003e6:	f7ff ff43 	bl	8000270 <read_register>
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_XOUT_L);
 80003ee:	203c      	movs	r0, #60	; 0x3c
 80003f0:	f7ff ff3e 	bl	8000270 <read_register>
 80003f4:	4603      	mov	r3, r0
 80003f6:	71bb      	strb	r3, [r7, #6]
	int16_t x = (h << 8) | l;
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	021b      	lsls	r3, r3, #8
 80003fc:	b21a      	sxth	r2, r3
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	b21b      	sxth	r3, r3
 8000402:	4313      	orrs	r3, r2
 8000404:	80bb      	strh	r3, [r7, #4]
	return x;
 8000406:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <read_y>:

int16_t read_y() {
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_YOUT_H);
 8000418:	203d      	movs	r0, #61	; 0x3d
 800041a:	f7ff ff29 	bl	8000270 <read_register>
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_YOUT_L);
 8000422:	203e      	movs	r0, #62	; 0x3e
 8000424:	f7ff ff24 	bl	8000270 <read_register>
 8000428:	4603      	mov	r3, r0
 800042a:	71bb      	strb	r3, [r7, #6]
	int16_t y = (h << 8) | l;
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	021b      	lsls	r3, r3, #8
 8000430:	b21a      	sxth	r2, r3
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	b21b      	sxth	r3, r3
 8000436:	4313      	orrs	r3, r2
 8000438:	80bb      	strh	r3, [r7, #4]
	return y;
 800043a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <read_z>:

int16_t read_z() {
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_ZOUT_H);
 800044c:	203f      	movs	r0, #63	; 0x3f
 800044e:	f7ff ff0f 	bl	8000270 <read_register>
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_ZOUT_L);
 8000456:	2040      	movs	r0, #64	; 0x40
 8000458:	f7ff ff0a 	bl	8000270 <read_register>
 800045c:	4603      	mov	r3, r0
 800045e:	71bb      	strb	r3, [r7, #6]
	int16_t z = (h << 8) | l;
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	021b      	lsls	r3, r3, #8
 8000464:	b21a      	sxth	r2, r3
 8000466:	79bb      	ldrb	r3, [r7, #6]
 8000468:	b21b      	sxth	r3, r3
 800046a:	4313      	orrs	r3, r2
 800046c:	80bb      	strh	r3, [r7, #4]
	return z;
 800046e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <filter_p>:
// 15-100hz, order 4
//#define FILTER_N 4
//float num[] = { 0.0512, 0, -0.1024, 0, 0.0512 };
//float den[] = { -1, 3.1673, -3.8396, 2.1405, -0.4706 };

void filter_p(int16_t r[], int16_t f[], int16_t new) {
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	4613      	mov	r3, r2
 8000488:	80fb      	strh	r3, [r7, #6]
	if (new < -10000 || new > 10000) {
 800048a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800048e:	4a3e      	ldr	r2, [pc, #248]	; (8000588 <filter_p+0x10c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	db72      	blt.n	800057a <filter_p+0xfe>
 8000494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000498:	f242 7210 	movw	r2, #10000	; 0x2710
 800049c:	4293      	cmp	r3, r2
 800049e:	dc6c      	bgt.n	800057a <filter_p+0xfe>
		return;
	}
	r[0] = new;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	88fa      	ldrh	r2, [r7, #6]
 80004a4:	801a      	strh	r2, [r3, #0]
	f[0] = 0;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	2200      	movs	r2, #0
 80004aa:	801a      	strh	r2, [r3, #0]
	float sum = 0;
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
 80004b6:	e032      	b.n	800051e <filter_p+0xa2>
		sum += den[i] * f[i];
 80004b8:	4a34      	ldr	r2, [pc, #208]	; (800058c <filter_p+0x110>)
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	ed93 7a00 	vldr	s14, [r3]
 80004c4:	69bb      	ldr	r3, [r7, #24]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	4413      	add	r3, r2
 80004cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004d0:	ee07 3a90 	vmov	s15, r3
 80004d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80004e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004e4:	edc7 7a07 	vstr	s15, [r7, #28]
		sum += num[i] * r[i];
 80004e8:	4a29      	ldr	r2, [pc, #164]	; (8000590 <filter_p+0x114>)
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	4413      	add	r3, r2
 80004f0:	ed93 7a00 	vldr	s14, [r3]
 80004f4:	69bb      	ldr	r3, [r7, #24]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000500:	ee07 3a90 	vmov	s15, r3
 8000504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800050c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000514:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	3301      	adds	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2b02      	cmp	r3, #2
 8000522:	ddc9      	ble.n	80004b8 <filter_p+0x3c>
	}
	f[0] = sum;
 8000524:	edd7 7a07 	vldr	s15, [r7, #28]
 8000528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800052c:	ee17 3a90 	vmov	r3, s15
 8000530:	b21a      	sxth	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	801a      	strh	r2, [r3, #0]
//	f[0] = den[1] * f[1] + den[2] * f[2] + num[0] * r[0] + num[1] * r[1] + num[2] * r[2];

	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e01a      	b.n	8000572 <filter_p+0xf6>
		r[i + 1] = r[i];
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	441a      	add	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	3301      	adds	r3, #1
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	68f9      	ldr	r1, [r7, #12]
 800054c:	440b      	add	r3, r1
 800054e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000552:	801a      	strh	r2, [r3, #0]
		f[i + 1] = f[i];
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	68ba      	ldr	r2, [r7, #8]
 800055a:	441a      	add	r2, r3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	68b9      	ldr	r1, [r7, #8]
 8000564:	440b      	add	r3, r1
 8000566:	f9b2 2000 	ldrsh.w	r2, [r2]
 800056a:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	3b01      	subs	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	2b00      	cmp	r3, #0
 8000576:	dae1      	bge.n	800053c <filter_p+0xc0>
 8000578:	e000      	b.n	800057c <filter_p+0x100>
		return;
 800057a:	bf00      	nop
	}
}
 800057c:	3724      	adds	r7, #36	; 0x24
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	ffffd8f0 	.word	0xffffd8f0
 800058c:	20000010 	.word	0x20000010
 8000590:	20000004 	.word	0x20000004

08000594 <get_xyz>:
int16_t y_r[FILTER_N + 1] = { 0 };
int16_t y_f[FILTER_N + 1] = { 0 };
int16_t z_r[FILTER_N + 1] = { 0 };
int16_t z_f[FILTER_N + 1] = { 0 };

void get_xyz(int16_t *x, int16_t *y, int16_t *z) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	filter_p(x_r, x_f, read_x());
 80005a0:	f7ff ff1d 	bl	80003de <read_x>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	4913      	ldr	r1, [pc, #76]	; (80005f8 <get_xyz+0x64>)
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <get_xyz+0x68>)
 80005ac:	f7ff ff66 	bl	800047c <filter_p>
	filter_p(y_r, y_f, read_y());
 80005b0:	f7ff ff2f 	bl	8000412 <read_y>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4911      	ldr	r1, [pc, #68]	; (8000600 <get_xyz+0x6c>)
 80005ba:	4812      	ldr	r0, [pc, #72]	; (8000604 <get_xyz+0x70>)
 80005bc:	f7ff ff5e 	bl	800047c <filter_p>
	filter_p(z_r, z_f, read_z());
 80005c0:	f7ff ff41 	bl	8000446 <read_z>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	490f      	ldr	r1, [pc, #60]	; (8000608 <get_xyz+0x74>)
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <get_xyz+0x78>)
 80005cc:	f7ff ff56 	bl	800047c <filter_p>
	*x = x_f[0];
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <get_xyz+0x64>)
 80005d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	801a      	strh	r2, [r3, #0]
	*y = y_f[0];
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <get_xyz+0x6c>)
 80005dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	801a      	strh	r2, [r3, #0]
	*z = z_f[0];
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <get_xyz+0x74>)
 80005e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	801a      	strh	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200001b0 	.word	0x200001b0
 80005fc:	200001a8 	.word	0x200001a8
 8000600:	200001c0 	.word	0x200001c0
 8000604:	200001b8 	.word	0x200001b8
 8000608:	200001d0 	.word	0x200001d0
 800060c:	200001c8 	.word	0x200001c8

08000610 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800061e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4313      	orrs	r3, r2
 8000626:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000634:	68fb      	ldr	r3, [r7, #12]
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	2002      	movs	r0, #2
 800065a:	f7ff ffd9 	bl	8000610 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff ffd6 	bl	8000610 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000664:	2010      	movs	r0, #16
 8000666:	f7ff ffd3 	bl	8000610 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	4825      	ldr	r0, [pc, #148]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000672:	f000 ff17 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f000 ff11 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000686:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	481b      	ldr	r0, [pc, #108]	; (8000708 <MX_GPIO_Init+0xc4>)
 800069a:	f000 fd83 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800069e:	2310      	movs	r3, #16
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f000 fd75 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 80006ba:	23fb      	movs	r3, #251	; 0xfb
 80006bc:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <MX_GPIO_Init+0xc4>)
 80006cc:	f000 fd6a 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 80006d0:	2310      	movs	r3, #16
 80006d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <MX_GPIO_Init+0xc8>)
 80006e2:	f000 fd5f 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 80006e6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f000 fd52 	bl	80011a4 <HAL_GPIO_Init>

}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	48000400 	.word	0x48000400
 800070c:	48001000 	.word	0x48001000

08000710 <calculate_encoder_diff>:

#define ENCODER_MAX 65535
#define ENCODER_QUADRANT (ENCODER_MAX / 4)
#define ENCODER_QUADRANT_3 (ENCODER_QUADRANT * 3)

int8_t calculate_encoder_diff(uint32_t prev_pos, uint32_t cur_pos) {
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	int diff = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000724:	4293      	cmp	r3, r2
 8000726:	d90c      	bls.n	8000742 <calculate_encoder_diff+0x32>
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 800072e:	4293      	cmp	r3, r2
 8000730:	d807      	bhi.n	8000742 <calculate_encoder_diff+0x32>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800073c:	33ff      	adds	r3, #255	; 0xff
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e015      	b.n	800076e <calculate_encoder_diff+0x5e>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000748:	4293      	cmp	r3, r2
 800074a:	d80c      	bhi.n	8000766 <calculate_encoder_diff+0x56>
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000752:	4293      	cmp	r3, r2
 8000754:	d907      	bls.n	8000766 <calculate_encoder_diff+0x56>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000760:	3bff      	subs	r3, #255	; 0xff
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e003      	b.n	800076e <calculate_encoder_diff+0x5e>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t)clamp(INT8_MIN, INT8_MAX, diff);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000774:	db07      	blt.n	8000786 <calculate_encoder_diff+0x76>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b7f      	cmp	r3, #127	; 0x7f
 800077a:	dc02      	bgt.n	8000782 <calculate_encoder_diff+0x72>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b25b      	sxtb	r3, r3
 8000780:	e003      	b.n	800078a <calculate_encoder_diff+0x7a>
 8000782:	237f      	movs	r3, #127	; 0x7f
 8000784:	e001      	b.n	800078a <calculate_encoder_diff+0x7a>
 8000786:	f06f 037f 	mvn.w	r3, #127	; 0x7f
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fb47 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f879 	bl	8000898 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007a6:	f000 f8e3 	bl	8000970 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff ff4b 	bl	8000644 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80007ae:	f008 fdeb 	bl	8009388 <MX_USB_Device_Init>
  MX_SPI1_Init();
 80007b2:	f000 f931 	bl	8000a18 <MX_SPI1_Init>
  MX_TIM1_Init();
 80007b6:	f000 fa79 	bl	8000cac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80007ba:	2104      	movs	r1, #4
 80007bc:	482a      	ldr	r0, [pc, #168]	; (8000868 <main+0xd0>)
 80007be:	f005 f925 	bl	8005a0c <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	imu_setup();
 80007c2:	f7ff fdab 	bl	800031c <imu_setup>

	uint32_t encoder_prev = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
	while (1) {
		update_buttons();
 80007ca:	f7ff fcd7 	bl	800017c <update_buttons>
		feedback.left = left_down;
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <main+0xd4>)
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	4b27      	ldr	r3, [pc, #156]	; (8000870 <main+0xd8>)
 80007d4:	719a      	strb	r2, [r3, #6]
		feedback.middle = middle_down;
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <main+0xdc>)
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <main+0xd8>)
 80007dc:	71da      	strb	r2, [r3, #7]
		feedback.right = right_down;
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <main+0xe0>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <main+0xd8>)
 80007e4:	721a      	strb	r2, [r3, #8]
		feedback.b4 = b4_down;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <main+0xe4>)
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <main+0xd8>)
 80007ec:	725a      	strb	r2, [r3, #9]
		feedback.b5 = b5_down;
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <main+0xe8>)
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <main+0xd8>)
 80007f4:	729a      	strb	r2, [r3, #10]
		get_xyz(&feedback.x, &feedback.y, &feedback.z);
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <main+0xec>)
 80007f8:	4923      	ldr	r1, [pc, #140]	; (8000888 <main+0xf0>)
 80007fa:	481d      	ldr	r0, [pc, #116]	; (8000870 <main+0xd8>)
 80007fc:	f7ff feca 	bl	8000594 <get_xyz>
//		report.x = feedback.x;
//		report.y = feedback.y;

		uint32_t encoder_cur = TIM1->CNT;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <main+0xf4>)
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	603b      	str	r3, [r7, #0]
		report.wheel = calculate_encoder_diff(encoder_prev, encoder_cur); // needs a larger change to move at all
 8000806:	6839      	ldr	r1, [r7, #0]
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff81 	bl	8000710 <calculate_encoder_diff>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <main+0xf8>)
 8000814:	70da      	strb	r2, [r3, #3]
		encoder_prev = encoder_cur;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	607b      	str	r3, [r7, #4]
//		uint8_t buttons = 0;
//		uint8_t buttons = (2 << left_down) | (1 << middle_down) | (0 << right_down);// | (3 << feedback.b4) | (4 << feedback.b5);

		report.buttons = (left_down << 0) | (right_down << 1) | (middle_down << 2) | (b5_down << 3) | (b4_down << 4);
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <main+0xe0>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	b25a      	sxtb	r2, r3
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <main+0xd4>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	b25a      	sxtb	r2, r3
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <main+0xdc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b25a      	sxtb	r2, r3
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <main+0xe8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	b25b      	sxtb	r3, r3
 8000840:	4313      	orrs	r3, r2
 8000842:	b25a      	sxtb	r2, r3
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <main+0xe4>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b25b      	sxtb	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <main+0xf8>)
 8000854:	701a      	strb	r2, [r3, #0]

		USBD_HID_SendReport(&hUsbDeviceFS, &report, 5);
 8000856:	2205      	movs	r2, #5
 8000858:	490d      	ldr	r1, [pc, #52]	; (8000890 <main+0xf8>)
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <main+0xfc>)
 800085c:	f007 fc18 	bl	8008090 <USBD_HID_SendReport>
//		int16_t y = 0;
//		int16_t z = 0;

//		get_xyz(&feedback.x, &feedback.y, &feedback.z);
//		CDC_Transmit_FS(&feedback, sizeof(feedback));
		HAL_Delay(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f000 fb6b 	bl	8000f3c <HAL_Delay>
	while (1) {
 8000866:	e7b0      	b.n	80007ca <main+0x32>
 8000868:	20000264 	.word	0x20000264
 800086c:	200001a0 	.word	0x200001a0
 8000870:	200001ec 	.word	0x200001ec
 8000874:	200001a1 	.word	0x200001a1
 8000878:	200001a2 	.word	0x200001a2
 800087c:	200001a3 	.word	0x200001a3
 8000880:	200001a4 	.word	0x200001a4
 8000884:	200001f0 	.word	0x200001f0
 8000888:	200001ee 	.word	0x200001ee
 800088c:	40012c00 	.word	0x40012c00
 8000890:	200001f8 	.word	0x200001f8
 8000894:	200002b4 	.word	0x200002b4

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09a      	sub	sp, #104	; 0x68
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2248      	movs	r2, #72	; 0x48
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f009 f9fe 	bl	8009ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <SystemClock_Config+0xd4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008c6:	4a29      	ldr	r2, [pc, #164]	; (800096c <SystemClock_Config+0xd4>)
 80008c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <SystemClock_Config+0xd4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80008da:	2326      	movs	r3, #38	; 0x26
 80008dc:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008f4:	2360      	movs	r3, #96	; 0x60
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008fc:	2301      	movs	r3, #1
 80008fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000904:	2320      	movs	r3, #32
 8000906:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800090c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800090e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000912:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000914:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000918:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fe80 	bl	8003624 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800092a:	f000 f83e 	bl	80009aa <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800092e:	236f      	movs	r3, #111	; 0x6f
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2303      	movs	r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2103      	movs	r1, #3
 800094e:	4618      	mov	r0, r3
 8000950:	f003 f9f4 	bl	8003d3c <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800095a:	f000 f826 	bl	80009aa <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800095e:	f003 ff87 	bl	8004870 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000962:	bf00      	nop
 8000964:	3768      	adds	r7, #104	; 0x68
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	58000400 	.word	0x58000400

08000970 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2250      	movs	r2, #80	; 0x50
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f009 f993 	bl	8009ca8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000986:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800098c:	2310      	movs	r3, #16
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fdf6 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800099e:	f000 f804 	bl	80009aa <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80009a2:	bf00      	nop
 80009a4:	3750      	adds	r7, #80	; 0x50
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ae:	b672      	cpsid	i
}
 80009b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009b2:	e7fe      	b.n	80009b2 <Error_Handler+0x8>

080009b4 <LL_AHB2_GRP1_EnableClock>:
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d8:	68fb      	ldr	r3, [r7, #12]
}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <MX_SPI1_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a4e:	2210      	movs	r2, #16
 8000a50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a66:	2207      	movs	r2, #7
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_SPI1_Init+0x74>)
 8000a78:	f004 f811 	bl	8004a9e <HAL_SPI_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f7ff ff92 	bl	80009aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000200 	.word	0x20000200
 8000a90:	40013000 	.word	0x40013000

08000a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_SPI_MspInit+0x5c>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d117      	bne.n	8000ae6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000aba:	f7ff ff94 	bl	80009e6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ff78 	bl	80009b4 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000ac4:	23c2      	movs	r3, #194	; 0xc2
 8000ac6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 fb5f 	bl	80011a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40013000 	.word	0x40013000

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2101      	movs	r1, #1
 8000afc:	f06f 000b 	mvn.w	r0, #11
 8000b00:	f000 fb1b 	bl	800113a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	f06f 000a 	mvn.w	r0, #10
 8000b0c:	f000 fb15 	bl	800113a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2101      	movs	r1, #1
 8000b14:	f06f 0009 	mvn.w	r0, #9
 8000b18:	f000 fb0f 	bl	800113a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2101      	movs	r1, #1
 8000b20:	f06f 0004 	mvn.w	r0, #4
 8000b24:	f000 fb09 	bl	800113a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	f06f 0003 	mvn.w	r0, #3
 8000b30:	f000 fb03 	bl	800113a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	f06f 0001 	mvn.w	r0, #1
 8000b3c:	f000 fafd 	bl	800113a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f9a8 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <USB_LP_IRQHandler+0x10>)
 8000b9e:	f000 fda0 	bl	80016e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000784 	.word	0x20000784

08000bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <SystemInit+0x90>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <SystemInit+0x90>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000bd8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <SystemInit+0x94>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bf6:	f023 0305 	bic.w	r3, r3, #5
 8000bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c0a:	f023 0301 	bic.w	r3, r3, #1
 8000c0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <SystemInit+0x98>)
 8000c18:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00
 8000c40:	faf6fefb 	.word	0xfaf6fefb
 8000c44:	22041000 	.word	0x22041000

08000c48 <LL_AHB2_GRP1_EnableClock>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_APB2_GRP1_EnableClock>:
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	; 0x30
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2224      	movs	r2, #36	; 0x24
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f008 fff4 	bl	8009ca8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cca:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000ccc:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <MX_TIM1_Init+0xb0>)
 8000cce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000d22:	f004 fdcd 	bl	80058c0 <HAL_TIM_Encoder_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000d2c:	f7ff fe3d 	bl	80009aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_TIM1_Init+0xac>)
 8000d42:	f004 ff7b 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d4c:	f7ff fe2d 	bl	80009aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000264 	.word	0x20000264
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_TIM_Encoder_MspInit+0x5c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d118      	bne.n	8000db4 <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d86:	f7ff ff78 	bl	8000c7a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff ff5c 	bl	8000c48 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f000 f9f8 	bl	80011a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40012c00 	.word	0x40012c00

08000dc0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000dc0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc4:	3304      	adds	r3, #4

08000dc6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000dca:	d3f9      	bcc.n	8000dc0 <CopyDataInit>
  bx lr
 8000dcc:	4770      	bx	lr

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000dce:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000dd0:	3004      	adds	r0, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000dd2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>
  bx lr
 8000dd6:	4770      	bx	lr

08000dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000dda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ddc:	f7ff fee6 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <LoopForever+0x8>)
 8000de2:	490c      	ldr	r1, [pc, #48]	; (8000e14 <LoopForever+0xc>)
 8000de4:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <LoopForever+0x10>)
 8000de6:	2300      	movs	r3, #0
 8000de8:	f7ff ffed 	bl	8000dc6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <LoopForever+0x14>)
 8000dee:	490c      	ldr	r1, [pc, #48]	; (8000e20 <LoopForever+0x18>)
 8000df0:	2300      	movs	r3, #0
 8000df2:	f7ff ffee 	bl	8000dd2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000df6:	480b      	ldr	r0, [pc, #44]	; (8000e24 <LoopForever+0x1c>)
 8000df8:	490b      	ldr	r1, [pc, #44]	; (8000e28 <LoopForever+0x20>)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f7ff ffe9 	bl	8000dd2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e00:	f008 ff2e 	bl	8009c60 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000e04:	f7ff fcc8 	bl	8000798 <main>

08000e08 <LoopForever>:

LoopForever:
  b LoopForever
 8000e08:	e7fe      	b.n	8000e08 <LoopForever>
 8000e0a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000e0c:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20000184 	.word	0x20000184
 8000e18:	08009dcc 	.word	0x08009dcc
  INIT_BSS _sbss, _ebss
 8000e1c:	20000184 	.word	0x20000184
 8000e20:	20000a78 	.word	0x20000a78
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e24:	20030000 	.word	0x20030000
 8000e28:	20030000 	.word	0x20030000

08000e2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_Init+0x3c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_Init+0x3c>)
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f000 f96c 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f80f 	bl	8000e70 <HAL_InitTick>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	e001      	b.n	8000e62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5e:	f7ff fe49 	bl	8000af4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e62:	79fb      	ldrb	r3, [r7, #7]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58004000 	.word	0x58004000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d024      	beq.n	8000ece <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e84:	f003 f906 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_InitTick+0x6c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f974 	bl	800118a <HAL_SYSTICK_Config>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10f      	bne.n	8000ec8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d809      	bhi.n	8000ec2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb6:	f000 f940 	bl	800113a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_InitTick+0x70>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e007      	b.n	8000ed2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e004      	b.n	8000ed2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e001      	b.n	8000ed2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000024 	.word	0x20000024
 8000ee0:	20000020 	.word	0x20000020

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000024 	.word	0x20000024
 8000f08:	200002b0 	.word	0x200002b0

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200002b0 	.word	0x200002b0

08000f24 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTickPrio+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000020 	.word	0x20000020

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffe2 	bl	8000f0c <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffd2 	bl	8000f0c <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
    {
    }
  }
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000024 	.word	0x20000024

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <__NVIC_EnableIRQ+0x38>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff29 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff40 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff90 	bl	8001078 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5f 	bl	8001024 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff33 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa4 	bl	80010e0 <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	e146      	b.n	8001442 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8138 	beq.w	800143c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d005      	beq.n	80011e4 <HAL_GPIO_Init+0x40>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 0201 	and.w	r2, r3, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b03      	cmp	r3, #3
 8001250:	d017      	beq.n	8001282 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d123      	bne.n	80012d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	6939      	ldr	r1, [r7, #16]
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0203 	and.w	r2, r3, #3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8092 	beq.w	800143c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001318:	4a51      	ldr	r2, [pc, #324]	; (8001460 <HAL_GPIO_Init+0x2bc>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001342:	d013      	beq.n	800136c <HAL_GPIO_Init+0x1c8>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_GPIO_Init+0x2c0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00d      	beq.n	8001368 <HAL_GPIO_Init+0x1c4>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_GPIO_Init+0x2c4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_Init+0x1c0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a45      	ldr	r2, [pc, #276]	; (800146c <HAL_GPIO_Init+0x2c8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_GPIO_Init+0x1bc>
 800135c:	2304      	movs	r3, #4
 800135e:	e006      	b.n	800136e <HAL_GPIO_Init+0x1ca>
 8001360:	2307      	movs	r3, #7
 8001362:	e004      	b.n	800136e <HAL_GPIO_Init+0x1ca>
 8001364:	2302      	movs	r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x1ca>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_GPIO_Init+0x1ca>
 800136c:	2300      	movs	r3, #0
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4093      	lsls	r3, r2
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137e:	4938      	ldr	r1, [pc, #224]	; (8001460 <HAL_GPIO_Init+0x2bc>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800138c:	4b38      	ldr	r3, [pc, #224]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b0:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013da:	4a25      	ldr	r2, [pc, #148]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001406:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 8001410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	f47f aeb1 	bne.w	80011b4 <HAL_GPIO_Init+0x10>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40010000 	.word	0x40010000
 8001464:	48000400 	.word	0x48000400
 8001468:	48000800 	.word	0x48000800
 800146c:	48001000 	.word	0x48001000
 8001470:	58000800 	.word	0x58000800

08001474 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e001      	b.n	8001496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af06      	add	r7, sp, #24
 80014da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0d7      	b.n	8001696 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f008 f8ac 	bl	8009658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f004 fc0c 	bl	8005d2a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e04c      	b.n	80015b2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	3301      	adds	r3, #1
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	b298      	uxth	r0, r3
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	3336      	adds	r3, #54	; 0x36
 8001556:	4602      	mov	r2, r0
 8001558:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	3303      	adds	r3, #3
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	3338      	adds	r3, #56	; 0x38
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	333c      	adds	r3, #60	; 0x3c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	3340      	adds	r3, #64	; 0x40
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3ad      	bcc.n	8001518 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e044      	b.n	800164c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	3301      	adds	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	d3b5      	bcc.n	80015c2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	687e      	ldr	r6, [r7, #4]
 800165e:	466d      	mov	r5, sp
 8001660:	f106 0410 	add.w	r4, r6, #16
 8001664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	602b      	str	r3, [r5, #0]
 800166c:	1d33      	adds	r3, r6, #4
 800166e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f004 fb75 	bl	8005d60 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f001 fc11 	bl	8002eb6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800169e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_PCD_Start+0x16>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e012      	b.n	80016da <HAL_PCD_Start+0x3c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fb1b 	bl	8005cfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 fad0 	bl	8007c70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 fad5 	bl	8007c9e <USB_ReadInterrupts>
 80016f4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fb0e 	bl	8001d22 <PCD_EP_ISR_Handler>

    return;
 8001706:	e110      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170e:	2b00      	cmp	r3, #0
 8001710:	d013      	beq.n	800173a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001724:	b292      	uxth	r2, r2
 8001726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f008 f847 	bl	80097be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8fc 	bl	8001930 <HAL_PCD_SetAddress>

    return;
 8001738:	e0f7      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00c      	beq.n	800175e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001756:	b292      	uxth	r2, r2
 8001758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800175c:	e0e5      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00c      	beq.n	8001782 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001770:	b29a      	uxth	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800177a:	b292      	uxth	r2, r2
 800177c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001780:	e0d3      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d034      	beq.n	80017f6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	b292      	uxth	r2, r2
 80017a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0208 	bic.w	r2, r2, #8
 80017b6:	b292      	uxth	r2, r2
 80017b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017ce:	2100      	movs	r1, #0
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f008 f9c5 	bl	8009b60 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f008 f82a 	bl	8009830 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017f4:	e099      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d027      	beq.n	8001850 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0208 	orr.w	r2, r2, #8
 8001812:	b292      	uxth	r2, r2
 8001814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0204 	orr.w	r2, r2, #4
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f007 ffd7 	bl	80097fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800184e:	e06c      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	2b00      	cmp	r3, #0
 8001858:	d040      	beq.n	80018dc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800186c:	b292      	uxth	r2, r2
 800186e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d12b      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0204 	orr.w	r2, r2, #4
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0208 	orr.w	r2, r2, #8
 80018a6:	b292      	uxth	r2, r2
 80018a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80018bc:	b29b      	uxth	r3, r3
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018ca:	2101      	movs	r1, #1
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f008 f947 	bl	8009b60 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80018d2:	e02a      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f007 ff91 	bl	80097fc <HAL_PCD_SuspendCallback>
    return;
 80018da:	e026      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00f      	beq.n	8001906 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018f8:	b292      	uxth	r2, r2
 80018fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f007 ff4f 	bl	80097a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001904:	e011      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00c      	beq.n	800192a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001922:	b292      	uxth	r2, r2
 8001924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001928:	bf00      	nop
  }
}
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_PCD_SetAddress+0x1a>
 8001946:	2302      	movs	r3, #2
 8001948:	e013      	b.n	8001972 <HAL_PCD_SetAddress+0x42>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f006 f970 	bl	8007c48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4603      	mov	r3, r0
 800198a:	70fb      	strb	r3, [r7, #3]
 800198c:	460b      	mov	r3, r1
 800198e:	803b      	strh	r3, [r7, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	da0e      	bge.n	80019be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	705a      	strb	r2, [r3, #1]
 80019bc:	e00e      	b.n	80019dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	f003 0207 	and.w	r2, r3, #7
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019e8:	883a      	ldrh	r2, [r7, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	78ba      	ldrb	r2, [r7, #2]
 80019f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a06:	78bb      	ldrb	r3, [r7, #2]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d102      	bne.n	8001a12 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_PCD_EP_Open+0xa6>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e00e      	b.n	8001a3e <HAL_PCD_EP_Open+0xc4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 f9b8 	bl	8005da4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da0e      	bge.n	8001a78 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	705a      	strb	r2, [r3, #1]
 8001a76:	e00e      	b.n	8001a96 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	f003 0207 	and.w	r2, r3, #7
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_PCD_EP_Close+0x6a>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e00e      	b.n	8001ace <HAL_PCD_EP_Close+0x88>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 fd04 	bl	80064cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f003 0207 	and.w	r2, r3, #7
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2200      	movs	r2, #0
 8001b14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b22:	7afb      	ldrb	r3, [r7, #11]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d106      	bne.n	8001b3a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6979      	ldr	r1, [r7, #20]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 feb7 	bl	80068a6 <USB_EPStartXfer>
 8001b38:	e005      	b.n	8001b46 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6979      	ldr	r1, [r7, #20]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f004 feb0 	bl	80068a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6979      	ldr	r1, [r7, #20]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 fe74 	bl	80068a6 <USB_EPStartXfer>
 8001bbe:	e005      	b.n	8001bcc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6979      	ldr	r1, [r7, #20]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 fe6d 	bl	80068a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0207 	and.w	r2, r3, #7
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d901      	bls.n	8001bf4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e03e      	b.n	8001c72 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da0e      	bge.n	8001c1a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	705a      	strb	r2, [r3, #1]
 8001c18:	e00c      	b.n	8001c34 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_PCD_EP_SetStall+0x7e>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e00e      	b.n	8001c72 <HAL_PCD_EP_SetStall+0x9c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f005 fef1 	bl	8007a4a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f003 020f 	and.w	r2, r3, #15
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d901      	bls.n	8001c98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e040      	b.n	8001d1a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da0e      	bge.n	8001cbe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	705a      	strb	r2, [r3, #1]
 8001cbc:	e00e      	b.n	8001cdc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 0207 	and.w	r2, r3, #7
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_EP_ClrStall+0x82>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e00e      	b.n	8001d1a <HAL_PCD_EP_ClrStall+0xa0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 feee 	bl	8007aec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b096      	sub	sp, #88	; 0x58
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d2a:	e39c      	b.n	8002466 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001d46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 815e 	bne.w	800200c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d150      	bne.n	8001dfe <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6c:	81fb      	strh	r3, [r7, #14]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3328      	adds	r3, #40	; 0x28
 8001d84:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	441a      	add	r2, r3
 8001db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f007 fcd5 	bl	800976e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 834a 	beq.w	8002466 <PCD_EP_ISR_Handler+0x744>
 8001dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8345 	bne.w	8002466 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b292      	uxth	r2, r2
 8001df0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dfc:	e333      	b.n	8002466 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e04:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d032      	beq.n	8001e82 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f005 ff73 	bl	8007d42 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e68:	4013      	ands	r3, r2
 8001e6a:	823b      	strh	r3, [r7, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	8a3a      	ldrh	r2, [r7, #16]
 8001e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e76:	b292      	uxth	r2, r2
 8001e78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f007 fc4a 	bl	8009714 <HAL_PCD_SetupStageCallback>
 8001e80:	e2f1      	b.n	8002466 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e82:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f280 82ed 	bge.w	8002466 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e98:	4013      	ands	r3, r2
 8001e9a:	83fb      	strh	r3, [r7, #30]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	8bfa      	ldrh	r2, [r7, #30]
 8001ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d019      	beq.n	8001f0e <PCD_EP_ISR_Handler+0x1ec>
 8001eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d015      	beq.n	8001f0e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee8:	6959      	ldr	r1, [r3, #20]
 8001eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f005 ff25 	bl	8007d42 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	441a      	add	r2, r3
 8001f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f06:	2100      	movs	r1, #0
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f007 fc15 	bl	8009738 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 82a3 	bne.w	8002466 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4413      	add	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b3e      	cmp	r3, #62	; 0x3e
 8001f46:	d918      	bls.n	8001f7a <PCD_EP_ISR_Handler+0x258>
 8001f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <PCD_EP_ISR_Handler+0x240>
 8001f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
 8001f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	e029      	b.n	8001fce <PCD_EP_ISR_Handler+0x2ac>
 8001f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d112      	bne.n	8001fa8 <PCD_EP_ISR_Handler+0x286>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	e012      	b.n	8001fce <PCD_EP_ISR_Handler+0x2ac>
 8001fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	647b      	str	r3, [r7, #68]	; 0x44
 8001fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <PCD_EP_ISR_Handler+0x2a0>
 8001fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fde:	827b      	strh	r3, [r7, #18]
 8001fe0:	8a7b      	ldrh	r3, [r7, #18]
 8001fe2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fe6:	827b      	strh	r3, [r7, #18]
 8001fe8:	8a7b      	ldrh	r3, [r7, #18]
 8001fea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fee:	827b      	strh	r3, [r7, #18]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	8a7b      	ldrh	r3, [r7, #18]
 8001ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002006:	b29b      	uxth	r3, r3
 8002008:	8013      	strh	r3, [r2, #0]
 800200a:	e22c      	b.n	8002466 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002020:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002024:	2b00      	cmp	r3, #0
 8002026:	f280 80f6 	bge.w	8002216 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29a      	uxth	r2, r3
 800203c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002040:	4013      	ands	r3, r2
 8002042:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800205c:	b292      	uxth	r2, r2
 800205e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002060:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002078:	7b1b      	ldrb	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d123      	bne.n	80020c6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	4413      	add	r3, r2
 8002098:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80020a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 808e 	beq.w	80021cc <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b6:	6959      	ldr	r1, [r3, #20]
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	88da      	ldrh	r2, [r3, #6]
 80020bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020c0:	f005 fe3f 	bl	8007d42 <USB_ReadPMA>
 80020c4:	e082      	b.n	80021cc <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d10a      	bne.n	80020e4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020d2:	461a      	mov	r2, r3
 80020d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f9d3 	bl	8002482 <HAL_PCD_EP_DB_Receive>
 80020dc:	4603      	mov	r3, r0
 80020de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80020e2:	e073      	b.n	80021cc <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	441a      	add	r2, r3
 8002110:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800211c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002124:	b29b      	uxth	r3, r3
 8002126:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d022      	beq.n	8002188 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214a:	b29b      	uxth	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002166:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800216a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02c      	beq.n	80021cc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002178:	6959      	ldr	r1, [r3, #20]
 800217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217c:	891a      	ldrh	r2, [r3, #8]
 800217e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002182:	f005 fdde 	bl	8007d42 <USB_ReadPMA>
 8002186:	e021      	b.n	80021cc <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80021b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021be:	6959      	ldr	r1, [r3, #20]
 80021c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c2:	895a      	ldrh	r2, [r3, #10]
 80021c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021c8:	f005 fdbb 	bl	8007d42 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021d4:	441a      	add	r2, r3
 80021d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021e2:	441a      	add	r2, r3
 80021e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <PCD_EP_ISR_Handler+0x4da>
 80021f0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80021f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d206      	bcs.n	800220a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f007 fa98 	bl	8009738 <HAL_PCD_DataOutStageCallback>
 8002208:	e005      	b.n	8002216 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002210:	4618      	mov	r0, r3
 8002212:	f004 fb48 	bl	80068a6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002216:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8121 	beq.w	8002466 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002224:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	441a      	add	r2, r3
 8002264:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002270:	b29b      	uxth	r3, r3
 8002272:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002276:	78db      	ldrb	r3, [r3, #3]
 8002278:	2b02      	cmp	r3, #2
 800227a:	f000 80a2 	beq.w	80023c2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800227e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002286:	7b1b      	ldrb	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8093 	beq.w	80023b4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800228e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d046      	beq.n	8002328 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800229a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d126      	bne.n	80022f0 <PCD_EP_ISR_Handler+0x5ce>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	4413      	add	r3, r2
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	00da      	lsls	r2, r3, #3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022c8:	623b      	str	r3, [r7, #32]
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	e061      	b.n	80023b4 <PCD_EP_ISR_Handler+0x692>
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d15d      	bne.n	80023b4 <PCD_EP_ISR_Handler+0x692>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	4413      	add	r3, r2
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	00da      	lsls	r2, r3, #3
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	4413      	add	r3, r2
 800231a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	2200      	movs	r2, #0
 8002324:	801a      	strh	r2, [r3, #0]
 8002326:	e045      	b.n	80023b4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d126      	bne.n	8002384 <PCD_EP_ISR_Handler+0x662>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234a:	4413      	add	r3, r2
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
 800234e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	00da      	lsls	r2, r3, #3
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	4413      	add	r3, r2
 8002358:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002368:	b29a      	uxth	r2, r3
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237c:	b29a      	uxth	r2, r3
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	e017      	b.n	80023b4 <PCD_EP_ISR_Handler+0x692>
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d113      	bne.n	80023b4 <PCD_EP_ISR_Handler+0x692>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239a:	4413      	add	r3, r2
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800239e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00da      	lsls	r2, r3, #3
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	4413      	add	r3, r2
 80023a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	2200      	movs	r2, #0
 80023b2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f007 f9d7 	bl	800976e <HAL_PCD_DataInStageCallback>
 80023c0:	e051      	b.n	8002466 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80023c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d144      	bne.n	8002458 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80023f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023fe:	429a      	cmp	r2, r3
 8002400:	d907      	bls.n	8002412 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800240a:	1ad2      	subs	r2, r2, r3
 800240c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240e:	619a      	str	r2, [r3, #24]
 8002410:	e002      	b.n	8002418 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d106      	bne.n	800242e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f007 f9a1 	bl	800976e <HAL_PCD_DataInStageCallback>
 800242c:	e01b      	b.n	8002466 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002436:	441a      	add	r2, r3
 8002438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800243c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002444:	441a      	add	r2, r3
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002450:	4618      	mov	r0, r3
 8002452:	f004 fa28 	bl	80068a6 <USB_EPStartXfer>
 8002456:	e006      	b.n	8002466 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002458:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800245c:	461a      	mov	r2, r3
 800245e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f917 	bl	8002694 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800246e:	b29b      	uxth	r3, r3
 8002470:	b21b      	sxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f6ff ac5a 	blt.w	8001d2c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3758      	adds	r7, #88	; 0x58
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b088      	sub	sp, #32
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	4613      	mov	r3, r2
 800248e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d07c      	beq.n	8002594 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	8b7b      	ldrh	r3, [r7, #26]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d306      	bcc.n	80024d8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	8b7b      	ldrh	r3, [r7, #26]
 80024d0:	1ad2      	subs	r2, r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	619a      	str	r2, [r3, #24]
 80024d6:	e002      	b.n	80024de <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d123      	bne.n	800252e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002500:	833b      	strh	r3, [r7, #24]
 8002502:	8b3b      	ldrh	r3, [r7, #24]
 8002504:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002508:	833b      	strh	r3, [r7, #24]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	441a      	add	r2, r3
 8002518:	8b3b      	ldrh	r3, [r7, #24]
 800251a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800251e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252a:	b29b      	uxth	r3, r3
 800252c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01f      	beq.n	8002578 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	82fb      	strh	r3, [r7, #22]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	441a      	add	r2, r3
 8002562:	8afb      	ldrh	r3, [r7, #22]
 8002564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800256c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002574:	b29b      	uxth	r3, r3
 8002576:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002578:	8b7b      	ldrh	r3, [r7, #26]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8085 	beq.w	800268a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6959      	ldr	r1, [r3, #20]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	891a      	ldrh	r2, [r3, #8]
 800258c:	8b7b      	ldrh	r3, [r7, #26]
 800258e:	f005 fbd8 	bl	8007d42 <USB_ReadPMA>
 8002592:	e07a      	b.n	800268a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	8b7b      	ldrh	r3, [r7, #26]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d306      	bcc.n	80025d2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	8b7b      	ldrh	r3, [r7, #26]
 80025ca:	1ad2      	subs	r2, r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	619a      	str	r2, [r3, #24]
 80025d0:	e002      	b.n	80025d8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d123      	bne.n	8002628 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	83fb      	strh	r3, [r7, #30]
 80025fc:	8bfb      	ldrh	r3, [r7, #30]
 80025fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002602:	83fb      	strh	r3, [r7, #30]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	8bfb      	ldrh	r3, [r7, #30]
 8002614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800261c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	b29b      	uxth	r3, r3
 8002626:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11f      	bne.n	8002672 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	83bb      	strh	r3, [r7, #28]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	441a      	add	r2, r3
 800265c:	8bbb      	ldrh	r3, [r7, #28]
 800265e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800266e:	b29b      	uxth	r3, r3
 8002670:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002672:	8b7b      	ldrh	r3, [r7, #26]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6959      	ldr	r1, [r3, #20]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	895a      	ldrh	r2, [r3, #10]
 8002684:	8b7b      	ldrh	r3, [r7, #26]
 8002686:	f005 fb5c 	bl	8007d42 <USB_ReadPMA>
    }
  }

  return count;
 800268a:	8b7b      	ldrh	r3, [r7, #26]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0a2      	sub	sp, #136	; 0x88
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 81c5 	beq.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026de:	429a      	cmp	r2, r3
 80026e0:	d907      	bls.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ea:	1ad2      	subs	r2, r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	619a      	str	r2, [r3, #24]
 80026f0:	e002      	b.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f040 80b9 	bne.w	8002874 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d126      	bne.n	8002758 <HAL_PCD_EP_DB_Transmit+0xc4>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	4413      	add	r3, r2
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	00da      	lsls	r2, r3, #3
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	4413      	add	r3, r2
 800272c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800273c:	b29a      	uxth	r2, r3
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002750:	b29a      	uxth	r2, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	801a      	strh	r2, [r3, #0]
 8002756:	e01a      	b.n	800278e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	785b      	ldrb	r3, [r3, #1]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d116      	bne.n	800278e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	4413      	add	r3, r2
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	00da      	lsls	r2, r3, #3
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	4413      	add	r3, r2
 8002782:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	2200      	movs	r2, #0
 800278c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d126      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x156>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4413      	add	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	00da      	lsls	r2, r3, #3
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4413      	add	r3, r2
 80027be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e017      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x186>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d113      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0x186>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	4413      	add	r3, r2
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	00da      	lsls	r2, r3, #3
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	4413      	add	r3, r2
 800280e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2200      	movs	r2, #0
 8002818:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f006 ffa4 	bl	800976e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 82d2 	beq.w	8002dd6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284c:	827b      	strh	r3, [r7, #18]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	441a      	add	r2, r3
 800285c:	8a7b      	ldrh	r3, [r7, #18]
 800285e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800286a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286e:	b29b      	uxth	r3, r3
 8002870:	8013      	strh	r3, [r2, #0]
 8002872:	e2b0      	b.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d021      	beq.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002898:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	441a      	add	r2, r3
 80028aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028be:	b29b      	uxth	r3, r3
 80028c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f040 8284 	bne.w	8002dd6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028d6:	441a      	add	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028e4:	441a      	add	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d309      	bcc.n	800290a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002902:	1ad2      	subs	r2, r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	621a      	str	r2, [r3, #32]
 8002908:	e015      	b.n	8002936 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d107      	bne.n	8002922 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002912:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002916:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002920:	e009      	b.n	8002936 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2200      	movs	r2, #0
 8002934:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d155      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x356>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	63bb      	str	r3, [r7, #56]	; 0x38
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	4413      	add	r3, r2
 8002954:	63bb      	str	r3, [r7, #56]	; 0x38
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	00da      	lsls	r2, r3, #3
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	4413      	add	r3, r2
 8002960:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
 8002966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002968:	2b3e      	cmp	r3, #62	; 0x3e
 800296a:	d916      	bls.n	800299a <HAL_PCD_EP_DB_Transmit+0x306>
 800296c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
 8002972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800297c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297e:	3b01      	subs	r3, #1
 8002980:	64bb      	str	r3, [r7, #72]	; 0x48
 8002982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002984:	b29b      	uxth	r3, r3
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	b29b      	uxth	r3, r3
 800298a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002992:	b29a      	uxth	r2, r3
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	801a      	strh	r2, [r3, #0]
 8002998:	e043      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x38e>
 800299a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299c:	2b00      	cmp	r3, #0
 800299e:	d112      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x332>
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029be:	b29a      	uxth	r2, r3
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	801a      	strh	r2, [r3, #0]
 80029c4:	e02d      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x38e>
 80029c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80029cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_PCD_EP_DB_Transmit+0x348>
 80029d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d8:	3301      	adds	r3, #1
 80029da:	64bb      	str	r3, [r7, #72]	; 0x48
 80029dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029de:	b29b      	uxth	r3, r3
 80029e0:	029b      	lsls	r3, r3, #10
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	e01b      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x38e>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d117      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x38e>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	643b      	str	r3, [r7, #64]	; 0x40
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a06:	4413      	add	r3, r2
 8002a08:	643b      	str	r3, [r7, #64]	; 0x40
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	00da      	lsls	r2, r3, #3
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	4413      	add	r3, r2
 8002a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a20:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6959      	ldr	r1, [r3, #20]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	891a      	ldrh	r2, [r3, #8]
 8002a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f005 f944 	bl	8007cbe <USB_WritePMA>
 8002a36:	e1ce      	b.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d307      	bcc.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	699a      	ldr	r2, [r3, #24]
 8002a70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	619a      	str	r2, [r3, #24]
 8002a7a:	e002      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 80c4 	bne.w	8002c14 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d126      	bne.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa8:	4413      	add	r3, r2
 8002aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	00da      	lsls	r2, r3, #3
 8002ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aba:	667b      	str	r3, [r7, #100]	; 0x64
 8002abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aca:	801a      	strh	r2, [r3, #0]
 8002acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	e01a      	b.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x484>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d116      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x484>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	673b      	str	r3, [r7, #112]	; 0x70
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afe:	4413      	add	r3, r2
 8002b00:	673b      	str	r3, [r7, #112]	; 0x70
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	00da      	lsls	r2, r3, #3
 8002b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	2200      	movs	r2, #0
 8002b16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d12f      	bne.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3e:	4413      	add	r3, r2
 8002b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	00da      	lsls	r2, r3, #3
 8002b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b4e:	4413      	add	r3, r2
 8002b50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	e017      	b.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x522>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d113      	bne.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x522>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b9c:	4413      	add	r3, r2
 8002b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	00da      	lsls	r2, r3, #3
 8002ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ba8:	4413      	add	r3, r2
 8002baa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bae:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f006 fdd6 	bl	800976e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 8104 	bne.w	8002dd6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	441a      	add	r2, r3
 8002bfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	8013      	strh	r3, [r2, #0]
 8002c12:	e0e0      	b.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d121      	bne.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	f040 80b4 	bne.w	8002dd6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c76:	441a      	add	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c84:	441a      	add	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6a1a      	ldr	r2, [r3, #32]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d309      	bcc.n	8002caa <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6a1a      	ldr	r2, [r3, #32]
 8002ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca2:	1ad2      	subs	r2, r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	621a      	str	r2, [r3, #32]
 8002ca8:	e015      	b.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cc0:	e009      	b.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	663b      	str	r3, [r7, #96]	; 0x60
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d155      	bne.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf8:	4413      	add	r3, r2
 8002cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	00da      	lsls	r2, r3, #3
 8002d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d04:	4413      	add	r3, r2
 8002d06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d10:	d916      	bls.n	8002d40 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	677b      	str	r3, [r7, #116]	; 0x74
 8002d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x694>
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	3b01      	subs	r3, #1
 8002d26:	677b      	str	r3, [r7, #116]	; 0x74
 8002d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	029b      	lsls	r3, r3, #10
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	e040      	b.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d112      	bne.n	8002d6c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	e02a      	b.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	677b      	str	r3, [r7, #116]	; 0x74
 8002d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7e:	3301      	adds	r3, #1
 8002d80:	677b      	str	r3, [r7, #116]	; 0x74
 8002d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	e018      	b.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d114      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da6:	4413      	add	r3, r2
 8002da8:	663b      	str	r3, [r7, #96]	; 0x60
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db2:	4413      	add	r3, r2
 8002db4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6959      	ldr	r1, [r3, #20]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	895a      	ldrh	r2, [r3, #10]
 8002dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f004 ff74 	bl	8007cbe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df0:	823b      	strh	r3, [r7, #16]
 8002df2:	8a3b      	ldrh	r3, [r7, #16]
 8002df4:	f083 0310 	eor.w	r3, r3, #16
 8002df8:	823b      	strh	r3, [r7, #16]
 8002dfa:	8a3b      	ldrh	r3, [r7, #16]
 8002dfc:	f083 0320 	eor.w	r3, r3, #32
 8002e00:	823b      	strh	r3, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	8a3b      	ldrh	r3, [r7, #16]
 8002e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3788      	adds	r7, #136	; 0x88
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e42:	897b      	ldrh	r3, [r7, #10]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	e009      	b.n	8002e7a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e66:	897a      	ldrh	r2, [r7, #10]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e7a:	893b      	ldrh	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	80da      	strh	r2, [r3, #6]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2201      	movs	r2, #1
 8002e94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	6013      	str	r3, [r2, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	58000400 	.word	0x58000400

08002f2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	58000400 	.word	0x58000400

08002f48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f56:	6053      	str	r3, [r2, #4]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	58000400 	.word	0x58000400

08002f68 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7a:	d101      	bne.n	8002f80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fda:	d101      	bne.n	8002fe0 <LL_RCC_HSE_IsReady+0x18>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_RCC_HSE_IsReady+0x1a>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303a:	d101      	bne.n	8003040 <LL_RCC_HSI_IsReady+0x18>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_RCC_HSI_IsReady+0x1a>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80030be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d101      	bne.n	80030d2 <LL_RCC_HSI48_IsReady+0x18>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <LL_RCC_HSI48_IsReady+0x1a>
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d101      	bne.n	800317e <LL_RCC_LSE_IsReady+0x18>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_RCC_LSE_IsReady+0x1a>
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d101      	bne.n	80031e6 <LL_RCC_LSI1_IsReady+0x18>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <LL_RCC_LSI1_IsReady+0x1a>
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80031f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b08      	cmp	r3, #8
 8003248:	d101      	bne.n	800324e <LL_RCC_LSI2_IsReady+0x18>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_RCC_LSI2_IsReady+0x1a>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800328c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6013      	str	r3, [r2, #0]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6013      	str	r3, [r2, #0]
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d101      	bne.n	80032da <LL_RCC_MSI_IsReady+0x16>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_RCC_MSI_IsReady+0x18>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80032ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2bb0      	cmp	r3, #176	; 0xb0
 8003324:	d901      	bls.n	800332a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003326:	23b0      	movs	r3, #176	; 0xb0
 8003328:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800332a:	687b      	ldr	r3, [r7, #4]
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 0203 	bic.w	r2, r3, #3
 8003374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80033fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003402:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003406:	f023 020f 	bic.w	r2, r3, #15
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800342c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800345e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4313      	orrs	r3, r2
 8003466:	608b      	str	r3, [r1, #8]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	6013      	str	r3, [r2, #0]
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d8:	6013      	str	r3, [r2, #0]
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034f6:	d101      	bne.n	80034fc <LL_RCC_PLL_IsReady+0x18>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <LL_RCC_PLL_IsReady+0x1a>
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0303 	and.w	r3, r3, #3
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d101      	bne.n	8003582 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003596:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a2:	d101      	bne.n	80035a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80035b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c8:	d101      	bne.n	80035ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ec:	d101      	bne.n	80035f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003610:	d101      	bne.n	8003616 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b08d      	sub	sp, #52	; 0x34
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e37e      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8092 	beq.w	8003768 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003644:	f7ff fea1 	bl	800338a <LL_RCC_GetSysClkSource>
 8003648:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800364a:	f7ff ff82 	bl	8003552 <LL_RCC_PLL_GetMainSource>
 800364e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x3e>
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d14c      	bne.n	80036f6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	2b01      	cmp	r3, #1
 8003660:	d149      	bne.n	80036f6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003662:	f7ff fe2f 	bl	80032c4 <LL_RCC_MSI_IsReady>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_OscConfig+0x54>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e35d      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800367c:	f7ff fe47 	bl	800330e <LL_RCC_MSI_GetRange>
 8003680:	4603      	mov	r3, r0
 8003682:	429c      	cmp	r4, r3
 8003684:	d914      	bls.n	80036b0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fd16 	bl	80040bc <RCC_SetFlashLatencyFromMSIRange>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e34c      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fe21 	bl	80032e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fe45 	bl	8003338 <LL_RCC_MSI_SetCalibTrimming>
 80036ae:	e013      	b.n	80036d8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fe16 	bl	80032e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fe3a 	bl	8003338 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fcf7 	bl	80040bc <RCC_SetFlashLatencyFromMSIRange>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e32d      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036d8:	f000 fcdc 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 80036dc:	4603      	mov	r3, r0
 80036de:	4ab3      	ldr	r2, [pc, #716]	; (80039ac <HAL_RCC_OscConfig+0x388>)
 80036e0:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036e2:	4bb3      	ldr	r3, [pc, #716]	; (80039b0 <HAL_RCC_OscConfig+0x38c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fbc2 	bl	8000e70 <HAL_InitTick>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d039      	beq.n	8003766 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e31e      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01e      	beq.n	800373c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036fe:	f7ff fdc3 	bl	8003288 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003702:	f7fd fc03 	bl	8000f0c <HAL_GetTick>
 8003706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370a:	f7fd fbff 	bl	8000f0c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e30b      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800371c:	f7ff fdd2 	bl	80032c4 <LL_RCC_MSI_IsReady>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f1      	beq.n	800370a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fddb 	bl	80032e6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fdff 	bl	8003338 <LL_RCC_MSI_SetCalibTrimming>
 800373a:	e015      	b.n	8003768 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800373c:	f7ff fdb3 	bl	80032a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003740:	f7fd fbe4 	bl	8000f0c <HAL_GetTick>
 8003744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003748:	f7fd fbe0 	bl	8000f0c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e2ec      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800375a:	f7ff fdb3 	bl	80032c4 <LL_RCC_MSI_IsReady>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f1      	bne.n	8003748 <HAL_RCC_OscConfig+0x124>
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003766:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d04e      	beq.n	8003812 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003774:	f7ff fe09 	bl	800338a <LL_RCC_GetSysClkSource>
 8003778:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800377a:	f7ff feea 	bl	8003552 <LL_RCC_PLL_GetMainSource>
 800377e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	2b08      	cmp	r3, #8
 8003784:	d005      	beq.n	8003792 <HAL_RCC_OscConfig+0x16e>
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	d10d      	bne.n	80037a8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d10a      	bne.n	80037a8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003792:	f7ff fc19 	bl	8002fc8 <LL_RCC_HSE_IsReady>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d039      	beq.n	8003810 <HAL_RCC_OscConfig+0x1ec>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d135      	bne.n	8003810 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e2c5      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d102      	bne.n	80037b8 <HAL_RCC_OscConfig+0x194>
 80037b2:	f7ff fbeb 	bl	8002f8c <LL_RCC_HSE_Enable>
 80037b6:	e001      	b.n	80037bc <HAL_RCC_OscConfig+0x198>
 80037b8:	f7ff fbf7 	bl	8002faa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fd fba2 	bl	8000f0c <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fd fb9e 	bl	8000f0c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e2aa      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80037de:	f7ff fbf3 	bl	8002fc8 <LL_RCC_HSE_IsReady>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f1      	beq.n	80037cc <HAL_RCC_OscConfig+0x1a8>
 80037e8:	e013      	b.n	8003812 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd fb8f 	bl	8000f0c <HAL_GetTick>
 80037ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f2:	f7fd fb8b 	bl	8000f0c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b64      	cmp	r3, #100	; 0x64
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e297      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003804:	f7ff fbe0 	bl	8002fc8 <LL_RCC_HSE_IsReady>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f1      	bne.n	80037f2 <HAL_RCC_OscConfig+0x1ce>
 800380e:	e000      	b.n	8003812 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d051      	beq.n	80038c2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381e:	f7ff fdb4 	bl	800338a <LL_RCC_GetSysClkSource>
 8003822:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003824:	f7ff fe95 	bl	8003552 <LL_RCC_PLL_GetMainSource>
 8003828:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d005      	beq.n	800383c <HAL_RCC_OscConfig+0x218>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d113      	bne.n	800385e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d110      	bne.n	800385e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	f7ff fbf4 	bl	8003028 <LL_RCC_HSI_IsReady>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x22e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e270      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fbf8 	bl	800304c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385c:	e031      	b.n	80038c2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d019      	beq.n	800389a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003866:	f7ff fbc1 	bl	8002fec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd fb4f 	bl	8000f0c <HAL_GetTick>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003872:	f7fd fb4b 	bl	8000f0c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e257      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003884:	f7ff fbd0 	bl	8003028 <LL_RCC_HSI_IsReady>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f1      	beq.n	8003872 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fbda 	bl	800304c <LL_RCC_HSI_SetCalibTrimming>
 8003898:	e013      	b.n	80038c2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	f7ff fbb6 	bl	800300a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd fb35 	bl	8000f0c <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fd fb31 	bl	8000f0c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e23d      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80038b8:	f7ff fbb6 	bl	8003028 <LL_RCC_HSI_IsReady>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f1      	bne.n	80038a6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80a3 	beq.w	8003a22 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d076      	beq.n	80039d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d046      	beq.n	800397e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80038f0:	f7ff fc6d 	bl	80031ce <LL_RCC_LSI1_IsReady>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d113      	bne.n	8003922 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80038fa:	f7ff fc46 	bl	800318a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038fe:	f7fd fb05 	bl	8000f0c <HAL_GetTick>
 8003902:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003906:	f7fd fb01 	bl	8000f0c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e20d      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003918:	f7ff fc59 	bl	80031ce <LL_RCC_LSI1_IsReady>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f1      	beq.n	8003906 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003922:	f7ff fc66 	bl	80031f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd faf1 	bl	8000f0c <HAL_GetTick>
 800392a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800392e:	f7fd faed 	bl	8000f0c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b03      	cmp	r3, #3
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1f9      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003940:	f7ff fc79 	bl	8003236 <LL_RCC_LSI2_IsReady>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f1      	beq.n	800392e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fc83 	bl	800325a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003954:	f7ff fc2a 	bl	80031ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fad8 	bl	8000f0c <HAL_GetTick>
 800395c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003960:	f7fd fad4 	bl	8000f0c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1e0      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003972:	f7ff fc2c 	bl	80031ce <LL_RCC_LSI1_IsReady>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f1      	bne.n	8003960 <HAL_RCC_OscConfig+0x33c>
 800397c:	e051      	b.n	8003a22 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800397e:	f7ff fc04 	bl	800318a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fd fac3 	bl	8000f0c <HAL_GetTick>
 8003986:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800398a:	f7fd fabf 	bl	8000f0c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1cb      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800399c:	f7ff fc17 	bl	80031ce <LL_RCC_LSI1_IsReady>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f1      	beq.n	800398a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80039a6:	f7ff fc35 	bl	8003214 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80039aa:	e00c      	b.n	80039c6 <HAL_RCC_OscConfig+0x3a2>
 80039ac:	2000001c 	.word	0x2000001c
 80039b0:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80039b4:	f7fd faaa 	bl	8000f0c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1b6      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80039c6:	f7ff fc36 	bl	8003236 <LL_RCC_LSI2_IsReady>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f1      	bne.n	80039b4 <HAL_RCC_OscConfig+0x390>
 80039d0:	e027      	b.n	8003a22 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80039d2:	f7ff fc1f 	bl	8003214 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fd fa99 	bl	8000f0c <HAL_GetTick>
 80039da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80039de:	f7fd fa95 	bl	8000f0c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1a1      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80039f0:	f7ff fc21 	bl	8003236 <LL_RCC_LSI2_IsReady>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f1      	bne.n	80039de <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80039fa:	f7ff fbd7 	bl	80031ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fe:	f7fd fa85 	bl	8000f0c <HAL_GetTick>
 8003a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a06:	f7fd fa81 	bl	8000f0c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e18d      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a18:	f7ff fbd9 	bl	80031ce <LL_RCC_LSI1_IsReady>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f1      	bne.n	8003a06 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d05b      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2e:	4bb5      	ldr	r3, [pc, #724]	; (8003d04 <HAL_RCC_OscConfig+0x6e0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d114      	bne.n	8003a64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003a3a:	f7ff fa67 	bl	8002f0c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fd fa65 	bl	8000f0c <HAL_GetTick>
 8003a42:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fd fa61 	bl	8000f0c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e16d      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a58:	4baa      	ldr	r3, [pc, #680]	; (8003d04 <HAL_RCC_OscConfig+0x6e0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d102      	bne.n	8003a72 <HAL_RCC_OscConfig+0x44e>
 8003a6c:	f7ff fb37 	bl	80030de <LL_RCC_LSE_Enable>
 8003a70:	e00c      	b.n	8003a8c <HAL_RCC_OscConfig+0x468>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d104      	bne.n	8003a84 <HAL_RCC_OscConfig+0x460>
 8003a7a:	f7ff fb52 	bl	8003122 <LL_RCC_LSE_EnableBypass>
 8003a7e:	f7ff fb2e 	bl	80030de <LL_RCC_LSE_Enable>
 8003a82:	e003      	b.n	8003a8c <HAL_RCC_OscConfig+0x468>
 8003a84:	f7ff fb3c 	bl	8003100 <LL_RCC_LSE_Disable>
 8003a88:	f7ff fb5c 	bl	8003144 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d014      	beq.n	8003abe <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fd fa3a 	bl	8000f0c <HAL_GetTick>
 8003a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fa36 	bl	8000f0c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e140      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ab2:	f7ff fb58 	bl	8003166 <LL_RCC_LSE_IsReady>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ef      	beq.n	8003a9c <HAL_RCC_OscConfig+0x478>
 8003abc:	e013      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fd fa25 	bl	8000f0c <HAL_GetTick>
 8003ac2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd fa21 	bl	8000f0c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e12b      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003adc:	f7ff fb43 	bl	8003166 <LL_RCC_LSE_IsReady>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ef      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d02c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d014      	beq.n	8003b24 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003afa:	f7ff fabc 	bl	8003076 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fd fa05 	bl	8000f0c <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b06:	f7fd fa01 	bl	8000f0c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e10d      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b18:	f7ff facf 	bl	80030ba <LL_RCC_HSI48_IsReady>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f1      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
 8003b22:	e013      	b.n	8003b4c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b24:	f7ff fab8 	bl	8003098 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd f9f0 	bl	8000f0c <HAL_GetTick>
 8003b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b30:	f7fd f9ec 	bl	8000f0c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0f8      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003b42:	f7ff faba 	bl	80030ba <LL_RCC_HSI48_IsReady>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f1      	bne.n	8003b30 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80ee 	beq.w	8003d32 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b56:	f7ff fc18 	bl	800338a <LL_RCC_GetSysClkSource>
 8003b5a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	f040 80af 	bne.w	8003ccc <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d123      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d114      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d05d      	beq.n	8003c80 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d058      	beq.n	8003c7c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0ab      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bdc:	f7ff fc73 	bl	80034c6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be0:	f7fd f994 	bl	8000f0c <HAL_GetTick>
 8003be4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd f990 	bl	8000f0c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e09c      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ef      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <HAL_RCC_OscConfig+0x6e4>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c20:	0212      	lsls	r2, r2, #8
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c28:	4311      	orrs	r1, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c34:	430a      	orrs	r2, r1
 8003c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c3e:	f7ff fc33 	bl	80034a8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c52:	f7fd f95b 	bl	8000f0c <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fd f957 	bl	8000f0c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e063      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0ef      	beq.n	8003c5a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c7a:	e05a      	b.n	8003d32 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e059      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d151      	bne.n	8003d32 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c8e:	f7ff fc0b 	bl	80034a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ca2:	f7fd f933 	bl	8000f0c <HAL_GetTick>
 8003ca6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fd f92f 	bl	8000f0c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e03b      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ef      	beq.n	8003caa <HAL_RCC_OscConfig+0x686>
 8003cca:	e032      	b.n	8003d32 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d02d      	beq.n	8003d2e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	f7ff fbf8 	bl	80034c6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce0:	f023 0303 	bic.w	r3, r3, #3
 8003ce4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd f907 	bl	8000f0c <HAL_GetTick>
 8003cfe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d00:	e00d      	b.n	8003d1e <HAL_RCC_OscConfig+0x6fa>
 8003d02:	bf00      	nop
 8003d04:	58000400 	.word	0x58000400
 8003d08:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fd f8fe 	bl	8000f0c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1ef      	bne.n	8003d0c <HAL_RCC_OscConfig+0x6e8>
 8003d2c:	e001      	b.n	8003d32 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3734      	adds	r7, #52	; 0x34
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}

08003d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e12d      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	4b98      	ldr	r3, [pc, #608]	; (8003fb4 <HAL_RCC_ClockConfig+0x278>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d91b      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b95      	ldr	r3, [pc, #596]	; (8003fb4 <HAL_RCC_ClockConfig+0x278>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4993      	ldr	r1, [pc, #588]	; (8003fb4 <HAL_RCC_ClockConfig+0x278>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6e:	f7fd f8cd 	bl	8000f0c <HAL_GetTick>
 8003d72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d76:	f7fd f8c9 	bl	8000f0c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e111      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d88:	4b8a      	ldr	r3, [pc, #552]	; (8003fb4 <HAL_RCC_ClockConfig+0x278>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d1ef      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fafb 	bl	80033a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003dac:	f7fd f8ae 	bl	8000f0c <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003db4:	f7fd f8aa 	bl	8000f0c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0f2      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003dc6:	f7ff fbd0 	bl	800356a <LL_RCC_IsActiveFlag_HPRE>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f1      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff faf2 	bl	80033ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003de6:	f7fd f891 	bl	8000f0c <HAL_GetTick>
 8003dea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dee:	f7fd f88d 	bl	8000f0c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e0d5      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e00:	f7ff fbc5 	bl	800358e <LL_RCC_IsActiveFlag_C2HPRE>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f1      	beq.n	8003dee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d016      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff faeb 	bl	80033f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e20:	f7fd f874 	bl	8000f0c <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e28:	f7fd f870 	bl	8000f0c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0b8      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e3a:	f7ff fbbb 	bl	80035b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f1      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d016      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fae5 	bl	8003424 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e5a:	f7fd f857 	bl	8000f0c <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e62:	f7fd f853 	bl	8000f0c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e09b      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003e74:	f7ff fbb1 	bl	80035da <LL_RCC_IsActiveFlag_PPRE1>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f1      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d017      	beq.n	8003eba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fadb 	bl	800344c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e96:	f7fd f839 	bl	8000f0c <HAL_GetTick>
 8003e9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e9e:	f7fd f835 	bl	8000f0c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e07d      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003eb0:	f7ff fba5 	bl	80035fe <LL_RCC_IsActiveFlag_PPRE2>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f1      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d043      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d106      	bne.n	8003edc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003ece:	f7ff f87b 	bl	8002fc8 <LL_RCC_HSE_IsReady>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11e      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e067      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ee4:	f7ff fafe 	bl	80034e4 <LL_RCC_PLL_IsReady>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d113      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e05c      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003efa:	f7ff f9e3 	bl	80032c4 <LL_RCC_MSI_IsReady>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e051      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003f08:	f7ff f88e 	bl	8003028 <LL_RCC_HSI_IsReady>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e04a      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fa21 	bl	8003362 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f20:	f7fc fff4 	bl	8000f0c <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f28:	f7fc fff0 	bl	8000f0c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e036      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	f7ff fa24 	bl	800338a <LL_RCC_GetSysClkSource>
 8003f42:	4602      	mov	r2, r0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d1ec      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4e:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_ClockConfig+0x278>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d21b      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <HAL_RCC_ClockConfig+0x278>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 0207 	bic.w	r2, r3, #7
 8003f64:	4913      	ldr	r1, [pc, #76]	; (8003fb4 <HAL_RCC_ClockConfig+0x278>)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6c:	f7fc ffce 	bl	8000f0c <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f74:	f7fc ffca 	bl	8000f0c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e012      	b.n	8003fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x278>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1ef      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f94:	f000 f87e 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <HAL_RCC_ClockConfig+0x27c>)
 8003f9c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003f9e:	f7fc ffc1 	bl	8000f24 <HAL_GetTickPrio>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc ff63 	bl	8000e70 <HAL_InitTick>
 8003faa:	4603      	mov	r3, r0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	58004000 	.word	0x58004000
 8003fb8:	2000001c 	.word	0x2000001c

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc2:	f7ff f9e2 	bl	800338a <LL_RCC_GetSysClkSource>
 8003fc6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003fce:	f7ff f99e 	bl	800330e <LL_RCC_MSI_GetRange>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e04b      	b.n	800407c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d102      	bne.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fea:	4b28      	ldr	r3, [pc, #160]	; (800408c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	e045      	b.n	800407c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d10a      	bne.n	800400c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ff6:	f7fe ffb7 	bl	8002f68 <LL_RCC_HSE_IsEnabledDiv2>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d102      	bne.n	8004006 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	e03a      	b.n	800407c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e037      	b.n	800407c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800400c:	f7ff faa1 	bl	8003552 <LL_RCC_PLL_GetMainSource>
 8004010:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d003      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x64>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b03      	cmp	r3, #3
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x6a>
 800401e:	e00d      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004022:	60bb      	str	r3, [r7, #8]
        break;
 8004024:	e015      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004026:	f7fe ff9f 	bl	8002f68 <LL_RCC_HSE_IsEnabledDiv2>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d102      	bne.n	8004036 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004032:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004034:	e00d      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004038:	60bb      	str	r3, [r7, #8]
        break;
 800403a:	e00a      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800403c:	f7ff f967 	bl	800330e <LL_RCC_MSI_GetRange>
 8004040:	4603      	mov	r3, r0
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_RCC_GetSysClockFreq+0xcc>)
 800404a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404e:	60bb      	str	r3, [r7, #8]
        break;
 8004050:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004052:	f7ff fa59 	bl	8003508 <LL_RCC_PLL_GetN>
 8004056:	4602      	mov	r2, r0
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	fb03 f402 	mul.w	r4, r3, r2
 800405e:	f7ff fa6c 	bl	800353a <LL_RCC_PLL_GetDivider>
 8004062:	4603      	mov	r3, r0
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	3301      	adds	r3, #1
 8004068:	fbb4 f4f3 	udiv	r4, r4, r3
 800406c:	f7ff fa59 	bl	8003522 <LL_RCC_PLL_GetR>
 8004070:	4603      	mov	r3, r0
 8004072:	0f5b      	lsrs	r3, r3, #29
 8004074:	3301      	adds	r3, #1
 8004076:	fbb4 f3f3 	udiv	r3, r4, r3
 800407a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800407c:	68fb      	ldr	r3, [r7, #12]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}
 8004086:	bf00      	nop
 8004088:	08009d84 	.word	0x08009d84
 800408c:	00f42400 	.word	0x00f42400
 8004090:	007a1200 	.word	0x007a1200

08004094 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004094:	b598      	push	{r3, r4, r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004098:	f7ff ff90 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 800409c:	4604      	mov	r4, r0
 800409e:	f7ff f9e9 	bl	8003474 <LL_RCC_GetAHBPrescaler>
 80040a2:	4603      	mov	r3, r0
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	4a03      	ldr	r2, [pc, #12]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80040ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd98      	pop	{r3, r4, r7, pc}
 80040b8:	08009d44 	.word	0x08009d44

080040bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2bb0      	cmp	r3, #176	; 0xb0
 80040c8:	d903      	bls.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e007      	b.n	80040e2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	4a11      	ldr	r2, [pc, #68]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80040dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80040e2:	f7ff f9d3 	bl	800348c <LL_RCC_GetAHB4Prescaler>
 80040e6:	4603      	mov	r3, r0
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80040f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	0c9c      	lsrs	r4, r3, #18
 8004106:	f7fe ff11 	bl	8002f2c <HAL_PWREx_GetVoltageRange>
 800410a:	4603      	mov	r3, r0
 800410c:	4619      	mov	r1, r3
 800410e:	4620      	mov	r0, r4
 8004110:	f000 f80c 	bl	800412c <RCC_SetFlashLatency>
 8004114:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bd90      	pop	{r4, r7, pc}
 800411e:	bf00      	nop
 8004120:	08009d84 	.word	0x08009d84
 8004124:	08009d44 	.word	0x08009d44
 8004128:	431bde83 	.word	0x431bde83

0800412c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b093      	sub	sp, #76	; 0x4c
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004136:	4b39      	ldr	r3, [pc, #228]	; (800421c <RCC_SetFlashLatency+0xf0>)
 8004138:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800413c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800413e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004142:	4a37      	ldr	r2, [pc, #220]	; (8004220 <RCC_SetFlashLatency+0xf4>)
 8004144:	f107 031c 	add.w	r3, r7, #28
 8004148:	ca07      	ldmia	r2, {r0, r1, r2}
 800414a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800414e:	4b35      	ldr	r3, [pc, #212]	; (8004224 <RCC_SetFlashLatency+0xf8>)
 8004150:	f107 040c 	add.w	r4, r7, #12
 8004154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800415a:	2300      	movs	r3, #0
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004164:	d11c      	bne.n	80041a0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004166:	2300      	movs	r3, #0
 8004168:	643b      	str	r3, [r7, #64]	; 0x40
 800416a:	e015      	b.n	8004198 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800416c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004174:	4413      	add	r3, r2
 8004176:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d808      	bhi.n	8004192 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004188:	4413      	add	r3, r2
 800418a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800418e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004190:	e022      	b.n	80041d8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004194:	3301      	adds	r3, #1
 8004196:	643b      	str	r3, [r7, #64]	; 0x40
 8004198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419a:	2b03      	cmp	r3, #3
 800419c:	d9e6      	bls.n	800416c <RCC_SetFlashLatency+0x40>
 800419e:	e01b      	b.n	80041d8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80041a0:	2300      	movs	r3, #0
 80041a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a4:	e015      	b.n	80041d2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80041a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041ae:	4413      	add	r3, r2
 80041b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d808      	bhi.n	80041cc <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80041ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041c2:	4413      	add	r3, r2
 80041c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80041c8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80041ca:	e005      	b.n	80041d8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	3301      	adds	r3, #1
 80041d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d9e6      	bls.n	80041a6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80041d8:	4b13      	ldr	r3, [pc, #76]	; (8004228 <RCC_SetFlashLatency+0xfc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 0207 	bic.w	r2, r3, #7
 80041e0:	4911      	ldr	r1, [pc, #68]	; (8004228 <RCC_SetFlashLatency+0xfc>)
 80041e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041e8:	f7fc fe90 	bl	8000f0c <HAL_GetTick>
 80041ec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041ee:	e008      	b.n	8004202 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80041f0:	f7fc fe8c 	bl	8000f0c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e007      	b.n	8004212 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <RCC_SetFlashLatency+0xfc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800420c:	429a      	cmp	r2, r3
 800420e:	d1ef      	bne.n	80041f0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	374c      	adds	r7, #76	; 0x4c
 8004216:	46bd      	mov	sp, r7
 8004218:	bd90      	pop	{r4, r7, pc}
 800421a:	bf00      	nop
 800421c:	08009cd0 	.word	0x08009cd0
 8004220:	08009ce0 	.word	0x08009ce0
 8004224:	08009cec 	.word	0x08009cec
 8004228:	58004000 	.word	0x58004000

0800422c <LL_RCC_LSE_IsEnabled>:
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <LL_RCC_LSE_IsEnabled+0x18>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <LL_RCC_LSE_IsEnabled+0x1a>
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_RCC_LSE_IsReady>:
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b02      	cmp	r3, #2
 8004262:	d101      	bne.n	8004268 <LL_RCC_LSE_IsReady+0x18>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <LL_RCC_LSE_IsReady+0x1a>
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <LL_RCC_MSI_EnablePLLMode>:
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6013      	str	r3, [r2, #0]
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <LL_RCC_SetRFWKPClockSource>:
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <LL_RCC_SetSMPSClockSource>:
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f023 0203 	bic.w	r2, r3, #3
 80042d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_RCC_SetSMPSPrescaler>:
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4313      	orrs	r3, r2
 8004300:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_RCC_SetUSARTClockSource>:
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <LL_RCC_SetLPUARTClockSource>:
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800434e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_RCC_SetI2CClockSource>:
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800436e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004372:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800437e:	43db      	mvns	r3, r3
 8004380:	401a      	ands	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800438a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_RCC_SetLPTIMClockSource>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	43db      	mvns	r3, r3
 80043b8:	401a      	ands	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_RCC_SetSAIClockSource>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_RCC_SetRNGClockSource>:
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_RCC_SetCLK48ClockSource>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_RCC_SetUSBClockSource>:
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ffe3 	bl	800442c <LL_RCC_SetCLK48ClockSource>
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <LL_RCC_SetADCClockSource>:
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <LL_RCC_SetRTCClockSource>:
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <LL_RCC_GetRTCClockSource>:
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_RCC_ForceBackupDomainReset>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800451a:	bf00      	nop
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_RCC_PLLSAI1_Enable>:
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004536:	6013      	str	r3, [r2, #0]
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_PLLSAI1_Disable>:
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004550:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004554:	6013      	str	r3, [r2, #0]
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_RCC_PLLSAI1_IsReady>:
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004572:	d101      	bne.n	8004578 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004590:	2300      	movs	r3, #0
 8004592:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d034      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045a8:	d021      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80045aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045ae:	d81b      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045b4:	d01d      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80045b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ba:	d815      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80045c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c4:	d110      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80045d6:	e00d      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f94d 	bl	800487c <RCCEx_PLLSAI1_ConfigNP>
 80045e2:	4603      	mov	r3, r0
 80045e4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045e6:	e005      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	77fb      	strb	r3, [r7, #31]
        break;
 80045ec:	e002      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80045f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f4:	7ffb      	ldrb	r3, [r7, #31]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fee8 	bl	80043d4 <LL_RCC_SetSAIClockSource>
 8004604:	e001      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004606:	7ffb      	ldrb	r3, [r7, #31]
 8004608:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	2b00      	cmp	r3, #0
 8004614:	d046      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004616:	f7ff ff56 	bl	80044c6 <LL_RCC_GetRTCClockSource>
 800461a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	429a      	cmp	r2, r3
 8004624:	d03c      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004626:	f7fe fc71 	bl	8002f0c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff30 	bl	800449a <LL_RCC_SetRTCClockSource>
 800463a:	e02e      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004646:	f7ff ff4b 	bl	80044e0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800464a:	f7ff ff5a 	bl	8004502 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800465c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004666:	f7ff fde1 	bl	800422c <LL_RCC_LSE_IsEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	2b01      	cmp	r3, #1
 800466e:	d114      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004670:	f7fc fc4c 	bl	8000f0c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004676:	e00b      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fc fc48 	bl	8000f0c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d902      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	77fb      	strb	r3, [r7, #31]
              break;
 800468e:	e004      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004690:	f7ff fdde 	bl	8004250 <LL_RCC_LSE_IsReady>
 8004694:	4603      	mov	r3, r0
 8004696:	2b01      	cmp	r3, #1
 8004698:	d1ee      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800469a:	7ffb      	ldrb	r3, [r7, #31]
 800469c:	77bb      	strb	r3, [r7, #30]
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7ffb      	ldrb	r3, [r7, #31]
 80046a2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fe2a 	bl	800430e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fe35 	bl	800433a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fe5d 	bl	80043a0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fe52 	bl	80043a0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fe2a 	bl	8004366 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fe1f 	bl	8004366 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d022      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fe8d 	bl	8004458 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004746:	d107      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004756:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004760:	d10b      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f8e3 	bl	8004932 <RCCEx_PLLSAI1_ConfigNQ>
 800476c:	4603      	mov	r3, r0
 800476e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004770:	7ffb      	ldrb	r3, [r7, #31]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004776:	7ffb      	ldrb	r3, [r7, #31]
 8004778:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02b      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478e:	d008      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004798:	d003      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fe2a 	bl	8004400 <LL_RCC_SetRNGClockSource>
 80047ac:	e00a      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7ff fe21 	bl	8004400 <LL_RCC_SetRNGClockSource>
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff fe34 	bl	800442c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80047cc:	d107      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d022      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fe3d 	bl	800446e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fc:	d107      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004816:	d10b      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f8e3 	bl	80049e8 <RCCEx_PLLSAI1_ConfigNR>
 8004822:	4603      	mov	r3, r0
 8004824:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004826:	7ffb      	ldrb	r3, [r7, #31]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fd26 	bl	8004292 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fd45 	bl	80042e6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fd2c 	bl	80042be <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004866:	7fbb      	ldrb	r3, [r7, #30]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004874:	f7ff fcfe 	bl	8004274 <LL_RCC_MSI_EnablePLLMode>
}
 8004878:	bf00      	nop
 800487a:	bd80      	pop	{r7, pc}

0800487c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004888:	f7ff fe5b 	bl	8004542 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800488c:	f7fc fb3e 	bl	8000f0c <HAL_GetTick>
 8004890:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004892:	e009      	b.n	80048a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004894:	f7fc fb3a 	bl	8000f0c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d902      	bls.n	80048a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	73fb      	strb	r3, [r7, #15]
      break;
 80048a6:	e004      	b.n	80048b2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80048a8:	f7ff fe5a 	bl	8004560 <LL_RCC_PLLSAI1_IsReady>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d137      	bne.n	8004928 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80048b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048cc:	4313      	orrs	r3, r2
 80048ce:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e2:	4313      	orrs	r3, r2
 80048e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80048e6:	f7ff fe1d 	bl	8004524 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ea:	f7fc fb0f 	bl	8000f0c <HAL_GetTick>
 80048ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80048f0:	e009      	b.n	8004906 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f2:	f7fc fb0b 	bl	8000f0c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d902      	bls.n	8004906 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	73fb      	strb	r3, [r7, #15]
        break;
 8004904:	e004      	b.n	8004910 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004906:	f7ff fe2b 	bl	8004560 <LL_RCC_PLLSAI1_IsReady>
 800490a:	4603      	mov	r3, r0
 800490c:	2b01      	cmp	r3, #1
 800490e:	d1f0      	bne.n	80048f2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004924:	4313      	orrs	r3, r2
 8004926:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800493e:	f7ff fe00 	bl	8004542 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004942:	f7fc fae3 	bl	8000f0c <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004948:	e009      	b.n	800495e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800494a:	f7fc fadf 	bl	8000f0c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d902      	bls.n	800495e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	73fb      	strb	r3, [r7, #15]
      break;
 800495c:	e004      	b.n	8004968 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800495e:	f7ff fdff 	bl	8004560 <LL_RCC_PLLSAI1_IsReady>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d137      	bne.n	80049de <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004982:	4313      	orrs	r3, r2
 8004984:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004998:	4313      	orrs	r3, r2
 800499a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800499c:	f7ff fdc2 	bl	8004524 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fc fab4 	bl	8000f0c <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049a6:	e009      	b.n	80049bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a8:	f7fc fab0 	bl	8000f0c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d902      	bls.n	80049bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	73fb      	strb	r3, [r7, #15]
        break;
 80049ba:	e004      	b.n	80049c6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049bc:	f7ff fdd0 	bl	8004560 <LL_RCC_PLLSAI1_IsReady>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d1f0      	bne.n	80049a8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d108      	bne.n	80049de <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049da:	4313      	orrs	r3, r2
 80049dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80049f4:	f7ff fda5 	bl	8004542 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049f8:	f7fc fa88 	bl	8000f0c <HAL_GetTick>
 80049fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049fe:	e009      	b.n	8004a14 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a00:	f7fc fa84 	bl	8000f0c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d902      	bls.n	8004a14 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	73fb      	strb	r3, [r7, #15]
      break;
 8004a12:	e004      	b.n	8004a1e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a14:	f7ff fda4 	bl	8004560 <LL_RCC_PLLSAI1_IsReady>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d137      	bne.n	8004a94 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a52:	f7ff fd67 	bl	8004524 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a56:	f7fc fa59 	bl	8000f0c <HAL_GetTick>
 8004a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a5c:	e009      	b.n	8004a72 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a5e:	f7fc fa55 	bl	8000f0c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d902      	bls.n	8004a72 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a70:	e004      	b.n	8004a7c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a72:	f7ff fd75 	bl	8004560 <LL_RCC_PLLSAI1_IsReady>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d1f0      	bne.n	8004a5e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d108      	bne.n	8004a94 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a90:	4313      	orrs	r3, r2
 8004a92:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e095      	b.n	8004bdc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d108      	bne.n	8004aca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac0:	d009      	beq.n	8004ad6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	61da      	str	r2, [r3, #28]
 8004ac8:	e005      	b.n	8004ad6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d106      	bne.n	8004af6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fb ffcf 	bl	8000a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b16:	d902      	bls.n	8004b1e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e002      	b.n	8004b24 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b2c:	d007      	beq.n	8004b3e <HAL_SPI_Init+0xa0>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	ea42 0103 	orr.w	r1, r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0204 	and.w	r2, r3, #4
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bba:	ea42 0103 	orr.w	r1, r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_SPI_Transmit+0x22>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e158      	b.n	8004eb8 <HAL_SPI_Transmit+0x2d4>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c0e:	f7fc f97d 	bl	8000f0c <HAL_GetTick>
 8004c12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d002      	beq.n	8004c2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
 8004c26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c28:	e13d      	b.n	8004ea6 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Transmit+0x52>
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c3a:	e134      	b.n	8004ea6 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2203      	movs	r2, #3
 8004c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c86:	d10f      	bne.n	8004ca8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d007      	beq.n	8004cc6 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cce:	d94b      	bls.n	8004d68 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_SPI_Transmit+0xfa>
 8004cd8:	8afb      	ldrh	r3, [r7, #22]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d13e      	bne.n	8004d5c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	1c9a      	adds	r2, r3, #2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d02:	e02b      	b.n	8004d5c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d112      	bne.n	8004d38 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	881a      	ldrh	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	1c9a      	adds	r2, r3, #2
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d36:	e011      	b.n	8004d5c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d38:	f7fc f8e8 	bl	8000f0c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d803      	bhi.n	8004d50 <HAL_SPI_Transmit+0x16c>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d102      	bne.n	8004d56 <HAL_SPI_Transmit+0x172>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d5a:	e0a4      	b.n	8004ea6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ce      	bne.n	8004d04 <HAL_SPI_Transmit+0x120>
 8004d66:	e07c      	b.n	8004e62 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_SPI_Transmit+0x192>
 8004d70:	8afb      	ldrh	r3, [r7, #22]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d170      	bne.n	8004e58 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d912      	bls.n	8004da6 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	881a      	ldrh	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	1c9a      	adds	r2, r3, #2
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b02      	subs	r3, #2
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da4:	e058      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004dcc:	e044      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d12b      	bne.n	8004e34 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d912      	bls.n	8004e0c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	881a      	ldrh	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	1c9a      	adds	r2, r3, #2
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b02      	subs	r3, #2
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e0a:	e025      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	7812      	ldrb	r2, [r2, #0]
 8004e18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e32:	e011      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e34:	f7fc f86a 	bl	8000f0c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d803      	bhi.n	8004e4c <HAL_SPI_Transmit+0x268>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d102      	bne.n	8004e52 <HAL_SPI_Transmit+0x26e>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e56:	e026      	b.n	8004ea6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1b5      	bne.n	8004dce <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fce4 	bl	8005834 <SPI_EndRxTxTransaction>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	e000      	b.n	8004ea6 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ea4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004eb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004edc:	d112      	bne.n	8004f04 <HAL_SPI_Receive+0x44>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10e      	bne.n	8004f04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f910 	bl	8005120 <HAL_SPI_TransmitReceive>
 8004f00:	4603      	mov	r3, r0
 8004f02:	e109      	b.n	8005118 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_SPI_Receive+0x52>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e102      	b.n	8005118 <HAL_SPI_Receive+0x258>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f1a:	f7fb fff7 	bl	8000f0c <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d002      	beq.n	8004f32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f30:	e0e9      	b.n	8005106 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_Receive+0x7e>
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f42:	e0e0      	b.n	8005106 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2204      	movs	r2, #4
 8004f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f8e:	d908      	bls.n	8004fa2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f9e:	605a      	str	r2, [r3, #4]
 8004fa0:	e007      	b.n	8004fb2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fb0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fba:	d10f      	bne.n	8004fdc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d007      	beq.n	8004ffa <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005002:	d867      	bhi.n	80050d4 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005004:	e030      	b.n	8005068 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d117      	bne.n	8005044 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f103 020c 	add.w	r2, r3, #12
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005042:	e011      	b.n	8005068 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005044:	f7fb ff62 	bl	8000f0c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d803      	bhi.n	800505c <HAL_SPI_Receive+0x19c>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d102      	bne.n	8005062 <HAL_SPI_Receive+0x1a2>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005066:	e04e      	b.n	8005106 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1c8      	bne.n	8005006 <HAL_SPI_Receive+0x146>
 8005074:	e034      	b.n	80050e0 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d115      	bne.n	80050b0 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	b292      	uxth	r2, r2
 8005090:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80050ae:	e011      	b.n	80050d4 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050b0:	f7fb ff2c 	bl	8000f0c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d803      	bhi.n	80050c8 <HAL_SPI_Receive+0x208>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d102      	bne.n	80050ce <HAL_SPI_Receive+0x20e>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050d2:	e018      	b.n	8005106 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ca      	bne.n	8005076 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	6839      	ldr	r1, [r7, #0]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fb4d 	bl	8005784 <SPI_EndRxTransaction>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]
 8005102:	e000      	b.n	8005106 <HAL_SPI_Receive+0x246>
  }

error :
 8005104:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800512e:	2301      	movs	r3, #1
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x26>
 8005142:	2302      	movs	r3, #2
 8005144:	e1fb      	b.n	800553e <HAL_SPI_TransmitReceive+0x41e>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800514e:	f7fb fedd 	bl	8000f0c <HAL_GetTick>
 8005152:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800515a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005166:	887b      	ldrh	r3, [r7, #2]
 8005168:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800516a:	7efb      	ldrb	r3, [r7, #27]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d00e      	beq.n	800518e <HAL_SPI_TransmitReceive+0x6e>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005176:	d106      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x66>
 8005180:	7efb      	ldrb	r3, [r7, #27]
 8005182:	2b04      	cmp	r3, #4
 8005184:	d003      	beq.n	800518e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005186:	2302      	movs	r3, #2
 8005188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800518c:	e1cd      	b.n	800552a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x80>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x80>
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80051a6:	e1c0      	b.n	800552a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d003      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2205      	movs	r2, #5
 80051b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	887a      	ldrh	r2, [r7, #2]
 80051cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	887a      	ldrh	r2, [r7, #2]
 80051d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	887a      	ldrh	r2, [r7, #2]
 80051e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051fe:	d802      	bhi.n	8005206 <HAL_SPI_TransmitReceive+0xe6>
 8005200:	8a3b      	ldrh	r3, [r7, #16]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d908      	bls.n	8005218 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	e007      	b.n	8005228 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d007      	beq.n	8005246 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005244:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800524e:	d97c      	bls.n	800534a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_TransmitReceive+0x13e>
 8005258:	8a7b      	ldrh	r3, [r7, #18]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d169      	bne.n	8005332 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	881a      	ldrh	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	1c9a      	adds	r2, r3, #2
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005282:	e056      	b.n	8005332 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d11b      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x1aa>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <HAL_SPI_TransmitReceive+0x1aa>
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d113      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	881a      	ldrh	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	1c9a      	adds	r2, r3, #2
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d11c      	bne.n	8005312 <HAL_SPI_TransmitReceive+0x1f2>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d016      	beq.n	8005312 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	b292      	uxth	r2, r2
 80052f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800530e:	2301      	movs	r3, #1
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005312:	f7fb fdfb 	bl	8000f0c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531e:	429a      	cmp	r2, r3
 8005320:	d807      	bhi.n	8005332 <HAL_SPI_TransmitReceive+0x212>
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d003      	beq.n	8005332 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005330:	e0fb      	b.n	800552a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1a3      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x164>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d19d      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x164>
 8005348:	e0df      	b.n	800550a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_SPI_TransmitReceive+0x23a>
 8005352:	8a7b      	ldrh	r3, [r7, #18]
 8005354:	2b01      	cmp	r3, #1
 8005356:	f040 80cb 	bne.w	80054f0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d912      	bls.n	800538a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	881a      	ldrh	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	1c9a      	adds	r2, r3, #2
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b02      	subs	r3, #2
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005388:	e0b2      	b.n	80054f0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b0:	e09e      	b.n	80054f0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d134      	bne.n	800542a <HAL_SPI_TransmitReceive+0x30a>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d02f      	beq.n	800542a <HAL_SPI_TransmitReceive+0x30a>
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d12c      	bne.n	800542a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d912      	bls.n	8005400 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	881a      	ldrh	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b02      	subs	r3, #2
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fe:	e012      	b.n	8005426 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	7812      	ldrb	r2, [r2, #0]
 800540c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d148      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x3aa>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d042      	beq.n	80054ca <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d923      	bls.n	8005498 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	b292      	uxth	r2, r2
 800545c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	1c9a      	adds	r2, r3, #2
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b02      	subs	r3, #2
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d81f      	bhi.n	80054c6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	e016      	b.n	80054c6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f103 020c 	add.w	r2, r3, #12
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c6:	2301      	movs	r3, #1
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054ca:	f7fb fd1f 	bl	8000f0c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d803      	bhi.n	80054e2 <HAL_SPI_TransmitReceive+0x3c2>
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d102      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x3c8>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80054ee:	e01c      	b.n	800552a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f47f af5b 	bne.w	80053b2 <HAL_SPI_TransmitReceive+0x292>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	f47f af54 	bne.w	80053b2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f990 	bl	8005834 <SPI_EndRxTxTransaction>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d006      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	661a      	str	r2, [r3, #96]	; 0x60
 8005526:	e000      	b.n	800552a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005528:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800553a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800553e:	4618      	mov	r0, r3
 8005540:	3728      	adds	r7, #40	; 0x28
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005558:	f7fb fcd8 	bl	8000f0c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4413      	add	r3, r2
 8005566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005568:	f7fb fcd0 	bl	8000f0c <HAL_GetTick>
 800556c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800556e:	4b39      	ldr	r3, [pc, #228]	; (8005654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	015b      	lsls	r3, r3, #5
 8005574:	0d1b      	lsrs	r3, r3, #20
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	fb02 f303 	mul.w	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800557e:	e054      	b.n	800562a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d050      	beq.n	800562a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005588:	f7fb fcc0 	bl	8000f0c <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	429a      	cmp	r2, r3
 8005596:	d902      	bls.n	800559e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d13d      	bne.n	800561a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b6:	d111      	bne.n	80055dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c0:	d004      	beq.n	80055cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ca:	d107      	bne.n	80055dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e4:	d10f      	bne.n	8005606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e017      	b.n	800564a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	3b01      	subs	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4013      	ands	r3, r2
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	429a      	cmp	r2, r3
 8005646:	d19b      	bne.n	8005580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	2000001c 	.word	0x2000001c

08005658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	; 0x28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800566a:	f7fb fc4f 	bl	8000f0c <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	4413      	add	r3, r2
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800567a:	f7fb fc47 	bl	8000f0c <HAL_GetTick>
 800567e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005688:	4b3d      	ldr	r3, [pc, #244]	; (8005780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	00da      	lsls	r2, r3, #3
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	0d1b      	lsrs	r3, r3, #20
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056a0:	e060      	b.n	8005764 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056a8:	d107      	bne.n	80056ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d050      	beq.n	8005764 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056c2:	f7fb fc23 	bl	8000f0c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d902      	bls.n	80056d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d13d      	bne.n	8005754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f0:	d111      	bne.n	8005716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fa:	d004      	beq.n	8005706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d107      	bne.n	8005716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571e:	d10f      	bne.n	8005740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800573e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e010      	b.n	8005776 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	3b01      	subs	r3, #1
 8005762:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4013      	ands	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d196      	bne.n	80056a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3728      	adds	r7, #40	; 0x28
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	2000001c 	.word	0x2000001c

08005784 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005798:	d111      	bne.n	80057be <SPI_EndRxTransaction+0x3a>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a2:	d004      	beq.n	80057ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ac:	d107      	bne.n	80057be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2200      	movs	r2, #0
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff febd 	bl	8005548 <SPI_WaitFlagStateUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e023      	b.n	800582c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ec:	d11d      	bne.n	800582a <SPI_EndRxTransaction+0xa6>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d004      	beq.n	8005802 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005800:	d113      	bne.n	800582a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2200      	movs	r2, #0
 800580a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f7ff ff22 	bl	8005658 <SPI_WaitFifoStateUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581e:	f043 0220 	orr.w	r2, r3, #32
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e000      	b.n	800582c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2200      	movs	r2, #0
 8005848:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ff03 	bl	8005658 <SPI_WaitFifoStateUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e027      	b.n	80058b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2200      	movs	r2, #0
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fe68 	bl	8005548 <SPI_WaitFlagStateUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e014      	b.n	80058b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff fedc 	bl	8005658 <SPI_WaitFifoStateUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d007      	beq.n	80058b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e000      	b.n	80058b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e097      	b.n	8005a04 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fb fa39 	bl	8000d60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005904:	f023 0307 	bic.w	r3, r3, #7
 8005908:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f000 f907 	bl	8005b28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	4313      	orrs	r3, r2
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005960:	f023 030c 	bic.w	r3, r3, #12
 8005964:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800596c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	4313      	orrs	r3, r2
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	011a      	lsls	r2, r3, #4
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	031b      	lsls	r3, r3, #12
 8005990:	4313      	orrs	r3, r2
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	4313      	orrs	r3, r2
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a1c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a2c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a34:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d110      	bne.n	8005a5e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d102      	bne.n	8005a48 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a42:	7b7b      	ldrb	r3, [r7, #13]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d001      	beq.n	8005a4c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e069      	b.n	8005b20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	e031      	b.n	8005ac2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d110      	bne.n	8005a86 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d102      	bne.n	8005a70 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a6a:	7b3b      	ldrb	r3, [r7, #12]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d001      	beq.n	8005a74 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e055      	b.n	8005b20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a84:	e01d      	b.n	8005ac2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d108      	bne.n	8005a9e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d105      	bne.n	8005a9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a92:	7b7b      	ldrb	r3, [r7, #13]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d102      	bne.n	8005a9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a98:	7b3b      	ldrb	r3, [r7, #12]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d001      	beq.n	8005aa2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e03e      	b.n	8005b20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_TIM_Encoder_Start+0xc4>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d008      	beq.n	8005ae0 <HAL_TIM_Encoder_Start+0xd4>
 8005ace:	e00f      	b.n	8005af0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f889 	bl	8005bf0 <TIM_CCxChannelCmd>
      break;
 8005ade:	e016      	b.n	8005b0e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f881 	bl	8005bf0 <TIM_CCxChannelCmd>
      break;
 8005aee:	e00e      	b.n	8005b0e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2201      	movs	r2, #1
 8005af6:	2100      	movs	r1, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f879 	bl	8005bf0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	2104      	movs	r1, #4
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 f872 	bl	8005bf0 <TIM_CCxChannelCmd>
      break;
 8005b0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0201 	orr.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a2a      	ldr	r2, [pc, #168]	; (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x20>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b46:	d108      	bne.n	8005b5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a21      	ldr	r2, [pc, #132]	; (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b68:	d007      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <TIM_Base_SetConfig+0xc0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	; (8005bec <TIM_Base_SetConfig+0xc4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d108      	bne.n	8005b8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a0c      	ldr	r2, [pc, #48]	; (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_Base_SetConfig+0xa0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a0b      	ldr	r2, [pc, #44]	; (8005be8 <TIM_Base_SetConfig+0xc0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0xa0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <TIM_Base_SetConfig+0xc4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d103      	bne.n	8005bd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	615a      	str	r2, [r3, #20]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2201      	movs	r2, #1
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1a      	ldr	r2, [r3, #32]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	401a      	ands	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e04a      	b.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d108      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40012c00 	.word	0x40012c00

08005cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d0c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d32:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4013      	ands	r3, r2
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d60:	b084      	sub	sp, #16
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	f107 0014 	add.w	r0, r7, #20
 8005d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	b004      	add	sp, #16
 8005da0:	4770      	bx	lr
	...

08005da4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b09d      	sub	sp, #116	; 0x74
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d81f      	bhi.n	8005e16 <USB_ActivateEndpoint+0x72>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <USB_ActivateEndpoint+0x38>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e1f 	.word	0x08005e1f
 8005de8:	08005dfb 	.word	0x08005dfb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005dec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005df4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005df8:	e012      	b.n	8005e20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005dfa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005dfe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e02:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e06:	e00b      	b.n	8005e20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e14:	e004      	b.n	8005e20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005e1c:	e000      	b.n	8005e20 <USB_ActivateEndpoint+0x7c>
      break;
 8005e1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	b21a      	sxth	r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	7b1b      	ldrb	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8149 	bne.w	8006128 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8084 	beq.w	8005fa8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	00da      	lsls	r2, r3, #3
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	88db      	ldrh	r3, [r3, #6]
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	827b      	strh	r3, [r7, #18]
 8005ee2:	8a7b      	ldrh	r3, [r7, #18]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <USB_ActivateEndpoint+0x180>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	823b      	strh	r3, [r7, #16]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	8a3b      	ldrh	r3, [r7, #16]
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	78db      	ldrb	r3, [r3, #3]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d020      	beq.n	8005f6e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f42:	81bb      	strh	r3, [r7, #12]
 8005f44:	89bb      	ldrh	r3, [r7, #12]
 8005f46:	f083 0320 	eor.w	r3, r3, #32
 8005f4a:	81bb      	strh	r3, [r7, #12]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	89bb      	ldrh	r3, [r7, #12]
 8005f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	8013      	strh	r3, [r2, #0]
 8005f6c:	e2a6      	b.n	80064bc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f84:	81fb      	strh	r3, [r7, #14]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	89fb      	ldrh	r3, [r7, #14]
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]
 8005fa6:	e289      	b.n	80064bc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	633b      	str	r3, [r7, #48]	; 0x30
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	4413      	add	r3, r2
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	00da      	lsls	r2, r3, #3
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	88db      	ldrh	r3, [r3, #6]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	4413      	add	r3, r2
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	00da      	lsls	r2, r3, #3
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b3e      	cmp	r3, #62	; 0x3e
 8006006:	d918      	bls.n	800603a <USB_ActivateEndpoint+0x296>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <USB_ActivateEndpoint+0x27e>
 800601c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800601e:	3b01      	subs	r3, #1
 8006020:	66bb      	str	r3, [r7, #104]	; 0x68
 8006022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006024:	b29b      	uxth	r3, r3
 8006026:	029b      	lsls	r3, r3, #10
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e029      	b.n	800608e <USB_ActivateEndpoint+0x2ea>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d112      	bne.n	8006068 <USB_ActivateEndpoint+0x2c4>
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800604c:	b29a      	uxth	r2, r3
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006060:	b29a      	uxth	r2, r3
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e012      	b.n	800608e <USB_ActivateEndpoint+0x2ea>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <USB_ActivateEndpoint+0x2de>
 800607c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800607e:	3301      	adds	r3, #1
 8006080:	66bb      	str	r3, [r7, #104]	; 0x68
 8006082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006084:	b29b      	uxth	r3, r3
 8006086:	029b      	lsls	r3, r3, #10
 8006088:	b29a      	uxth	r2, r3
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	847b      	strh	r3, [r7, #34]	; 0x22
 800609c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800609e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01b      	beq.n	80060de <USB_ActivateEndpoint+0x33a>
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	843b      	strh	r3, [r7, #32]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	441a      	add	r2, r3
 80060c8:	8c3b      	ldrh	r3, [r7, #32]
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	83fb      	strh	r3, [r7, #30]
 80060f6:	8bfb      	ldrh	r3, [r7, #30]
 80060f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060fc:	83fb      	strh	r3, [r7, #30]
 80060fe:	8bfb      	ldrh	r3, [r7, #30]
 8006100:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006104:	83fb      	strh	r3, [r7, #30]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8bfb      	ldrh	r3, [r7, #30]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
 8006126:	e1c9      	b.n	80064bc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	78db      	ldrb	r3, [r3, #3]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d11e      	bne.n	800616e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	441a      	add	r2, r3
 8006154:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006160:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006168:	b29b      	uxth	r3, r3
 800616a:	8013      	strh	r3, [r2, #0]
 800616c:	e01d      	b.n	80061aa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ba:	4413      	add	r3, r2
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	00da      	lsls	r2, r3, #3
 80061c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	891b      	ldrh	r3, [r3, #8]
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	657b      	str	r3, [r7, #84]	; 0x54
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ee:	4413      	add	r3, r2
 80061f0:	657b      	str	r3, [r7, #84]	; 0x54
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	00da      	lsls	r2, r3, #3
 80061f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061fa:	4413      	add	r3, r2
 80061fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006200:	653b      	str	r3, [r7, #80]	; 0x50
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	895b      	ldrh	r3, [r3, #10]
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	b29b      	uxth	r3, r3
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006210:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	785b      	ldrb	r3, [r3, #1]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f040 8093 	bne.w	8006342 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800622c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01b      	beq.n	8006270 <USB_ActivateEndpoint+0x4cc>
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800627e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01b      	beq.n	80062c0 <USB_ActivateEndpoint+0x51c>
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	877b      	strh	r3, [r7, #58]	; 0x3a
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062bc:	b29b      	uxth	r3, r3
 80062be:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062de:	873b      	strh	r3, [r7, #56]	; 0x38
 80062e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]
 8006340:	e0bc      	b.n	80064bc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01d      	beq.n	800639a <USB_ActivateEndpoint+0x5f6>
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006374:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	441a      	add	r2, r3
 8006382:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006396:	b29b      	uxth	r3, r3
 8006398:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80063aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01d      	beq.n	80063f2 <USB_ActivateEndpoint+0x64e>
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	441a      	add	r2, r3
 80063da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	78db      	ldrb	r3, [r3, #3]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d024      	beq.n	8006444 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006410:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006414:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006418:	f083 0320 	eor.w	r3, r3, #32
 800641c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	441a      	add	r2, r3
 800642a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]
 8006442:	e01d      	b.n	8006480 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	441a      	add	r2, r3
 8006468:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800646c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006496:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80064bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3774      	adds	r7, #116	; 0x74
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b08d      	sub	sp, #52	; 0x34
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	7b1b      	ldrb	r3, [r3, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 808e 	bne.w	80065fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d044      	beq.n	8006572 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	81bb      	strh	r3, [r7, #12]
 80064f6:	89bb      	ldrh	r3, [r7, #12]
 80064f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <USB_DeactivateEndpoint+0x6c>
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006516:	817b      	strh	r3, [r7, #10]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	897b      	ldrh	r3, [r7, #10]
 8006524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006534:	b29b      	uxth	r3, r3
 8006536:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654e:	813b      	strh	r3, [r7, #8]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	893b      	ldrh	r3, [r7, #8]
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]
 8006570:	e192      	b.n	8006898 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	827b      	strh	r3, [r7, #18]
 8006580:	8a7b      	ldrh	r3, [r7, #18]
 8006582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01b      	beq.n	80065c2 <USB_DeactivateEndpoint+0xf6>
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a0:	823b      	strh	r3, [r7, #16]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	8a3b      	ldrh	r3, [r7, #16]
 80065ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065be:	b29b      	uxth	r3, r3
 80065c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	81fb      	strh	r3, [r7, #14]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	89fb      	ldrh	r3, [r7, #14]
 80065e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	8013      	strh	r3, [r2, #0]
 80065fa:	e14d      	b.n	8006898 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f040 80a5 	bne.w	8006750 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	843b      	strh	r3, [r7, #32]
 8006614:	8c3b      	ldrh	r3, [r7, #32]
 8006616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01b      	beq.n	8006656 <USB_DeactivateEndpoint+0x18a>
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006634:	83fb      	strh	r3, [r7, #30]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	441a      	add	r2, r3
 8006640:	8bfb      	ldrh	r3, [r7, #30]
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	83bb      	strh	r3, [r7, #28]
 8006664:	8bbb      	ldrh	r3, [r7, #28]
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01b      	beq.n	80066a6 <USB_DeactivateEndpoint+0x1da>
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006684:	837b      	strh	r3, [r7, #26]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	441a      	add	r2, r3
 8006690:	8b7b      	ldrh	r3, [r7, #26]
 8006692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066bc:	833b      	strh	r3, [r7, #24]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	8b3b      	ldrh	r3, [r7, #24]
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f4:	82fb      	strh	r3, [r7, #22]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	441a      	add	r2, r3
 8006700:	8afb      	ldrh	r3, [r7, #22]
 8006702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006712:	b29b      	uxth	r3, r3
 8006714:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672c:	82bb      	strh	r3, [r7, #20]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	441a      	add	r2, r3
 8006738:	8abb      	ldrh	r3, [r7, #20]
 800673a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674a:	b29b      	uxth	r3, r3
 800674c:	8013      	strh	r3, [r2, #0]
 800674e:	e0a3      	b.n	8006898 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800675e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01b      	beq.n	80067a0 <USB_DeactivateEndpoint+0x2d4>
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	441a      	add	r2, r3
 800678a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800678c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679c:	b29b      	uxth	r3, r3
 800679e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80067ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01b      	beq.n	80067f0 <USB_DeactivateEndpoint+0x324>
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	441a      	add	r2, r3
 80067da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006824:	b29b      	uxth	r3, r3
 8006826:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800684c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	b29b      	uxth	r3, r3
 800685e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b29b      	uxth	r3, r3
 800686e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	847b      	strh	r3, [r7, #34]	; 0x22
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006894:	b29b      	uxth	r3, r3
 8006896:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3734      	adds	r7, #52	; 0x34
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b0c2      	sub	sp, #264	; 0x108
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	6018      	str	r0, [r3, #0]
 80068b0:	463b      	mov	r3, r7
 80068b2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068b4:	463b      	mov	r3, r7
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	f040 8509 	bne.w	80072d2 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	463b      	mov	r3, r7
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d905      	bls.n	80068dc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068da:	e004      	b.n	80068e6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80068dc:	463b      	mov	r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80068e6:	463b      	mov	r3, r7
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d128      	bne.n	8006942 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80068f0:	463b      	mov	r3, r7
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6959      	ldr	r1, [r3, #20]
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	88da      	ldrh	r2, [r3, #6]
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006900:	b29b      	uxth	r3, r3
 8006902:	1d38      	adds	r0, r7, #4
 8006904:	6800      	ldr	r0, [r0, #0]
 8006906:	f001 f9da 	bl	8007cbe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800690a:	1d3b      	adds	r3, r7, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	1d3b      	adds	r3, r7, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006918:	b29b      	uxth	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4413      	add	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	463b      	mov	r3, r7
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	00da      	lsls	r2, r3, #3
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4413      	add	r3, r2
 800692e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	f000 bc9f 	b.w	8007280 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006942:	463b      	mov	r3, r7
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	78db      	ldrb	r3, [r3, #3]
 8006948:	2b02      	cmp	r3, #2
 800694a:	f040 8347 	bne.w	8006fdc <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800694e:	463b      	mov	r3, r7
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	463b      	mov	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	429a      	cmp	r2, r3
 800695c:	f240 82eb 	bls.w	8006f36 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006960:	1d3b      	adds	r3, r7, #4
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	463b      	mov	r3, r7
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	441a      	add	r2, r3
 800698c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006998:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800699c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80069a4:	463b      	mov	r3, r7
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6a1a      	ldr	r2, [r3, #32]
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	463b      	mov	r3, r7
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069b6:	1d3b      	adds	r3, r7, #4
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	463b      	mov	r3, r7
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8159 	beq.w	8006c84 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069d2:	1d3b      	adds	r3, r7, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
 80069d8:	463b      	mov	r3, r7
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d164      	bne.n	8006aac <USB_EPStartXfer+0x206>
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e8:	1d3b      	adds	r3, r7, #4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	4413      	add	r3, r2
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fa:	463b      	mov	r3, r7
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	00da      	lsls	r2, r3, #3
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a10:	2b3e      	cmp	r3, #62	; 0x3e
 8006a12:	d91c      	bls.n	8006a4e <USB_EPStartXfer+0x1a8>
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	f003 031f 	and.w	r3, r3, #31
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <USB_EPStartXfer+0x18e>
 8006a2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	029b      	lsls	r3, r3, #10
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e04a      	b.n	8006ae4 <USB_EPStartXfer+0x23e>
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d112      	bne.n	8006a7c <USB_EPStartXfer+0x1d6>
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	801a      	strh	r2, [r3, #0]
 8006a7a:	e033      	b.n	8006ae4 <USB_EPStartXfer+0x23e>
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <USB_EPStartXfer+0x1f6>
 8006a92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a96:	3301      	adds	r3, #1
 8006a98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	029b      	lsls	r3, r3, #10
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	e01b      	b.n	8006ae4 <USB_EPStartXfer+0x23e>
 8006aac:	463b      	mov	r3, r7
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d116      	bne.n	8006ae4 <USB_EPStartXfer+0x23e>
 8006ab6:	1d3b      	adds	r3, r7, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	4413      	add	r3, r2
 8006ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	00da      	lsls	r2, r3, #3
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	895b      	ldrh	r3, [r3, #10]
 8006aea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6959      	ldr	r1, [r3, #20]
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006afe:	1d38      	adds	r0, r7, #4
 8006b00:	6800      	ldr	r0, [r0, #0]
 8006b02:	f001 f8dc 	bl	8007cbe <USB_WritePMA>
            ep->xfer_buff += len;
 8006b06:	463b      	mov	r3, r7
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	695a      	ldr	r2, [r3, #20]
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	441a      	add	r2, r3
 8006b12:	463b      	mov	r3, r7
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b18:	463b      	mov	r3, r7
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	463b      	mov	r3, r7
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d909      	bls.n	8006b3c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	463b      	mov	r3, r7
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	621a      	str	r2, [r3, #32]
 8006b3a:	e008      	b.n	8006b4e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006b46:	463b      	mov	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b4e:	463b      	mov	r3, r7
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d164      	bne.n	8006c22 <USB_EPStartXfer+0x37c>
 8006b58:	1d3b      	adds	r3, r7, #4
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	00da      	lsls	r2, r3, #3
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b86:	2b3e      	cmp	r3, #62	; 0x3e
 8006b88:	d91c      	bls.n	8006bc4 <USB_EPStartXfer+0x31e>
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <USB_EPStartXfer+0x304>
 8006ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	801a      	strh	r2, [r3, #0]
 8006bc2:	e04d      	b.n	8006c60 <USB_EPStartXfer+0x3ba>
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d112      	bne.n	8006bf2 <USB_EPStartXfer+0x34c>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e036      	b.n	8006c60 <USB_EPStartXfer+0x3ba>
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <USB_EPStartXfer+0x36c>
 8006c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	029b      	lsls	r3, r3, #10
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	e01e      	b.n	8006c60 <USB_EPStartXfer+0x3ba>
 8006c22:	463b      	mov	r3, r7
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d119      	bne.n	8006c60 <USB_EPStartXfer+0x3ba>
 8006c2c:	1d3b      	adds	r3, r7, #4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	1d3b      	adds	r3, r7, #4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	4413      	add	r3, r2
 8006c42:	623b      	str	r3, [r7, #32]
 8006c44:	463b      	mov	r3, r7
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	00da      	lsls	r2, r3, #3
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c60:	463b      	mov	r3, r7
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	891b      	ldrh	r3, [r3, #8]
 8006c66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6959      	ldr	r1, [r3, #20]
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c7a:	1d38      	adds	r0, r7, #4
 8006c7c:	6800      	ldr	r0, [r0, #0]
 8006c7e:	f001 f81e 	bl	8007cbe <USB_WritePMA>
 8006c82:	e2fd      	b.n	8007280 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c84:	463b      	mov	r3, r7
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d164      	bne.n	8006d58 <USB_EPStartXfer+0x4b2>
 8006c8e:	1d3b      	adds	r3, r7, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c94:	1d3b      	adds	r3, r7, #4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca2:	4413      	add	r3, r2
 8006ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	00da      	lsls	r2, r3, #3
 8006cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbc:	2b3e      	cmp	r3, #62	; 0x3e
 8006cbe:	d91c      	bls.n	8006cfa <USB_EPStartXfer+0x454>
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <USB_EPStartXfer+0x43a>
 8006cd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ce0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	029b      	lsls	r3, r3, #10
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	e04d      	b.n	8006d96 <USB_EPStartXfer+0x4f0>
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d112      	bne.n	8006d28 <USB_EPStartXfer+0x482>
 8006d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	e036      	b.n	8006d96 <USB_EPStartXfer+0x4f0>
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d004      	beq.n	8006d48 <USB_EPStartXfer+0x4a2>
 8006d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d42:	3301      	adds	r3, #1
 8006d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	029b      	lsls	r3, r3, #10
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e01e      	b.n	8006d96 <USB_EPStartXfer+0x4f0>
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d119      	bne.n	8006d96 <USB_EPStartXfer+0x4f0>
 8006d62:	1d3b      	adds	r3, r7, #4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	653b      	str	r3, [r7, #80]	; 0x50
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d76:	4413      	add	r3, r2
 8006d78:	653b      	str	r3, [r7, #80]	; 0x50
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	00da      	lsls	r2, r3, #3
 8006d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d84:	4413      	add	r3, r2
 8006d86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d96:	463b      	mov	r3, r7
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	891b      	ldrh	r3, [r3, #8]
 8006d9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006da0:	463b      	mov	r3, r7
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6959      	ldr	r1, [r3, #20]
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006db0:	1d38      	adds	r0, r7, #4
 8006db2:	6800      	ldr	r0, [r0, #0]
 8006db4:	f000 ff83 	bl	8007cbe <USB_WritePMA>
            ep->xfer_buff += len;
 8006db8:	463b      	mov	r3, r7
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc2:	441a      	add	r2, r3
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006dca:	463b      	mov	r3, r7
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6a1a      	ldr	r2, [r3, #32]
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d909      	bls.n	8006dee <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8006dda:	463b      	mov	r3, r7
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6a1a      	ldr	r2, [r3, #32]
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de4:	1ad2      	subs	r2, r2, r3
 8006de6:	463b      	mov	r3, r7
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	621a      	str	r2, [r3, #32]
 8006dec:	e008      	b.n	8006e00 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006dee:	463b      	mov	r3, r7
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	643b      	str	r3, [r7, #64]	; 0x40
 8006e06:	463b      	mov	r3, r7
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d164      	bne.n	8006eda <USB_EPStartXfer+0x634>
 8006e10:	1d3b      	adds	r3, r7, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e16:	1d3b      	adds	r3, r7, #4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	4413      	add	r3, r2
 8006e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e28:	463b      	mov	r3, r7
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	00da      	lsls	r2, r3, #3
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e40:	d91c      	bls.n	8006e7c <USB_EPStartXfer+0x5d6>
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d104      	bne.n	8006e62 <USB_EPStartXfer+0x5bc>
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	029b      	lsls	r3, r3, #10
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	e04a      	b.n	8006f12 <USB_EPStartXfer+0x66c>
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d112      	bne.n	8006eaa <USB_EPStartXfer+0x604>
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	e033      	b.n	8006f12 <USB_EPStartXfer+0x66c>
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <USB_EPStartXfer+0x624>
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	029b      	lsls	r3, r3, #10
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	e01b      	b.n	8006f12 <USB_EPStartXfer+0x66c>
 8006eda:	463b      	mov	r3, r7
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d116      	bne.n	8006f12 <USB_EPStartXfer+0x66c>
 8006ee4:	1d3b      	adds	r3, r7, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef2:	4413      	add	r3, r2
 8006ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef6:	463b      	mov	r3, r7
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	00da      	lsls	r2, r3, #3
 8006efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f00:	4413      	add	r3, r2
 8006f02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	895b      	ldrh	r3, [r3, #10]
 8006f18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6959      	ldr	r1, [r3, #20]
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f2c:	1d38      	adds	r0, r7, #4
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	f000 fec5 	bl	8007cbe <USB_WritePMA>
 8006f34:	e1a4      	b.n	8007280 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f36:	463b      	mov	r3, r7
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006f40:	1d3b      	adds	r3, r7, #4
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	463b      	mov	r3, r7
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	463b      	mov	r3, r7
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	441a      	add	r2, r3
 8006f6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f84:	1d3b      	adds	r3, r7, #4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f98:	4413      	add	r3, r2
 8006f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f9c:	463b      	mov	r3, r7
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	00da      	lsls	r2, r3, #3
 8006fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	891b      	ldrh	r3, [r3, #8]
 8006fbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6959      	ldr	r1, [r3, #20]
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fd2:	1d38      	adds	r0, r7, #4
 8006fd4:	6800      	ldr	r0, [r0, #0]
 8006fd6:	f000 fe72 	bl	8007cbe <USB_WritePMA>
 8006fda:	e151      	b.n	8007280 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006fdc:	463b      	mov	r3, r7
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6a1a      	ldr	r2, [r3, #32]
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe6:	1ad2      	subs	r2, r2, r3
 8006fe8:	463b      	mov	r3, r7
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fee:	1d3b      	adds	r3, r7, #4
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 809b 	beq.w	8007140 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800700a:	1d3b      	adds	r3, r7, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	673b      	str	r3, [r7, #112]	; 0x70
 8007010:	463b      	mov	r3, r7
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d164      	bne.n	80070e4 <USB_EPStartXfer+0x83e>
 800701a:	1d3b      	adds	r3, r7, #4
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007020:	1d3b      	adds	r3, r7, #4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007028:	b29b      	uxth	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800702e:	4413      	add	r3, r2
 8007030:	66bb      	str	r3, [r7, #104]	; 0x68
 8007032:	463b      	mov	r3, r7
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	00da      	lsls	r2, r3, #3
 800703a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800703c:	4413      	add	r3, r2
 800703e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007042:	667b      	str	r3, [r7, #100]	; 0x64
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007048:	2b3e      	cmp	r3, #62	; 0x3e
 800704a:	d91c      	bls.n	8007086 <USB_EPStartXfer+0x7e0>
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705a:	f003 031f 	and.w	r3, r3, #31
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <USB_EPStartXfer+0x7c6>
 8007062:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007066:	3b01      	subs	r3, #1
 8007068:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800706c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007070:	b29b      	uxth	r3, r3
 8007072:	029b      	lsls	r3, r3, #10
 8007074:	b29b      	uxth	r3, r3
 8007076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707e:	b29a      	uxth	r2, r3
 8007080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	e04a      	b.n	800711c <USB_EPStartXfer+0x876>
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708a:	2b00      	cmp	r3, #0
 800708c:	d112      	bne.n	80070b4 <USB_EPStartXfer+0x80e>
 800708e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007098:	b29a      	uxth	r2, r3
 800709a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e033      	b.n	800711c <USB_EPStartXfer+0x876>
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <USB_EPStartXfer+0x82e>
 80070ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070ce:	3301      	adds	r3, #1
 80070d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070d8:	b29b      	uxth	r3, r3
 80070da:	029b      	lsls	r3, r3, #10
 80070dc:	b29a      	uxth	r2, r3
 80070de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070e0:	801a      	strh	r2, [r3, #0]
 80070e2:	e01b      	b.n	800711c <USB_EPStartXfer+0x876>
 80070e4:	463b      	mov	r3, r7
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	785b      	ldrb	r3, [r3, #1]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d116      	bne.n	800711c <USB_EPStartXfer+0x876>
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070fc:	4413      	add	r3, r2
 80070fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007100:	463b      	mov	r3, r7
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	00da      	lsls	r2, r3, #3
 8007108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800710a:	4413      	add	r3, r2
 800710c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007110:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007116:	b29a      	uxth	r2, r3
 8007118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	895b      	ldrh	r3, [r3, #10]
 8007122:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007126:	463b      	mov	r3, r7
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6959      	ldr	r1, [r3, #20]
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007130:	b29b      	uxth	r3, r3
 8007132:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007136:	1d38      	adds	r0, r7, #4
 8007138:	6800      	ldr	r0, [r0, #0]
 800713a:	f000 fdc0 	bl	8007cbe <USB_WritePMA>
 800713e:	e09f      	b.n	8007280 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007140:	463b      	mov	r3, r7
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d164      	bne.n	8007214 <USB_EPStartXfer+0x96e>
 800714a:	1d3b      	adds	r3, r7, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007158:	b29b      	uxth	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800715e:	4413      	add	r3, r2
 8007160:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007162:	463b      	mov	r3, r7
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	00da      	lsls	r2, r3, #3
 800716a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800716c:	4413      	add	r3, r2
 800716e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007172:	67bb      	str	r3, [r7, #120]	; 0x78
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007178:	2b3e      	cmp	r3, #62	; 0x3e
 800717a:	d91c      	bls.n	80071b6 <USB_EPStartXfer+0x910>
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	2b00      	cmp	r3, #0
 8007190:	d104      	bne.n	800719c <USB_EPStartXfer+0x8f6>
 8007192:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007196:	3b01      	subs	r3, #1
 8007198:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800719c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	029b      	lsls	r3, r3, #10
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	e053      	b.n	800725e <USB_EPStartXfer+0x9b8>
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d112      	bne.n	80071e4 <USB_EPStartXfer+0x93e>
 80071be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e03c      	b.n	800725e <USB_EPStartXfer+0x9b8>
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <USB_EPStartXfer+0x95e>
 80071fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071fe:	3301      	adds	r3, #1
 8007200:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007204:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007208:	b29b      	uxth	r3, r3
 800720a:	029b      	lsls	r3, r3, #10
 800720c:	b29a      	uxth	r2, r3
 800720e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	e024      	b.n	800725e <USB_EPStartXfer+0x9b8>
 8007214:	463b      	mov	r3, r7
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d11f      	bne.n	800725e <USB_EPStartXfer+0x9b8>
 800721e:	1d3b      	adds	r3, r7, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007226:	1d3b      	adds	r3, r7, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722e:	b29b      	uxth	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007236:	4413      	add	r3, r2
 8007238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	00da      	lsls	r2, r3, #3
 8007244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007248:	4413      	add	r3, r2
 800724a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800724e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007256:	b29a      	uxth	r2, r3
 8007258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800725c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	891b      	ldrh	r3, [r3, #8]
 8007264:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007268:	463b      	mov	r3, r7
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6959      	ldr	r1, [r3, #20]
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007272:	b29b      	uxth	r3, r3
 8007274:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007278:	1d38      	adds	r0, r7, #4
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	f000 fd1f 	bl	8007cbe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007280:	1d3b      	adds	r3, r7, #4
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	463b      	mov	r3, r7
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800729a:	817b      	strh	r3, [r7, #10]
 800729c:	897b      	ldrh	r3, [r7, #10]
 800729e:	f083 0310 	eor.w	r3, r3, #16
 80072a2:	817b      	strh	r3, [r7, #10]
 80072a4:	897b      	ldrh	r3, [r7, #10]
 80072a6:	f083 0320 	eor.w	r3, r3, #32
 80072aa:	817b      	strh	r3, [r7, #10]
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	441a      	add	r2, r3
 80072ba:	897b      	ldrh	r3, [r7, #10]
 80072bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	8013      	strh	r3, [r2, #0]
 80072d0:	e3b5      	b.n	8007a3e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072d2:	463b      	mov	r3, r7
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	7b1b      	ldrb	r3, [r3, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f040 8090 	bne.w	80073fe <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80072de:	463b      	mov	r3, r7
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699a      	ldr	r2, [r3, #24]
 80072e4:	463b      	mov	r3, r7
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d90e      	bls.n	800730c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80072ee:	463b      	mov	r3, r7
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80072f8:	463b      	mov	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	619a      	str	r2, [r3, #24]
 800730a:	e008      	b.n	800731e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800730c:	463b      	mov	r3, r7
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007316:	463b      	mov	r3, r7
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2200      	movs	r2, #0
 800731c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800731e:	1d3b      	adds	r3, r7, #4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007326:	1d3b      	adds	r3, r7, #4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800732e:	b29b      	uxth	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007336:	4413      	add	r3, r2
 8007338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800733c:	463b      	mov	r3, r7
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	00da      	lsls	r2, r3, #3
 8007344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007348:	4413      	add	r3, r2
 800734a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800734e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007356:	2b3e      	cmp	r3, #62	; 0x3e
 8007358:	d91d      	bls.n	8007396 <USB_EPStartXfer+0xaf0>
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <USB_EPStartXfer+0xad4>
 8007370:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007374:	3b01      	subs	r3, #1
 8007376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800737a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800737e:	b29b      	uxth	r3, r3
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	b29b      	uxth	r3, r3
 8007384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738c:	b29a      	uxth	r2, r3
 800738e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007392:	801a      	strh	r2, [r3, #0]
 8007394:	e325      	b.n	80079e2 <USB_EPStartXfer+0x113c>
 8007396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739a:	2b00      	cmp	r3, #0
 800739c:	d116      	bne.n	80073cc <USB_EPStartXfer+0xb26>
 800739e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	e30a      	b.n	80079e2 <USB_EPStartXfer+0x113c>
 80073cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <USB_EPStartXfer+0xb46>
 80073e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073e6:	3301      	adds	r3, #1
 80073e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	029b      	lsls	r3, r3, #10
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	e2f1      	b.n	80079e2 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80073fe:	463b      	mov	r3, r7
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	78db      	ldrb	r3, [r3, #3]
 8007404:	2b02      	cmp	r3, #2
 8007406:	f040 818f 	bne.w	8007728 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800740a:	463b      	mov	r3, r7
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d175      	bne.n	8007500 <USB_EPStartXfer+0xc5a>
 8007414:	1d3b      	adds	r3, r7, #4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800741c:	1d3b      	adds	r3, r7, #4
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007424:	b29b      	uxth	r3, r3
 8007426:	461a      	mov	r2, r3
 8007428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800742c:	4413      	add	r3, r2
 800742e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007432:	463b      	mov	r3, r7
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	00da      	lsls	r2, r3, #3
 800743a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800743e:	4413      	add	r3, r2
 8007440:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007448:	463b      	mov	r3, r7
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b3e      	cmp	r3, #62	; 0x3e
 8007450:	d91f      	bls.n	8007492 <USB_EPStartXfer+0xbec>
 8007452:	463b      	mov	r3, r7
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800745e:	463b      	mov	r3, r7
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <USB_EPStartXfer+0xbd0>
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007470:	3b01      	subs	r3, #1
 8007472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747a:	b29b      	uxth	r3, r3
 800747c:	029b      	lsls	r3, r3, #10
 800747e:	b29b      	uxth	r3, r3
 8007480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007488:	b29a      	uxth	r2, r3
 800748a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800748e:	801a      	strh	r2, [r3, #0]
 8007490:	e05c      	b.n	800754c <USB_EPStartXfer+0xca6>
 8007492:	463b      	mov	r3, r7
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d116      	bne.n	80074ca <USB_EPStartXfer+0xc24>
 800749c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074c6:	801a      	strh	r2, [r3, #0]
 80074c8:	e040      	b.n	800754c <USB_EPStartXfer+0xca6>
 80074ca:	463b      	mov	r3, r7
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074d6:	463b      	mov	r3, r7
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d004      	beq.n	80074ee <USB_EPStartXfer+0xc48>
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e8:	3301      	adds	r3, #1
 80074ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	029b      	lsls	r3, r3, #10
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	e025      	b.n	800754c <USB_EPStartXfer+0xca6>
 8007500:	463b      	mov	r3, r7
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d120      	bne.n	800754c <USB_EPStartXfer+0xca6>
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007512:	1d3b      	adds	r3, r7, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800751a:	b29b      	uxth	r3, r3
 800751c:	461a      	mov	r2, r3
 800751e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007522:	4413      	add	r3, r2
 8007524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007528:	463b      	mov	r3, r7
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	00da      	lsls	r2, r3, #3
 8007530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007534:	4413      	add	r3, r2
 8007536:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800753a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800753e:	463b      	mov	r3, r7
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	b29a      	uxth	r2, r3
 8007546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800754a:	801a      	strh	r2, [r3, #0]
 800754c:	1d3b      	adds	r3, r7, #4
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007554:	463b      	mov	r3, r7
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d175      	bne.n	800764a <USB_EPStartXfer+0xda4>
 800755e:	1d3b      	adds	r3, r7, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756e:	b29b      	uxth	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007576:	4413      	add	r3, r2
 8007578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800757c:	463b      	mov	r3, r7
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	00da      	lsls	r2, r3, #3
 8007584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007588:	4413      	add	r3, r2
 800758a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800758e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b3e      	cmp	r3, #62	; 0x3e
 800759a:	d91f      	bls.n	80075dc <USB_EPStartXfer+0xd36>
 800759c:	463b      	mov	r3, r7
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a8:	463b      	mov	r3, r7
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <USB_EPStartXfer+0xd1a>
 80075b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ba:	3b01      	subs	r3, #1
 80075bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	029b      	lsls	r3, r3, #10
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	e058      	b.n	800768e <USB_EPStartXfer+0xde8>
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d116      	bne.n	8007614 <USB_EPStartXfer+0xd6e>
 80075e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075f8:	801a      	strh	r2, [r3, #0]
 80075fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760a:	b29a      	uxth	r2, r3
 800760c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	e03c      	b.n	800768e <USB_EPStartXfer+0xde8>
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007620:	463b      	mov	r3, r7
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <USB_EPStartXfer+0xd92>
 800762e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007632:	3301      	adds	r3, #1
 8007634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	b29b      	uxth	r3, r3
 800763e:	029b      	lsls	r3, r3, #10
 8007640:	b29a      	uxth	r2, r3
 8007642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	e021      	b.n	800768e <USB_EPStartXfer+0xde8>
 800764a:	463b      	mov	r3, r7
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d11c      	bne.n	800768e <USB_EPStartXfer+0xde8>
 8007654:	1d3b      	adds	r3, r7, #4
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765c:	b29b      	uxth	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007664:	4413      	add	r3, r2
 8007666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800766a:	463b      	mov	r3, r7
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	00da      	lsls	r2, r3, #3
 8007672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007676:	4413      	add	r3, r2
 8007678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800767c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007680:	463b      	mov	r3, r7
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	b29a      	uxth	r2, r3
 8007688:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800768c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800768e:	463b      	mov	r3, r7
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 81a4 	beq.w	80079e2 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	463b      	mov	r3, r7
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <USB_EPStartXfer+0xe20>
 80076ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10d      	bne.n	80076e2 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 8187 	bne.w	80079e2 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8180 	bne.w	80079e2 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80076e2:	1d3b      	adds	r3, r7, #4
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	463b      	mov	r3, r7
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007700:	1d3b      	adds	r3, r7, #4
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	463b      	mov	r3, r7
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007722:	b29b      	uxth	r3, r3
 8007724:	8013      	strh	r3, [r2, #0]
 8007726:	e15c      	b.n	80079e2 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007728:	463b      	mov	r3, r7
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	78db      	ldrb	r3, [r3, #3]
 800772e:	2b01      	cmp	r3, #1
 8007730:	f040 8155 	bne.w	80079de <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007734:	463b      	mov	r3, r7
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699a      	ldr	r2, [r3, #24]
 800773a:	463b      	mov	r3, r7
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d90e      	bls.n	8007762 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8007744:	463b      	mov	r3, r7
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800774e:	463b      	mov	r3, r7
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007758:	1ad2      	subs	r2, r2, r3
 800775a:	463b      	mov	r3, r7
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	619a      	str	r2, [r3, #24]
 8007760:	e008      	b.n	8007774 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8007762:	463b      	mov	r3, r7
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800776c:	463b      	mov	r3, r7
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2200      	movs	r2, #0
 8007772:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007774:	463b      	mov	r3, r7
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d16f      	bne.n	800785e <USB_EPStartXfer+0xfb8>
 800777e:	1d3b      	adds	r3, r7, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007786:	1d3b      	adds	r3, r7, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778e:	b29b      	uxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007796:	4413      	add	r3, r2
 8007798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800779c:	463b      	mov	r3, r7
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	00da      	lsls	r2, r3, #3
 80077a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b6:	2b3e      	cmp	r3, #62	; 0x3e
 80077b8:	d91d      	bls.n	80077f6 <USB_EPStartXfer+0xf50>
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d104      	bne.n	80077da <USB_EPStartXfer+0xf34>
 80077d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d4:	3b01      	subs	r3, #1
 80077d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077de:	b29b      	uxth	r3, r3
 80077e0:	029b      	lsls	r3, r3, #10
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e058      	b.n	80078a8 <USB_EPStartXfer+0x1002>
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d116      	bne.n	800782c <USB_EPStartXfer+0xf86>
 80077fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800780a:	b29a      	uxth	r2, r3
 800780c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007810:	801a      	strh	r2, [r3, #0]
 8007812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007822:	b29a      	uxth	r2, r3
 8007824:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	e03d      	b.n	80078a8 <USB_EPStartXfer+0x1002>
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007830:	085b      	lsrs	r3, r3, #1
 8007832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d004      	beq.n	800784c <USB_EPStartXfer+0xfa6>
 8007842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007846:	3301      	adds	r3, #1
 8007848:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800784c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007850:	b29b      	uxth	r3, r3
 8007852:	029b      	lsls	r3, r3, #10
 8007854:	b29a      	uxth	r2, r3
 8007856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	e024      	b.n	80078a8 <USB_EPStartXfer+0x1002>
 800785e:	463b      	mov	r3, r7
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d11f      	bne.n	80078a8 <USB_EPStartXfer+0x1002>
 8007868:	1d3b      	adds	r3, r7, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007870:	1d3b      	adds	r3, r7, #4
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007878:	b29b      	uxth	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007880:	4413      	add	r3, r2
 8007882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007886:	463b      	mov	r3, r7
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	00da      	lsls	r2, r3, #3
 800788e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007892:	4413      	add	r3, r2
 8007894:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	1d3b      	adds	r3, r7, #4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078b0:	463b      	mov	r3, r7
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d16f      	bne.n	800799a <USB_EPStartXfer+0x10f4>
 80078ba:	1d3b      	adds	r3, r7, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80078c2:	1d3b      	adds	r3, r7, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078d2:	4413      	add	r3, r2
 80078d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80078d8:	463b      	mov	r3, r7
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	00da      	lsls	r2, r3, #3
 80078e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078e4:	4413      	add	r3, r2
 80078e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f2:	2b3e      	cmp	r3, #62	; 0x3e
 80078f4:	d91d      	bls.n	8007932 <USB_EPStartXfer+0x108c>
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <USB_EPStartXfer+0x1070>
 800790c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007910:	3b01      	subs	r3, #1
 8007912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29b      	uxth	r3, r3
 8007920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007928:	b29a      	uxth	r2, r3
 800792a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	e057      	b.n	80079e2 <USB_EPStartXfer+0x113c>
 8007932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007936:	2b00      	cmp	r3, #0
 8007938:	d116      	bne.n	8007968 <USB_EPStartXfer+0x10c2>
 800793a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	b29b      	uxth	r3, r3
 8007942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007946:	b29a      	uxth	r2, r3
 8007948:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800794c:	801a      	strh	r2, [r3, #0]
 800794e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800795e:	b29a      	uxth	r2, r3
 8007960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007964:	801a      	strh	r2, [r3, #0]
 8007966:	e03c      	b.n	80079e2 <USB_EPStartXfer+0x113c>
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796c:	085b      	lsrs	r3, r3, #1
 800796e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <USB_EPStartXfer+0x10e2>
 800797e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007982:	3301      	adds	r3, #1
 8007984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798c:	b29b      	uxth	r3, r3
 800798e:	029b      	lsls	r3, r3, #10
 8007990:	b29a      	uxth	r2, r3
 8007992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e023      	b.n	80079e2 <USB_EPStartXfer+0x113c>
 800799a:	463b      	mov	r3, r7
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d11e      	bne.n	80079e2 <USB_EPStartXfer+0x113c>
 80079a4:	1d3b      	adds	r3, r7, #4
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079b4:	4413      	add	r3, r2
 80079b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ba:	463b      	mov	r3, r7
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	00da      	lsls	r2, r3, #3
 80079c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079c6:	4413      	add	r3, r2
 80079c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	e001      	b.n	80079e2 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e02e      	b.n	8007a40 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079e2:	1d3b      	adds	r3, r7, #4
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	463b      	mov	r3, r7
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a18:	1d3b      	adds	r3, r7, #4
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	441a      	add	r2, r3
 8007a26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d020      	beq.n	8007a9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a72:	81bb      	strh	r3, [r7, #12]
 8007a74:	89bb      	ldrh	r3, [r7, #12]
 8007a76:	f083 0310 	eor.w	r3, r3, #16
 8007a7a:	81bb      	strh	r3, [r7, #12]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	441a      	add	r2, r3
 8007a86:	89bb      	ldrh	r3, [r7, #12]
 8007a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	8013      	strh	r3, [r2, #0]
 8007a9c:	e01f      	b.n	8007ade <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab4:	81fb      	strh	r3, [r7, #14]
 8007ab6:	89fb      	ldrh	r3, [r7, #14]
 8007ab8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007abc:	81fb      	strh	r3, [r7, #14]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	441a      	add	r2, r3
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	7b1b      	ldrb	r3, [r3, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f040 809d 	bne.w	8007c3a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	785b      	ldrb	r3, [r3, #1]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d04c      	beq.n	8007ba2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	823b      	strh	r3, [r7, #16]
 8007b16:	8a3b      	ldrh	r3, [r7, #16]
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01b      	beq.n	8007b58 <USB_EPClearStall+0x6c>
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b36:	81fb      	strh	r3, [r7, #14]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	441a      	add	r2, r3
 8007b42:	89fb      	ldrh	r3, [r7, #14]
 8007b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d06c      	beq.n	8007c3a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b76:	81bb      	strh	r3, [r7, #12]
 8007b78:	89bb      	ldrh	r3, [r7, #12]
 8007b7a:	f083 0320 	eor.w	r3, r3, #32
 8007b7e:	81bb      	strh	r3, [r7, #12]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	89bb      	ldrh	r3, [r7, #12]
 8007b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	8013      	strh	r3, [r2, #0]
 8007ba0:	e04b      	b.n	8007c3a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	82fb      	strh	r3, [r7, #22]
 8007bb0:	8afb      	ldrh	r3, [r7, #22]
 8007bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01b      	beq.n	8007bf2 <USB_EPClearStall+0x106>
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd0:	82bb      	strh	r3, [r7, #20]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	441a      	add	r2, r3
 8007bdc:	8abb      	ldrh	r3, [r7, #20]
 8007bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c08:	827b      	strh	r3, [r7, #18]
 8007c0a:	8a7b      	ldrh	r3, [r7, #18]
 8007c0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c10:	827b      	strh	r3, [r7, #18]
 8007c12:	8a7b      	ldrh	r3, [r7, #18]
 8007c14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c18:	827b      	strh	r3, [r7, #18]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	441a      	add	r2, r3
 8007c24:	8a7b      	ldrh	r3, [r7, #18]
 8007c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2280      	movs	r2, #128	; 0x80
 8007c5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b08d      	sub	sp, #52	; 0x34
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	461a      	mov	r2, r3
 8007ccc:	460b      	mov	r3, r1
 8007cce:	80fb      	strh	r3, [r7, #6]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cd4:	88bb      	ldrh	r3, [r7, #4]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	085b      	lsrs	r3, r3, #1
 8007cda:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ce4:	88fa      	ldrh	r2, [r7, #6]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cf4:	e01b      	b.n	8007d2e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	3301      	adds	r3, #1
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	3302      	adds	r3, #2
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	3301      	adds	r3, #1
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e0      	bne.n	8007cf6 <USB_WritePMA+0x38>
  }
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	3734      	adds	r7, #52	; 0x34
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b08b      	sub	sp, #44	; 0x2c
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	461a      	mov	r2, r3
 8007d50:	460b      	mov	r3, r1
 8007d52:	80fb      	strh	r3, [r7, #6]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d58:	88bb      	ldrh	r3, [r7, #4]
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d68:	88fa      	ldrh	r2, [r7, #6]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d72:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
 8007d78:	e018      	b.n	8007dac <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	3302      	adds	r3, #2
 8007d86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	3301      	adds	r3, #1
 8007d94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	0a1b      	lsrs	r3, r3, #8
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	3301      	adds	r3, #1
 8007da4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	3b01      	subs	r3, #1
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e3      	bne.n	8007d7a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007db2:	88bb      	ldrh	r3, [r7, #4]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	701a      	strb	r2, [r3, #0]
  }
}
 8007dce:	bf00      	nop
 8007dd0:	372c      	adds	r7, #44	; 0x2c
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007de6:	2010      	movs	r0, #16
 8007de8:	f001 fef0 	bl	8009bcc <USBD_static_malloc>
 8007dec:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e01b      	b.n	8007e38 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7c1b      	ldrb	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2207      	movs	r2, #7
 8007e14:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007e16:	e002      	b.n	8007e1e <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	220a      	movs	r2, #10
 8007e1c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007e1e:	2304      	movs	r3, #4
 8007e20:	2203      	movs	r2, #3
 8007e22:	2181      	movs	r1, #129	; 0x81
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fd8a 	bl	800993e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007e4c:	2181      	movs	r1, #129	; 0x81
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fd9b 	bl	800998a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 feb9 	bl	8009be8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e98:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e0e8      	b.n	800807e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d046      	beq.n	8007f46 <USBD_HID_Setup+0xbe>
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	f040 80d8 	bne.w	800806e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	3b02      	subs	r3, #2
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	d836      	bhi.n	8007f36 <USBD_HID_Setup+0xae>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <USBD_HID_Setup+0x48>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007f27 	.word	0x08007f27
 8007ed4:	08007f07 	.word	0x08007f07
 8007ed8:	08007f37 	.word	0x08007f37
 8007edc:	08007f37 	.word	0x08007f37
 8007ee0:	08007f37 	.word	0x08007f37
 8007ee4:	08007f37 	.word	0x08007f37
 8007ee8:	08007f37 	.word	0x08007f37
 8007eec:	08007f37 	.word	0x08007f37
 8007ef0:	08007f15 	.word	0x08007f15
 8007ef4:	08007ef9 	.word	0x08007ef9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	885b      	ldrh	r3, [r3, #2]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	601a      	str	r2, [r3, #0]
          break;
 8007f04:	e01e      	b.n	8007f44 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 f9d8 	bl	80092c2 <USBD_CtlSendData>
          break;
 8007f12:	e017      	b.n	8007f44 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	885b      	ldrh	r3, [r3, #2]
 8007f18:	0a1b      	lsrs	r3, r3, #8
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	461a      	mov	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	605a      	str	r2, [r3, #4]
          break;
 8007f24:	e00e      	b.n	8007f44 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 f9c7 	bl	80092c2 <USBD_CtlSendData>
          break;
 8007f34:	e006      	b.n	8007f44 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f951 	bl	80091e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	75fb      	strb	r3, [r7, #23]
          break;
 8007f42:	bf00      	nop
      }
      break;
 8007f44:	e09a      	b.n	800807c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	2b0b      	cmp	r3, #11
 8007f4c:	f200 8086 	bhi.w	800805c <USBD_HID_Setup+0x1d4>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <USBD_HID_Setup+0xd0>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f89 	.word	0x08007f89
 8007f5c:	0800806b 	.word	0x0800806b
 8007f60:	0800805d 	.word	0x0800805d
 8007f64:	0800805d 	.word	0x0800805d
 8007f68:	0800805d 	.word	0x0800805d
 8007f6c:	0800805d 	.word	0x0800805d
 8007f70:	08007fb3 	.word	0x08007fb3
 8007f74:	0800805d 	.word	0x0800805d
 8007f78:	0800805d 	.word	0x0800805d
 8007f7c:	0800805d 	.word	0x0800805d
 8007f80:	0800800b 	.word	0x0800800b
 8007f84:	08008035 	.word	0x08008035
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d107      	bne.n	8007fa4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f94:	f107 030a 	add.w	r3, r7, #10
 8007f98:	2202      	movs	r2, #2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f990 	bl	80092c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fa2:	e063      	b.n	800806c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 f91a 	bl	80091e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb0:	e05c      	b.n	800806c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	885b      	ldrh	r3, [r3, #2]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b22      	cmp	r3, #34	; 0x22
 8007fbc:	d108      	bne.n	8007fd0 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	2b4a      	cmp	r3, #74	; 0x4a
 8007fc4:	bf28      	it	cs
 8007fc6:	234a      	movcs	r3, #74	; 0x4a
 8007fc8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007fca:	4b2f      	ldr	r3, [pc, #188]	; (8008088 <USBD_HID_Setup+0x200>)
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	e015      	b.n	8007ffc <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	885b      	ldrh	r3, [r3, #2]
 8007fd4:	0a1b      	lsrs	r3, r3, #8
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2b21      	cmp	r3, #33	; 0x21
 8007fda:	d108      	bne.n	8007fee <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007fdc:	4b2b      	ldr	r3, [pc, #172]	; (800808c <USBD_HID_Setup+0x204>)
 8007fde:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	88db      	ldrh	r3, [r3, #6]
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	bf28      	it	cs
 8007fe8:	2309      	movcs	r3, #9
 8007fea:	82bb      	strh	r3, [r7, #20]
 8007fec:	e006      	b.n	8007ffc <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 f8f5 	bl	80091e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	75fb      	strb	r3, [r7, #23]
            break;
 8007ffa:	e037      	b.n	800806c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ffc:	8abb      	ldrh	r3, [r7, #20]
 8007ffe:	461a      	mov	r2, r3
 8008000:	6939      	ldr	r1, [r7, #16]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f95d 	bl	80092c2 <USBD_CtlSendData>
          break;
 8008008:	e030      	b.n	800806c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b03      	cmp	r3, #3
 8008014:	d107      	bne.n	8008026 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3308      	adds	r3, #8
 800801a:	2201      	movs	r2, #1
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 f94f 	bl	80092c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008024:	e022      	b.n	800806c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 f8d9 	bl	80091e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800802e:	2303      	movs	r3, #3
 8008030:	75fb      	strb	r3, [r7, #23]
          break;
 8008032:	e01b      	b.n	800806c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b03      	cmp	r3, #3
 800803e:	d106      	bne.n	800804e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800804c:	e00e      	b.n	800806c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 f8c5 	bl	80091e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008056:	2303      	movs	r3, #3
 8008058:	75fb      	strb	r3, [r7, #23]
          break;
 800805a:	e007      	b.n	800806c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 f8be 	bl	80091e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008064:	2303      	movs	r3, #3
 8008066:	75fb      	strb	r3, [r7, #23]
          break;
 8008068:	e000      	b.n	800806c <USBD_HID_Setup+0x1e4>
          break;
 800806a:	bf00      	nop
      }
      break;
 800806c:	e006      	b.n	800807c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f8b5 	bl	80091e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008076:	2303      	movs	r3, #3
 8008078:	75fb      	strb	r3, [r7, #23]
      break;
 800807a:	bf00      	nop
  }

  return (uint8_t)ret;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	200000e4 	.word	0x200000e4
 800808c:	200000cc 	.word	0x200000cc

08008090 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	4613      	mov	r3, r2
 800809c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e013      	b.n	80080d8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d10c      	bne.n	80080d6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	7b1b      	ldrb	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d108      	bne.n	80080d6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2201      	movs	r2, #1
 80080c8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	2181      	movs	r1, #129	; 0x81
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f001 fd03 	bl	8009adc <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2222      	movs	r2, #34	; 0x22
 80080ec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80080ee:	4b03      	ldr	r3, [pc, #12]	; (80080fc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	20000060 	.word	0x20000060

08008100 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2222      	movs	r2, #34	; 0x22
 800810c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800810e:	4b03      	ldr	r3, [pc, #12]	; (800811c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	20000084 	.word	0x20000084

08008120 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2222      	movs	r2, #34	; 0x22
 800812c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800812e:	4b03      	ldr	r3, [pc, #12]	; (800813c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	200000a8 	.word	0x200000a8

08008140 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008152:	2200      	movs	r2, #0
 8008154:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	220a      	movs	r2, #10
 8008170:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008172:	4b03      	ldr	r3, [pc, #12]	; (8008180 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	200000d8 	.word	0x200000d8

08008184 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e01f      	b.n	80081dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	79fa      	ldrb	r2, [r7, #7]
 80081ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 fb49 	bl	8009868 <USBD_LL_Init>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e016      	b.n	800822a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	f107 020e 	add.w	r2, r7, #14
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fb64 	bl	8009908 <USBD_LL_Start>
 8008240:	4603      	mov	r3, r0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	4611      	mov	r1, r2
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	78fa      	ldrb	r2, [r7, #3]
 80082b8:	4611      	mov	r1, r2
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3
  }

  return USBD_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 ff46 	bl	800916c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082fc:	f003 031f 	and.w	r3, r3, #31
 8008300:	2b02      	cmp	r3, #2
 8008302:	d01a      	beq.n	800833a <USBD_LL_SetupStage+0x72>
 8008304:	2b02      	cmp	r3, #2
 8008306:	d822      	bhi.n	800834e <USBD_LL_SetupStage+0x86>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <USBD_LL_SetupStage+0x4a>
 800830c:	2b01      	cmp	r3, #1
 800830e:	d00a      	beq.n	8008326 <USBD_LL_SetupStage+0x5e>
 8008310:	e01d      	b.n	800834e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f9ee 	bl	80086fc <USBD_StdDevReq>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	e020      	b.n	8008368 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa52 	bl	80087d8 <USBD_StdItfReq>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
      break;
 8008338:	e016      	b.n	8008368 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa91 	bl	800886a <USBD_StdEPReq>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]
      break;
 800834c:	e00c      	b.n	8008368 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008358:	b2db      	uxtb	r3, r3
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 fb33 	bl	80099c8 <USBD_LL_StallEP>
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
      break;
 8008366:	bf00      	nop
  }

  return ret;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	460b      	mov	r3, r1
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d138      	bne.n	80083f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800838c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008394:	2b03      	cmp	r3, #3
 8008396:	d14a      	bne.n	800842e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d913      	bls.n	80083cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	1ad2      	subs	r2, r2, r3
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4293      	cmp	r3, r2
 80083bc:	bf28      	it	cs
 80083be:	4613      	movcs	r3, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 ffa8 	bl	800931a <USBD_CtlContinueRx>
 80083ca:	e030      	b.n	800842e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d10b      	bne.n	80083f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 ffa3 	bl	800933c <USBD_CtlSendStatus>
 80083f6:	e01a      	b.n	800842e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b03      	cmp	r3, #3
 8008402:	d114      	bne.n	800842e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	7afa      	ldrb	r2, [r7, #11]
 800841a:	4611      	mov	r1, r2
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	4798      	blx	r3
 8008420:	4603      	mov	r3, r0
 8008422:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	e000      	b.n	8008430 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	460b      	mov	r3, r1
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d16b      	bne.n	8008524 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3314      	adds	r3, #20
 8008450:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008458:	2b02      	cmp	r3, #2
 800845a:	d156      	bne.n	800850a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	429a      	cmp	r2, r3
 8008466:	d914      	bls.n	8008492 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	1ad2      	subs	r2, r2, r3
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	461a      	mov	r2, r3
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 ff3a 	bl	80092f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008484:	2300      	movs	r3, #0
 8008486:	2200      	movs	r2, #0
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f001 fb47 	bl	8009b1e <USBD_LL_PrepareReceive>
 8008490:	e03b      	b.n	800850a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	429a      	cmp	r2, r3
 800849c:	d11c      	bne.n	80084d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d316      	bcc.n	80084d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d20f      	bcs.n	80084d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 ff1b 	bl	80092f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ca:	2300      	movs	r3, #0
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 fb24 	bl	8009b1e <USBD_LL_PrepareReceive>
 80084d6:	e018      	b.n	800850a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d10b      	bne.n	80084fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084fc:	2180      	movs	r1, #128	; 0x80
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f001 fa62 	bl	80099c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 ff2c 	bl	8009362 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008510:	2b01      	cmp	r3, #1
 8008512:	d122      	bne.n	800855a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fe98 	bl	800824a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008522:	e01a      	b.n	800855a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b03      	cmp	r3, #3
 800852e:	d114      	bne.n	800855a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	7afa      	ldrb	r2, [r7, #11]
 8008546:	4611      	mov	r1, r2
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	4798      	blx	r3
 800854c:	4603      	mov	r3, r0
 800854e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	e000      	b.n	800855c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008594:	2303      	movs	r3, #3
 8008596:	e02f      	b.n	80085f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00f      	beq.n	80085c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6852      	ldr	r2, [r2, #4]
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	4611      	mov	r1, r2
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085c2:	2340      	movs	r3, #64	; 0x40
 80085c4:	2200      	movs	r2, #0
 80085c6:	2100      	movs	r1, #0
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 f9b8 	bl	800993e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2240      	movs	r2, #64	; 0x40
 80085da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085de:	2340      	movs	r3, #64	; 0x40
 80085e0:	2200      	movs	r2, #0
 80085e2:	2180      	movs	r1, #128	; 0x80
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f9aa 	bl	800993e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2240      	movs	r2, #64	; 0x40
 80085f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862e:	b2da      	uxtb	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2204      	movs	r2, #4
 800863a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b04      	cmp	r3, #4
 800865e:	d106      	bne.n	800866e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008666:	b2da      	uxtb	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800868e:	2303      	movs	r3, #3
 8008690:	e012      	b.n	80086b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b03      	cmp	r3, #3
 800869c:	d10b      	bne.n	80086b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	3301      	adds	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086de:	8a3b      	ldrh	r3, [r7, #16]
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	b21a      	sxth	r2, r3
 80086e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b21b      	sxth	r3, r3
 80086ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086ee:	89fb      	ldrh	r3, [r7, #14]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d005      	beq.n	8008722 <USBD_StdDevReq+0x26>
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d853      	bhi.n	80087c2 <USBD_StdDevReq+0xc6>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <USBD_StdDevReq+0x3a>
 800871e:	2b20      	cmp	r3, #32
 8008720:	d14f      	bne.n	80087c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	4798      	blx	r3
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
      break;
 8008734:	e04a      	b.n	80087cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b09      	cmp	r3, #9
 800873c:	d83b      	bhi.n	80087b6 <USBD_StdDevReq+0xba>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <USBD_StdDevReq+0x48>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	08008799 	.word	0x08008799
 8008748:	080087ad 	.word	0x080087ad
 800874c:	080087b7 	.word	0x080087b7
 8008750:	080087a3 	.word	0x080087a3
 8008754:	080087b7 	.word	0x080087b7
 8008758:	08008777 	.word	0x08008777
 800875c:	0800876d 	.word	0x0800876d
 8008760:	080087b7 	.word	0x080087b7
 8008764:	0800878f 	.word	0x0800878f
 8008768:	08008781 	.word	0x08008781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f9de 	bl	8008b30 <USBD_GetDescriptor>
          break;
 8008774:	e024      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fb6d 	bl	8008e58 <USBD_SetAddress>
          break;
 800877e:	e01f      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fbac 	bl	8008ee0 <USBD_SetConfig>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
          break;
 800878c:	e018      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fc4b 	bl	800902c <USBD_GetConfig>
          break;
 8008796:	e013      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fc7c 	bl	8009098 <USBD_GetStatus>
          break;
 80087a0:	e00e      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fcab 	bl	8009100 <USBD_SetFeature>
          break;
 80087aa:	e009      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fcba 	bl	8009128 <USBD_ClrFeature>
          break;
 80087b4:	e004      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fd11 	bl	80091e0 <USBD_CtlError>
          break;
 80087be:	bf00      	nop
      }
      break;
 80087c0:	e004      	b.n	80087cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fd0b 	bl	80091e0 <USBD_CtlError>
      break;
 80087ca:	bf00      	nop
  }

  return ret;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop

080087d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ee:	2b40      	cmp	r3, #64	; 0x40
 80087f0:	d005      	beq.n	80087fe <USBD_StdItfReq+0x26>
 80087f2:	2b40      	cmp	r3, #64	; 0x40
 80087f4:	d82f      	bhi.n	8008856 <USBD_StdItfReq+0x7e>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <USBD_StdItfReq+0x26>
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	d12b      	bne.n	8008856 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008804:	b2db      	uxtb	r3, r3
 8008806:	3b01      	subs	r3, #1
 8008808:	2b02      	cmp	r3, #2
 800880a:	d81d      	bhi.n	8008848 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	889b      	ldrh	r3, [r3, #4]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b01      	cmp	r3, #1
 8008814:	d813      	bhi.n	800883e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	88db      	ldrh	r3, [r3, #6]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d110      	bne.n	8008852 <USBD_StdItfReq+0x7a>
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10d      	bne.n	8008852 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fd80 	bl	800933c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800883c:	e009      	b.n	8008852 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fccd 	bl	80091e0 <USBD_CtlError>
          break;
 8008846:	e004      	b.n	8008852 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fcc8 	bl	80091e0 <USBD_CtlError>
          break;
 8008850:	e000      	b.n	8008854 <USBD_StdItfReq+0x7c>
          break;
 8008852:	bf00      	nop
      }
      break;
 8008854:	e004      	b.n	8008860 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fcc1 	bl	80091e0 <USBD_CtlError>
      break;
 800885e:	bf00      	nop
  }

  return ret;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	889b      	ldrh	r3, [r3, #4]
 800887c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d007      	beq.n	800889a <USBD_StdEPReq+0x30>
 800888a:	2b40      	cmp	r3, #64	; 0x40
 800888c:	f200 8145 	bhi.w	8008b1a <USBD_StdEPReq+0x2b0>
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00c      	beq.n	80088ae <USBD_StdEPReq+0x44>
 8008894:	2b20      	cmp	r3, #32
 8008896:	f040 8140 	bne.w	8008b1a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4798      	blx	r3
 80088a8:	4603      	mov	r3, r0
 80088aa:	73fb      	strb	r3, [r7, #15]
      break;
 80088ac:	e13a      	b.n	8008b24 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d007      	beq.n	80088c6 <USBD_StdEPReq+0x5c>
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	f300 8129 	bgt.w	8008b0e <USBD_StdEPReq+0x2a4>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d07f      	beq.n	80089c0 <USBD_StdEPReq+0x156>
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d03c      	beq.n	800893e <USBD_StdEPReq+0xd4>
 80088c4:	e123      	b.n	8008b0e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d002      	beq.n	80088d8 <USBD_StdEPReq+0x6e>
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d016      	beq.n	8008904 <USBD_StdEPReq+0x9a>
 80088d6:	e02c      	b.n	8008932 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <USBD_StdEPReq+0x90>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b80      	cmp	r3, #128	; 0x80
 80088e2:	d00a      	beq.n	80088fa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f86d 	bl	80099c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ee:	2180      	movs	r1, #128	; 0x80
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f869 	bl	80099c8 <USBD_LL_StallEP>
 80088f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088f8:	e020      	b.n	800893c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc6f 	bl	80091e0 <USBD_CtlError>
              break;
 8008902:	e01b      	b.n	800893c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	885b      	ldrh	r3, [r3, #2]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10e      	bne.n	800892a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <USBD_StdEPReq+0xc0>
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b80      	cmp	r3, #128	; 0x80
 8008916:	d008      	beq.n	800892a <USBD_StdEPReq+0xc0>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	88db      	ldrh	r3, [r3, #6]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d104      	bne.n	800892a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 f84f 	bl	80099c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fd06 	bl	800933c <USBD_CtlSendStatus>

              break;
 8008930:	e004      	b.n	800893c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fc53 	bl	80091e0 <USBD_CtlError>
              break;
 800893a:	bf00      	nop
          }
          break;
 800893c:	e0ec      	b.n	8008b18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d002      	beq.n	8008950 <USBD_StdEPReq+0xe6>
 800894a:	2b03      	cmp	r3, #3
 800894c:	d016      	beq.n	800897c <USBD_StdEPReq+0x112>
 800894e:	e030      	b.n	80089b2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00d      	beq.n	8008972 <USBD_StdEPReq+0x108>
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b80      	cmp	r3, #128	; 0x80
 800895a:	d00a      	beq.n	8008972 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f831 	bl	80099c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008966:	2180      	movs	r1, #128	; 0x80
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 f82d 	bl	80099c8 <USBD_LL_StallEP>
 800896e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008970:	e025      	b.n	80089be <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc33 	bl	80091e0 <USBD_CtlError>
              break;
 800897a:	e020      	b.n	80089be <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	885b      	ldrh	r3, [r3, #2]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d11b      	bne.n	80089bc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898a:	2b00      	cmp	r3, #0
 800898c:	d004      	beq.n	8008998 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 f837 	bl	8009a06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fccf 	bl	800933c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	4798      	blx	r3
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80089b0:	e004      	b.n	80089bc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fc13 	bl	80091e0 <USBD_CtlError>
              break;
 80089ba:	e000      	b.n	80089be <USBD_StdEPReq+0x154>
              break;
 80089bc:	bf00      	nop
          }
          break;
 80089be:	e0ab      	b.n	8008b18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d002      	beq.n	80089d2 <USBD_StdEPReq+0x168>
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d032      	beq.n	8008a36 <USBD_StdEPReq+0x1cc>
 80089d0:	e097      	b.n	8008b02 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <USBD_StdEPReq+0x17e>
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b80      	cmp	r3, #128	; 0x80
 80089dc:	d004      	beq.n	80089e8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fbfd 	bl	80091e0 <USBD_CtlError>
                break;
 80089e6:	e091      	b.n	8008b0c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da0b      	bge.n	8008a08 <USBD_StdEPReq+0x19e>
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	3310      	adds	r3, #16
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	3304      	adds	r3, #4
 8008a06:	e00b      	b.n	8008a20 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	3304      	adds	r3, #4
 8008a20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fc47 	bl	80092c2 <USBD_CtlSendData>
              break;
 8008a34:	e06a      	b.n	8008b0c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da11      	bge.n	8008a62 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	f003 020f 	and.w	r2, r3, #15
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	3324      	adds	r3, #36	; 0x24
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d117      	bne.n	8008a88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fbc0 	bl	80091e0 <USBD_CtlError>
                  break;
 8008a60:	e054      	b.n	8008b0c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	f003 020f 	and.w	r2, r3, #15
 8008a68:	6879      	ldr	r1, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	440b      	add	r3, r1
 8008a74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d104      	bne.n	8008a88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fbad 	bl	80091e0 <USBD_CtlError>
                  break;
 8008a86:	e041      	b.n	8008b0c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	da0b      	bge.n	8008aa8 <USBD_StdEPReq+0x23e>
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	3310      	adds	r3, #16
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	e00b      	b.n	8008ac0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	4413      	add	r3, r2
 8008abe:	3304      	adds	r3, #4
 8008ac0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <USBD_StdEPReq+0x264>
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b80      	cmp	r3, #128	; 0x80
 8008acc:	d103      	bne.n	8008ad6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e00e      	b.n	8008af4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 ffb2 	bl	8009a44 <USBD_LL_IsStallEP>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e002      	b.n	8008af4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2202      	movs	r2, #2
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fbe1 	bl	80092c2 <USBD_CtlSendData>
              break;
 8008b00:	e004      	b.n	8008b0c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb6b 	bl	80091e0 <USBD_CtlError>
              break;
 8008b0a:	bf00      	nop
          }
          break;
 8008b0c:	e004      	b.n	8008b18 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fb65 	bl	80091e0 <USBD_CtlError>
          break;
 8008b16:	bf00      	nop
      }
      break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb5f 	bl	80091e0 <USBD_CtlError>
      break;
 8008b22:	bf00      	nop
  }

  return ret;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b0e      	cmp	r3, #14
 8008b52:	f200 8152 	bhi.w	8008dfa <USBD_GetDescriptor+0x2ca>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBD_GetDescriptor+0x2c>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008bcd 	.word	0x08008bcd
 8008b60:	08008be5 	.word	0x08008be5
 8008b64:	08008c25 	.word	0x08008c25
 8008b68:	08008dfb 	.word	0x08008dfb
 8008b6c:	08008dfb 	.word	0x08008dfb
 8008b70:	08008d9b 	.word	0x08008d9b
 8008b74:	08008dc7 	.word	0x08008dc7
 8008b78:	08008dfb 	.word	0x08008dfb
 8008b7c:	08008dfb 	.word	0x08008dfb
 8008b80:	08008dfb 	.word	0x08008dfb
 8008b84:	08008dfb 	.word	0x08008dfb
 8008b88:	08008dfb 	.word	0x08008dfb
 8008b8c:	08008dfb 	.word	0x08008dfb
 8008b90:	08008dfb 	.word	0x08008dfb
 8008b94:	08008b99 	.word	0x08008b99
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	7c12      	ldrb	r2, [r2, #16]
 8008bb0:	f107 0108 	add.w	r1, r7, #8
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bba:	e126      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fb0e 	bl	80091e0 <USBD_CtlError>
        err++;
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	72fb      	strb	r3, [r7, #11]
      break;
 8008bca:	e11e      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7c12      	ldrb	r2, [r2, #16]
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
      break;
 8008be2:	e112      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	7c1b      	ldrb	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10d      	bne.n	8008c08 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	f107 0208 	add.w	r2, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	2202      	movs	r2, #2
 8008c04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c06:	e100      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	f107 0208 	add.w	r2, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	2202      	movs	r2, #2
 8008c20:	701a      	strb	r2, [r3, #0]
      break;
 8008c22:	e0f2      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b05      	cmp	r3, #5
 8008c2c:	f200 80ac 	bhi.w	8008d88 <USBD_GetDescriptor+0x258>
 8008c30:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <USBD_GetDescriptor+0x108>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008c51 	.word	0x08008c51
 8008c3c:	08008c85 	.word	0x08008c85
 8008c40:	08008cb9 	.word	0x08008cb9
 8008c44:	08008ced 	.word	0x08008ced
 8008c48:	08008d21 	.word	0x08008d21
 8008c4c:	08008d55 	.word	0x08008d55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7c12      	ldrb	r2, [r2, #16]
 8008c68:	f107 0108 	add.w	r1, r7, #8
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c72:	e091      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fab2 	bl	80091e0 <USBD_CtlError>
            err++;
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	72fb      	strb	r3, [r7, #11]
          break;
 8008c82:	e089      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7c12      	ldrb	r2, [r2, #16]
 8008c9c:	f107 0108 	add.w	r1, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ca6:	e077      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa98 	bl	80091e0 <USBD_CtlError>
            err++;
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cb6:	e06f      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7c12      	ldrb	r2, [r2, #16]
 8008cd0:	f107 0108 	add.w	r1, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cda:	e05d      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa7e 	bl	80091e0 <USBD_CtlError>
            err++;
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cea:	e055      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 0108 	add.w	r1, r7, #8
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d0e:	e043      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa64 	bl	80091e0 <USBD_CtlError>
            err++;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d1e:	e03b      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d42:	e029      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa4a 	bl	80091e0 <USBD_CtlError>
            err++;
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	72fb      	strb	r3, [r7, #11]
          break;
 8008d52:	e021      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	7c12      	ldrb	r2, [r2, #16]
 8008d6c:	f107 0108 	add.w	r1, r7, #8
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
 8008d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d76:	e00f      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa30 	bl	80091e0 <USBD_CtlError>
            err++;
 8008d80:	7afb      	ldrb	r3, [r7, #11]
 8008d82:	3301      	adds	r3, #1
 8008d84:	72fb      	strb	r3, [r7, #11]
          break;
 8008d86:	e007      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa28 	bl	80091e0 <USBD_CtlError>
          err++;
 8008d90:	7afb      	ldrb	r3, [r7, #11]
 8008d92:	3301      	adds	r3, #1
 8008d94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d96:	bf00      	nop
      }
      break;
 8008d98:	e037      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	7c1b      	ldrb	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008daa:	f107 0208 	add.w	r2, r7, #8
 8008dae:	4610      	mov	r0, r2
 8008db0:	4798      	blx	r3
 8008db2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008db4:	e029      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fa11 	bl	80091e0 <USBD_CtlError>
        err++;
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008dc4:	e021      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	7c1b      	ldrb	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10d      	bne.n	8008dea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	f107 0208 	add.w	r2, r7, #8
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4798      	blx	r3
 8008dde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	2207      	movs	r2, #7
 8008de6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008de8:	e00f      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f9f7 	bl	80091e0 <USBD_CtlError>
        err++;
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	3301      	adds	r3, #1
 8008df6:	72fb      	strb	r3, [r7, #11]
      break;
 8008df8:	e007      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f9ef 	bl	80091e0 <USBD_CtlError>
      err++;
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	3301      	adds	r3, #1
 8008e06:	72fb      	strb	r3, [r7, #11]
      break;
 8008e08:	bf00      	nop
  }

  if (err != 0U)
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d11e      	bne.n	8008e4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	88db      	ldrh	r3, [r3, #6]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d016      	beq.n	8008e46 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008e18:	893b      	ldrh	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00e      	beq.n	8008e3c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	88da      	ldrh	r2, [r3, #6]
 8008e22:	893b      	ldrh	r3, [r7, #8]
 8008e24:	4293      	cmp	r3, r2
 8008e26:	bf28      	it	cs
 8008e28:	4613      	movcs	r3, r2
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e2e:	893b      	ldrh	r3, [r7, #8]
 8008e30:	461a      	mov	r2, r3
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fa44 	bl	80092c2 <USBD_CtlSendData>
 8008e3a:	e009      	b.n	8008e50 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f9ce 	bl	80091e0 <USBD_CtlError>
 8008e44:	e004      	b.n	8008e50 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa78 	bl	800933c <USBD_CtlSendStatus>
 8008e4c:	e000      	b.n	8008e50 <USBD_GetDescriptor+0x320>
    return;
 8008e4e:	bf00      	nop
  }
}
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop

08008e58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	889b      	ldrh	r3, [r3, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d131      	bne.n	8008ece <USBD_SetAddress+0x76>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d12d      	bne.n	8008ece <USBD_SetAddress+0x76>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	2b7f      	cmp	r3, #127	; 0x7f
 8008e78:	d829      	bhi.n	8008ece <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	885b      	ldrh	r3, [r3, #2]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d104      	bne.n	8008e9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f9a3 	bl	80091e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9a:	e01d      	b.n	8008ed8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ea0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fdf8 	bl	8009a9e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa44 	bl	800933c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	e009      	b.n	8008ed8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ecc:	e004      	b.n	8008ed8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f985 	bl	80091e0 <USBD_CtlError>
  }
}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	885b      	ldrh	r3, [r3, #2]
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	4b4c      	ldr	r3, [pc, #304]	; (8009028 <USBD_SetConfig+0x148>)
 8008ef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ef8:	4b4b      	ldr	r3, [pc, #300]	; (8009028 <USBD_SetConfig+0x148>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d905      	bls.n	8008f0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f96c 	bl	80091e0 <USBD_CtlError>
    return USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e088      	b.n	800901e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d002      	beq.n	8008f1e <USBD_SetConfig+0x3e>
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d025      	beq.n	8008f68 <USBD_SetConfig+0x88>
 8008f1c:	e071      	b.n	8009002 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f1e:	4b42      	ldr	r3, [pc, #264]	; (8009028 <USBD_SetConfig+0x148>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01c      	beq.n	8008f60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008f26:	4b40      	ldr	r3, [pc, #256]	; (8009028 <USBD_SetConfig+0x148>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f30:	4b3d      	ldr	r3, [pc, #244]	; (8009028 <USBD_SetConfig+0x148>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff f992 	bl	8008260 <USBD_SetClassConfig>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f949 	bl	80091e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f4e:	e065      	b.n	800901c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f9f3 	bl	800933c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f5e:	e05d      	b.n	800901c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f9eb 	bl	800933c <USBD_CtlSendStatus>
      break;
 8008f66:	e059      	b.n	800901c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f68:	4b2f      	ldr	r3, [pc, #188]	; (8009028 <USBD_SetConfig+0x148>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d112      	bne.n	8008f96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f78:	4b2b      	ldr	r3, [pc, #172]	; (8009028 <USBD_SetConfig+0x148>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f82:	4b29      	ldr	r3, [pc, #164]	; (8009028 <USBD_SetConfig+0x148>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff f985 	bl	8008298 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f9d4 	bl	800933c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f94:	e042      	b.n	800901c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f96:	4b24      	ldr	r3, [pc, #144]	; (8009028 <USBD_SetConfig+0x148>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d02a      	beq.n	8008ffa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff f973 	bl	8008298 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008fb2:	4b1d      	ldr	r3, [pc, #116]	; (8009028 <USBD_SetConfig+0x148>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	; (8009028 <USBD_SetConfig+0x148>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff f94c 	bl	8008260 <USBD_SetClassConfig>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00f      	beq.n	8008ff2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f903 	bl	80091e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff f958 	bl	8008298 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ff0:	e014      	b.n	800901c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9a2 	bl	800933c <USBD_CtlSendStatus>
      break;
 8008ff8:	e010      	b.n	800901c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f99e 	bl	800933c <USBD_CtlSendStatus>
      break;
 8009000:	e00c      	b.n	800901c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f8eb 	bl	80091e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800900a:	4b07      	ldr	r3, [pc, #28]	; (8009028 <USBD_SetConfig+0x148>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff f941 	bl	8008298 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009016:	2303      	movs	r3, #3
 8009018:	73fb      	strb	r3, [r7, #15]
      break;
 800901a:	bf00      	nop
  }

  return ret;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200001d6 	.word	0x200001d6

0800902c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	88db      	ldrh	r3, [r3, #6]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d004      	beq.n	8009048 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f8cd 	bl	80091e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009046:	e023      	b.n	8009090 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	dc02      	bgt.n	800905a <USBD_GetConfig+0x2e>
 8009054:	2b00      	cmp	r3, #0
 8009056:	dc03      	bgt.n	8009060 <USBD_GetConfig+0x34>
 8009058:	e015      	b.n	8009086 <USBD_GetConfig+0x5a>
 800905a:	2b03      	cmp	r3, #3
 800905c:	d00b      	beq.n	8009076 <USBD_GetConfig+0x4a>
 800905e:	e012      	b.n	8009086 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3308      	adds	r3, #8
 800906a:	2201      	movs	r2, #1
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f927 	bl	80092c2 <USBD_CtlSendData>
        break;
 8009074:	e00c      	b.n	8009090 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3304      	adds	r3, #4
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f91f 	bl	80092c2 <USBD_CtlSendData>
        break;
 8009084:	e004      	b.n	8009090 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8a9 	bl	80091e0 <USBD_CtlError>
        break;
 800908e:	bf00      	nop
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d81e      	bhi.n	80090ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	88db      	ldrh	r3, [r3, #6]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d004      	beq.n	80090c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f890 	bl	80091e0 <USBD_CtlError>
        break;
 80090c0:	e01a      	b.n	80090f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f043 0202 	orr.w	r2, r3, #2
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	330c      	adds	r3, #12
 80090e2:	2202      	movs	r2, #2
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f8eb 	bl	80092c2 <USBD_CtlSendData>
      break;
 80090ec:	e004      	b.n	80090f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f875 	bl	80091e0 <USBD_CtlError>
      break;
 80090f6:	bf00      	nop
  }
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d106      	bne.n	8009120 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f90e 	bl	800933c <USBD_CtlSendStatus>
  }
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009138:	b2db      	uxtb	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	2b02      	cmp	r3, #2
 800913e:	d80b      	bhi.n	8009158 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	885b      	ldrh	r3, [r3, #2]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d10c      	bne.n	8009162 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f8f3 	bl	800933c <USBD_CtlSendStatus>
      }
      break;
 8009156:	e004      	b.n	8009162 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f840 	bl	80091e0 <USBD_CtlError>
      break;
 8009160:	e000      	b.n	8009164 <USBD_ClrFeature+0x3c>
      break;
 8009162:	bf00      	nop
  }
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3301      	adds	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fa92 	bl	80086c0 <SWAPBYTE>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3301      	adds	r3, #1
 80091ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f7ff fa85 	bl	80086c0 <SWAPBYTE>
 80091b6:	4603      	mov	r3, r0
 80091b8:	461a      	mov	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3301      	adds	r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff fa78 	bl	80086c0 <SWAPBYTE>
 80091d0:	4603      	mov	r3, r0
 80091d2:	461a      	mov	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	80da      	strh	r2, [r3, #6]
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ea:	2180      	movs	r1, #128	; 0x80
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fbeb 	bl	80099c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091f2:	2100      	movs	r1, #0
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fbe7 	bl	80099c8 <USBD_LL_StallEP>
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b086      	sub	sp, #24
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d036      	beq.n	8009286 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800921c:	6938      	ldr	r0, [r7, #16]
 800921e:	f000 f836 	bl	800928e <USBD_GetLen>
 8009222:	4603      	mov	r3, r0
 8009224:	3301      	adds	r3, #1
 8009226:	b29b      	uxth	r3, r3
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	4413      	add	r3, r2
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	7812      	ldrb	r2, [r2, #0]
 800923a:	701a      	strb	r2, [r3, #0]
  idx++;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	3301      	adds	r3, #1
 8009240:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	4413      	add	r3, r2
 8009248:	2203      	movs	r2, #3
 800924a:	701a      	strb	r2, [r3, #0]
  idx++;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	3301      	adds	r3, #1
 8009250:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009252:	e013      	b.n	800927c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	4413      	add	r3, r2
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	7812      	ldrb	r2, [r2, #0]
 800925e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3301      	adds	r3, #1
 8009264:	613b      	str	r3, [r7, #16]
    idx++;
 8009266:	7dfb      	ldrb	r3, [r7, #23]
 8009268:	3301      	adds	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
    idx++;
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	3301      	adds	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e7      	bne.n	8009254 <USBD_GetString+0x52>
 8009284:	e000      	b.n	8009288 <USBD_GetString+0x86>
    return;
 8009286:	bf00      	nop
  }
}
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800928e:	b480      	push	{r7}
 8009290:	b085      	sub	sp, #20
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800929e:	e005      	b.n	80092ac <USBD_GetLen+0x1e>
  {
    len++;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	3301      	adds	r3, #1
 80092a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f5      	bne.n	80092a0 <USBD_GetLen+0x12>
  }

  return len;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2202      	movs	r2, #2
 80092d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fbf7 	bl	8009adc <USBD_LL_Transmit>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	2100      	movs	r1, #0
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fbe6 	bl	8009adc <USBD_LL_Transmit>

  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	2100      	movs	r1, #0
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 fbf6 	bl	8009b1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2204      	movs	r2, #4
 8009348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800934c:	2300      	movs	r3, #0
 800934e:	2200      	movs	r2, #0
 8009350:	2100      	movs	r1, #0
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fbc2 	bl	8009adc <USBD_LL_Transmit>

  return USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2205      	movs	r2, #5
 800936e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009372:	2300      	movs	r3, #0
 8009374:	2200      	movs	r2, #0
 8009376:	2100      	movs	r1, #0
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fbd0 	bl	8009b1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800938c:	2200      	movs	r2, #0
 800938e:	490e      	ldr	r1, [pc, #56]	; (80093c8 <MX_USB_Device_Init+0x40>)
 8009390:	480e      	ldr	r0, [pc, #56]	; (80093cc <MX_USB_Device_Init+0x44>)
 8009392:	f7fe fef7 	bl	8008184 <USBD_Init>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800939c:	f7f7 fb05 	bl	80009aa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 80093a0:	490b      	ldr	r1, [pc, #44]	; (80093d0 <MX_USB_Device_Init+0x48>)
 80093a2:	480a      	ldr	r0, [pc, #40]	; (80093cc <MX_USB_Device_Init+0x44>)
 80093a4:	f7fe ff1e 	bl	80081e4 <USBD_RegisterClass>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80093ae:	f7f7 fafc 	bl	80009aa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80093b2:	4806      	ldr	r0, [pc, #24]	; (80093cc <MX_USB_Device_Init+0x44>)
 80093b4:	f7fe ff3d 	bl	8008232 <USBD_Start>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 80093be:	f7f7 faf4 	bl	80009aa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80093c2:	bf00      	nop
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20000130 	.word	0x20000130
 80093cc:	200002b4 	.word	0x200002b4
 80093d0:	20000028 	.word	0x20000028

080093d4 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	2212      	movs	r2, #18
 80093e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 80093e6:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <USBD_HID_DeviceDescriptor+0x20>)
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20000150 	.word	0x20000150

080093f8 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2204      	movs	r2, #4
 8009408:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800940a:	4b03      	ldr	r3, [pc, #12]	; (8009418 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	20000164 	.word	0x20000164

0800941c <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	6039      	str	r1, [r7, #0]
 8009426:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d105      	bne.n	800943a <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	4907      	ldr	r1, [pc, #28]	; (8009450 <USBD_HID_ProductStrDescriptor+0x34>)
 8009432:	4808      	ldr	r0, [pc, #32]	; (8009454 <USBD_HID_ProductStrDescriptor+0x38>)
 8009434:	f7ff fee5 	bl	8009202 <USBD_GetString>
 8009438:	e004      	b.n	8009444 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	4904      	ldr	r1, [pc, #16]	; (8009450 <USBD_HID_ProductStrDescriptor+0x34>)
 800943e:	4805      	ldr	r0, [pc, #20]	; (8009454 <USBD_HID_ProductStrDescriptor+0x38>)
 8009440:	f7ff fedf 	bl	8009202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <USBD_HID_ProductStrDescriptor+0x34>)
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	20000584 	.word	0x20000584
 8009454:	08009cfc 	.word	0x08009cfc

08009458 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	6039      	str	r1, [r7, #0]
 8009462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	4904      	ldr	r1, [pc, #16]	; (8009478 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8009468:	4804      	ldr	r0, [pc, #16]	; (800947c <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800946a:	f7ff feca 	bl	8009202 <USBD_GetString>
  return USBD_StrDesc;
 800946e:	4b02      	ldr	r3, [pc, #8]	; (8009478 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20000584 	.word	0x20000584
 800947c:	08009d14 	.word	0x08009d14

08009480 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	221a      	movs	r2, #26
 8009490:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009492:	f000 f843 	bl	800951c <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009496:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000168 	.word	0x20000168

080094a4 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	6039      	str	r1, [r7, #0]
 80094ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d105      	bne.n	80094c2 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	4907      	ldr	r1, [pc, #28]	; (80094d8 <USBD_HID_ConfigStrDescriptor+0x34>)
 80094ba:	4808      	ldr	r0, [pc, #32]	; (80094dc <USBD_HID_ConfigStrDescriptor+0x38>)
 80094bc:	f7ff fea1 	bl	8009202 <USBD_GetString>
 80094c0:	e004      	b.n	80094cc <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	4904      	ldr	r1, [pc, #16]	; (80094d8 <USBD_HID_ConfigStrDescriptor+0x34>)
 80094c6:	4805      	ldr	r0, [pc, #20]	; (80094dc <USBD_HID_ConfigStrDescriptor+0x38>)
 80094c8:	f7ff fe9b 	bl	8009202 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094cc:	4b02      	ldr	r3, [pc, #8]	; (80094d8 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000584 	.word	0x20000584
 80094dc:	08009d28 	.word	0x08009d28

080094e0 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d105      	bne.n	80094fe <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	4907      	ldr	r1, [pc, #28]	; (8009514 <USBD_HID_InterfaceStrDescriptor+0x34>)
 80094f6:	4808      	ldr	r0, [pc, #32]	; (8009518 <USBD_HID_InterfaceStrDescriptor+0x38>)
 80094f8:	f7ff fe83 	bl	8009202 <USBD_GetString>
 80094fc:	e004      	b.n	8009508 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4904      	ldr	r1, [pc, #16]	; (8009514 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8009502:	4805      	ldr	r0, [pc, #20]	; (8009518 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009504:	f7ff fe7d 	bl	8009202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009508:	4b02      	ldr	r3, [pc, #8]	; (8009514 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20000584 	.word	0x20000584
 8009518:	08009d34 	.word	0x08009d34

0800951c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009522:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <Get_SerialNum+0x44>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009528:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <Get_SerialNum+0x48>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800952e:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <Get_SerialNum+0x4c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4413      	add	r3, r2
 800953a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009542:	2208      	movs	r2, #8
 8009544:	4909      	ldr	r1, [pc, #36]	; (800956c <Get_SerialNum+0x50>)
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 f814 	bl	8009574 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800954c:	2204      	movs	r2, #4
 800954e:	4908      	ldr	r1, [pc, #32]	; (8009570 <Get_SerialNum+0x54>)
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f000 f80f 	bl	8009574 <IntToUnicode>
  }
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	1fff7590 	.word	0x1fff7590
 8009564:	1fff7594 	.word	0x1fff7594
 8009568:	1fff7598 	.word	0x1fff7598
 800956c:	2000016a 	.word	0x2000016a
 8009570:	2000017a 	.word	0x2000017a

08009574 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009586:	2300      	movs	r3, #0
 8009588:	75fb      	strb	r3, [r7, #23]
 800958a:	e027      	b.n	80095dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	0f1b      	lsrs	r3, r3, #28
 8009590:	2b09      	cmp	r3, #9
 8009592:	d80b      	bhi.n	80095ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	0f1b      	lsrs	r3, r3, #28
 8009598:	b2da      	uxtb	r2, r3
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	4619      	mov	r1, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	440b      	add	r3, r1
 80095a4:	3230      	adds	r2, #48	; 0x30
 80095a6:	b2d2      	uxtb	r2, r2
 80095a8:	701a      	strb	r2, [r3, #0]
 80095aa:	e00a      	b.n	80095c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	0f1b      	lsrs	r3, r3, #28
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	4619      	mov	r1, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	440b      	add	r3, r1
 80095bc:	3237      	adds	r2, #55	; 0x37
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	011b      	lsls	r3, r3, #4
 80095c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	3301      	adds	r3, #1
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	3301      	adds	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]
 80095dc:	7dfa      	ldrb	r2, [r7, #23]
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d3d3      	bcc.n	800958c <IntToUnicode+0x18>
  }
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	371c      	adds	r7, #28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <LL_AHB2_GRP1_EnableClock>:
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80095fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4313      	orrs	r3, r2
 8009608:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800960a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800960e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4013      	ands	r3, r2
 8009614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009616:	68fb      	ldr	r3, [r7, #12]
}
 8009618:	bf00      	nop
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <LL_APB1_GRP1_EnableClock>:
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800962c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009630:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4313      	orrs	r3, r2
 800963a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800963c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4013      	ands	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009648:	68fb      	ldr	r3, [r7, #12]
}
 800964a:	bf00      	nop
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
	...

08009658 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b09c      	sub	sp, #112	; 0x70
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009660:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	609a      	str	r2, [r3, #8]
 800966c:	60da      	str	r2, [r3, #12]
 800966e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009670:	f107 030c 	add.w	r3, r7, #12
 8009674:	2250      	movs	r2, #80	; 0x50
 8009676:	2100      	movs	r1, #0
 8009678:	4618      	mov	r0, r3
 800967a:	f000 fb15 	bl	8009ca8 <memset>
  if(pcdHandle->Instance==USB)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a23      	ldr	r2, [pc, #140]	; (8009710 <HAL_PCD_MspInit+0xb8>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d13e      	bne.n	8009706 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800968c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800968e:	2318      	movs	r3, #24
 8009690:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009692:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009696:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800969c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800969e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80096a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80096a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80096aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80096ae:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80096b0:	f107 030c 	add.w	r3, r7, #12
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fa ff65 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80096c0:	f7f7 f973 	bl	80009aa <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096c4:	2001      	movs	r0, #1
 80096c6:	f7ff ff94 	bl	80095f2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096d0:	2302      	movs	r3, #2
 80096d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d4:	2300      	movs	r3, #0
 80096d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096d8:	2300      	movs	r3, #0
 80096da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80096dc:	230a      	movs	r3, #10
 80096de:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80096e4:	4619      	mov	r1, r3
 80096e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096ea:	f7f7 fd5b 	bl	80011a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80096f2:	f7ff ff97 	bl	8009624 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80096f6:	2200      	movs	r2, #0
 80096f8:	2100      	movs	r1, #0
 80096fa:	2014      	movs	r0, #20
 80096fc:	f7f7 fd1d 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009700:	2014      	movs	r0, #20
 8009702:	f7f7 fd34 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009706:	bf00      	nop
 8009708:	3770      	adds	r7, #112	; 0x70
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	40006800 	.word	0x40006800

08009714 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009728:	4619      	mov	r1, r3
 800972a:	4610      	mov	r0, r2
 800972c:	f7fe fdcc 	bl	80082c8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	440b      	add	r3, r1
 8009758:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	78fb      	ldrb	r3, [r7, #3]
 8009760:	4619      	mov	r1, r3
 8009762:	f7fe fe06 	bl	8008372 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009780:	78fa      	ldrb	r2, [r7, #3]
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	4613      	mov	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	440b      	add	r3, r1
 800978e:	333c      	adds	r3, #60	; 0x3c
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	4619      	mov	r1, r3
 8009796:	f7fe fe4f 	bl	8008438 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fe ff63 	bl	800867c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097c6:	2301      	movs	r3, #1
 80097c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d001      	beq.n	80097d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097d2:	f7f7 f8ea 	bl	80009aa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097dc:	7bfa      	ldrb	r2, [r7, #15]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe ff0d 	bl	8008600 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe feb9 	bl	8008564 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800980a:	4618      	mov	r0, r3
 800980c:	f7fe ff08 	bl	8008620 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d005      	beq.n	8009824 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009818:	4b04      	ldr	r3, [pc, #16]	; (800982c <HAL_PCD_SuspendCallback+0x30>)
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	4a03      	ldr	r2, [pc, #12]	; (800982c <HAL_PCD_SuspendCallback+0x30>)
 800981e:	f043 0306 	orr.w	r3, r3, #6
 8009822:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	e000ed00 	.word	0xe000ed00

08009830 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <HAL_PCD_ResumeCallback+0x34>)
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	4a07      	ldr	r2, [pc, #28]	; (8009864 <HAL_PCD_ResumeCallback+0x34>)
 8009846:	f023 0306 	bic.w	r3, r3, #6
 800984a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800984c:	f000 f9d6 	bl	8009bfc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe fef8 	bl	800864c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	e000ed00 	.word	0xe000ed00

08009868 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009870:	4a23      	ldr	r2, [pc, #140]	; (8009900 <USBD_LL_Init+0x98>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a21      	ldr	r2, [pc, #132]	; (8009900 <USBD_LL_Init+0x98>)
 800987c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009880:	f7f9 fb62 	bl	8002f48 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009884:	4b1e      	ldr	r3, [pc, #120]	; (8009900 <USBD_LL_Init+0x98>)
 8009886:	4a1f      	ldr	r2, [pc, #124]	; (8009904 <USBD_LL_Init+0x9c>)
 8009888:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <USBD_LL_Init+0x98>)
 800988c:	2208      	movs	r2, #8
 800988e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009890:	4b1b      	ldr	r3, [pc, #108]	; (8009900 <USBD_LL_Init+0x98>)
 8009892:	2202      	movs	r2, #2
 8009894:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009896:	4b1a      	ldr	r3, [pc, #104]	; (8009900 <USBD_LL_Init+0x98>)
 8009898:	2202      	movs	r2, #2
 800989a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800989c:	4b18      	ldr	r3, [pc, #96]	; (8009900 <USBD_LL_Init+0x98>)
 800989e:	2200      	movs	r2, #0
 80098a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098a2:	4b17      	ldr	r3, [pc, #92]	; (8009900 <USBD_LL_Init+0x98>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098a8:	4b15      	ldr	r3, [pc, #84]	; (8009900 <USBD_LL_Init+0x98>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098ae:	4b14      	ldr	r3, [pc, #80]	; (8009900 <USBD_LL_Init+0x98>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098b4:	4812      	ldr	r0, [pc, #72]	; (8009900 <USBD_LL_Init+0x98>)
 80098b6:	f7f7 fe0d 	bl	80014d4 <HAL_PCD_Init>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80098c0:	f7f7 f873 	bl	80009aa <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098ca:	2318      	movs	r3, #24
 80098cc:	2200      	movs	r2, #0
 80098ce:	2100      	movs	r1, #0
 80098d0:	f7f9 faae 	bl	8002e30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098da:	2358      	movs	r3, #88	; 0x58
 80098dc:	2200      	movs	r2, #0
 80098de:	2180      	movs	r1, #128	; 0x80
 80098e0:	f7f9 faa6 	bl	8002e30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098ee:	2200      	movs	r2, #0
 80098f0:	2181      	movs	r1, #129	; 0x81
 80098f2:	f7f9 fa9d 	bl	8002e30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000784 	.word	0x20000784
 8009904:	40006800 	.word	0x40006800

08009908 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800991e:	4618      	mov	r0, r3
 8009920:	f7f7 febd 	bl	800169e <HAL_PCD_Start>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f96c 	bl	8009c08 <USBD_Get_USB_Status>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	4608      	mov	r0, r1
 8009948:	4611      	mov	r1, r2
 800994a:	461a      	mov	r2, r3
 800994c:	4603      	mov	r3, r0
 800994e:	70fb      	strb	r3, [r7, #3]
 8009950:	460b      	mov	r3, r1
 8009952:	70bb      	strb	r3, [r7, #2]
 8009954:	4613      	mov	r3, r2
 8009956:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009966:	78bb      	ldrb	r3, [r7, #2]
 8009968:	883a      	ldrh	r2, [r7, #0]
 800996a:	78f9      	ldrb	r1, [r7, #3]
 800996c:	f7f8 f805 	bl	800197a <HAL_PCD_EP_Open>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 f946 	bl	8009c08 <USBD_Get_USB_Status>
 800997c:	4603      	mov	r3, r0
 800997e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009980:	7bbb      	ldrb	r3, [r7, #14]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099a4:	78fa      	ldrb	r2, [r7, #3]
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f8 f84c 	bl	8001a46 <HAL_PCD_EP_Close>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f927 	bl	8009c08 <USBD_Get_USB_Status>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099be:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	4611      	mov	r1, r2
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7f8 f8f5 	bl	8001bd6 <HAL_PCD_EP_SetStall>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 f908 	bl	8009c08 <USBD_Get_USB_Status>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a20:	78fa      	ldrb	r2, [r7, #3]
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7f8 f928 	bl	8001c7a <HAL_PCD_EP_ClrStall>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f8e9 	bl	8009c08 <USBD_Get_USB_Status>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da0c      	bge.n	8009a7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	440b      	add	r3, r1
 8009a74:	3302      	adds	r3, #2
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	e00b      	b.n	8009a92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a80:	68f9      	ldr	r1, [r7, #12]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	00db      	lsls	r3, r3, #3
 8009a8a:	440b      	add	r3, r1
 8009a8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009a90:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7f7 ff37 	bl	8001930 <HAL_PCD_SetAddress>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 f89d 	bl	8009c08 <USBD_Get_USB_Status>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	607a      	str	r2, [r7, #4]
 8009ae6:	603b      	str	r3, [r7, #0]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009afa:	7af9      	ldrb	r1, [r7, #11]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	f7f8 f826 	bl	8001b50 <HAL_PCD_EP_Transmit>
 8009b04:	4603      	mov	r3, r0
 8009b06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 f87c 	bl	8009c08 <USBD_Get_USB_Status>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b14:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b086      	sub	sp, #24
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	603b      	str	r3, [r7, #0]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b3c:	7af9      	ldrb	r1, [r7, #11]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	f7f7 ffc8 	bl	8001ad6 <HAL_PCD_EP_Receive>
 8009b46:	4603      	mov	r3, r0
 8009b48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 f85b 	bl	8009c08 <USBD_Get_USB_Status>
 8009b52:	4603      	mov	r3, r0
 8009b54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b56:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <HAL_PCDEx_LPM_Callback+0x18>
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d013      	beq.n	8009b9e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009b76:	e023      	b.n	8009bc0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d007      	beq.n	8009b90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009b80:	f000 f83c 	bl	8009bfc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b84:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	4a0f      	ldr	r2, [pc, #60]	; (8009bc8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b8a:	f023 0306 	bic.w	r3, r3, #6
 8009b8e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fd58 	bl	800864c <USBD_LL_Resume>
    break;
 8009b9c:	e010      	b.n	8009bc0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fe fd3b 	bl	8008620 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d005      	beq.n	8009bbe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	4a04      	ldr	r2, [pc, #16]	; (8009bc8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009bb8:	f043 0306 	orr.w	r3, r3, #6
 8009bbc:	6113      	str	r3, [r2, #16]
    break;
 8009bbe:	bf00      	nop
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	e000ed00 	.word	0xe000ed00

08009bcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bd4:	4b03      	ldr	r3, [pc, #12]	; (8009be4 <USBD_static_malloc+0x18>)
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	200001d8 	.word	0x200001d8

08009be8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009c00:	f7f6 fe4a 	bl	8000898 <SystemClock_Config>
}
 8009c04:	bf00      	nop
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d817      	bhi.n	8009c4c <USBD_Get_USB_Status+0x44>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <USBD_Get_USB_Status+0x1c>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c35 	.word	0x08009c35
 8009c28:	08009c3b 	.word	0x08009c3b
 8009c2c:	08009c41 	.word	0x08009c41
 8009c30:	08009c47 	.word	0x08009c47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73fb      	strb	r3, [r7, #15]
    break;
 8009c38:	e00b      	b.n	8009c52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3e:	e008      	b.n	8009c52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
    break;
 8009c44:	e005      	b.n	8009c52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c46:	2303      	movs	r3, #3
 8009c48:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4a:	e002      	b.n	8009c52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c50:	bf00      	nop
  }
  return usb_status;
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <__libc_init_array>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	4d0d      	ldr	r5, [pc, #52]	; (8009c98 <__libc_init_array+0x38>)
 8009c64:	4c0d      	ldr	r4, [pc, #52]	; (8009c9c <__libc_init_array+0x3c>)
 8009c66:	1b64      	subs	r4, r4, r5
 8009c68:	10a4      	asrs	r4, r4, #2
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	42a6      	cmp	r6, r4
 8009c6e:	d109      	bne.n	8009c84 <__libc_init_array+0x24>
 8009c70:	4d0b      	ldr	r5, [pc, #44]	; (8009ca0 <__libc_init_array+0x40>)
 8009c72:	4c0c      	ldr	r4, [pc, #48]	; (8009ca4 <__libc_init_array+0x44>)
 8009c74:	f000 f820 	bl	8009cb8 <_init>
 8009c78:	1b64      	subs	r4, r4, r5
 8009c7a:	10a4      	asrs	r4, r4, #2
 8009c7c:	2600      	movs	r6, #0
 8009c7e:	42a6      	cmp	r6, r4
 8009c80:	d105      	bne.n	8009c8e <__libc_init_array+0x2e>
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c88:	4798      	blx	r3
 8009c8a:	3601      	adds	r6, #1
 8009c8c:	e7ee      	b.n	8009c6c <__libc_init_array+0xc>
 8009c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c92:	4798      	blx	r3
 8009c94:	3601      	adds	r6, #1
 8009c96:	e7f2      	b.n	8009c7e <__libc_init_array+0x1e>
 8009c98:	08009dc4 	.word	0x08009dc4
 8009c9c:	08009dc4 	.word	0x08009dc4
 8009ca0:	08009dc4 	.word	0x08009dc4
 8009ca4:	08009dc8 	.word	0x08009dc8

08009ca8 <memset>:
 8009ca8:	4402      	add	r2, r0
 8009caa:	4603      	mov	r3, r0
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d100      	bne.n	8009cb2 <memset+0xa>
 8009cb0:	4770      	bx	lr
 8009cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb6:	e7f9      	b.n	8009cac <memset+0x4>

08009cb8 <_init>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	bf00      	nop
 8009cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cbe:	bc08      	pop	{r3}
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	4770      	bx	lr

08009cc4 <_fini>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	bf00      	nop
 8009cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cca:	bc08      	pop	{r3}
 8009ccc:	469e      	mov	lr, r3
 8009cce:	4770      	bx	lr


rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d60  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009f90  08009f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000004  08009f98  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001ac4  20000188  0800a11c  00020188  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001c4c  0800a11c  00021c4c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023604  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004798  00000000  00000000  000437bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d48  00000000  00000000  00047f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b78  00000000  00000000  00049ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002492a  00000000  00000000  0004b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001de16  00000000  00000000  00070142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8d3e  00000000  00000000  0008df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00166c96  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007940  00000000  00000000  00166cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000188 	.word	0x20000188
 8000158:	00000000 	.word	0x00000000
 800015c:	08009e84 	.word	0x08009e84

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000018c 	.word	0x2000018c
 8000178:	08009e84 	.word	0x08009e84

0800017c <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000188:	f000 ffde 	bl	8001148 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <update_buttons+0x1c>
		left_down = 0;
 8000192:	4b30      	ldr	r3, [pc, #192]	; (8000254 <update_buttons+0xd8>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000198:	2108      	movs	r1, #8
 800019a:	482f      	ldr	r0, [pc, #188]	; (8000258 <update_buttons+0xdc>)
 800019c:	f000 ffd4 	bl	8001148 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <update_buttons+0x30>
		left_down = 1;
 80001a6:	4b2b      	ldr	r3, [pc, #172]	; (8000254 <update_buttons+0xd8>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 80001ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001b4:	f000 ffc8 	bl	8001148 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d002      	beq.n	80001c4 <update_buttons+0x48>
		middle_down = 0;
 80001be:	4b27      	ldr	r3, [pc, #156]	; (800025c <update_buttons+0xe0>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 80001c4:	2110      	movs	r1, #16
 80001c6:	4826      	ldr	r0, [pc, #152]	; (8000260 <update_buttons+0xe4>)
 80001c8:	f000 ffbe 	bl	8001148 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d002      	beq.n	80001d8 <update_buttons+0x5c>
		middle_down = 1;
 80001d2:	4b22      	ldr	r3, [pc, #136]	; (800025c <update_buttons+0xe0>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 80001d8:	2102      	movs	r1, #2
 80001da:	481f      	ldr	r0, [pc, #124]	; (8000258 <update_buttons+0xdc>)
 80001dc:	f000 ffb4 	bl	8001148 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d002      	beq.n	80001ec <update_buttons+0x70>
		right_down = 0;
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <update_buttons+0xe8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 80001ec:	2101      	movs	r1, #1
 80001ee:	481a      	ldr	r0, [pc, #104]	; (8000258 <update_buttons+0xdc>)
 80001f0:	f000 ffaa 	bl	8001148 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <update_buttons+0x84>
		right_down = 1;
 80001fa:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <update_buttons+0xe8>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000200:	2120      	movs	r1, #32
 8000202:	4815      	ldr	r0, [pc, #84]	; (8000258 <update_buttons+0xdc>)
 8000204:	f000 ffa0 	bl	8001148 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d002      	beq.n	8000214 <update_buttons+0x98>
		b4_down = 0;
 800020e:	4b16      	ldr	r3, [pc, #88]	; (8000268 <update_buttons+0xec>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000214:	2110      	movs	r1, #16
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <update_buttons+0xdc>)
 8000218:	f000 ff96 	bl	8001148 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <update_buttons+0xac>
		b4_down = 1;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <update_buttons+0xec>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000228:	2180      	movs	r1, #128	; 0x80
 800022a:	480b      	ldr	r0, [pc, #44]	; (8000258 <update_buttons+0xdc>)
 800022c:	f000 ff8c 	bl	8001148 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <update_buttons+0xc0>
		b5_down = 0;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <update_buttons+0xf0>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4806      	ldr	r0, [pc, #24]	; (8000258 <update_buttons+0xdc>)
 8000240:	f000 ff82 	bl	8001148 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <update_buttons+0xd4>
		b5_down = 1;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <update_buttons+0xf0>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
	}
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200001a4 	.word	0x200001a4
 8000258:	48000400 	.word	0x48000400
 800025c:	200001a5 	.word	0x200001a5
 8000260:	48001000 	.word	0x48001000
 8000264:	200001a6 	.word	0x200001a6
 8000268:	200001a7 	.word	0x200001a7
 800026c:	200001a8 	.word	0x200001a8

08000270 <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000280:	b2db      	uxtb	r3, r3
 8000282:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000284:	2300      	movs	r3, #0
 8000286:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000290:	f000 ff72 	bl	8001178 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000294:	f107 010c 	add.w	r1, r7, #12
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	2201      	movs	r2, #1
 800029e:	480b      	ldr	r0, [pc, #44]	; (80002cc <read_register+0x5c>)
 80002a0:	f004 fb22 	bl	80048e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 80002a4:	f107 0108 	add.w	r1, r7, #8
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ac:	2201      	movs	r2, #1
 80002ae:	4807      	ldr	r0, [pc, #28]	; (80002cc <read_register+0x5c>)
 80002b0:	f004 fc88 	bl	8004bc4 <HAL_SPI_Receive>
	CS_END();
 80002b4:	2201      	movs	r2, #1
 80002b6:	2110      	movs	r1, #16
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f000 ff5c 	bl	8001178 <HAL_GPIO_WritePin>
	return pRxData[0];
 80002c0:	7a3b      	ldrb	r3, [r7, #8]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200003d4 	.word	0x200003d4

080002d0 <write_register>:

void write_register(uint8_t r, uint8_t value) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	733b      	strb	r3, [r7, #12]
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	737b      	strb	r3, [r7, #13]
	CS_START();
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f000 ff42 	bl	8001178 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 80002f4:	f107 010c 	add.w	r1, r7, #12
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	2202      	movs	r2, #2
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <write_register+0x48>)
 8000300:	f004 faf2 	bl	80048e8 <HAL_SPI_Transmit>
	CS_END();
 8000304:	2201      	movs	r2, #1
 8000306:	2110      	movs	r1, #16
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f000 ff34 	bl	8001178 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200003d4 	.word	0x200003d4

0800031c <imu_setup>:

#pragma GCC push_options
#pragma GCC optimize ("O0")
void imu_setup() {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	206b      	movs	r0, #107	; 0x6b
 8000326:	f7ff ffd3 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800032a:	2064      	movs	r0, #100	; 0x64
 800032c:	f000 fc70 	bl	8000c10 <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000330:	206b      	movs	r0, #107	; 0x6b
 8000332:	f7ff ff9d 	bl	8000270 <read_register>
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
		if (reg & (1UL << 6)) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0ee      	beq.n	8000322 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000344:	2101      	movs	r1, #1
 8000346:	206b      	movs	r0, #107	; 0x6b
 8000348:	f7ff ffc2 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800034c:	2064      	movs	r0, #100	; 0x64
 800034e:	f000 fc5f 	bl	8000c10 <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000352:	206b      	movs	r0, #107	; 0x6b
 8000354:	f7ff ff8c 	bl	8000270 <read_register>
 8000358:	4603      	mov	r3, r0
 800035a:	71bb      	strb	r3, [r7, #6]
		if (reg & (1 << 0)) {
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0ee      	beq.n	8000344 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000366:	2110      	movs	r1, #16
 8000368:	206a      	movs	r0, #106	; 0x6a
 800036a:	f7ff ffb1 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f000 fc4e 	bl	8000c10 <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000374:	206a      	movs	r0, #106	; 0x6a
 8000376:	f7ff ff7b 	bl	8000270 <read_register>
 800037a:	4603      	mov	r3, r0
 800037c:	717b      	strb	r3, [r7, #5]
		if (reg & (1 << 4)) {
 800037e:	797b      	ldrb	r3, [r7, #5]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0ee      	beq.n	8000366 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000388:	2118      	movs	r1, #24
 800038a:	201c      	movs	r0, #28
 800038c:	f7ff ffa0 	bl	80002d0 <write_register>
		HAL_Delay(100);
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f000 fc3d 	bl	8000c10 <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000396:	201c      	movs	r0, #28
 8000398:	f7ff ff6a 	bl	8000270 <read_register>
 800039c:	4603      	mov	r3, r0
 800039e:	713b      	strb	r3, [r7, #4]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 80003a0:	793b      	ldrb	r3, [r7, #4]
 80003a2:	f003 0310 	and.w	r3, r3, #16
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0ee      	beq.n	8000388 <imu_setup+0x6c>
 80003aa:	793b      	ldrb	r3, [r7, #4]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0e9      	beq.n	8000388 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	201d      	movs	r0, #29
 80003b8:	f7ff ff8a 	bl	80002d0 <write_register>
		HAL_Delay(100);
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 fc27 	bl	8000c10 <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 80003c2:	201d      	movs	r0, #29
 80003c4:	f7ff ff54 	bl	8000270 <read_register>
 80003c8:	4603      	mov	r3, r0
 80003ca:	70fb      	strb	r3, [r7, #3]
		if (reg == 0) {
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d000      	beq.n	80003d4 <imu_setup+0xb8>
	while (1) {
 80003d2:	e7ef      	b.n	80003b4 <imu_setup+0x98>
			break;
 80003d4:	bf00      	nop
		}
	}
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4013      	ands	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	2002      	movs	r0, #2
 8000426:	f7ff ffda 	bl	80003de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff ffd7 	bl	80003de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000430:	2010      	movs	r0, #16
 8000432:	f7ff ffd4 	bl	80003de <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043c:	4825      	ldr	r0, [pc, #148]	; (80004d4 <MX_GPIO_Init+0xc4>)
 800043e:	f000 fe9b 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2110      	movs	r1, #16
 8000446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044a:	f000 fe95 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800044e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000452:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4619      	mov	r1, r3
 8000464:	481b      	ldr	r0, [pc, #108]	; (80004d4 <MX_GPIO_Init+0xc4>)
 8000466:	f000 fd07 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800046a:	2310      	movs	r3, #16
 800046c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046e:	2301      	movs	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4619      	mov	r1, r3
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f000 fcf9 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 8000486:	23fb      	movs	r3, #251	; 0xfb
 8000488:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	480f      	ldr	r0, [pc, #60]	; (80004d4 <MX_GPIO_Init+0xc4>)
 8000498:	f000 fcee 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 800049c:	2310      	movs	r3, #16
 800049e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	480a      	ldr	r0, [pc, #40]	; (80004d8 <MX_GPIO_Init+0xc8>)
 80004ae:	f000 fce3 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 80004b2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80004b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f000 fcd6 	bl	8000e78 <HAL_GPIO_Init>

}
 80004cc:	bf00      	nop
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	48000400 	.word	0x48000400
 80004d8:	48001000 	.word	0x48001000

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e2:	f000 fb0f 	bl	8000b04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e6:	f000 f841 	bl	800056c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80004ea:	f000 f8ab 	bl	8000644 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ee:	f7ff ff8f 	bl	8000410 <MX_GPIO_Init>
	MX_USB_Device_Init();
 80004f2:	f008 ff39 	bl	8009368 <MX_USB_Device_Init>
	MX_SPI1_Init();
 80004f6:	f000 f8f9 	bl	80006ec <MX_SPI1_Init>
	MX_TIM1_Init();
 80004fa:	f000 fa41 	bl	8000980 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004fe:	2104      	movs	r1, #4
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <main+0x70>)
 8000502:	f005 f905 	bl	8005710 <HAL_TIM_Encoder_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	imu_setup();
 8000506:	f7ff ff09 	bl	800031c <imu_setup>

	while (1) {
		update_buttons();
 800050a:	f7ff fe37 	bl	800017c <update_buttons>
		feedback.left = left_down;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <main+0x74>)
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <main+0x78>)
 8000514:	701a      	strb	r2, [r3, #0]
		feedback.middle = middle_down;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <main+0x7c>)
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <main+0x78>)
 800051c:	705a      	strb	r2, [r3, #1]
		feedback.right = right_down;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <main+0x80>)
 8000520:	781a      	ldrb	r2, [r3, #0]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <main+0x78>)
 8000524:	709a      	strb	r2, [r3, #2]
		feedback.b4 = b4_down;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <main+0x84>)
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <main+0x78>)
 800052c:	70da      	strb	r2, [r3, #3]
		feedback.b5 = b5_down;
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <main+0x88>)
 8000530:	781a      	ldrb	r2, [r3, #0]
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <main+0x78>)
 8000534:	711a      	strb	r2, [r3, #4]

		uint32_t encoder = TIM1->CNT;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <main+0x8c>)
 8000538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053a:	607b      	str	r3, [r7, #4]
//		int16_t x = 0;
//		int16_t y = 0;
//		int16_t z = 0;

//		get_xyz(&feedback.x, &feedback.y, &feedback.z);
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 800053c:	2105      	movs	r1, #5
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x78>)
 8000540:	f008 ffd0 	bl	80094e4 <CDC_Transmit_FS>
		HAL_Delay(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fb63 	bl	8000c10 <HAL_Delay>
	while (1) {
 800054a:	e7de      	b.n	800050a <main+0x2e>
 800054c:	20000438 	.word	0x20000438
 8000550:	200001a4 	.word	0x200001a4
 8000554:	200003cc 	.word	0x200003cc
 8000558:	200001a5 	.word	0x200001a5
 800055c:	200001a6 	.word	0x200001a6
 8000560:	200001a7 	.word	0x200001a7
 8000564:	200001a8 	.word	0x200001a8
 8000568:	40012c00 	.word	0x40012c00

0800056c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b09a      	sub	sp, #104	; 0x68
 8000570:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2248      	movs	r2, #72	; 0x48
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f009 fc7a 	bl	8009e74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <SystemClock_Config+0xd4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800059a:	4a29      	ldr	r2, [pc, #164]	; (8000640 <SystemClock_Config+0xd4>)
 800059c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <SystemClock_Config+0xd4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80005ae:	2326      	movs	r3, #38	; 0x26
 80005b0:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2340      	movs	r3, #64	; 0x40
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c8:	2360      	movs	r3, #96	; 0x60
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 80005d8:	2320      	movs	r3, #32
 80005da:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005e0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005e6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005ec:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fe98 	bl	8003328 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x96>
		Error_Handler();
 80005fe:	f000 f83e 	bl	800067e <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8000602:	236f      	movs	r3, #111	; 0x6f
 8000604:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2103      	movs	r1, #3
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fa0c 	bl	8003a40 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc6>
		Error_Handler();
 800062e:	f000 f826 	bl	800067e <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000632:	f003 ff9f 	bl	8004574 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000636:	bf00      	nop
 8000638:	3768      	adds	r7, #104	; 0x68
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	58000400 	.word	0x58000400

08000644 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800064a:	463b      	mov	r3, r7
 800064c:	2250      	movs	r2, #80	; 0x50
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f009 fc0f 	bl	8009e74 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000660:	2310      	movs	r3, #16
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000664:	463b      	mov	r3, r7
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fe0e 	bl	8004288 <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <PeriphCommonClock_Config+0x32>
		Error_Handler();
 8000672:	f000 f804 	bl	800067e <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000682:	b672      	cpsid	i
}
 8000684:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000686:	e7fe      	b.n	8000686 <Error_Handler+0x8>

08000688 <LL_AHB2_GRP1_EnableClock>:
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4313      	orrs	r3, r2
 800069e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ac:	68fb      	ldr	r3, [r7, #12]
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b085      	sub	sp, #20
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4013      	ands	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_SPI1_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MX_SPI1_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_SPI1_Init+0x74>)
 80006f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_SPI1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x74>)
 8000706:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800070a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x74>)
 800070e:	2202      	movs	r2, #2
 8000710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_SPI1_Init+0x74>)
 8000714:	2201      	movs	r2, #1
 8000716:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x74>)
 800071a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x74>)
 8000722:	2210      	movs	r2, #16
 8000724:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x74>)
 800073a:	2207      	movs	r2, #7
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_SPI1_Init+0x74>)
 800074c:	f004 f829 	bl	80047a2 <HAL_SPI_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f7ff ff92 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200003d4 	.word	0x200003d4
 8000764:	40013000 	.word	0x40013000

08000768 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <HAL_SPI_MspInit+0x5c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d117      	bne.n	80007ba <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800078a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800078e:	f7ff ff94 	bl	80006ba <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff ff78 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000798:	23c2      	movs	r3, #194	; 0xc2
 800079a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a8:	2305      	movs	r3, #5
 80007aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f000 fb5f 	bl	8000e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40013000 	.word	0x40013000

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	f06f 000b 	mvn.w	r0, #11
 80007d4:	f000 fb1b 	bl	8000e0e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	f06f 000a 	mvn.w	r0, #10
 80007e0:	f000 fb15 	bl	8000e0e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	f06f 0009 	mvn.w	r0, #9
 80007ec:	f000 fb0f 	bl	8000e0e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	f06f 0004 	mvn.w	r0, #4
 80007f8:	f000 fb09 	bl	8000e0e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2101      	movs	r1, #1
 8000800:	f06f 0003 	mvn.w	r0, #3
 8000804:	f000 fb03 	bl	8000e0e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	f06f 0001 	mvn.w	r0, #1
 8000810:	f000 fafd 	bl	8000e0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f9a8 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <USB_LP_IRQHandler+0x10>)
 8000872:	f000 fda0 	bl	80013b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20001958 	.word	0x20001958

08000880 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <SystemInit+0x90>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a21      	ldr	r2, [pc, #132]	; (8000910 <SystemInit+0x90>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80008a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80008ac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80008ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <SystemInit+0x94>)
 80008ba:	4013      	ands	r3, r2
 80008bc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80008be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008ca:	f023 0305 	bic.w	r3, r3, #5
 80008ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80008da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008de:	f023 0301 	bic.w	r3, r3, #1
 80008e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80008e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <SystemInit+0x98>)
 80008ec:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00
 8000914:	faf6fefb 	.word	0xfaf6fefb
 8000918:	22041000 	.word	0x22041000

0800091c <LL_AHB2_GRP1_EnableClock>:
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800092a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000940:	68fb      	ldr	r3, [r7, #12]
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <LL_APB2_GRP1_EnableClock>:
{
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800095c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4313      	orrs	r3, r2
 8000964:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4013      	ands	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2224      	movs	r2, #36	; 0x24
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f009 fa70 	bl	8009e74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <MX_TIM1_Init+0xb0>)
 80009a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009d2:	2301      	movs	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e2:	2301      	movs	r3, #1
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009f6:	f004 fde5 	bl	80055c4 <HAL_TIM_Encoder_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a00:	f7ff fe3d 	bl	800067e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_TIM1_Init+0xac>)
 8000a16:	f004 ff93 	bl	8005940 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a20:	f7ff fe2d 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000438 	.word	0x20000438
 8000a30:	40012c00 	.word	0x40012c00

08000a34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_TIM_Encoder_MspInit+0x5c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d118      	bne.n	8000a88 <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a56:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a5a:	f7ff ff78 	bl	800094e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f7ff ff5c 	bl	800091c <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f000 f9f8 	bl	8000e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40012c00 	.word	0x40012c00

08000a94 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000a94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a98:	3304      	adds	r3, #4

08000a9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000a9e:	d3f9      	bcc.n	8000a94 <CopyDataInit>
  bx lr
 8000aa0:	4770      	bx	lr

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000aa2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000aa4:	3004      	adds	r0, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000aa6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>
  bx lr
 8000aaa:	4770      	bx	lr

08000aac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000aae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab0:	f7ff fee6 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <LoopForever+0x8>)
 8000ab6:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <LoopForever+0xc>)
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <LoopForever+0x10>)
 8000aba:	2300      	movs	r3, #0
 8000abc:	f7ff ffed 	bl	8000a9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <LoopForever+0x14>)
 8000ac2:	490c      	ldr	r1, [pc, #48]	; (8000af4 <LoopForever+0x18>)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f7ff ffee 	bl	8000aa6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <LoopForever+0x1c>)
 8000acc:	490b      	ldr	r1, [pc, #44]	; (8000afc <LoopForever+0x20>)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f7ff ffe9 	bl	8000aa6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ad4:	f009 f9aa 	bl	8009e2c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ad8:	f7ff fd00 	bl	80004dc <main>

08000adc <LoopForever>:

LoopForever:
  b LoopForever
 8000adc:	e7fe      	b.n	8000adc <LoopForever>
 8000ade:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000ae0:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	20000188 	.word	0x20000188
 8000aec:	08009f98 	.word	0x08009f98
  INIT_BSS _sbss, _ebss
 8000af0:	20000188 	.word	0x20000188
 8000af4:	20001c4c 	.word	0x20001c4c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000af8:	20030000 	.word	0x20030000
 8000afc:	20030000 	.word	0x20030000

08000b00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_Init+0x3c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_Init+0x3c>)
 8000b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f000 f96c 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 f80f 	bl	8000b44 <HAL_InitTick>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	71fb      	strb	r3, [r7, #7]
 8000b30:	e001      	b.n	8000b36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b32:	f7ff fe49 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58004000 	.word	0x58004000

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_InitTick+0x6c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d024      	beq.n	8000ba2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b58:	f003 f91e 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_InitTick+0x6c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4619      	mov	r1, r3
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f974 	bl	8000e5e <HAL_SYSTICK_Config>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10f      	bne.n	8000b9c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	d809      	bhi.n	8000b96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b82:	2200      	movs	r2, #0
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8a:	f000 f940 	bl	8000e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <HAL_InitTick+0x70>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	e007      	b.n	8000ba6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e004      	b.n	8000ba6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	e001      	b.n	8000ba6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000000c 	.word	0x2000000c
 8000bdc:	20000484 	.word	0x20000484

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000484 	.word	0x20000484

08000bf8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTickPrio+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffe2 	bl	8000be0 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffd2 	bl	8000be0 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
    {
    }
  }
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000000c 	.word	0x2000000c

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff40 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff90 	bl	8000d4c <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5f 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff33 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa4 	bl	8000db4 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e86:	e146      	b.n	8001116 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8138 	beq.w	8001110 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d005      	beq.n	8000eb8 <HAL_GPIO_Init+0x40>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d130      	bne.n	8000f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eee:	2201      	movs	r2, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	f003 0201 	and.w	r2, r3, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d017      	beq.n	8000f56 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d123      	bne.n	8000faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0203 	and.w	r2, r3, #3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8092 	beq.w	8001110 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x2bc>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001016:	d013      	beq.n	8001040 <HAL_GPIO_Init+0x1c8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a47      	ldr	r2, [pc, #284]	; (8001138 <HAL_GPIO_Init+0x2c0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1c4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a46      	ldr	r2, [pc, #280]	; (800113c <HAL_GPIO_Init+0x2c4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1c0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a45      	ldr	r2, [pc, #276]	; (8001140 <HAL_GPIO_Init+0x2c8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1bc>
 8001030:	2304      	movs	r3, #4
 8001032:	e006      	b.n	8001042 <HAL_GPIO_Init+0x1ca>
 8001034:	2307      	movs	r3, #7
 8001036:	e004      	b.n	8001042 <HAL_GPIO_Init+0x1ca>
 8001038:	2302      	movs	r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x1ca>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <HAL_GPIO_Init+0x1ca>
 8001040:	2300      	movs	r3, #0
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	f002 0203 	and.w	r2, r2, #3
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	4093      	lsls	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001052:	4938      	ldr	r1, [pc, #224]	; (8001134 <HAL_GPIO_Init+0x2bc>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001060:	4b38      	ldr	r3, [pc, #224]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001084:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ae:	4a25      	ldr	r2, [pc, #148]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 80010b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010da:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 80010e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f aeb1 	bne.w	8000e88 <HAL_GPIO_Init+0x10>
  }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40010000 	.word	0x40010000
 8001138:	48000400 	.word	0x48000400
 800113c:	48000800 	.word	0x48000800
 8001140:	48001000 	.word	0x48001000
 8001144:	58000800 	.word	0x58000800

08001148 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e001      	b.n	800116a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001194:	e002      	b.n	800119c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011aa:	b08b      	sub	sp, #44	; 0x2c
 80011ac:	af06      	add	r7, sp, #24
 80011ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e0d7      	b.n	800136a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d106      	bne.n	80011d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f008 fb02 	bl	80097d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fc24 	bl	8005a2e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e04c      	b.n	8001286 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	440b      	add	r3, r1
 80011fc:	3301      	adds	r3, #1
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	b298      	uxth	r0, r3
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	3336      	adds	r3, #54	; 0x36
 800122a:	4602      	mov	r2, r0
 800122c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	3303      	adds	r3, #3
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	3338      	adds	r3, #56	; 0x38
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	333c      	adds	r3, #60	; 0x3c
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	3340      	adds	r3, #64	; 0x40
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	3301      	adds	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3ad      	bcc.n	80011ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e044      	b.n	8001320 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	3301      	adds	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3b5      	bcc.n	8001296 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	687e      	ldr	r6, [r7, #4]
 8001332:	466d      	mov	r5, sp
 8001334:	f106 0410 	add.w	r4, r6, #16
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	602b      	str	r3, [r5, #0]
 8001340:	1d33      	adds	r3, r6, #4
 8001342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001344:	6838      	ldr	r0, [r7, #0]
 8001346:	f004 fb8d 	bl	8005a64 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f001 fc29 	bl	8002bba <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001372 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_PCD_Start+0x16>
 8001384:	2302      	movs	r3, #2
 8001386:	e012      	b.n	80013ae <HAL_PCD_Start+0x3c>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f004 fb33 	bl	8005a00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 fae8 	bl	8007974 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f006 faed 	bl	80079a2 <USB_ReadInterrupts>
 80013c8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fb26 	bl	8001a26 <PCD_EP_ISR_Handler>

    return;
 80013da:	e110      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d013      	beq.n	800140e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013f8:	b292      	uxth	r2, r2
 80013fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f008 fa9d 	bl	800993e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f8fc 	bl	8001604 <HAL_PCD_SetAddress>

    return;
 800140c:	e0f7      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00c      	beq.n	8001432 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001420:	b29a      	uxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800142a:	b292      	uxth	r2, r2
 800142c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001430:	e0e5      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001444:	b29a      	uxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800144e:	b292      	uxth	r2, r2
 8001450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001454:	e0d3      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d034      	beq.n	80014ca <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0204 	bic.w	r2, r2, #4
 8001472:	b292      	uxth	r2, r2
 8001474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0208 	bic.w	r2, r2, #8
 800148a:	b292      	uxth	r2, r2
 800148c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014a2:	2100      	movs	r1, #0
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f008 fc41 	bl	8009d2c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f008 fa80 	bl	80099b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014c2:	b292      	uxth	r2, r2
 80014c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014c8:	e099      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d027      	beq.n	8001524 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0208 	orr.w	r2, r2, #8
 80014e6:	b292      	uxth	r2, r2
 80014e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014fe:	b292      	uxth	r2, r2
 8001500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800150c:	b29a      	uxth	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0204 	orr.w	r2, r2, #4
 8001516:	b292      	uxth	r2, r2
 8001518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f008 fa2d 	bl	800997c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001522:	e06c      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	2b00      	cmp	r3, #0
 800152c:	d040      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001540:	b292      	uxth	r2, r2
 8001542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d12b      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0204 	orr.w	r2, r2, #4
 8001562:	b292      	uxth	r2, r2
 8001564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0208 	orr.w	r2, r2, #8
 800157a:	b292      	uxth	r2, r2
 800157c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001590:	b29b      	uxth	r3, r3
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800159e:	2101      	movs	r1, #1
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f008 fbc3 	bl	8009d2c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80015a6:	e02a      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f008 f9e7 	bl	800997c <HAL_PCD_SuspendCallback>
    return;
 80015ae:	e026      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00f      	beq.n	80015da <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015cc:	b292      	uxth	r2, r2
 80015ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f008 f9a5 	bl	8009922 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015d8:	e011      	b.n	80015fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00c      	beq.n	80015fe <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f6:	b292      	uxth	r2, r2
 80015f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015fc:	bf00      	nop
  }
}
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_PCD_SetAddress+0x1a>
 800161a:	2302      	movs	r3, #2
 800161c:	e013      	b.n	8001646 <HAL_PCD_SetAddress+0x42>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	78fa      	ldrb	r2, [r7, #3]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f006 f988 	bl	800794c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	4608      	mov	r0, r1
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	4603      	mov	r3, r0
 800165e:	70fb      	strb	r3, [r7, #3]
 8001660:	460b      	mov	r3, r1
 8001662:	803b      	strh	r3, [r7, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800166c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da0e      	bge.n	8001692 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	705a      	strb	r2, [r3, #1]
 8001690:	e00e      	b.n	80016b0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	f003 0207 	and.w	r2, r3, #7
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016bc:	883a      	ldrh	r2, [r7, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	78ba      	ldrb	r2, [r7, #2]
 80016c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016da:	78bb      	ldrb	r3, [r7, #2]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d102      	bne.n	80016e6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_PCD_EP_Open+0xa6>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e00e      	b.n	8001712 <HAL_PCD_EP_Open+0xc4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68f9      	ldr	r1, [r7, #12]
 8001702:	4618      	mov	r0, r3
 8001704:	f004 f9d0 	bl	8005aa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001710:	7afb      	ldrb	r3, [r7, #11]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	da0e      	bge.n	800174c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	705a      	strb	r2, [r3, #1]
 800174a:	e00e      	b.n	800176a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	f003 0207 	and.w	r2, r3, #7
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	b2da      	uxtb	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_PCD_EP_Close+0x6a>
 8001780:	2302      	movs	r3, #2
 8001782:	e00e      	b.n	80017a2 <HAL_PCD_EP_Close+0x88>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	4618      	mov	r0, r3
 8001794:	f004 fd1c 	bl	80061d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	460b      	mov	r3, r1
 80017b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	f003 0207 	and.w	r2, r3, #7
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2200      	movs	r2, #0
 80017e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d106      	bne.n	800180e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6979      	ldr	r1, [r7, #20]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 fecf 	bl	80065aa <USB_EPStartXfer>
 800180c:	e005      	b.n	800181a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6979      	ldr	r1, [r7, #20]
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fec8 	bl	80065aa <USB_EPStartXfer>
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	f003 0207 	and.w	r2, r3, #7
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	460b      	mov	r3, r1
 8001862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001864:	7afb      	ldrb	r3, [r7, #11]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2201      	movs	r2, #1
 800189e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018ac:	7afb      	ldrb	r3, [r7, #11]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6979      	ldr	r1, [r7, #20]
 80018bc:	4618      	mov	r0, r3
 80018be:	f004 fe74 	bl	80065aa <USB_EPStartXfer>
 80018c2:	e005      	b.n	80018d0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6979      	ldr	r1, [r7, #20]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 fe6d 	bl	80065aa <USB_EPStartXfer>
  }

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	f003 0207 	and.w	r2, r3, #7
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d901      	bls.n	80018f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e03e      	b.n	8001976 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da0e      	bge.n	800191e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2201      	movs	r2, #1
 800191a:	705a      	strb	r2, [r3, #1]
 800191c:	e00c      	b.n	8001938 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	b2da      	uxtb	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_PCD_EP_SetStall+0x7e>
 8001954:	2302      	movs	r3, #2
 8001956:	e00e      	b.n	8001976 <HAL_PCD_EP_SetStall+0x9c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68f9      	ldr	r1, [r7, #12]
 8001966:	4618      	mov	r0, r3
 8001968:	f005 fef1 	bl	800774e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	f003 020f 	and.w	r2, r3, #15
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	d901      	bls.n	800199c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e040      	b.n	8001a1e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800199c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da0e      	bge.n	80019c2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	705a      	strb	r2, [r3, #1]
 80019c0:	e00e      	b.n	80019e0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	f003 0207 	and.w	r2, r3, #7
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_PCD_EP_ClrStall+0x82>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e00e      	b.n	8001a1e <HAL_PCD_EP_ClrStall+0xa0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f005 feee 	bl	80077f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b096      	sub	sp, #88	; 0x58
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a2e:	e39c      	b.n	800216a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001a4a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 815e 	bne.w	8001d10 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d150      	bne.n	8001b02 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a70:	81fb      	strh	r3, [r7, #14]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3328      	adds	r3, #40	; 0x28
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	441a      	add	r2, r3
 8001abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001abe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f007 ff13 	bl	80098ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 834a 	beq.w	800216a <PCD_EP_ISR_Handler+0x744>
 8001ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 8345 	bne.w	800216a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b292      	uxth	r2, r2
 8001af4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b00:	e333      	b.n	800216a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b14:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d032      	beq.n	8001b86 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b54:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	f005 ff73 	bl	8007a46 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	823b      	strh	r3, [r7, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	8a3a      	ldrh	r2, [r7, #16]
 8001b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f007 fe88 	bl	8009894 <HAL_PCD_SetupStageCallback>
 8001b84:	e2f1      	b.n	800216a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b86:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f280 82ed 	bge.w	800216a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	83fb      	strh	r3, [r7, #30]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	8bfa      	ldrh	r2, [r7, #30]
 8001ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001baa:	b292      	uxth	r2, r2
 8001bac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d019      	beq.n	8001c12 <PCD_EP_ISR_Handler+0x1ec>
 8001bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bec:	6959      	ldr	r1, [r3, #20]
 8001bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	f005 ff25 	bl	8007a46 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	441a      	add	r2, r3
 8001c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f007 fe53 	bl	80098b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 82a3 	bne.w	800216a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4413      	add	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b3e      	cmp	r3, #62	; 0x3e
 8001c4a:	d918      	bls.n	8001c7e <PCD_EP_ISR_Handler+0x258>
 8001c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
 8001c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <PCD_EP_ISR_Handler+0x240>
 8001c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c62:	3b01      	subs	r3, #1
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44
 8001c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	029b      	lsls	r3, r3, #10
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	801a      	strh	r2, [r3, #0]
 8001c7c:	e029      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x2ac>
 8001c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d112      	bne.n	8001cac <PCD_EP_ISR_Handler+0x286>
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	801a      	strh	r2, [r3, #0]
 8001caa:	e012      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x2ac>
 8001cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <PCD_EP_ISR_Handler+0x2a0>
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce2:	827b      	strh	r3, [r7, #18]
 8001ce4:	8a7b      	ldrh	r3, [r7, #18]
 8001ce6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001cea:	827b      	strh	r3, [r7, #18]
 8001cec:	8a7b      	ldrh	r3, [r7, #18]
 8001cee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cf2:	827b      	strh	r3, [r7, #18]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	8a7b      	ldrh	r3, [r7, #18]
 8001cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	8013      	strh	r3, [r2, #0]
 8001d0e:	e22c      	b.n	800216a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d24:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f280 80f6 	bge.w	8001f1a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d44:	4013      	ands	r3, r2
 8001d46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d60:	b292      	uxth	r2, r2
 8001d62:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d64:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d7c:	7b1b      	ldrb	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d123      	bne.n	8001dca <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001daa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 808e 	beq.w	8001ed0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dba:	6959      	ldr	r1, [r3, #20]
 8001dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dbe:	88da      	ldrh	r2, [r3, #6]
 8001dc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001dc4:	f005 fe3f 	bl	8007a46 <USB_ReadPMA>
 8001dc8:	e082      	b.n	8001ed0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dcc:	78db      	ldrb	r3, [r3, #3]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d10a      	bne.n	8001de8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dd2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f9d3 	bl	8002186 <HAL_PCD_EP_DB_Receive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001de6:	e073      	b.n	8001ed0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e02:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	441a      	add	r2, r3
 8001e14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d022      	beq.n	8001e8c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001e6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d02c      	beq.n	8001ed0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	6959      	ldr	r1, [r3, #20]
 8001e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e80:	891a      	ldrh	r2, [r3, #8]
 8001e82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e86:	f005 fdde 	bl	8007a46 <USB_ReadPMA>
 8001e8a:	e021      	b.n	8001ed0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001eb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec2:	6959      	ldr	r1, [r3, #20]
 8001ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec6:	895a      	ldrh	r2, [r3, #10]
 8001ec8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ecc:	f005 fdbb 	bl	8007a46 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ed8:	441a      	add	r2, r3
 8001eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001edc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ee6:	441a      	add	r2, r3
 8001ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <PCD_EP_ISR_Handler+0x4da>
 8001ef4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d206      	bcs.n	8001f0e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f007 fcd6 	bl	80098b8 <HAL_PCD_DataOutStageCallback>
 8001f0c:	e005      	b.n	8001f1a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 fb48 	bl	80065aa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f1a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8121 	beq.w	800216a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f28:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	441a      	add	r2, r3
 8001f68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7a:	78db      	ldrb	r3, [r3, #3]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	f000 80a2 	beq.w	80020c6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8001f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8093 	beq.w	80020b8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f92:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d046      	beq.n	800202c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d126      	bne.n	8001ff4 <PCD_EP_ISR_Handler+0x5ce>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	4413      	add	r3, r2
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	00da      	lsls	r2, r3, #3
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	801a      	strh	r2, [r3, #0]
 8001ff2:	e061      	b.n	80020b8 <PCD_EP_ISR_Handler+0x692>
 8001ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff6:	785b      	ldrb	r3, [r3, #1]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d15d      	bne.n	80020b8 <PCD_EP_ISR_Handler+0x692>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	4413      	add	r3, r2
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	00da      	lsls	r2, r3, #3
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	4413      	add	r3, r2
 800201e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	2200      	movs	r2, #0
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	e045      	b.n	80020b8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002034:	785b      	ldrb	r3, [r3, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d126      	bne.n	8002088 <PCD_EP_ISR_Handler+0x662>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	4413      	add	r3, r2
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
 8002052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00da      	lsls	r2, r3, #3
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	4413      	add	r3, r2
 800205c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800206c:	b29a      	uxth	r2, r3
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002080:	b29a      	uxth	r2, r3
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e017      	b.n	80020b8 <PCD_EP_ISR_Handler+0x692>
 8002088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d113      	bne.n	80020b8 <PCD_EP_ISR_Handler+0x692>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209e:	4413      	add	r3, r2
 80020a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	00da      	lsls	r2, r3, #3
 80020a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020aa:	4413      	add	r3, r2
 80020ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	2200      	movs	r2, #0
 80020b6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f007 fc15 	bl	80098ee <HAL_PCD_DataInStageCallback>
 80020c4:	e051      	b.n	800216a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d144      	bne.n	800215c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80020fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002102:	429a      	cmp	r2, r3
 8002104:	d907      	bls.n	8002116 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800210e:	1ad2      	subs	r2, r2, r3
 8002110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002112:	619a      	str	r2, [r3, #24]
 8002114:	e002      	b.n	800211c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800211c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f007 fbdf 	bl	80098ee <HAL_PCD_DataInStageCallback>
 8002130:	e01b      	b.n	800216a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800213a:	441a      	add	r2, r3
 800213c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002148:	441a      	add	r2, r3
 800214a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002154:	4618      	mov	r0, r3
 8002156:	f004 fa28 	bl	80065aa <USB_EPStartXfer>
 800215a:	e006      	b.n	800216a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800215c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002160:	461a      	mov	r2, r3
 8002162:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f917 	bl	8002398 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002172:	b29b      	uxth	r3, r3
 8002174:	b21b      	sxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f6ff ac5a 	blt.w	8001a30 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3758      	adds	r7, #88	; 0x58
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	4613      	mov	r3, r2
 8002192:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07c      	beq.n	8002298 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	8b7b      	ldrh	r3, [r7, #26]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d306      	bcc.n	80021dc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	8b7b      	ldrh	r3, [r7, #26]
 80021d4:	1ad2      	subs	r2, r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	619a      	str	r2, [r3, #24]
 80021da:	e002      	b.n	80021e2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d123      	bne.n	8002232 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002204:	833b      	strh	r3, [r7, #24]
 8002206:	8b3b      	ldrh	r3, [r7, #24]
 8002208:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800220c:	833b      	strh	r3, [r7, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	441a      	add	r2, r3
 800221c:	8b3b      	ldrh	r3, [r7, #24]
 800221e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222e:	b29b      	uxth	r3, r3
 8002230:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01f      	beq.n	800227c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002256:	82fb      	strh	r3, [r7, #22]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	8afb      	ldrh	r3, [r7, #22]
 8002268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800226c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002278:	b29b      	uxth	r3, r3
 800227a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800227c:	8b7b      	ldrh	r3, [r7, #26]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8085 	beq.w	800238e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	6959      	ldr	r1, [r3, #20]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	891a      	ldrh	r2, [r3, #8]
 8002290:	8b7b      	ldrh	r3, [r7, #26]
 8002292:	f005 fbd8 	bl	8007a46 <USB_ReadPMA>
 8002296:	e07a      	b.n	800238e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	8b7b      	ldrh	r3, [r7, #26]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d306      	bcc.n	80022d6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	8b7b      	ldrh	r3, [r7, #26]
 80022ce:	1ad2      	subs	r2, r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	619a      	str	r2, [r3, #24]
 80022d4:	e002      	b.n	80022dc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d123      	bne.n	800232c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	83fb      	strh	r3, [r7, #30]
 8002300:	8bfb      	ldrh	r3, [r7, #30]
 8002302:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002306:	83fb      	strh	r3, [r7, #30]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	8bfb      	ldrh	r3, [r7, #30]
 8002318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002328:	b29b      	uxth	r3, r3
 800232a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11f      	bne.n	8002376 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002350:	83bb      	strh	r3, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	441a      	add	r2, r3
 8002360:	8bbb      	ldrh	r3, [r7, #28]
 8002362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002372:	b29b      	uxth	r3, r3
 8002374:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002376:	8b7b      	ldrh	r3, [r7, #26]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6959      	ldr	r1, [r3, #20]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	895a      	ldrh	r2, [r3, #10]
 8002388:	8b7b      	ldrh	r3, [r7, #26]
 800238a:	f005 fb5c 	bl	8007a46 <USB_ReadPMA>
    }
  }

  return count;
 800238e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b0a2      	sub	sp, #136	; 0x88
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 81c5 	beq.w	800273c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d907      	bls.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ee:	1ad2      	subs	r2, r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	619a      	str	r2, [r3, #24]
 80023f4:	e002      	b.n	80023fc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 80b9 	bne.w	8002578 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d126      	bne.n	800245c <HAL_PCD_EP_DB_Transmit+0xc4>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	4413      	add	r3, r2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00da      	lsls	r2, r3, #3
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	4413      	add	r3, r2
 8002430:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002440:	b29a      	uxth	r2, r3
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002454:	b29a      	uxth	r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	e01a      	b.n	8002492 <HAL_PCD_EP_DB_Transmit+0xfa>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d116      	bne.n	8002492 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	4413      	add	r3, r2
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	00da      	lsls	r2, r3, #3
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	4413      	add	r3, r2
 8002486:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d126      	bne.n	80024ee <HAL_PCD_EP_DB_Transmit+0x156>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	00da      	lsls	r2, r3, #3
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	e017      	b.n	800251e <HAL_PCD_EP_DB_Transmit+0x186>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d113      	bne.n	800251e <HAL_PCD_EP_DB_Transmit+0x186>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fe:	b29b      	uxth	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	4413      	add	r3, r2
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	00da      	lsls	r2, r3, #3
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	4413      	add	r3, r2
 8002512:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2200      	movs	r2, #0
 800251c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f007 f9e2 	bl	80098ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 82d2 	beq.w	8002ada <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002550:	827b      	strh	r3, [r7, #18]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	441a      	add	r2, r3
 8002560:	8a7b      	ldrh	r3, [r7, #18]
 8002562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800256a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800256e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002572:	b29b      	uxth	r3, r3
 8002574:	8013      	strh	r3, [r2, #0]
 8002576:	e2b0      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d021      	beq.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	441a      	add	r2, r3
 80025ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	f040 8284 	bne.w	8002ada <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025da:	441a      	add	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e8:	441a      	add	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d309      	bcc.n	800260e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002606:	1ad2      	subs	r2, r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	621a      	str	r2, [r3, #32]
 800260c:	e015      	b.n	800263a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800261a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002624:	e009      	b.n	800263a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2200      	movs	r2, #0
 8002638:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	785b      	ldrb	r3, [r3, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d155      	bne.n	80026ee <HAL_PCD_EP_DB_Transmit+0x356>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002650:	b29b      	uxth	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	4413      	add	r3, r2
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	00da      	lsls	r2, r3, #3
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	4413      	add	r3, r2
 8002664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
 800266a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266c:	2b3e      	cmp	r3, #62	; 0x3e
 800266e:	d916      	bls.n	800269e <HAL_PCD_EP_DB_Transmit+0x306>
 8002670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	64bb      	str	r3, [r7, #72]	; 0x48
 8002676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002682:	3b01      	subs	r3, #1
 8002684:	64bb      	str	r3, [r7, #72]	; 0x48
 8002686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002688:	b29b      	uxth	r3, r3
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	b29b      	uxth	r3, r3
 800268e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002696:	b29a      	uxth	r2, r3
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	801a      	strh	r2, [r3, #0]
 800269c:	e043      	b.n	8002726 <HAL_PCD_EP_DB_Transmit+0x38e>
 800269e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d112      	bne.n	80026ca <HAL_PCD_EP_DB_Transmit+0x332>
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	e02d      	b.n	8002726 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x348>
 80026da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026dc:	3301      	adds	r3, #1
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	e01b      	b.n	8002726 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d117      	bne.n	8002726 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002704:	b29b      	uxth	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270a:	4413      	add	r3, r2
 800270c:	643b      	str	r3, [r7, #64]	; 0x40
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	00da      	lsls	r2, r3, #3
 8002714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002716:	4413      	add	r3, r2
 8002718:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800271c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002720:	b29a      	uxth	r2, r3
 8002722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002724:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6959      	ldr	r1, [r3, #20]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	891a      	ldrh	r2, [r3, #8]
 8002732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002734:	b29b      	uxth	r3, r3
 8002736:	f005 f944 	bl	80079c2 <USB_WritePMA>
 800273a:	e1ce      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	4413      	add	r3, r2
 8002756:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002760:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800276c:	429a      	cmp	r2, r3
 800276e:	d307      	bcc.n	8002780 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002778:	1ad2      	subs	r2, r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	619a      	str	r2, [r3, #24]
 800277e:	e002      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 80c4 	bne.w	8002918 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d126      	bne.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	66bb      	str	r3, [r7, #104]	; 0x68
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ac:	4413      	add	r3, r2
 80027ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	00da      	lsls	r2, r3, #3
 80027b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b8:	4413      	add	r3, r2
 80027ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027be:	667b      	str	r3, [r7, #100]	; 0x64
 80027c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ce:	801a      	strh	r2, [r3, #0]
 80027d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027de:	b29a      	uxth	r2, r3
 80027e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	e01a      	b.n	800281c <HAL_PCD_EP_DB_Transmit+0x484>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d116      	bne.n	800281c <HAL_PCD_EP_DB_Transmit+0x484>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	673b      	str	r3, [r7, #112]	; 0x70
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002802:	4413      	add	r3, r2
 8002804:	673b      	str	r3, [r7, #112]	; 0x70
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	00da      	lsls	r2, r3, #3
 800280c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280e:	4413      	add	r3, r2
 8002810:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002814:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002818:	2200      	movs	r2, #0
 800281a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d12f      	bne.n	800288a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002842:	4413      	add	r3, r2
 8002844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	00da      	lsls	r2, r3, #3
 800284e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002852:	4413      	add	r3, r2
 8002854:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800285c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002868:	b29a      	uxth	r2, r3
 800286a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002880:	b29a      	uxth	r2, r3
 8002882:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	e017      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x522>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d113      	bne.n	80028ba <HAL_PCD_EP_DB_Transmit+0x522>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a0:	4413      	add	r3, r2
 80028a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	00da      	lsls	r2, r3, #3
 80028aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ac:	4413      	add	r3, r2
 80028ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80028b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b6:	2200      	movs	r2, #0
 80028b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f007 f814 	bl	80098ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 8104 	bne.w	8002ada <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]
 8002916:	e0e0      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d121      	bne.n	8002966 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	441a      	add	r2, r3
 800294e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800295a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002962:	b29b      	uxth	r3, r3
 8002964:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800296c:	2b01      	cmp	r3, #1
 800296e:	f040 80b4 	bne.w	8002ada <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800297a:	441a      	add	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002988:	441a      	add	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	429a      	cmp	r2, r3
 8002998:	d309      	bcc.n	80029ae <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	621a      	str	r2, [r3, #32]
 80029ac:	e015      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d107      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80029b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029c4:	e009      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	663b      	str	r3, [r7, #96]	; 0x60
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d155      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	4413      	add	r3, r2
 80029fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	00da      	lsls	r2, r3, #3
 8002a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a08:	4413      	add	r3, r2
 8002a0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a12:	2b3e      	cmp	r3, #62	; 0x3e
 8002a14:	d916      	bls.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	677b      	str	r3, [r7, #116]	; 0x74
 8002a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <HAL_PCD_EP_DB_Transmit+0x694>
 8002a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	677b      	str	r3, [r7, #116]	; 0x74
 8002a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	029b      	lsls	r3, r3, #10
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	e040      	b.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d112      	bne.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a58:	801a      	strh	r2, [r3, #0]
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	e02a      	b.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	677b      	str	r3, [r7, #116]	; 0x74
 8002a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a82:	3301      	adds	r3, #1
 8002a84:	677b      	str	r3, [r7, #116]	; 0x74
 8002a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	029b      	lsls	r3, r3, #10
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	801a      	strh	r2, [r3, #0]
 8002a92:	e018      	b.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d114      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aaa:	4413      	add	r3, r2
 8002aac:	663b      	str	r3, [r7, #96]	; 0x60
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00da      	lsls	r2, r3, #3
 8002ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6959      	ldr	r1, [r3, #20]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	895a      	ldrh	r2, [r3, #10]
 8002ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f004 ff74 	bl	80079c2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af4:	823b      	strh	r3, [r7, #16]
 8002af6:	8a3b      	ldrh	r3, [r7, #16]
 8002af8:	f083 0310 	eor.w	r3, r3, #16
 8002afc:	823b      	strh	r3, [r7, #16]
 8002afe:	8a3b      	ldrh	r3, [r7, #16]
 8002b00:	f083 0320 	eor.w	r3, r3, #32
 8002b04:	823b      	strh	r3, [r7, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	8a3b      	ldrh	r3, [r7, #16]
 8002b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3788      	adds	r7, #136	; 0x88
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	817b      	strh	r3, [r7, #10]
 8002b42:	4613      	mov	r3, r2
 8002b44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e009      	b.n	8002b7e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b6a:	897a      	ldrh	r2, [r7, #10]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b7e:	893b      	ldrh	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2200      	movs	r2, #0
 8002b88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	80da      	strh	r2, [r3, #6]
 8002b92:	e00b      	b.n	8002bac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	58000400 	.word	0x58000400

08002c30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	58000400 	.word	0x58000400

08002c4c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5a:	6053      	str	r3, [r2, #4]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	58000400 	.word	0x58000400

08002c6c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7e:	d101      	bne.n	8002c84 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cde:	d101      	bne.n	8002ce4 <LL_RCC_HSE_IsReady+0x18>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <LL_RCC_HSE_IsReady+0x1a>
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	d101      	bne.n	8002d44 <LL_RCC_HSI_IsReady+0x18>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <LL_RCC_HSI_IsReady+0x1a>
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d101      	bne.n	8002dd6 <LL_RCC_HSI48_IsReady+0x18>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_RCC_HSI48_IsReady+0x1a>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d101      	bne.n	8002e82 <LL_RCC_LSE_IsReady+0x18>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_RCC_LSE_IsReady+0x1a>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d101      	bne.n	8002eea <LL_RCC_LSI1_IsReady+0x18>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <LL_RCC_LSI1_IsReady+0x1a>
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d101      	bne.n	8002f52 <LL_RCC_LSI2_IsReady+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_RCC_LSI2_IsReady+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	6013      	str	r3, [r2, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d101      	bne.n	8002fde <LL_RCC_MSI_IsReady+0x16>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_RCC_MSI_IsReady+0x18>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003022:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2bb0      	cmp	r3, #176	; 0xb0
 8003028:	d901      	bls.n	800302e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800302a:	23b0      	movs	r3, #176	; 0xb0
 800302c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800302e:	687b      	ldr	r3, [r7, #4]
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f023 0203 	bic.w	r2, r3, #3
 8003078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800310a:	f023 020f 	bic.w	r2, r3, #15
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003198:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031dc:	6013      	str	r3, [r2, #0]
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031fa:	d101      	bne.n	8003200 <LL_RCC_PLL_IsReady+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_RCC_PLL_IsReady+0x1a>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0303 	and.w	r3, r3, #3
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003280:	d101      	bne.n	8003286 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a6:	d101      	bne.n	80032ac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d101      	bne.n	80032d2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f0:	d101      	bne.n	80032f6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003314:	d101      	bne.n	800331a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b08d      	sub	sp, #52	; 0x34
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e37e      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8092 	beq.w	800346c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003348:	f7ff fea1 	bl	800308e <LL_RCC_GetSysClkSource>
 800334c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334e:	f7ff ff82 	bl	8003256 <LL_RCC_PLL_GetMainSource>
 8003352:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x3e>
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d14c      	bne.n	80033fa <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003362:	2b01      	cmp	r3, #1
 8003364:	d149      	bne.n	80033fa <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003366:	f7ff fe2f 	bl	8002fc8 <LL_RCC_MSI_IsReady>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_OscConfig+0x54>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e35d      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003380:	f7ff fe47 	bl	8003012 <LL_RCC_MSI_GetRange>
 8003384:	4603      	mov	r3, r0
 8003386:	429c      	cmp	r4, r3
 8003388:	d914      	bls.n	80033b4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fd16 	bl	8003dc0 <RCC_SetFlashLatencyFromMSIRange>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e34c      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fe21 	bl	8002fea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fe45 	bl	800303c <LL_RCC_MSI_SetCalibTrimming>
 80033b2:	e013      	b.n	80033dc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fe16 	bl	8002fea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fe3a 	bl	800303c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fcf7 	bl	8003dc0 <RCC_SetFlashLatencyFromMSIRange>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e32d      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033dc:	f000 fcdc 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4ab3      	ldr	r2, [pc, #716]	; (80036b0 <HAL_RCC_OscConfig+0x388>)
 80033e4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033e6:	4bb3      	ldr	r3, [pc, #716]	; (80036b4 <HAL_RCC_OscConfig+0x38c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fbaa 	bl	8000b44 <HAL_InitTick>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d039      	beq.n	800346a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e31e      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01e      	beq.n	8003440 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003402:	f7ff fdc3 	bl	8002f8c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003406:	f7fd fbeb 	bl	8000be0 <HAL_GetTick>
 800340a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340e:	f7fd fbe7 	bl	8000be0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e30b      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003420:	f7ff fdd2 	bl	8002fc8 <LL_RCC_MSI_IsReady>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f1      	beq.n	800340e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fddb 	bl	8002fea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fdff 	bl	800303c <LL_RCC_MSI_SetCalibTrimming>
 800343e:	e015      	b.n	800346c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003440:	f7ff fdb3 	bl	8002faa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003444:	f7fd fbcc 	bl	8000be0 <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800344c:	f7fd fbc8 	bl	8000be0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e2ec      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800345e:	f7ff fdb3 	bl	8002fc8 <LL_RCC_MSI_IsReady>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f1      	bne.n	800344c <HAL_RCC_OscConfig+0x124>
 8003468:	e000      	b.n	800346c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800346a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d04e      	beq.n	8003516 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003478:	f7ff fe09 	bl	800308e <LL_RCC_GetSysClkSource>
 800347c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800347e:	f7ff feea 	bl	8003256 <LL_RCC_PLL_GetMainSource>
 8003482:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2b08      	cmp	r3, #8
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x16e>
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d10d      	bne.n	80034ac <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d10a      	bne.n	80034ac <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003496:	f7ff fc19 	bl	8002ccc <LL_RCC_HSE_IsReady>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d039      	beq.n	8003514 <HAL_RCC_OscConfig+0x1ec>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d135      	bne.n	8003514 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e2c5      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d102      	bne.n	80034bc <HAL_RCC_OscConfig+0x194>
 80034b6:	f7ff fbeb 	bl	8002c90 <LL_RCC_HSE_Enable>
 80034ba:	e001      	b.n	80034c0 <HAL_RCC_OscConfig+0x198>
 80034bc:	f7ff fbf7 	bl	8002cae <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d012      	beq.n	80034ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd fb8a 	bl	8000be0 <HAL_GetTick>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fd fb86 	bl	8000be0 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e2aa      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034e2:	f7ff fbf3 	bl	8002ccc <LL_RCC_HSE_IsReady>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f1      	beq.n	80034d0 <HAL_RCC_OscConfig+0x1a8>
 80034ec:	e013      	b.n	8003516 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fd fb77 	bl	8000be0 <HAL_GetTick>
 80034f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f6:	f7fd fb73 	bl	8000be0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b64      	cmp	r3, #100	; 0x64
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e297      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003508:	f7ff fbe0 	bl	8002ccc <LL_RCC_HSE_IsReady>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f1      	bne.n	80034f6 <HAL_RCC_OscConfig+0x1ce>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d051      	beq.n	80035c6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	f7ff fdb4 	bl	800308e <LL_RCC_GetSysClkSource>
 8003526:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003528:	f7ff fe95 	bl	8003256 <LL_RCC_PLL_GetMainSource>
 800352c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d005      	beq.n	8003540 <HAL_RCC_OscConfig+0x218>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d113      	bne.n	8003562 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d110      	bne.n	8003562 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003540:	f7ff fbf4 	bl	8002d2c <LL_RCC_HSI_IsReady>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_RCC_OscConfig+0x22e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e270      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fbf8 	bl	8002d50 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	e031      	b.n	80035c6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356a:	f7ff fbc1 	bl	8002cf0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fd fb37 	bl	8000be0 <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003576:	f7fd fb33 	bl	8000be0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e257      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003588:	f7ff fbd0 	bl	8002d2c <LL_RCC_HSI_IsReady>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f1      	beq.n	8003576 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fbda 	bl	8002d50 <LL_RCC_HSI_SetCalibTrimming>
 800359c:	e013      	b.n	80035c6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359e:	f7ff fbb6 	bl	8002d0e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd fb1d 	bl	8000be0 <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fd fb19 	bl	8000be0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e23d      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80035bc:	f7ff fbb6 	bl	8002d2c <LL_RCC_HSI_IsReady>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f1      	bne.n	80035aa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80a3 	beq.w	8003726 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d076      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d046      	beq.n	8003682 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80035f4:	f7ff fc6d 	bl	8002ed2 <LL_RCC_LSI1_IsReady>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d113      	bne.n	8003626 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80035fe:	f7ff fc46 	bl	8002e8e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003602:	f7fd faed 	bl	8000be0 <HAL_GetTick>
 8003606:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800360a:	f7fd fae9 	bl	8000be0 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e20d      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800361c:	f7ff fc59 	bl	8002ed2 <LL_RCC_LSI1_IsReady>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f1      	beq.n	800360a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003626:	f7ff fc66 	bl	8002ef6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fd fad9 	bl	8000be0 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003632:	f7fd fad5 	bl	8000be0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b03      	cmp	r3, #3
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1f9      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003644:	f7ff fc79 	bl	8002f3a <LL_RCC_LSI2_IsReady>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f1      	beq.n	8003632 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fc83 	bl	8002f5e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003658:	f7ff fc2a 	bl	8002eb0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd fac0 	bl	8000be0 <HAL_GetTick>
 8003660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003664:	f7fd fabc 	bl	8000be0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1e0      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003676:	f7ff fc2c 	bl	8002ed2 <LL_RCC_LSI1_IsReady>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f1      	bne.n	8003664 <HAL_RCC_OscConfig+0x33c>
 8003680:	e051      	b.n	8003726 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003682:	f7ff fc04 	bl	8002e8e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fd faab 	bl	8000be0 <HAL_GetTick>
 800368a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800368e:	f7fd faa7 	bl	8000be0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1cb      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036a0:	f7ff fc17 	bl	8002ed2 <LL_RCC_LSI1_IsReady>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f1      	beq.n	800368e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80036aa:	f7ff fc35 	bl	8002f18 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036ae:	e00c      	b.n	80036ca <HAL_RCC_OscConfig+0x3a2>
 80036b0:	20000004 	.word	0x20000004
 80036b4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036b8:	f7fd fa92 	bl	8000be0 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1b6      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036ca:	f7ff fc36 	bl	8002f3a <LL_RCC_LSI2_IsReady>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f1      	bne.n	80036b8 <HAL_RCC_OscConfig+0x390>
 80036d4:	e027      	b.n	8003726 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80036d6:	f7ff fc1f 	bl	8002f18 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fd fa81 	bl	8000be0 <HAL_GetTick>
 80036de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036e2:	f7fd fa7d 	bl	8000be0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e1a1      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036f4:	f7ff fc21 	bl	8002f3a <LL_RCC_LSI2_IsReady>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f1      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80036fe:	f7ff fbd7 	bl	8002eb0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fd fa6d 	bl	8000be0 <HAL_GetTick>
 8003706:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800370a:	f7fd fa69 	bl	8000be0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e18d      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800371c:	f7ff fbd9 	bl	8002ed2 <LL_RCC_LSI1_IsReady>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f1      	bne.n	800370a <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d05b      	beq.n	80037ea <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003732:	4bb5      	ldr	r3, [pc, #724]	; (8003a08 <HAL_RCC_OscConfig+0x6e0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d114      	bne.n	8003768 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800373e:	f7ff fa67 	bl	8002c10 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003742:	f7fd fa4d 	bl	8000be0 <HAL_GetTick>
 8003746:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374a:	f7fd fa49 	bl	8000be0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e16d      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	4baa      	ldr	r3, [pc, #680]	; (8003a08 <HAL_RCC_OscConfig+0x6e0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d102      	bne.n	8003776 <HAL_RCC_OscConfig+0x44e>
 8003770:	f7ff fb37 	bl	8002de2 <LL_RCC_LSE_Enable>
 8003774:	e00c      	b.n	8003790 <HAL_RCC_OscConfig+0x468>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b05      	cmp	r3, #5
 800377c:	d104      	bne.n	8003788 <HAL_RCC_OscConfig+0x460>
 800377e:	f7ff fb52 	bl	8002e26 <LL_RCC_LSE_EnableBypass>
 8003782:	f7ff fb2e 	bl	8002de2 <LL_RCC_LSE_Enable>
 8003786:	e003      	b.n	8003790 <HAL_RCC_OscConfig+0x468>
 8003788:	f7ff fb3c 	bl	8002e04 <LL_RCC_LSE_Disable>
 800378c:	f7ff fb5c 	bl	8002e48 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d014      	beq.n	80037c2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd fa22 	bl	8000be0 <HAL_GetTick>
 800379c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fd fa1e 	bl	8000be0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e140      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037b6:	f7ff fb58 	bl	8002e6a <LL_RCC_LSE_IsReady>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ef      	beq.n	80037a0 <HAL_RCC_OscConfig+0x478>
 80037c0:	e013      	b.n	80037ea <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fd fa0d 	bl	8000be0 <HAL_GetTick>
 80037c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fd fa09 	bl	8000be0 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e12b      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037e0:	f7ff fb43 	bl	8002e6a <LL_RCC_LSE_IsReady>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ef      	bne.n	80037ca <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d02c      	beq.n	8003850 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037fe:	f7ff fabc 	bl	8002d7a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7fd f9ed 	bl	8000be0 <HAL_GetTick>
 8003806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800380a:	f7fd f9e9 	bl	8000be0 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e10d      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800381c:	f7ff facf 	bl	8002dbe <LL_RCC_HSI48_IsReady>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f1      	beq.n	800380a <HAL_RCC_OscConfig+0x4e2>
 8003826:	e013      	b.n	8003850 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003828:	f7ff fab8 	bl	8002d9c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fd f9d8 	bl	8000be0 <HAL_GetTick>
 8003830:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003834:	f7fd f9d4 	bl	8000be0 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e0f8      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003846:	f7ff faba 	bl	8002dbe <LL_RCC_HSI48_IsReady>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f1      	bne.n	8003834 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80ee 	beq.w	8003a36 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385a:	f7ff fc18 	bl	800308e <LL_RCC_GetSysClkSource>
 800385e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	2b02      	cmp	r3, #2
 800386e:	f040 80af 	bne.w	80039d0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	429a      	cmp	r2, r3
 800387e:	d123      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d114      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d106      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d05d      	beq.n	8003984 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d058      	beq.n	8003980 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0ab      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038e0:	f7ff fc73 	bl	80031ca <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038e4:	f7fd f97c 	bl	8000be0 <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fd f978 	bl	8000be0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e09c      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ef      	bne.n	80038ec <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <HAL_RCC_OscConfig+0x6e4>)
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800391e:	4311      	orrs	r1, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003924:	0212      	lsls	r2, r2, #8
 8003926:	4311      	orrs	r1, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003932:	4311      	orrs	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003938:	430a      	orrs	r2, r1
 800393a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393e:	4313      	orrs	r3, r2
 8003940:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003942:	f7ff fc33 	bl	80031ac <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003956:	f7fd f943 	bl	8000be0 <HAL_GetTick>
 800395a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395e:	f7fd f93f 	bl	8000be0 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e063      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0ef      	beq.n	800395e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397e:	e05a      	b.n	8003a36 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e059      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d151      	bne.n	8003a36 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003992:	f7ff fc0b 	bl	80031ac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039a6:	f7fd f91b 	bl	8000be0 <HAL_GetTick>
 80039aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fd f917 	bl	8000be0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e03b      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ef      	beq.n	80039ae <HAL_RCC_OscConfig+0x686>
 80039ce:	e032      	b.n	8003a36 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d02d      	beq.n	8003a32 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	f7ff fbf8 	bl	80031ca <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e4:	f023 0303 	bic.w	r3, r3, #3
 80039e8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80039f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd f8ef 	bl	8000be0 <HAL_GetTick>
 8003a02:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	e00d      	b.n	8003a22 <HAL_RCC_OscConfig+0x6fa>
 8003a06:	bf00      	nop
 8003a08:	58000400 	.word	0x58000400
 8003a0c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fd f8e6 	bl	8000be0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ef      	bne.n	8003a10 <HAL_RCC_OscConfig+0x6e8>
 8003a30:	e001      	b.n	8003a36 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3734      	adds	r7, #52	; 0x34
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd90      	pop	{r4, r7, pc}

08003a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e12d      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a54:	4b98      	ldr	r3, [pc, #608]	; (8003cb8 <HAL_RCC_ClockConfig+0x278>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d91b      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b95      	ldr	r3, [pc, #596]	; (8003cb8 <HAL_RCC_ClockConfig+0x278>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 0207 	bic.w	r2, r3, #7
 8003a6a:	4993      	ldr	r1, [pc, #588]	; (8003cb8 <HAL_RCC_ClockConfig+0x278>)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a72:	f7fd f8b5 	bl	8000be0 <HAL_GetTick>
 8003a76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a7a:	f7fd f8b1 	bl	8000be0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e111      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8c:	4b8a      	ldr	r3, [pc, #552]	; (8003cb8 <HAL_RCC_ClockConfig+0x278>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d1ef      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fafb 	bl	80030a6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ab0:	f7fd f896 	bl	8000be0 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ab8:	f7fd f892 	bl	8000be0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0f2      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003aca:	f7ff fbd0 	bl	800326e <LL_RCC_IsActiveFlag_HPRE>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f1      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d016      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff faf2 	bl	80030ce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aea:	f7fd f879 	bl	8000be0 <HAL_GetTick>
 8003aee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003af2:	f7fd f875 	bl	8000be0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e0d5      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b04:	f7ff fbc5 	bl	8003292 <LL_RCC_IsActiveFlag_C2HPRE>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f1      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff faeb 	bl	80030fa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b24:	f7fd f85c 	bl	8000be0 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b2c:	f7fd f858 	bl	8000be0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0b8      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b3e:	f7ff fbbb 	bl	80032b8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f1      	beq.n	8003b2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d016      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fae5 	bl	8003128 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b5e:	f7fd f83f 	bl	8000be0 <HAL_GetTick>
 8003b62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b66:	f7fd f83b 	bl	8000be0 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e09b      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b78:	f7ff fbb1 	bl	80032de <LL_RCC_IsActiveFlag_PPRE1>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f1      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fadb 	bl	8003150 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b9a:	f7fd f821 	bl	8000be0 <HAL_GetTick>
 8003b9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ba2:	f7fd f81d 	bl	8000be0 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e07d      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003bb4:	f7ff fba5 	bl	8003302 <LL_RCC_IsActiveFlag_PPRE2>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f1      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d043      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003bd2:	f7ff f87b 	bl	8002ccc <LL_RCC_HSE_IsReady>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11e      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e067      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003be8:	f7ff fafe 	bl	80031e8 <LL_RCC_PLL_IsReady>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d113      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e05c      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bfe:	f7ff f9e3 	bl	8002fc8 <LL_RCC_MSI_IsReady>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e051      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c0c:	f7ff f88e 	bl	8002d2c <LL_RCC_HSI_IsReady>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e04a      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fa21 	bl	8003066 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c24:	f7fc ffdc 	bl	8000be0 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fc ffd8 	bl	8000be0 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e036      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	f7ff fa24 	bl	800308e <LL_RCC_GetSysClkSource>
 8003c46:	4602      	mov	r2, r0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d1ec      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c52:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_RCC_ClockConfig+0x278>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d21b      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCC_ClockConfig+0x278>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 0207 	bic.w	r2, r3, #7
 8003c68:	4913      	ldr	r1, [pc, #76]	; (8003cb8 <HAL_RCC_ClockConfig+0x278>)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c70:	f7fc ffb6 	bl	8000be0 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c78:	f7fc ffb2 	bl	8000be0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e012      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_ClockConfig+0x278>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1ef      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c98:	f000 f87e 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <HAL_RCC_ClockConfig+0x27c>)
 8003ca0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003ca2:	f7fc ffa9 	bl	8000bf8 <HAL_GetTickPrio>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc ff4b 	bl	8000b44 <HAL_InitTick>
 8003cae:	4603      	mov	r3, r0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	58004000 	.word	0x58004000
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc6:	f7ff f9e2 	bl	800308e <LL_RCC_GetSysClkSource>
 8003cca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003cd2:	f7ff f99e 	bl	8003012 <LL_RCC_MSI_GetRange>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	4a2b      	ldr	r2, [pc, #172]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e04b      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d102      	bne.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e045      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d10a      	bne.n	8003d10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cfa:	f7fe ffb7 	bl	8002c6c <LL_RCC_HSE_IsEnabledDiv2>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d04:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e03a      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d0a:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e037      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d10:	f7ff faa1 	bl	8003256 <LL_RCC_PLL_GetMainSource>
 8003d14:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d003      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x64>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d003      	beq.n	8003d2a <HAL_RCC_GetSysClockFreq+0x6a>
 8003d22:	e00d      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d26:	60bb      	str	r3, [r7, #8]
        break;
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d2a:	f7fe ff9f 	bl	8002c6c <LL_RCC_HSE_IsEnabledDiv2>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d34:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d36:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d38:	e00d      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d3c:	60bb      	str	r3, [r7, #8]
        break;
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d40:	f7ff f967 	bl	8003012 <LL_RCC_MSI_GetRange>
 8003d44:	4603      	mov	r3, r0
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	60bb      	str	r3, [r7, #8]
        break;
 8003d54:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003d56:	f7ff fa59 	bl	800320c <LL_RCC_PLL_GetN>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	fb03 f402 	mul.w	r4, r3, r2
 8003d62:	f7ff fa6c 	bl	800323e <LL_RCC_PLL_GetDivider>
 8003d66:	4603      	mov	r3, r0
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d70:	f7ff fa59 	bl	8003226 <LL_RCC_PLL_GetR>
 8003d74:	4603      	mov	r3, r0
 8003d76:	0f5b      	lsrs	r3, r3, #29
 8003d78:	3301      	adds	r3, #1
 8003d7a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003d80:	68fb      	ldr	r3, [r7, #12]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	08009f50 	.word	0x08009f50
 8003d90:	00f42400 	.word	0x00f42400
 8003d94:	007a1200 	.word	0x007a1200

08003d98 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d98:	b598      	push	{r3, r4, r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d9c:	f7ff ff90 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003da0:	4604      	mov	r4, r0
 8003da2:	f7ff f9e9 	bl	8003178 <LL_RCC_GetAHBPrescaler>
 8003da6:	4603      	mov	r3, r0
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <HAL_RCC_GetHCLKFreq+0x24>)
 8003db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd98      	pop	{r3, r4, r7, pc}
 8003dbc:	08009f10 	.word	0x08009f10

08003dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2bb0      	cmp	r3, #176	; 0xb0
 8003dcc:	d903      	bls.n	8003dd6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e007      	b.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003de6:	f7ff f9d3 	bl	8003190 <LL_RCC_GetAHB4Prescaler>
 8003dea:	4603      	mov	r3, r0
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a0d      	ldr	r2, [pc, #52]	; (8003e28 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	0c9c      	lsrs	r4, r3, #18
 8003e0a:	f7fe ff11 	bl	8002c30 <HAL_PWREx_GetVoltageRange>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4619      	mov	r1, r3
 8003e12:	4620      	mov	r0, r4
 8003e14:	f000 f80c 	bl	8003e30 <RCC_SetFlashLatency>
 8003e18:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd90      	pop	{r4, r7, pc}
 8003e22:	bf00      	nop
 8003e24:	08009f50 	.word	0x08009f50
 8003e28:	08009f10 	.word	0x08009f10
 8003e2c:	431bde83 	.word	0x431bde83

08003e30 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b093      	sub	sp, #76	; 0x4c
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003e3a:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <RCC_SetFlashLatency+0xf0>)
 8003e3c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003e46:	4a37      	ldr	r2, [pc, #220]	; (8003f24 <RCC_SetFlashLatency+0xf4>)
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003e52:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <RCC_SetFlashLatency+0xf8>)
 8003e54:	f107 040c 	add.w	r4, r7, #12
 8003e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e5e:	2300      	movs	r3, #0
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e68:	d11c      	bne.n	8003ea4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e6e:	e015      	b.n	8003e9c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e78:	4413      	add	r3, r2
 8003e7a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d808      	bhi.n	8003e96 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e92:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003e94:	e022      	b.n	8003edc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e98:	3301      	adds	r3, #1
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d9e6      	bls.n	8003e70 <RCC_SetFlashLatency+0x40>
 8003ea2:	e01b      	b.n	8003edc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea8:	e015      	b.n	8003ed6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d808      	bhi.n	8003ed0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ecc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ece:	e005      	b.n	8003edc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d9e6      	bls.n	8003eaa <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003edc:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <RCC_SetFlashLatency+0xfc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 0207 	bic.w	r2, r3, #7
 8003ee4:	4911      	ldr	r1, [pc, #68]	; (8003f2c <RCC_SetFlashLatency+0xfc>)
 8003ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003eec:	f7fc fe78 	bl	8000be0 <HAL_GetTick>
 8003ef0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ef2:	e008      	b.n	8003f06 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ef4:	f7fc fe74 	bl	8000be0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e007      	b.n	8003f16 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <RCC_SetFlashLatency+0xfc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1ef      	bne.n	8003ef4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	374c      	adds	r7, #76	; 0x4c
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd90      	pop	{r4, r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	08009e9c 	.word	0x08009e9c
 8003f24:	08009eac 	.word	0x08009eac
 8003f28:	08009eb8 	.word	0x08009eb8
 8003f2c:	58004000 	.word	0x58004000

08003f30 <LL_RCC_LSE_IsEnabled>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <LL_RCC_LSE_IsEnabled+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_RCC_LSE_IsEnabled+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_RCC_LSE_IsReady>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d101      	bne.n	8003f6c <LL_RCC_LSE_IsReady+0x18>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <LL_RCC_LSE_IsReady+0x1a>
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_MSI_EnablePLLMode>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f86:	f043 0304 	orr.w	r3, r3, #4
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_SetRFWKPClockSource>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <LL_RCC_SetSMPSClockSource>:
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	f023 0203 	bic.w	r2, r3, #3
 8003fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_RCC_SetSMPSPrescaler>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4313      	orrs	r3, r2
 8004004:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_RCC_SetUSARTClockSource>:
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <LL_RCC_SetLPUARTClockSource>:
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_RCC_SetI2CClockSource>:
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800408e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_RCC_SetLPTIMClockSource>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0c1b      	lsrs	r3, r3, #16
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	43db      	mvns	r3, r3
 80040bc:	401a      	ands	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_SetSAIClockSource>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <LL_RCC_SetRNGClockSource>:
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800410c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_RCC_SetCLK48ClockSource>:
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_RCC_SetUSBClockSource>:
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ffe3 	bl	8004130 <LL_RCC_SetCLK48ClockSource>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <LL_RCC_SetADCClockSource>:
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_RCC_SetRTCClockSource>:
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_GetRTCClockSource>:
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80041da:	4618      	mov	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_RCC_ForceBackupDomainReset>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <LL_RCC_PLLSAI1_Enable>:
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800422c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004236:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800423a:	6013      	str	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_RCC_PLLSAI1_Disable>:
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004254:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004258:	6013      	str	r3, [r2, #0]
}
 800425a:	bf00      	nop
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_RCC_PLLSAI1_IsReady>:
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004276:	d101      	bne.n	800427c <LL_RCC_PLLSAI1_IsReady+0x18>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004290:	2300      	movs	r3, #0
 8004292:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004294:	2300      	movs	r3, #0
 8004296:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d034      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ac:	d021      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80042ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042b2:	d81b      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b8:	d01d      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80042ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042be:	d815      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c8:	d110      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80042ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80042da:	e00d      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f94d 	bl	8004580 <RCCEx_PLLSAI1_ConfigNP>
 80042e6:	4603      	mov	r3, r0
 80042e8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042ea:	e005      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	77fb      	strb	r3, [r7, #31]
        break;
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f8:	7ffb      	ldrb	r3, [r7, #31]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fee8 	bl	80040d8 <LL_RCC_SetSAIClockSource>
 8004308:	e001      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430a:	7ffb      	ldrb	r3, [r7, #31]
 800430c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004316:	2b00      	cmp	r3, #0
 8004318:	d046      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800431a:	f7ff ff56 	bl	80041ca <LL_RCC_GetRTCClockSource>
 800431e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	429a      	cmp	r2, r3
 8004328:	d03c      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800432a:	f7fe fc71 	bl	8002c10 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff30 	bl	800419e <LL_RCC_SetRTCClockSource>
 800433e:	e02e      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800434a:	f7ff ff4b 	bl	80041e4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800434e:	f7ff ff5a 	bl	8004206 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800436a:	f7ff fde1 	bl	8003f30 <LL_RCC_LSE_IsEnabled>
 800436e:	4603      	mov	r3, r0
 8004370:	2b01      	cmp	r3, #1
 8004372:	d114      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004374:	f7fc fc34 	bl	8000be0 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800437a:	e00b      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fc fc30 	bl	8000be0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d902      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	77fb      	strb	r3, [r7, #31]
              break;
 8004392:	e004      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004394:	f7ff fdde 	bl	8003f54 <LL_RCC_LSE_IsReady>
 8004398:	4603      	mov	r3, r0
 800439a:	2b01      	cmp	r3, #1
 800439c:	d1ee      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800439e:	7ffb      	ldrb	r3, [r7, #31]
 80043a0:	77bb      	strb	r3, [r7, #30]
 80043a2:	e001      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	7ffb      	ldrb	r3, [r7, #31]
 80043a6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fe2a 	bl	8004012 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fe35 	bl	800403e <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fe5d 	bl	80040a4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fe52 	bl	80040a4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fe2a 	bl	800406a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fe1f 	bl	800406a <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d022      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fe8d 	bl	800415c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800444a:	d107      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004464:	d10b      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3304      	adds	r3, #4
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f8e3 	bl	8004636 <RCCEx_PLLSAI1_ConfigNQ>
 8004470:	4603      	mov	r3, r0
 8004472:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004474:	7ffb      	ldrb	r3, [r7, #31]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004486:	2b00      	cmp	r3, #0
 8004488:	d02b      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d008      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449c:	d003      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fe2a 	bl	8004104 <LL_RCC_SetRNGClockSource>
 80044b0:	e00a      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	2000      	movs	r0, #0
 80044be:	f7ff fe21 	bl	8004104 <LL_RCC_SetRNGClockSource>
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff fe34 	bl	8004130 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80044d0:	d107      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d022      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fe3d 	bl	8004172 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004500:	d107      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f8e3 	bl	80046ec <RCCEx_PLLSAI1_ConfigNR>
 8004526:	4603      	mov	r3, r0
 8004528:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800452a:	7ffb      	ldrb	r3, [r7, #31]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004530:	7ffb      	ldrb	r3, [r7, #31]
 8004532:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fd26 	bl	8003f96 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fd45 	bl	8003fea <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fd2c 	bl	8003fc2 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800456a:	7fbb      	ldrb	r3, [r7, #30]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3720      	adds	r7, #32
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004578:	f7ff fcfe 	bl	8003f78 <LL_RCC_MSI_EnablePLLMode>
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}

08004580 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800458c:	f7ff fe5b 	bl	8004246 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004590:	f7fc fb26 	bl	8000be0 <HAL_GetTick>
 8004594:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004596:	e009      	b.n	80045ac <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004598:	f7fc fb22 	bl	8000be0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d902      	bls.n	80045ac <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	73fb      	strb	r3, [r7, #15]
      break;
 80045aa:	e004      	b.n	80045b6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045ac:	f7ff fe5a 	bl	8004264 <LL_RCC_PLLSAI1_IsReady>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d137      	bne.n	800462c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80045bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045d0:	4313      	orrs	r3, r2
 80045d2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80045d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e6:	4313      	orrs	r3, r2
 80045e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045ea:	f7ff fe1d 	bl	8004228 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ee:	f7fc faf7 	bl	8000be0 <HAL_GetTick>
 80045f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045f4:	e009      	b.n	800460a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f6:	f7fc faf3 	bl	8000be0 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d902      	bls.n	800460a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	73fb      	strb	r3, [r7, #15]
        break;
 8004608:	e004      	b.n	8004614 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800460a:	f7ff fe2b 	bl	8004264 <LL_RCC_PLLSAI1_IsReady>
 800460e:	4603      	mov	r3, r0
 8004610:	2b01      	cmp	r3, #1
 8004612:	d1f0      	bne.n	80045f6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004628:	4313      	orrs	r3, r2
 800462a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004642:	f7ff fe00 	bl	8004246 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004646:	f7fc facb 	bl	8000be0 <HAL_GetTick>
 800464a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800464c:	e009      	b.n	8004662 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800464e:	f7fc fac7 	bl	8000be0 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d902      	bls.n	8004662 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e004      	b.n	800466c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004662:	f7ff fdff 	bl	8004264 <LL_RCC_PLLSAI1_IsReady>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d137      	bne.n	80046e2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004686:	4313      	orrs	r3, r2
 8004688:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800468a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800469c:	4313      	orrs	r3, r2
 800469e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80046a0:	f7ff fdc2 	bl	8004228 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a4:	f7fc fa9c 	bl	8000be0 <HAL_GetTick>
 80046a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046aa:	e009      	b.n	80046c0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046ac:	f7fc fa98 	bl	8000be0 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d902      	bls.n	80046c0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	73fb      	strb	r3, [r7, #15]
        break;
 80046be:	e004      	b.n	80046ca <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046c0:	f7ff fdd0 	bl	8004264 <LL_RCC_PLLSAI1_IsReady>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d1f0      	bne.n	80046ac <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d108      	bne.n	80046e2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80046d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046de:	4313      	orrs	r3, r2
 80046e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046f8:	f7ff fda5 	bl	8004246 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046fc:	f7fc fa70 	bl	8000be0 <HAL_GetTick>
 8004700:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004702:	e009      	b.n	8004718 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004704:	f7fc fa6c 	bl	8000be0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d902      	bls.n	8004718 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	73fb      	strb	r3, [r7, #15]
      break;
 8004716:	e004      	b.n	8004722 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004718:	f7ff fda4 	bl	8004264 <LL_RCC_PLLSAI1_IsReady>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d137      	bne.n	8004798 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800473c:	4313      	orrs	r3, r2
 800473e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004752:	4313      	orrs	r3, r2
 8004754:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004756:	f7ff fd67 	bl	8004228 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475a:	f7fc fa41 	bl	8000be0 <HAL_GetTick>
 800475e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004760:	e009      	b.n	8004776 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004762:	f7fc fa3d 	bl	8000be0 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d902      	bls.n	8004776 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	73fb      	strb	r3, [r7, #15]
        break;
 8004774:	e004      	b.n	8004780 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004776:	f7ff fd75 	bl	8004264 <LL_RCC_PLLSAI1_IsReady>
 800477a:	4603      	mov	r3, r0
 800477c:	2b01      	cmp	r3, #1
 800477e:	d1f0      	bne.n	8004762 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004794:	4313      	orrs	r3, r2
 8004796:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e095      	b.n	80048e0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c4:	d009      	beq.n	80047da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	61da      	str	r2, [r3, #28]
 80047cc:	e005      	b.n	80047da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fb ffb7 	bl	8000768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004810:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800481a:	d902      	bls.n	8004822 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e002      	b.n	8004828 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004830:	d007      	beq.n	8004842 <HAL_SPI_Init+0xa0>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800483a:	d002      	beq.n	8004842 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	ea42 0103 	orr.w	r1, r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0204 	and.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048be:	ea42 0103 	orr.w	r1, r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_SPI_Transmit+0x22>
 8004906:	2302      	movs	r3, #2
 8004908:	e158      	b.n	8004bbc <HAL_SPI_Transmit+0x2d4>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004912:	f7fc f965 	bl	8000be0 <HAL_GetTick>
 8004916:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d002      	beq.n	800492e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004928:	2302      	movs	r3, #2
 800492a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800492c:	e13d      	b.n	8004baa <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_Transmit+0x52>
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800493e:	e134      	b.n	8004baa <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2203      	movs	r2, #3
 8004944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498a:	d10f      	bne.n	80049ac <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d007      	beq.n	80049ca <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049d2:	d94b      	bls.n	8004a6c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_SPI_Transmit+0xfa>
 80049dc:	8afb      	ldrh	r3, [r7, #22]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d13e      	bne.n	8004a60 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	881a      	ldrh	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	1c9a      	adds	r2, r3, #2
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a06:	e02b      	b.n	8004a60 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d112      	bne.n	8004a3c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	881a      	ldrh	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	1c9a      	adds	r2, r3, #2
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a3a:	e011      	b.n	8004a60 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a3c:	f7fc f8d0 	bl	8000be0 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d803      	bhi.n	8004a54 <HAL_SPI_Transmit+0x16c>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Transmit+0x172>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a5e:	e0a4      	b.n	8004baa <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ce      	bne.n	8004a08 <HAL_SPI_Transmit+0x120>
 8004a6a:	e07c      	b.n	8004b66 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_Transmit+0x192>
 8004a74:	8afb      	ldrh	r3, [r7, #22]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d170      	bne.n	8004b5c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d912      	bls.n	8004aaa <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	881a      	ldrh	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	1c9a      	adds	r2, r3, #2
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b02      	subs	r3, #2
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa8:	e058      	b.n	8004b5c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ad0:	e044      	b.n	8004b5c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d12b      	bne.n	8004b38 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d912      	bls.n	8004b10 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	881a      	ldrh	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	1c9a      	adds	r2, r3, #2
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b02      	subs	r3, #2
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b0e:	e025      	b.n	8004b5c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b36:	e011      	b.n	8004b5c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b38:	f7fc f852 	bl	8000be0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d803      	bhi.n	8004b50 <HAL_SPI_Transmit+0x268>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d102      	bne.n	8004b56 <HAL_SPI_Transmit+0x26e>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b5a:	e026      	b.n	8004baa <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1b5      	bne.n	8004ad2 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fce4 	bl	8005538 <SPI_EndRxTxTransaction>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e000      	b.n	8004baa <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ba8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be0:	d112      	bne.n	8004c08 <HAL_SPI_Receive+0x44>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10e      	bne.n	8004c08 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2204      	movs	r2, #4
 8004bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f910 	bl	8004e24 <HAL_SPI_TransmitReceive>
 8004c04:	4603      	mov	r3, r0
 8004c06:	e109      	b.n	8004e1c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Receive+0x52>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e102      	b.n	8004e1c <HAL_SPI_Receive+0x258>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1e:	f7fb ffdf 	bl	8000be0 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
 8004c32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c34:	e0e9      	b.n	8004e0a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_SPI_Receive+0x7e>
 8004c3c:	88fb      	ldrh	r3, [r7, #6]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c46:	e0e0      	b.n	8004e0a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c92:	d908      	bls.n	8004ca6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	e007      	b.n	8004cb6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cb4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbe:	d10f      	bne.n	8004ce0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cde:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d007      	beq.n	8004cfe <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d06:	d867      	bhi.n	8004dd8 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d08:	e030      	b.n	8004d6c <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d117      	bne.n	8004d48 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f103 020c 	add.w	r2, r3, #12
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	7812      	ldrb	r2, [r2, #0]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d46:	e011      	b.n	8004d6c <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d48:	f7fb ff4a 	bl	8000be0 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d803      	bhi.n	8004d60 <HAL_SPI_Receive+0x19c>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_Receive+0x1a2>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d6a:	e04e      	b.n	8004e0a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1c8      	bne.n	8004d0a <HAL_SPI_Receive+0x146>
 8004d78:	e034      	b.n	8004de4 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d115      	bne.n	8004db4 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	b292      	uxth	r2, r2
 8004d94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004db2:	e011      	b.n	8004dd8 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004db4:	f7fb ff14 	bl	8000be0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d803      	bhi.n	8004dcc <HAL_SPI_Receive+0x208>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d102      	bne.n	8004dd2 <HAL_SPI_Receive+0x20e>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dd6:	e018      	b.n	8004e0a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ca      	bne.n	8004d7a <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fb4d 	bl	8005488 <SPI_EndRxTransaction>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
 8004e06:	e000      	b.n	8004e0a <HAL_SPI_Receive+0x246>
  }

error :
 8004e08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e32:	2301      	movs	r3, #1
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x26>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e1fb      	b.n	8005242 <HAL_SPI_TransmitReceive+0x41e>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e52:	f7fb fec5 	bl	8000be0 <HAL_GetTick>
 8004e56:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e5e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e6a:	887b      	ldrh	r3, [r7, #2]
 8004e6c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e6e:	7efb      	ldrb	r3, [r7, #27]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d00e      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x6e>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7a:	d106      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x66>
 8004e84:	7efb      	ldrb	r3, [r7, #27]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e90:	e1cd      	b.n	800522e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_SPI_TransmitReceive+0x80>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_TransmitReceive+0x80>
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004eaa:	e1c0      	b.n	800522e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d003      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2205      	movs	r2, #5
 8004ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	887a      	ldrh	r2, [r7, #2]
 8004ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	887a      	ldrh	r2, [r7, #2]
 8004ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f02:	d802      	bhi.n	8004f0a <HAL_SPI_TransmitReceive+0xe6>
 8004f04:	8a3b      	ldrh	r3, [r7, #16]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d908      	bls.n	8004f1c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e007      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d007      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f52:	d97c      	bls.n	800504e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_SPI_TransmitReceive+0x13e>
 8004f5c:	8a7b      	ldrh	r3, [r7, #18]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d169      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	881a      	ldrh	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f86:	e056      	b.n	8005036 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d11b      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x1aa>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d016      	beq.n	8004fce <HAL_SPI_TransmitReceive+0x1aa>
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d113      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	1c9a      	adds	r2, r3, #2
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d11c      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x1f2>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d016      	beq.n	8005016 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	b292      	uxth	r2, r2
 8004ff4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	1c9a      	adds	r2, r3, #2
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005012:	2301      	movs	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005016:	f7fb fde3 	bl	8000be0 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005022:	429a      	cmp	r2, r3
 8005024:	d807      	bhi.n	8005036 <HAL_SPI_TransmitReceive+0x212>
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d003      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005034:	e0fb      	b.n	800522e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1a3      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x164>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d19d      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x164>
 800504c:	e0df      	b.n	800520e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_SPI_TransmitReceive+0x23a>
 8005056:	8a7b      	ldrh	r3, [r7, #18]
 8005058:	2b01      	cmp	r3, #1
 800505a:	f040 80cb 	bne.w	80051f4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d912      	bls.n	800508e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	881a      	ldrh	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	1c9a      	adds	r2, r3, #2
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b02      	subs	r3, #2
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800508c:	e0b2      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b4:	e09e      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d134      	bne.n	800512e <HAL_SPI_TransmitReceive+0x30a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02f      	beq.n	800512e <HAL_SPI_TransmitReceive+0x30a>
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d12c      	bne.n	800512e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d912      	bls.n	8005104 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	1c9a      	adds	r2, r3, #2
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b02      	subs	r3, #2
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005102:	e012      	b.n	800512a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	7812      	ldrb	r2, [r2, #0]
 8005110:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d148      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x3aa>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d042      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d923      	bls.n	800519c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	b292      	uxth	r2, r2
 8005160:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b02      	subs	r3, #2
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d81f      	bhi.n	80051ca <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	e016      	b.n	80051ca <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f103 020c 	add.w	r2, r3, #12
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	7812      	ldrb	r2, [r2, #0]
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ca:	2301      	movs	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051ce:	f7fb fd07 	bl	8000be0 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	429a      	cmp	r2, r3
 80051dc:	d803      	bhi.n	80051e6 <HAL_SPI_TransmitReceive+0x3c2>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d102      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x3c8>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051f2:	e01c      	b.n	800522e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f47f af5b 	bne.w	80050b6 <HAL_SPI_TransmitReceive+0x292>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	f47f af54 	bne.w	80050b6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f990 	bl	8005538 <SPI_EndRxTxTransaction>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d006      	beq.n	800522c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	661a      	str	r2, [r3, #96]	; 0x60
 800522a:	e000      	b.n	800522e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800522c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800523e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005242:	4618      	mov	r0, r3
 8005244:	3728      	adds	r7, #40	; 0x28
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800525c:	f7fb fcc0 	bl	8000be0 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	4413      	add	r3, r2
 800526a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800526c:	f7fb fcb8 	bl	8000be0 <HAL_GetTick>
 8005270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005272:	4b39      	ldr	r3, [pc, #228]	; (8005358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	015b      	lsls	r3, r3, #5
 8005278:	0d1b      	lsrs	r3, r3, #20
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005282:	e054      	b.n	800532e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d050      	beq.n	800532e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800528c:	f7fb fca8 	bl	8000be0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	429a      	cmp	r2, r3
 800529a:	d902      	bls.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d13d      	bne.n	800531e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ba:	d111      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c4:	d004      	beq.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ce:	d107      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e8:	d10f      	bne.n	800530a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e017      	b.n	800534e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	3b01      	subs	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d19b      	bne.n	8005284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000004 	.word	0x20000004

0800535c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	; 0x28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800536e:	f7fb fc37 	bl	8000be0 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	4413      	add	r3, r2
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800537e:	f7fb fc2f 	bl	8000be0 <HAL_GetTick>
 8005382:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800538c:	4b3d      	ldr	r3, [pc, #244]	; (8005484 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	00da      	lsls	r2, r3, #3
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	0d1b      	lsrs	r3, r3, #20
 800539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053a4:	e060      	b.n	8005468 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053ac:	d107      	bne.n	80053be <SPI_WaitFifoStateUntilTimeout+0x62>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d050      	beq.n	8005468 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053c6:	f7fb fc0b 	bl	8000be0 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d902      	bls.n	80053dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d13d      	bne.n	8005458 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f4:	d111      	bne.n	800541a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fe:	d004      	beq.n	800540a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	d107      	bne.n	800541a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005418:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005422:	d10f      	bne.n	8005444 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005442:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e010      	b.n	800547a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	3b01      	subs	r3, #1
 8005466:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	d196      	bne.n	80053a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3728      	adds	r7, #40	; 0x28
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000004 	.word	0x20000004

08005488 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549c:	d111      	bne.n	80054c2 <SPI_EndRxTransaction+0x3a>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a6:	d004      	beq.n	80054b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d107      	bne.n	80054c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2180      	movs	r1, #128	; 0x80
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff febd 	bl	800524c <SPI_WaitFlagStateUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d007      	beq.n	80054e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e023      	b.n	8005530 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f0:	d11d      	bne.n	800552e <SPI_EndRxTransaction+0xa6>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fa:	d004      	beq.n	8005506 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d113      	bne.n	800552e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2200      	movs	r2, #0
 800550e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7ff ff22 	bl	800535c <SPI_WaitFifoStateUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e000      	b.n	8005530 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2200      	movs	r2, #0
 800554c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff ff03 	bl	800535c <SPI_WaitFifoStateUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e027      	b.n	80055bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2200      	movs	r2, #0
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff fe68 	bl	800524c <SPI_WaitFlagStateUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e014      	b.n	80055bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff fedc 	bl	800535c <SPI_WaitFifoStateUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e000      	b.n	80055bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e097      	b.n	8005708 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fb fa21 	bl	8000a34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005608:	f023 0307 	bic.w	r3, r3, #7
 800560c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3304      	adds	r3, #4
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 f907 	bl	800582c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	4313      	orrs	r3, r2
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005664:	f023 030c 	bic.w	r3, r3, #12
 8005668:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	4313      	orrs	r3, r2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	011a      	lsls	r2, r3, #4
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	031b      	lsls	r3, r3, #12
 8005694:	4313      	orrs	r3, r2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	4313      	orrs	r3, r2
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005720:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005728:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005730:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005738:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d110      	bne.n	8005762 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d102      	bne.n	800574c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005746:	7b7b      	ldrb	r3, [r7, #13]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d001      	beq.n	8005750 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e069      	b.n	8005824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005760:	e031      	b.n	80057c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b04      	cmp	r3, #4
 8005766:	d110      	bne.n	800578a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005768:	7bbb      	ldrb	r3, [r7, #14]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d102      	bne.n	8005774 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800576e:	7b3b      	ldrb	r3, [r7, #12]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d001      	beq.n	8005778 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e055      	b.n	8005824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005788:	e01d      	b.n	80057c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d108      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d105      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005796:	7b7b      	ldrb	r3, [r7, #13]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d102      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800579c:	7b3b      	ldrb	r3, [r7, #12]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d001      	beq.n	80057a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e03e      	b.n	8005824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_TIM_Encoder_Start+0xc4>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d008      	beq.n	80057e4 <HAL_TIM_Encoder_Start+0xd4>
 80057d2:	e00f      	b.n	80057f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f889 	bl	80058f4 <TIM_CCxChannelCmd>
      break;
 80057e2:	e016      	b.n	8005812 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2201      	movs	r2, #1
 80057ea:	2104      	movs	r1, #4
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 f881 	bl	80058f4 <TIM_CCxChannelCmd>
      break;
 80057f2:	e00e      	b.n	8005812 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2201      	movs	r2, #1
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 f879 	bl	80058f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	2104      	movs	r1, #4
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f872 	bl	80058f4 <TIM_CCxChannelCmd>
      break;
 8005810:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <TIM_Base_SetConfig+0xbc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_Base_SetConfig+0x20>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	d108      	bne.n	800585e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a21      	ldr	r2, [pc, #132]	; (80058e8 <TIM_Base_SetConfig+0xbc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00b      	beq.n	800587e <TIM_Base_SetConfig+0x52>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586c:	d007      	beq.n	800587e <TIM_Base_SetConfig+0x52>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1e      	ldr	r2, [pc, #120]	; (80058ec <TIM_Base_SetConfig+0xc0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_Base_SetConfig+0x52>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <TIM_Base_SetConfig+0xc4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d108      	bne.n	8005890 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <TIM_Base_SetConfig+0xbc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0xa0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a0b      	ldr	r2, [pc, #44]	; (80058ec <TIM_Base_SetConfig+0xc0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0xa0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <TIM_Base_SetConfig+0xc4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d103      	bne.n	80058d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	615a      	str	r2, [r3, #20]
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40014400 	.word	0x40014400
 80058f0:	40014800 	.word	0x40014800

080058f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 031f 	and.w	r3, r3, #31
 8005906:	2201      	movs	r2, #1
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1a      	ldr	r2, [r3, #32]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	43db      	mvns	r3, r3
 8005916:	401a      	ands	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	fa01 f303 	lsl.w	r3, r1, r3
 800592c:	431a      	orrs	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005954:	2302      	movs	r3, #2
 8005956:	e04a      	b.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1f      	ldr	r2, [pc, #124]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d108      	bne.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005988:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c0:	d10c      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40012c00 	.word	0x40012c00

08005a00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a10:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a36:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a64:	b084      	sub	sp, #16
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	f107 0014 	add.w	r0, r7, #20
 8005a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	b004      	add	sp, #16
 8005aa4:	4770      	bx	lr
	...

08005aa8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b09d      	sub	sp, #116	; 0x74
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	78db      	ldrb	r3, [r3, #3]
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d81f      	bhi.n	8005b1a <USB_ActivateEndpoint+0x72>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <USB_ActivateEndpoint+0x38>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005b0d 	.word	0x08005b0d
 8005ae8:	08005b23 	.word	0x08005b23
 8005aec:	08005aff 	.word	0x08005aff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005af0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005af8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005afc:	e012      	b.n	8005b24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005afe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005b0a:	e00b      	b.n	8005b24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005b18:	e004      	b.n	8005b24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005b20:	e000      	b.n	8005b24 <USB_ActivateEndpoint+0x7c>
      break;
 8005b22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	441a      	add	r2, r3
 8005b2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	b21b      	sxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	b21a      	sxth	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	b21b      	sxth	r3, r3
 8005b66:	4313      	orrs	r3, r2
 8005b68:	b21b      	sxth	r3, r3
 8005b6a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	441a      	add	r2, r3
 8005b78:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	7b1b      	ldrb	r3, [r3, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 8149 	bne.w	8005e2c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8084 	beq.w	8005cac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	00da      	lsls	r2, r3, #3
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	88db      	ldrh	r3, [r3, #6]
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	827b      	strh	r3, [r7, #18]
 8005be6:	8a7b      	ldrh	r3, [r7, #18]
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <USB_ActivateEndpoint+0x180>
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	823b      	strh	r3, [r7, #16]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	8a3b      	ldrh	r3, [r7, #16]
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	78db      	ldrb	r3, [r3, #3]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d020      	beq.n	8005c72 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c46:	81bb      	strh	r3, [r7, #12]
 8005c48:	89bb      	ldrh	r3, [r7, #12]
 8005c4a:	f083 0320 	eor.w	r3, r3, #32
 8005c4e:	81bb      	strh	r3, [r7, #12]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	89bb      	ldrh	r3, [r7, #12]
 8005c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	8013      	strh	r3, [r2, #0]
 8005c70:	e2a6      	b.n	80061c0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c88:	81fb      	strh	r3, [r7, #14]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	441a      	add	r2, r3
 8005c94:	89fb      	ldrh	r3, [r7, #14]
 8005c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8013      	strh	r3, [r2, #0]
 8005caa:	e289      	b.n	80061c0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	4413      	add	r3, r2
 8005cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	00da      	lsls	r2, r3, #3
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	4413      	add	r3, r2
 8005cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	88db      	ldrh	r3, [r3, #6]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	4413      	add	r3, r2
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	00da      	lsls	r2, r3, #3
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b3e      	cmp	r3, #62	; 0x3e
 8005d0a:	d918      	bls.n	8005d3e <USB_ActivateEndpoint+0x296>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <USB_ActivateEndpoint+0x27e>
 8005d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d22:	3b01      	subs	r3, #1
 8005d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	029b      	lsls	r3, r3, #10
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e029      	b.n	8005d92 <USB_ActivateEndpoint+0x2ea>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d112      	bne.n	8005d6c <USB_ActivateEndpoint+0x2c4>
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e012      	b.n	8005d92 <USB_ActivateEndpoint+0x2ea>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <USB_ActivateEndpoint+0x2de>
 8005d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d82:	3301      	adds	r3, #1
 8005d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	029b      	lsls	r3, r3, #10
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01b      	beq.n	8005de2 <USB_ActivateEndpoint+0x33a>
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc0:	843b      	strh	r3, [r7, #32]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	8c3b      	ldrh	r3, [r7, #32]
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	83fb      	strh	r3, [r7, #30]
 8005dfa:	8bfb      	ldrh	r3, [r7, #30]
 8005dfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e00:	83fb      	strh	r3, [r7, #30]
 8005e02:	8bfb      	ldrh	r3, [r7, #30]
 8005e04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e08:	83fb      	strh	r3, [r7, #30]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	441a      	add	r2, r3
 8005e14:	8bfb      	ldrh	r3, [r7, #30]
 8005e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	8013      	strh	r3, [r2, #0]
 8005e2a:	e1c9      	b.n	80061c0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	78db      	ldrb	r3, [r3, #3]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d11e      	bne.n	8005e72 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]
 8005e70:	e01d      	b.n	8005eae <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e88:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	441a      	add	r2, r3
 8005e96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ebe:	4413      	add	r3, r2
 8005ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	00da      	lsls	r2, r3, #3
 8005ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	891b      	ldrh	r3, [r3, #8]
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef2:	4413      	add	r3, r2
 8005ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	00da      	lsls	r2, r3, #3
 8005efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efe:	4413      	add	r3, r2
 8005f00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	895b      	ldrh	r3, [r3, #10]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f14:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 8093 	bne.w	8006046 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01b      	beq.n	8005f74 <USB_ActivateEndpoint+0x4cc>
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f52:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01b      	beq.n	8005fc4 <USB_ActivateEndpoint+0x51c>
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fe2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fe4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fe6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fea:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	441a      	add	r2, r3
 8005ff6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006022:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006040:	b29b      	uxth	r3, r3
 8006042:	8013      	strh	r3, [r2, #0]
 8006044:	e0bc      	b.n	80061c0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006056:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800605a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01d      	beq.n	800609e <USB_ActivateEndpoint+0x5f6>
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006078:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01d      	beq.n	80060f6 <USB_ActivateEndpoint+0x64e>
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	78db      	ldrb	r3, [r3, #3]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d024      	beq.n	8006148 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006114:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006118:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800611c:	f083 0320 	eor.w	r3, r3, #32
 8006120:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]
 8006146:	e01d      	b.n	8006184 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006180:	b29b      	uxth	r3, r3
 8006182:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80061c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3774      	adds	r7, #116	; 0x74
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b08d      	sub	sp, #52	; 0x34
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	7b1b      	ldrb	r3, [r3, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f040 808e 	bne.w	8006300 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d044      	beq.n	8006276 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	81bb      	strh	r3, [r7, #12]
 80061fa:	89bb      	ldrh	r3, [r7, #12]
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01b      	beq.n	800623c <USB_DeactivateEndpoint+0x6c>
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	817b      	strh	r3, [r7, #10]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	897b      	ldrh	r3, [r7, #10]
 8006228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006234:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006238:	b29b      	uxth	r3, r3
 800623a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006252:	813b      	strh	r3, [r7, #8]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	893b      	ldrh	r3, [r7, #8]
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]
 8006274:	e192      	b.n	800659c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	827b      	strh	r3, [r7, #18]
 8006284:	8a7b      	ldrh	r3, [r7, #18]
 8006286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d01b      	beq.n	80062c6 <USB_DeactivateEndpoint+0xf6>
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	823b      	strh	r3, [r7, #16]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	8a3b      	ldrh	r3, [r7, #16]
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062dc:	81fb      	strh	r3, [r7, #14]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	89fb      	ldrh	r3, [r7, #14]
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]
 80062fe:	e14d      	b.n	800659c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 80a5 	bne.w	8006454 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	843b      	strh	r3, [r7, #32]
 8006318:	8c3b      	ldrh	r3, [r7, #32]
 800631a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01b      	beq.n	800635a <USB_DeactivateEndpoint+0x18a>
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	83fb      	strh	r3, [r7, #30]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	8bfb      	ldrh	r3, [r7, #30]
 8006346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006356:	b29b      	uxth	r3, r3
 8006358:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	83bb      	strh	r3, [r7, #28]
 8006368:	8bbb      	ldrh	r3, [r7, #28]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01b      	beq.n	80063aa <USB_DeactivateEndpoint+0x1da>
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006388:	837b      	strh	r3, [r7, #26]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	8b7b      	ldrh	r3, [r7, #26]
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c0:	833b      	strh	r3, [r7, #24]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	8b3b      	ldrh	r3, [r7, #24]
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f8:	82fb      	strh	r3, [r7, #22]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	8afb      	ldrh	r3, [r7, #22]
 8006406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006430:	82bb      	strh	r3, [r7, #20]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	8abb      	ldrh	r3, [r7, #20]
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
 8006452:	e0a3      	b.n	800659c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01b      	beq.n	80064a4 <USB_DeactivateEndpoint+0x2d4>
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800649c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80064b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <USB_DeactivateEndpoint+0x324>
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006542:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006560:	b29b      	uxth	r3, r3
 8006562:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657a:	847b      	strh	r3, [r7, #34]	; 0x22
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	441a      	add	r2, r3
 8006586:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	b29b      	uxth	r3, r3
 800659a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3734      	adds	r7, #52	; 0x34
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b0c2      	sub	sp, #264	; 0x108
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	1d3b      	adds	r3, r7, #4
 80065b2:	6018      	str	r0, [r3, #0]
 80065b4:	463b      	mov	r3, r7
 80065b6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065b8:	463b      	mov	r3, r7
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	f040 8509 	bne.w	8006fd6 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d905      	bls.n	80065e0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065de:	e004      	b.n	80065ea <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065ea:	463b      	mov	r3, r7
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	7b1b      	ldrb	r3, [r3, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d128      	bne.n	8006646 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065f4:	463b      	mov	r3, r7
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6959      	ldr	r1, [r3, #20]
 80065fa:	463b      	mov	r3, r7
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	88da      	ldrh	r2, [r3, #6]
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006604:	b29b      	uxth	r3, r3
 8006606:	1d38      	adds	r0, r7, #4
 8006608:	6800      	ldr	r0, [r0, #0]
 800660a:	f001 f9da 	bl	80079c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661c:	b29b      	uxth	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	463b      	mov	r3, r7
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	00da      	lsls	r2, r3, #3
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	f000 bc9f 	b.w	8006f84 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	78db      	ldrb	r3, [r3, #3]
 800664c:	2b02      	cmp	r3, #2
 800664e:	f040 8347 	bne.w	8006ce0 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	f240 82eb 	bls.w	8006c3a <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006664:	1d3b      	adds	r3, r7, #4
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	463b      	mov	r3, r7
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006682:	1d3b      	adds	r3, r7, #4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	441a      	add	r2, r3
 8006690:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b2:	1ad2      	subs	r2, r2, r3
 80066b4:	463b      	mov	r3, r7
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066ba:	1d3b      	adds	r3, r7, #4
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	463b      	mov	r3, r7
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8159 	beq.w	8006988 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	633b      	str	r3, [r7, #48]	; 0x30
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d164      	bne.n	80067b0 <USB_EPStartXfer+0x206>
 80066e6:	1d3b      	adds	r3, r7, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ec:	1d3b      	adds	r3, r7, #4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	4413      	add	r3, r2
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	00da      	lsls	r2, r3, #3
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	4413      	add	r3, r2
 800670a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
 8006710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006714:	2b3e      	cmp	r3, #62	; 0x3e
 8006716:	d91c      	bls.n	8006752 <USB_EPStartXfer+0x1a8>
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <USB_EPStartXfer+0x18e>
 800672e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006732:	3b01      	subs	r3, #1
 8006734:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006738:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800673c:	b29b      	uxth	r3, r3
 800673e:	029b      	lsls	r3, r3, #10
 8006740:	b29b      	uxth	r3, r3
 8006742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674a:	b29a      	uxth	r2, r3
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	e04a      	b.n	80067e8 <USB_EPStartXfer+0x23e>
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006756:	2b00      	cmp	r3, #0
 8006758:	d112      	bne.n	8006780 <USB_EPStartXfer+0x1d6>
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006764:	b29a      	uxth	r2, r3
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006778:	b29a      	uxth	r2, r3
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	801a      	strh	r2, [r3, #0]
 800677e:	e033      	b.n	80067e8 <USB_EPStartXfer+0x23e>
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <USB_EPStartXfer+0x1f6>
 8006796:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800679a:	3301      	adds	r3, #1
 800679c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	029b      	lsls	r3, r3, #10
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	e01b      	b.n	80067e8 <USB_EPStartXfer+0x23e>
 80067b0:	463b      	mov	r3, r7
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d116      	bne.n	80067e8 <USB_EPStartXfer+0x23e>
 80067ba:	1d3b      	adds	r3, r7, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	4413      	add	r3, r2
 80067ca:	633b      	str	r3, [r7, #48]	; 0x30
 80067cc:	463b      	mov	r3, r7
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	00da      	lsls	r2, r3, #3
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	4413      	add	r3, r2
 80067d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	895b      	ldrh	r3, [r3, #10]
 80067ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6959      	ldr	r1, [r3, #20]
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006802:	1d38      	adds	r0, r7, #4
 8006804:	6800      	ldr	r0, [r0, #0]
 8006806:	f001 f8dc 	bl	80079c2 <USB_WritePMA>
            ep->xfer_buff += len;
 800680a:	463b      	mov	r3, r7
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006814:	441a      	add	r2, r3
 8006816:	463b      	mov	r3, r7
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6a1a      	ldr	r2, [r3, #32]
 8006822:	463b      	mov	r3, r7
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	429a      	cmp	r2, r3
 800682a:	d909      	bls.n	8006840 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6a1a      	ldr	r2, [r3, #32]
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	463b      	mov	r3, r7
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	621a      	str	r2, [r3, #32]
 800683e:	e008      	b.n	8006852 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8006840:	463b      	mov	r3, r7
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800684a:	463b      	mov	r3, r7
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2200      	movs	r2, #0
 8006850:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006852:	463b      	mov	r3, r7
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d164      	bne.n	8006926 <USB_EPStartXfer+0x37c>
 800685c:	1d3b      	adds	r3, r7, #4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	1d3b      	adds	r3, r7, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800686a:	b29b      	uxth	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4413      	add	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	00da      	lsls	r2, r3, #3
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	4413      	add	r3, r2
 8006880:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688a:	2b3e      	cmp	r3, #62	; 0x3e
 800688c:	d91c      	bls.n	80068c8 <USB_EPStartXfer+0x31e>
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <USB_EPStartXfer+0x304>
 80068a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a8:	3b01      	subs	r3, #1
 80068aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	029b      	lsls	r3, r3, #10
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	e04d      	b.n	8006964 <USB_EPStartXfer+0x3ba>
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d112      	bne.n	80068f6 <USB_EPStartXfer+0x34c>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068da:	b29a      	uxth	r2, r3
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e036      	b.n	8006964 <USB_EPStartXfer+0x3ba>
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <USB_EPStartXfer+0x36c>
 800690c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006910:	3301      	adds	r3, #1
 8006912:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691a:	b29b      	uxth	r3, r3
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	b29a      	uxth	r2, r3
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e01e      	b.n	8006964 <USB_EPStartXfer+0x3ba>
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d119      	bne.n	8006964 <USB_EPStartXfer+0x3ba>
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	623b      	str	r3, [r7, #32]
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	4413      	add	r3, r2
 8006946:	623b      	str	r3, [r7, #32]
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	00da      	lsls	r2, r3, #3
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	4413      	add	r3, r2
 8006954:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695e:	b29a      	uxth	r2, r3
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	891b      	ldrh	r3, [r3, #8]
 800696a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800696e:	463b      	mov	r3, r7
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6959      	ldr	r1, [r3, #20]
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006978:	b29b      	uxth	r3, r3
 800697a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800697e:	1d38      	adds	r0, r7, #4
 8006980:	6800      	ldr	r0, [r0, #0]
 8006982:	f001 f81e 	bl	80079c2 <USB_WritePMA>
 8006986:	e2fd      	b.n	8006f84 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006988:	463b      	mov	r3, r7
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d164      	bne.n	8006a5c <USB_EPStartXfer+0x4b2>
 8006992:	1d3b      	adds	r3, r7, #4
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	64bb      	str	r3, [r7, #72]	; 0x48
 8006998:	1d3b      	adds	r3, r7, #4
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a6:	4413      	add	r3, r2
 80069a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069aa:	463b      	mov	r3, r7
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	00da      	lsls	r2, r3, #3
 80069b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b4:	4413      	add	r3, r2
 80069b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069ba:	647b      	str	r3, [r7, #68]	; 0x44
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c0:	2b3e      	cmp	r3, #62	; 0x3e
 80069c2:	d91c      	bls.n	80069fe <USB_EPStartXfer+0x454>
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <USB_EPStartXfer+0x43a>
 80069da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069de:	3b01      	subs	r3, #1
 80069e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	029b      	lsls	r3, r3, #10
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fa:	801a      	strh	r2, [r3, #0]
 80069fc:	e04d      	b.n	8006a9a <USB_EPStartXfer+0x4f0>
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d112      	bne.n	8006a2c <USB_EPStartXfer+0x482>
 8006a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e036      	b.n	8006a9a <USB_EPStartXfer+0x4f0>
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <USB_EPStartXfer+0x4a2>
 8006a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a46:	3301      	adds	r3, #1
 8006a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	029b      	lsls	r3, r3, #10
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	e01e      	b.n	8006a9a <USB_EPStartXfer+0x4f0>
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	785b      	ldrb	r3, [r3, #1]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d119      	bne.n	8006a9a <USB_EPStartXfer+0x4f0>
 8006a66:	1d3b      	adds	r3, r7, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a6c:	1d3b      	adds	r3, r7, #4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7a:	4413      	add	r3, r2
 8006a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a7e:	463b      	mov	r3, r7
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	00da      	lsls	r2, r3, #3
 8006a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a88:	4413      	add	r3, r2
 8006a8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	891b      	ldrh	r3, [r3, #8]
 8006aa0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6959      	ldr	r1, [r3, #20]
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ab4:	1d38      	adds	r0, r7, #4
 8006ab6:	6800      	ldr	r0, [r0, #0]
 8006ab8:	f000 ff83 	bl	80079c2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006abc:	463b      	mov	r3, r7
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695a      	ldr	r2, [r3, #20]
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac6:	441a      	add	r2, r3
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d909      	bls.n	8006af2 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8006ade:	463b      	mov	r3, r7
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6a1a      	ldr	r2, [r3, #32]
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae8:	1ad2      	subs	r2, r2, r3
 8006aea:	463b      	mov	r3, r7
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	621a      	str	r2, [r3, #32]
 8006af0:	e008      	b.n	8006b04 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006af2:	463b      	mov	r3, r7
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006afc:	463b      	mov	r3, r7
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2200      	movs	r2, #0
 8006b02:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	643b      	str	r3, [r7, #64]	; 0x40
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d164      	bne.n	8006bde <USB_EPStartXfer+0x634>
 8006b14:	1d3b      	adds	r3, r7, #4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	4413      	add	r3, r2
 8006b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	00da      	lsls	r2, r3, #3
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	4413      	add	r3, r2
 8006b38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b42:	2b3e      	cmp	r3, #62	; 0x3e
 8006b44:	d91c      	bls.n	8006b80 <USB_EPStartXfer+0x5d6>
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <USB_EPStartXfer+0x5bc>
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	3b01      	subs	r3, #1
 8006b62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	801a      	strh	r2, [r3, #0]
 8006b7e:	e04a      	b.n	8006c16 <USB_EPStartXfer+0x66c>
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d112      	bne.n	8006bae <USB_EPStartXfer+0x604>
 8006b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	801a      	strh	r2, [r3, #0]
 8006bac:	e033      	b.n	8006c16 <USB_EPStartXfer+0x66c>
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d004      	beq.n	8006bce <USB_EPStartXfer+0x624>
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	3301      	adds	r3, #1
 8006bca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	e01b      	b.n	8006c16 <USB_EPStartXfer+0x66c>
 8006bde:	463b      	mov	r3, r7
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d116      	bne.n	8006c16 <USB_EPStartXfer+0x66c>
 8006be8:	1d3b      	adds	r3, r7, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf6:	4413      	add	r3, r2
 8006bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	00da      	lsls	r2, r3, #3
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	4413      	add	r3, r2
 8006c06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c16:	463b      	mov	r3, r7
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	895b      	ldrh	r3, [r3, #10]
 8006c1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c20:	463b      	mov	r3, r7
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6959      	ldr	r1, [r3, #20]
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c30:	1d38      	adds	r0, r7, #4
 8006c32:	6800      	ldr	r0, [r0, #0]
 8006c34:	f000 fec5 	bl	80079c2 <USB_WritePMA>
 8006c38:	e1a4      	b.n	8006f84 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c3a:	463b      	mov	r3, r7
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c44:	1d3b      	adds	r3, r7, #4
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	463b      	mov	r3, r7
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c62:	1d3b      	adds	r3, r7, #4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	463b      	mov	r3, r7
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8e:	1d3b      	adds	r3, r7, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9c:	4413      	add	r3, r2
 8006c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca0:	463b      	mov	r3, r7
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	00da      	lsls	r2, r3, #3
 8006ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	891b      	ldrh	r3, [r3, #8]
 8006cc2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6959      	ldr	r1, [r3, #20]
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cd6:	1d38      	adds	r0, r7, #4
 8006cd8:	6800      	ldr	r0, [r0, #0]
 8006cda:	f000 fe72 	bl	80079c2 <USB_WritePMA>
 8006cde:	e151      	b.n	8006f84 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6a1a      	ldr	r2, [r3, #32]
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cf2:	1d3b      	adds	r3, r7, #4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 809b 	beq.w	8006e44 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	673b      	str	r3, [r7, #112]	; 0x70
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d164      	bne.n	8006de8 <USB_EPStartXfer+0x83e>
 8006d1e:	1d3b      	adds	r3, r7, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d32:	4413      	add	r3, r2
 8006d34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d36:	463b      	mov	r3, r7
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	00da      	lsls	r2, r3, #3
 8006d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d40:	4413      	add	r3, r2
 8006d42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d46:	667b      	str	r3, [r7, #100]	; 0x64
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4e:	d91c      	bls.n	8006d8a <USB_EPStartXfer+0x7e0>
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <USB_EPStartXfer+0x7c6>
 8006d66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	029b      	lsls	r3, r3, #10
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	e04a      	b.n	8006e20 <USB_EPStartXfer+0x876>
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d112      	bne.n	8006db8 <USB_EPStartXfer+0x80e>
 8006d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da0:	801a      	strh	r2, [r3, #0]
 8006da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db4:	801a      	strh	r2, [r3, #0]
 8006db6:	e033      	b.n	8006e20 <USB_EPStartXfer+0x876>
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbc:	085b      	lsrs	r3, r3, #1
 8006dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <USB_EPStartXfer+0x82e>
 8006dce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	e01b      	b.n	8006e20 <USB_EPStartXfer+0x876>
 8006de8:	463b      	mov	r3, r7
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d116      	bne.n	8006e20 <USB_EPStartXfer+0x876>
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e00:	4413      	add	r3, r2
 8006e02:	673b      	str	r3, [r7, #112]	; 0x70
 8006e04:	463b      	mov	r3, r7
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	00da      	lsls	r2, r3, #3
 8006e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e0e:	4413      	add	r3, r2
 8006e10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e20:	463b      	mov	r3, r7
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	895b      	ldrh	r3, [r3, #10]
 8006e26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6959      	ldr	r1, [r3, #20]
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e3a:	1d38      	adds	r0, r7, #4
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f000 fdc0 	bl	80079c2 <USB_WritePMA>
 8006e42:	e09f      	b.n	8006f84 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e44:	463b      	mov	r3, r7
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d164      	bne.n	8006f18 <USB_EPStartXfer+0x96e>
 8006e4e:	1d3b      	adds	r3, r7, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e54:	1d3b      	adds	r3, r7, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e62:	4413      	add	r3, r2
 8006e64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e66:	463b      	mov	r3, r7
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00da      	lsls	r2, r3, #3
 8006e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e70:	4413      	add	r3, r2
 8006e72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e76:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7e:	d91c      	bls.n	8006eba <USB_EPStartXfer+0x910>
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8e:	f003 031f 	and.w	r3, r3, #31
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <USB_EPStartXfer+0x8f6>
 8006e96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ea0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	029b      	lsls	r3, r3, #10
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	e053      	b.n	8006f62 <USB_EPStartXfer+0x9b8>
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d112      	bne.n	8006ee8 <USB_EPStartXfer+0x93e>
 8006ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed0:	801a      	strh	r2, [r3, #0]
 8006ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	e03c      	b.n	8006f62 <USB_EPStartXfer+0x9b8>
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eec:	085b      	lsrs	r3, r3, #1
 8006eee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <USB_EPStartXfer+0x95e>
 8006efe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f02:	3301      	adds	r3, #1
 8006f04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	029b      	lsls	r3, r3, #10
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	e024      	b.n	8006f62 <USB_EPStartXfer+0x9b8>
 8006f18:	463b      	mov	r3, r7
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d11f      	bne.n	8006f62 <USB_EPStartXfer+0x9b8>
 8006f22:	1d3b      	adds	r3, r7, #4
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f40:	463b      	mov	r3, r7
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	00da      	lsls	r2, r3, #3
 8006f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f62:	463b      	mov	r3, r7
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	891b      	ldrh	r3, [r3, #8]
 8006f68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6959      	ldr	r1, [r3, #20]
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f7c:	1d38      	adds	r0, r7, #4
 8006f7e:	6800      	ldr	r0, [r0, #0]
 8006f80:	f000 fd1f 	bl	80079c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f84:	1d3b      	adds	r3, r7, #4
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	463b      	mov	r3, r7
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9e:	817b      	strh	r3, [r7, #10]
 8006fa0:	897b      	ldrh	r3, [r7, #10]
 8006fa2:	f083 0310 	eor.w	r3, r3, #16
 8006fa6:	817b      	strh	r3, [r7, #10]
 8006fa8:	897b      	ldrh	r3, [r7, #10]
 8006faa:	f083 0320 	eor.w	r3, r3, #32
 8006fae:	817b      	strh	r3, [r7, #10]
 8006fb0:	1d3b      	adds	r3, r7, #4
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	463b      	mov	r3, r7
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	897b      	ldrh	r3, [r7, #10]
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]
 8006fd4:	e3b5      	b.n	8007742 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006fd6:	463b      	mov	r3, r7
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	7b1b      	ldrb	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f040 8090 	bne.w	8007102 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	463b      	mov	r3, r7
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d90e      	bls.n	8007010 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	619a      	str	r2, [r3, #24]
 800700e:	e008      	b.n	8007022 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8007010:	463b      	mov	r3, r7
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800701a:	463b      	mov	r3, r7
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007022:	1d3b      	adds	r3, r7, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800702a:	1d3b      	adds	r3, r7, #4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800703a:	4413      	add	r3, r2
 800703c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007040:	463b      	mov	r3, r7
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	00da      	lsls	r2, r3, #3
 8007048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800704c:	4413      	add	r3, r2
 800704e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705a:	2b3e      	cmp	r3, #62	; 0x3e
 800705c:	d91d      	bls.n	800709a <USB_EPStartXfer+0xaf0>
 800705e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <USB_EPStartXfer+0xad4>
 8007074:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007078:	3b01      	subs	r3, #1
 800707a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800707e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007082:	b29b      	uxth	r3, r3
 8007084:	029b      	lsls	r3, r3, #10
 8007086:	b29b      	uxth	r3, r3
 8007088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007090:	b29a      	uxth	r2, r3
 8007092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	e325      	b.n	80076e6 <USB_EPStartXfer+0x113c>
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d116      	bne.n	80070d0 <USB_EPStartXfer+0xb26>
 80070a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e30a      	b.n	80076e6 <USB_EPStartXfer+0x113c>
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <USB_EPStartXfer+0xb46>
 80070e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070ea:	3301      	adds	r3, #1
 80070ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	029b      	lsls	r3, r3, #10
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070fe:	801a      	strh	r2, [r3, #0]
 8007100:	e2f1      	b.n	80076e6 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007102:	463b      	mov	r3, r7
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	78db      	ldrb	r3, [r3, #3]
 8007108:	2b02      	cmp	r3, #2
 800710a:	f040 818f 	bne.w	800742c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800710e:	463b      	mov	r3, r7
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d175      	bne.n	8007204 <USB_EPStartXfer+0xc5a>
 8007118:	1d3b      	adds	r3, r7, #4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007130:	4413      	add	r3, r2
 8007132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	00da      	lsls	r2, r3, #3
 800713e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007142:	4413      	add	r3, r2
 8007144:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b3e      	cmp	r3, #62	; 0x3e
 8007154:	d91f      	bls.n	8007196 <USB_EPStartXfer+0xbec>
 8007156:	463b      	mov	r3, r7
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007162:	463b      	mov	r3, r7
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <USB_EPStartXfer+0xbd0>
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007174:	3b01      	subs	r3, #1
 8007176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717e:	b29b      	uxth	r3, r3
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	b29b      	uxth	r3, r3
 8007184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718c:	b29a      	uxth	r2, r3
 800718e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	e05c      	b.n	8007250 <USB_EPStartXfer+0xca6>
 8007196:	463b      	mov	r3, r7
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d116      	bne.n	80071ce <USB_EPStartXfer+0xc24>
 80071a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071ca:	801a      	strh	r2, [r3, #0]
 80071cc:	e040      	b.n	8007250 <USB_EPStartXfer+0xca6>
 80071ce:	463b      	mov	r3, r7
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071da:	463b      	mov	r3, r7
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <USB_EPStartXfer+0xc48>
 80071e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ec:	3301      	adds	r3, #1
 80071ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	e025      	b.n	8007250 <USB_EPStartXfer+0xca6>
 8007204:	463b      	mov	r3, r7
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d120      	bne.n	8007250 <USB_EPStartXfer+0xca6>
 800720e:	1d3b      	adds	r3, r7, #4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007216:	1d3b      	adds	r3, r7, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721e:	b29b      	uxth	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007226:	4413      	add	r3, r2
 8007228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800722c:	463b      	mov	r3, r7
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	00da      	lsls	r2, r3, #3
 8007234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007238:	4413      	add	r3, r2
 800723a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800723e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007242:	463b      	mov	r3, r7
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	b29a      	uxth	r2, r3
 800724a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	1d3b      	adds	r3, r7, #4
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007258:	463b      	mov	r3, r7
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d175      	bne.n	800734e <USB_EPStartXfer+0xda4>
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800726a:	1d3b      	adds	r3, r7, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007272:	b29b      	uxth	r3, r3
 8007274:	461a      	mov	r2, r3
 8007276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800727a:	4413      	add	r3, r2
 800727c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007280:	463b      	mov	r3, r7
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	00da      	lsls	r2, r3, #3
 8007288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800728c:	4413      	add	r3, r2
 800728e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007292:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007296:	463b      	mov	r3, r7
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b3e      	cmp	r3, #62	; 0x3e
 800729e:	d91f      	bls.n	80072e0 <USB_EPStartXfer+0xd36>
 80072a0:	463b      	mov	r3, r7
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072ac:	463b      	mov	r3, r7
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <USB_EPStartXfer+0xd1a>
 80072ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072be:	3b01      	subs	r3, #1
 80072c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	029b      	lsls	r3, r3, #10
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	e058      	b.n	8007392 <USB_EPStartXfer+0xde8>
 80072e0:	463b      	mov	r3, r7
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d116      	bne.n	8007318 <USB_EPStartXfer+0xd6e>
 80072ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	e03c      	b.n	8007392 <USB_EPStartXfer+0xde8>
 8007318:	463b      	mov	r3, r7
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007324:	463b      	mov	r3, r7
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <USB_EPStartXfer+0xd92>
 8007332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007336:	3301      	adds	r3, #1
 8007338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007340:	b29b      	uxth	r3, r3
 8007342:	029b      	lsls	r3, r3, #10
 8007344:	b29a      	uxth	r2, r3
 8007346:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e021      	b.n	8007392 <USB_EPStartXfer+0xde8>
 800734e:	463b      	mov	r3, r7
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d11c      	bne.n	8007392 <USB_EPStartXfer+0xde8>
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007360:	b29b      	uxth	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007368:	4413      	add	r3, r2
 800736a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800736e:	463b      	mov	r3, r7
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	00da      	lsls	r2, r3, #3
 8007376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800737a:	4413      	add	r3, r2
 800737c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007384:	463b      	mov	r3, r7
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	b29a      	uxth	r2, r3
 800738c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007390:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007392:	463b      	mov	r3, r7
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 81a4 	beq.w	80076e6 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800739e:	1d3b      	adds	r3, r7, #4
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	463b      	mov	r3, r7
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <USB_EPStartXfer+0xe20>
 80073be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10d      	bne.n	80073e6 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f040 8187 	bne.w	80076e6 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f040 8180 	bne.w	80076e6 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	463b      	mov	r3, r7
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007400:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	463b      	mov	r3, r7
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	441a      	add	r2, r3
 8007412:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007422:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007426:	b29b      	uxth	r3, r3
 8007428:	8013      	strh	r3, [r2, #0]
 800742a:	e15c      	b.n	80076e6 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800742c:	463b      	mov	r3, r7
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	78db      	ldrb	r3, [r3, #3]
 8007432:	2b01      	cmp	r3, #1
 8007434:	f040 8155 	bne.w	80076e2 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007438:	463b      	mov	r3, r7
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	463b      	mov	r3, r7
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	429a      	cmp	r2, r3
 8007446:	d90e      	bls.n	8007466 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8007448:	463b      	mov	r3, r7
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007452:	463b      	mov	r3, r7
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	463b      	mov	r3, r7
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	619a      	str	r2, [r3, #24]
 8007464:	e008      	b.n	8007478 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8007466:	463b      	mov	r3, r7
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007470:	463b      	mov	r3, r7
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2200      	movs	r2, #0
 8007476:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007478:	463b      	mov	r3, r7
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d16f      	bne.n	8007562 <USB_EPStartXfer+0xfb8>
 8007482:	1d3b      	adds	r3, r7, #4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800748a:	1d3b      	adds	r3, r7, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007492:	b29b      	uxth	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800749a:	4413      	add	r3, r2
 800749c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074a0:	463b      	mov	r3, r7
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	00da      	lsls	r2, r3, #3
 80074a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074ac:	4413      	add	r3, r2
 80074ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ba:	2b3e      	cmp	r3, #62	; 0x3e
 80074bc:	d91d      	bls.n	80074fa <USB_EPStartXfer+0xf50>
 80074be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <USB_EPStartXfer+0xf34>
 80074d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d8:	3b01      	subs	r3, #1
 80074da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	029b      	lsls	r3, r3, #10
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e058      	b.n	80075ac <USB_EPStartXfer+0x1002>
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d116      	bne.n	8007530 <USB_EPStartXfer+0xf86>
 8007502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	e03d      	b.n	80075ac <USB_EPStartXfer+0x1002>
 8007530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d004      	beq.n	8007550 <USB_EPStartXfer+0xfa6>
 8007546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754a:	3301      	adds	r3, #1
 800754c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007554:	b29b      	uxth	r3, r3
 8007556:	029b      	lsls	r3, r3, #10
 8007558:	b29a      	uxth	r2, r3
 800755a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	e024      	b.n	80075ac <USB_EPStartXfer+0x1002>
 8007562:	463b      	mov	r3, r7
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d11f      	bne.n	80075ac <USB_EPStartXfer+0x1002>
 800756c:	1d3b      	adds	r3, r7, #4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800757c:	b29b      	uxth	r3, r3
 800757e:	461a      	mov	r2, r3
 8007580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007584:	4413      	add	r3, r2
 8007586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800758a:	463b      	mov	r3, r7
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	00da      	lsls	r2, r3, #3
 8007592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007596:	4413      	add	r3, r2
 8007598:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800759c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	1d3b      	adds	r3, r7, #4
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075b4:	463b      	mov	r3, r7
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d16f      	bne.n	800769e <USB_EPStartXfer+0x10f4>
 80075be:	1d3b      	adds	r3, r7, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075d6:	4413      	add	r3, r2
 80075d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	00da      	lsls	r2, r3, #3
 80075e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075e8:	4413      	add	r3, r2
 80075ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f6:	2b3e      	cmp	r3, #62	; 0x3e
 80075f8:	d91d      	bls.n	8007636 <USB_EPStartXfer+0x108c>
 80075fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <USB_EPStartXfer+0x1070>
 8007610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007614:	3b01      	subs	r3, #1
 8007616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800761a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761e:	b29b      	uxth	r3, r3
 8007620:	029b      	lsls	r3, r3, #10
 8007622:	b29b      	uxth	r3, r3
 8007624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	e057      	b.n	80076e6 <USB_EPStartXfer+0x113c>
 8007636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800763a:	2b00      	cmp	r3, #0
 800763c:	d116      	bne.n	800766c <USB_EPStartXfer+0x10c2>
 800763e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800764a:	b29a      	uxth	r2, r3
 800764c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007662:	b29a      	uxth	r2, r3
 8007664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	e03c      	b.n	80076e6 <USB_EPStartXfer+0x113c>
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d004      	beq.n	800768c <USB_EPStartXfer+0x10e2>
 8007682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007686:	3301      	adds	r3, #1
 8007688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800768c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007690:	b29b      	uxth	r3, r3
 8007692:	029b      	lsls	r3, r3, #10
 8007694:	b29a      	uxth	r2, r3
 8007696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	e023      	b.n	80076e6 <USB_EPStartXfer+0x113c>
 800769e:	463b      	mov	r3, r7
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	785b      	ldrb	r3, [r3, #1]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d11e      	bne.n	80076e6 <USB_EPStartXfer+0x113c>
 80076a8:	1d3b      	adds	r3, r7, #4
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076b8:	4413      	add	r3, r2
 80076ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076be:	463b      	mov	r3, r7
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	00da      	lsls	r2, r3, #3
 80076c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076ca:	4413      	add	r3, r2
 80076cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d8:	b29a      	uxth	r2, r3
 80076da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e001      	b.n	80076e6 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e02e      	b.n	8007744 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076e6:	1d3b      	adds	r3, r7, #4
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	463b      	mov	r3, r7
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007700:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007704:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800770c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007710:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007714:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007718:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	463b      	mov	r3, r7
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	441a      	add	r2, r3
 800772a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800772e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800773e:	b29b      	uxth	r3, r3
 8007740:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d020      	beq.n	80077a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b29b      	uxth	r3, r3
 800776e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007776:	81bb      	strh	r3, [r7, #12]
 8007778:	89bb      	ldrh	r3, [r7, #12]
 800777a:	f083 0310 	eor.w	r3, r3, #16
 800777e:	81bb      	strh	r3, [r7, #12]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	89bb      	ldrh	r3, [r7, #12]
 800778c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779c:	b29b      	uxth	r3, r3
 800779e:	8013      	strh	r3, [r2, #0]
 80077a0:	e01f      	b.n	80077e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b8:	81fb      	strh	r3, [r7, #14]
 80077ba:	89fb      	ldrh	r3, [r7, #14]
 80077bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077c0:	81fb      	strh	r3, [r7, #14]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	441a      	add	r2, r3
 80077cc:	89fb      	ldrh	r3, [r7, #14]
 80077ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077de:	b29b      	uxth	r3, r3
 80077e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	7b1b      	ldrb	r3, [r3, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f040 809d 	bne.w	800793e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d04c      	beq.n	80078a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	823b      	strh	r3, [r7, #16]
 800781a:	8a3b      	ldrh	r3, [r7, #16]
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01b      	beq.n	800785c <USB_EPClearStall+0x6c>
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783a:	81fb      	strh	r3, [r7, #14]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	441a      	add	r2, r3
 8007846:	89fb      	ldrh	r3, [r7, #14]
 8007848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007854:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007858:	b29b      	uxth	r3, r3
 800785a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d06c      	beq.n	800793e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800787a:	81bb      	strh	r3, [r7, #12]
 800787c:	89bb      	ldrh	r3, [r7, #12]
 800787e:	f083 0320 	eor.w	r3, r3, #32
 8007882:	81bb      	strh	r3, [r7, #12]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	441a      	add	r2, r3
 800788e:	89bb      	ldrh	r3, [r7, #12]
 8007890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	8013      	strh	r3, [r2, #0]
 80078a4:	e04b      	b.n	800793e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	82fb      	strh	r3, [r7, #22]
 80078b4:	8afb      	ldrh	r3, [r7, #22]
 80078b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01b      	beq.n	80078f6 <USB_EPClearStall+0x106>
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d4:	82bb      	strh	r3, [r7, #20]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	441a      	add	r2, r3
 80078e0:	8abb      	ldrh	r3, [r7, #20]
 80078e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790c:	827b      	strh	r3, [r7, #18]
 800790e:	8a7b      	ldrh	r3, [r7, #18]
 8007910:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007914:	827b      	strh	r3, [r7, #18]
 8007916:	8a7b      	ldrh	r3, [r7, #18]
 8007918:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800791c:	827b      	strh	r3, [r7, #18]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	8a7b      	ldrh	r3, [r7, #18]
 800792a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793a:	b29b      	uxth	r3, r3
 800793c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2280      	movs	r2, #128	; 0x80
 8007962:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798c:	b29a      	uxth	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b08d      	sub	sp, #52	; 0x34
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	4611      	mov	r1, r2
 80079ce:	461a      	mov	r2, r3
 80079d0:	460b      	mov	r3, r1
 80079d2:	80fb      	strh	r3, [r7, #6]
 80079d4:	4613      	mov	r3, r2
 80079d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079d8:	88bb      	ldrh	r3, [r7, #4]
 80079da:	3301      	adds	r3, #1
 80079dc:	085b      	lsrs	r3, r3, #1
 80079de:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079e8:	88fa      	ldrh	r2, [r7, #6]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079f8:	e01b      	b.n	8007a32 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	3301      	adds	r3, #1
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	3302      	adds	r3, #2
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	3301      	adds	r3, #1
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e0      	bne.n	80079fa <USB_WritePMA+0x38>
  }
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	3734      	adds	r7, #52	; 0x34
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b08b      	sub	sp, #44	; 0x2c
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	4611      	mov	r1, r2
 8007a52:	461a      	mov	r2, r3
 8007a54:	460b      	mov	r3, r1
 8007a56:	80fb      	strh	r3, [r7, #6]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a5c:	88bb      	ldrh	r3, [r7, #4]
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a6c:	88fa      	ldrh	r2, [r7, #6]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a76:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7c:	e018      	b.n	8007ab0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	3302      	adds	r3, #2
 8007a8a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	3301      	adds	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	0a1b      	lsrs	r3, r3, #8
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	3b01      	subs	r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e3      	bne.n	8007a7e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ab6:	88bb      	ldrh	r3, [r7, #4]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	701a      	strb	r2, [r3, #0]
  }
}
 8007ad2:	bf00      	nop
 8007ad4:	372c      	adds	r7, #44	; 0x2c
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007aea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007aee:	f002 f953 	bl	8009d98 <USBD_static_malloc>
 8007af2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b02:	2302      	movs	r3, #2
 8007b04:	e066      	b.n	8007bd4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	7c1b      	ldrb	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d119      	bne.n	8007b4a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	2181      	movs	r1, #129	; 0x81
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 ffdf 	bl	8009ae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b2e:	2202      	movs	r2, #2
 8007b30:	2101      	movs	r1, #1
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 ffd5 	bl	8009ae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2210      	movs	r2, #16
 8007b44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007b48:	e016      	b.n	8007b78 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b4a:	2340      	movs	r3, #64	; 0x40
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	2181      	movs	r1, #129	; 0x81
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 ffc6 	bl	8009ae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b5c:	2340      	movs	r3, #64	; 0x40
 8007b5e:	2202      	movs	r2, #2
 8007b60:	2101      	movs	r1, #1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 ffbd 	bl	8009ae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2210      	movs	r2, #16
 8007b74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b78:	2308      	movs	r3, #8
 8007b7a:	2203      	movs	r2, #3
 8007b7c:	2182      	movs	r1, #130	; 0x82
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 ffaf 	bl	8009ae2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7c1b      	ldrb	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bb8:	2101      	movs	r1, #1
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f002 f881 	bl	8009cc2 <USBD_LL_PrepareReceive>
 8007bc0:	e007      	b.n	8007bd2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	2101      	movs	r1, #1
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f002 f878 	bl	8009cc2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007be8:	2181      	movs	r1, #129	; 0x81
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 ff9f 	bl	8009b2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 ff98 	bl	8009b2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c06:	2182      	movs	r1, #130	; 0x82
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 ff90 	bl	8009b2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00e      	beq.n	8007c46 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f002 f8bb 	bl	8009db4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e0af      	b.n	8007dd8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d03f      	beq.n	8007d04 <USBD_CDC_Setup+0xb4>
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	f040 809f 	bne.w	8007dc8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	88db      	ldrh	r3, [r3, #6]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d02e      	beq.n	8007cf0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	b25b      	sxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	da16      	bge.n	8007cca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ca8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	88d2      	ldrh	r2, [r2, #6]
 8007cae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	88db      	ldrh	r3, [r3, #6]
 8007cb4:	2b07      	cmp	r3, #7
 8007cb6:	bf28      	it	cs
 8007cb8:	2307      	movcs	r3, #7
 8007cba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	89fa      	ldrh	r2, [r7, #14]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 facf 	bl	8009266 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007cc8:	e085      	b.n	8007dd6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	785a      	ldrb	r2, [r3, #1]
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	88db      	ldrh	r3, [r3, #6]
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ce0:	6939      	ldr	r1, [r7, #16]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	88db      	ldrh	r3, [r3, #6]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 fae8 	bl	80092be <USBD_CtlPrepareRx>
      break;
 8007cee:	e072      	b.n	8007dd6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	7850      	ldrb	r0, [r2, #1]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4798      	blx	r3
      break;
 8007d02:	e068      	b.n	8007dd6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b0b      	cmp	r3, #11
 8007d0a:	d852      	bhi.n	8007db2 <USBD_CDC_Setup+0x162>
 8007d0c:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <USBD_CDC_Setup+0xc4>)
 8007d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d12:	bf00      	nop
 8007d14:	08007d45 	.word	0x08007d45
 8007d18:	08007dc1 	.word	0x08007dc1
 8007d1c:	08007db3 	.word	0x08007db3
 8007d20:	08007db3 	.word	0x08007db3
 8007d24:	08007db3 	.word	0x08007db3
 8007d28:	08007db3 	.word	0x08007db3
 8007d2c:	08007db3 	.word	0x08007db3
 8007d30:	08007db3 	.word	0x08007db3
 8007d34:	08007db3 	.word	0x08007db3
 8007d38:	08007db3 	.word	0x08007db3
 8007d3c:	08007d6f 	.word	0x08007d6f
 8007d40:	08007d99 	.word	0x08007d99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d107      	bne.n	8007d60 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d50:	f107 030a 	add.w	r3, r7, #10
 8007d54:	2202      	movs	r2, #2
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 fa84 	bl	8009266 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d5e:	e032      	b.n	8007dc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 fa0e 	bl	8009184 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d6c:	e02b      	b.n	8007dc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d107      	bne.n	8007d8a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d7a:	f107 030d 	add.w	r3, r7, #13
 8007d7e:	2201      	movs	r2, #1
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fa6f 	bl	8009266 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d88:	e01d      	b.n	8007dc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f9f9 	bl	8009184 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d92:	2303      	movs	r3, #3
 8007d94:	75fb      	strb	r3, [r7, #23]
          break;
 8007d96:	e016      	b.n	8007dc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d00f      	beq.n	8007dc4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 f9ec 	bl	8009184 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007db0:	e008      	b.n	8007dc4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 f9e5 	bl	8009184 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dbe:	e002      	b.n	8007dc6 <USBD_CDC_Setup+0x176>
          break;
 8007dc0:	bf00      	nop
 8007dc2:	e008      	b.n	8007dd6 <USBD_CDC_Setup+0x186>
          break;
 8007dc4:	bf00      	nop
      }
      break;
 8007dc6:	e006      	b.n	8007dd6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 f9da 	bl	8009184 <USBD_CtlError>
      ret = USBD_FAIL;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007df2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e04f      	b.n	8007ea2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	3318      	adds	r3, #24
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d029      	beq.n	8007e74 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	3318      	adds	r3, #24
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	78f9      	ldrb	r1, [r7, #3]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	460b      	mov	r3, r1
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4403      	add	r3, r0
 8007e40:	3338      	adds	r3, #56	; 0x38
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e48:	fb03 f301 	mul.w	r3, r3, r1
 8007e4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d110      	bne.n	8007e74 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007e52:	78fa      	ldrb	r2, [r7, #3]
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	3318      	adds	r3, #24
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e66:	78f9      	ldrb	r1, [r7, #3]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 ff07 	bl	8009c80 <USBD_LL_Transmit>
 8007e72:	e015      	b.n	8007ea0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e9c:	78fa      	ldrb	r2, [r7, #3]
 8007e9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e015      	b.n	8007ef8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 ff17 	bl	8009d04 <USBD_LL_GetRxDataSize>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e01b      	b.n	8007f52 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d015      	beq.n	8007f50 <USBD_CDC_EP0_RxReady+0x50>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f2a:	2bff      	cmp	r3, #255	; 0xff
 8007f2c:	d010      	beq.n	8007f50 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007f3c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f44:	b292      	uxth	r2, r2
 8007f46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	22ff      	movs	r2, #255	; 0xff
 8007f4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2243      	movs	r2, #67	; 0x43
 8007f68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	20000098 	.word	0x20000098

08007f7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2243      	movs	r2, #67	; 0x43
 8007f88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007f8a:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	20000054 	.word	0x20000054

08007f9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2243      	movs	r2, #67	; 0x43
 8007fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	200000dc 	.word	0x200000dc

08007fbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	220a      	movs	r2, #10
 8007fc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000010 	.word	0x20000010

08007fdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e004      	b.n	8007ffa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008006:	b480      	push	{r7}
 8008008:	b087      	sub	sp, #28
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008018:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	e008      	b.n	8008036 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008052:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	e004      	b.n	8008068 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008082:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008092:	2303      	movs	r3, #3
 8008094:	e01a      	b.n	80080cc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800809c:	2b00      	cmp	r3, #0
 800809e:	d114      	bne.n	80080ca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80080be:	2181      	movs	r1, #129	; 0x81
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fddd 	bl	8009c80 <USBD_LL_Transmit>

    ret = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e016      	b.n	8008120 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	7c1b      	ldrb	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d109      	bne.n	800810e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008104:	2101      	movs	r1, #1
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fddb 	bl	8009cc2 <USBD_LL_PrepareReceive>
 800810c:	e007      	b.n	800811e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008114:	2340      	movs	r3, #64	; 0x40
 8008116:	2101      	movs	r1, #1
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 fdd2 	bl	8009cc2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800813c:	2303      	movs	r3, #3
 800813e:	e01f      	b.n	8008180 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	79fa      	ldrb	r2, [r7, #7]
 8008172:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f001 fc37 	bl	80099e8 <USBD_LL_Init>
 800817a:	4603      	mov	r3, r0
 800817c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800817e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800819c:	2303      	movs	r3, #3
 800819e:	e016      	b.n	80081ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	f107 020e 	add.w	r2, r7, #14
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	4602      	mov	r2, r0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 fc64 	bl	8009aac <USBD_LL_Start>
 80081e4:	4603      	mov	r3, r0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	4611      	mov	r1, r2
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	78fa      	ldrb	r2, [r7, #3]
 800825c:	4611      	mov	r1, r2
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
  }

  return USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f000 ff46 	bl	8009110 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082a0:	f003 031f 	and.w	r3, r3, #31
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d01a      	beq.n	80082de <USBD_LL_SetupStage+0x72>
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d822      	bhi.n	80082f2 <USBD_LL_SetupStage+0x86>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <USBD_LL_SetupStage+0x4a>
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d00a      	beq.n	80082ca <USBD_LL_SetupStage+0x5e>
 80082b4:	e01d      	b.n	80082f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f9ee 	bl	80086a0 <USBD_StdDevReq>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
      break;
 80082c8:	e020      	b.n	800830c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa52 	bl	800877c <USBD_StdItfReq>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
      break;
 80082dc:	e016      	b.n	800830c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa91 	bl	800880e <USBD_StdEPReq>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]
      break;
 80082f0:	e00c      	b.n	800830c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 fc33 	bl	8009b6c <USBD_LL_StallEP>
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]
      break;
 800830a:	bf00      	nop
  }

  return ret;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b086      	sub	sp, #24
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	460b      	mov	r3, r1
 8008320:	607a      	str	r2, [r7, #4]
 8008322:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d138      	bne.n	800839c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008338:	2b03      	cmp	r3, #3
 800833a:	d14a      	bne.n	80083d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	429a      	cmp	r2, r3
 8008346:	d913      	bls.n	8008370 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	1ad2      	subs	r2, r2, r3
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	4293      	cmp	r3, r2
 8008360:	bf28      	it	cs
 8008362:	4613      	movcs	r3, r2
 8008364:	461a      	mov	r2, r3
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 ffc5 	bl	80092f8 <USBD_CtlContinueRx>
 800836e:	e030      	b.n	80083d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b03      	cmp	r3, #3
 800837a:	d10b      	bne.n	8008394 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 ffc0 	bl	800931a <USBD_CtlSendStatus>
 800839a:	e01a      	b.n	80083d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d114      	bne.n	80083d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00e      	beq.n	80083d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	7afa      	ldrb	r2, [r7, #11]
 80083be:	4611      	mov	r1, r2
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	4798      	blx	r3
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	e000      	b.n	80083d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	460b      	mov	r3, r1
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d16b      	bne.n	80084c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3314      	adds	r3, #20
 80083f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d156      	bne.n	80084ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	429a      	cmp	r2, r3
 800840a:	d914      	bls.n	8008436 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	1ad2      	subs	r2, r2, r3
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	461a      	mov	r2, r3
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 ff3a 	bl	800929c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008428:	2300      	movs	r3, #0
 800842a:	2200      	movs	r2, #0
 800842c:	2100      	movs	r1, #0
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f001 fc47 	bl	8009cc2 <USBD_LL_PrepareReceive>
 8008434:	e03b      	b.n	80084ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	429a      	cmp	r2, r3
 8008440:	d11c      	bne.n	800847c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800844a:	429a      	cmp	r2, r3
 800844c:	d316      	bcc.n	800847c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008458:	429a      	cmp	r2, r3
 800845a:	d20f      	bcs.n	800847c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800845c:	2200      	movs	r2, #0
 800845e:	2100      	movs	r1, #0
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 ff1b 	bl	800929c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800846e:	2300      	movs	r3, #0
 8008470:	2200      	movs	r2, #0
 8008472:	2100      	movs	r1, #0
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f001 fc24 	bl	8009cc2 <USBD_LL_PrepareReceive>
 800847a:	e018      	b.n	80084ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b03      	cmp	r3, #3
 8008486:	d10b      	bne.n	80084a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084a0:	2180      	movs	r1, #128	; 0x80
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f001 fb62 	bl	8009b6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 ff49 	bl	8009340 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d122      	bne.n	80084fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7ff fe98 	bl	80081ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084c6:	e01a      	b.n	80084fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d114      	bne.n	80084fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00e      	beq.n	80084fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	7afa      	ldrb	r2, [r7, #11]
 80084ea:	4611      	mov	r1, r2
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	4798      	blx	r3
 80084f0:	4603      	mov	r3, r0
 80084f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	e000      	b.n	8008500 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008538:	2303      	movs	r3, #3
 800853a:	e02f      	b.n	800859c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00f      	beq.n	8008566 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d009      	beq.n	8008566 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6852      	ldr	r2, [r2, #4]
 800855e:	b2d2      	uxtb	r2, r2
 8008560:	4611      	mov	r1, r2
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008566:	2340      	movs	r3, #64	; 0x40
 8008568:	2200      	movs	r2, #0
 800856a:	2100      	movs	r1, #0
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 fab8 	bl	8009ae2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2240      	movs	r2, #64	; 0x40
 800857e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	2200      	movs	r2, #0
 8008586:	2180      	movs	r1, #128	; 0x80
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 faaa 	bl	8009ae2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2240      	movs	r2, #64	; 0x40
 8008598:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2204      	movs	r2, #4
 80085de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b04      	cmp	r3, #4
 8008602:	d106      	bne.n	8008612 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800860a:	b2da      	uxtb	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008632:	2303      	movs	r3, #3
 8008634:	e012      	b.n	800865c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b03      	cmp	r3, #3
 8008640:	d10b      	bne.n	800865a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	3301      	adds	r3, #1
 800867a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008682:	8a3b      	ldrh	r3, [r7, #16]
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	b21a      	sxth	r2, r3
 8008688:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800868c:	4313      	orrs	r3, r2
 800868e:	b21b      	sxth	r3, r3
 8008690:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008692:	89fb      	ldrh	r3, [r7, #14]
}
 8008694:	4618      	mov	r0, r3
 8008696:	371c      	adds	r7, #28
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086b6:	2b40      	cmp	r3, #64	; 0x40
 80086b8:	d005      	beq.n	80086c6 <USBD_StdDevReq+0x26>
 80086ba:	2b40      	cmp	r3, #64	; 0x40
 80086bc:	d853      	bhi.n	8008766 <USBD_StdDevReq+0xc6>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00b      	beq.n	80086da <USBD_StdDevReq+0x3a>
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d14f      	bne.n	8008766 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]
      break;
 80086d8:	e04a      	b.n	8008770 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	2b09      	cmp	r3, #9
 80086e0:	d83b      	bhi.n	800875a <USBD_StdDevReq+0xba>
 80086e2:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <USBD_StdDevReq+0x48>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	0800873d 	.word	0x0800873d
 80086ec:	08008751 	.word	0x08008751
 80086f0:	0800875b 	.word	0x0800875b
 80086f4:	08008747 	.word	0x08008747
 80086f8:	0800875b 	.word	0x0800875b
 80086fc:	0800871b 	.word	0x0800871b
 8008700:	08008711 	.word	0x08008711
 8008704:	0800875b 	.word	0x0800875b
 8008708:	08008733 	.word	0x08008733
 800870c:	08008725 	.word	0x08008725
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f9de 	bl	8008ad4 <USBD_GetDescriptor>
          break;
 8008718:	e024      	b.n	8008764 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fb6d 	bl	8008dfc <USBD_SetAddress>
          break;
 8008722:	e01f      	b.n	8008764 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fbac 	bl	8008e84 <USBD_SetConfig>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]
          break;
 8008730:	e018      	b.n	8008764 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fc4b 	bl	8008fd0 <USBD_GetConfig>
          break;
 800873a:	e013      	b.n	8008764 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fc7c 	bl	800903c <USBD_GetStatus>
          break;
 8008744:	e00e      	b.n	8008764 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fcab 	bl	80090a4 <USBD_SetFeature>
          break;
 800874e:	e009      	b.n	8008764 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fcba 	bl	80090cc <USBD_ClrFeature>
          break;
 8008758:	e004      	b.n	8008764 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fd11 	bl	8009184 <USBD_CtlError>
          break;
 8008762:	bf00      	nop
      }
      break;
 8008764:	e004      	b.n	8008770 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fd0b 	bl	8009184 <USBD_CtlError>
      break;
 800876e:	bf00      	nop
  }

  return ret;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop

0800877c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008792:	2b40      	cmp	r3, #64	; 0x40
 8008794:	d005      	beq.n	80087a2 <USBD_StdItfReq+0x26>
 8008796:	2b40      	cmp	r3, #64	; 0x40
 8008798:	d82f      	bhi.n	80087fa <USBD_StdItfReq+0x7e>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <USBD_StdItfReq+0x26>
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d12b      	bne.n	80087fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d81d      	bhi.n	80087ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	889b      	ldrh	r3, [r3, #4]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d813      	bhi.n	80087e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	4798      	blx	r3
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	88db      	ldrh	r3, [r3, #6]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d110      	bne.n	80087f6 <USBD_StdItfReq+0x7a>
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10d      	bne.n	80087f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fd9d 	bl	800931a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087e0:	e009      	b.n	80087f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fccd 	bl	8009184 <USBD_CtlError>
          break;
 80087ea:	e004      	b.n	80087f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fcc8 	bl	8009184 <USBD_CtlError>
          break;
 80087f4:	e000      	b.n	80087f8 <USBD_StdItfReq+0x7c>
          break;
 80087f6:	bf00      	nop
      }
      break;
 80087f8:	e004      	b.n	8008804 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fcc1 	bl	8009184 <USBD_CtlError>
      break;
 8008802:	bf00      	nop
  }

  return ret;
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	889b      	ldrh	r3, [r3, #4]
 8008820:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800882a:	2b40      	cmp	r3, #64	; 0x40
 800882c:	d007      	beq.n	800883e <USBD_StdEPReq+0x30>
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	f200 8145 	bhi.w	8008abe <USBD_StdEPReq+0x2b0>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00c      	beq.n	8008852 <USBD_StdEPReq+0x44>
 8008838:	2b20      	cmp	r3, #32
 800883a:	f040 8140 	bne.w	8008abe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]
      break;
 8008850:	e13a      	b.n	8008ac8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b03      	cmp	r3, #3
 8008858:	d007      	beq.n	800886a <USBD_StdEPReq+0x5c>
 800885a:	2b03      	cmp	r3, #3
 800885c:	f300 8129 	bgt.w	8008ab2 <USBD_StdEPReq+0x2a4>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d07f      	beq.n	8008964 <USBD_StdEPReq+0x156>
 8008864:	2b01      	cmp	r3, #1
 8008866:	d03c      	beq.n	80088e2 <USBD_StdEPReq+0xd4>
 8008868:	e123      	b.n	8008ab2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d002      	beq.n	800887c <USBD_StdEPReq+0x6e>
 8008876:	2b03      	cmp	r3, #3
 8008878:	d016      	beq.n	80088a8 <USBD_StdEPReq+0x9a>
 800887a:	e02c      	b.n	80088d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00d      	beq.n	800889e <USBD_StdEPReq+0x90>
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	2b80      	cmp	r3, #128	; 0x80
 8008886:	d00a      	beq.n	800889e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 f96d 	bl	8009b6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008892:	2180      	movs	r1, #128	; 0x80
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 f969 	bl	8009b6c <USBD_LL_StallEP>
 800889a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800889c:	e020      	b.n	80088e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fc6f 	bl	8009184 <USBD_CtlError>
              break;
 80088a6:	e01b      	b.n	80088e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	885b      	ldrh	r3, [r3, #2]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10e      	bne.n	80088ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00b      	beq.n	80088ce <USBD_StdEPReq+0xc0>
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	2b80      	cmp	r3, #128	; 0x80
 80088ba:	d008      	beq.n	80088ce <USBD_StdEPReq+0xc0>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	88db      	ldrh	r3, [r3, #6]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 f94f 	bl	8009b6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fd23 	bl	800931a <USBD_CtlSendStatus>

              break;
 80088d4:	e004      	b.n	80088e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc53 	bl	8009184 <USBD_CtlError>
              break;
 80088de:	bf00      	nop
          }
          break;
 80088e0:	e0ec      	b.n	8008abc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d002      	beq.n	80088f4 <USBD_StdEPReq+0xe6>
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d016      	beq.n	8008920 <USBD_StdEPReq+0x112>
 80088f2:	e030      	b.n	8008956 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00d      	beq.n	8008916 <USBD_StdEPReq+0x108>
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
 80088fc:	2b80      	cmp	r3, #128	; 0x80
 80088fe:	d00a      	beq.n	8008916 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f931 	bl	8009b6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800890a:	2180      	movs	r1, #128	; 0x80
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 f92d 	bl	8009b6c <USBD_LL_StallEP>
 8008912:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008914:	e025      	b.n	8008962 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fc33 	bl	8009184 <USBD_CtlError>
              break;
 800891e:	e020      	b.n	8008962 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	885b      	ldrh	r3, [r3, #2]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11b      	bne.n	8008960 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800892e:	2b00      	cmp	r3, #0
 8008930:	d004      	beq.n	800893c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 f937 	bl	8009baa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fcec 	bl	800931a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	4798      	blx	r3
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008954:	e004      	b.n	8008960 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fc13 	bl	8009184 <USBD_CtlError>
              break;
 800895e:	e000      	b.n	8008962 <USBD_StdEPReq+0x154>
              break;
 8008960:	bf00      	nop
          }
          break;
 8008962:	e0ab      	b.n	8008abc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d002      	beq.n	8008976 <USBD_StdEPReq+0x168>
 8008970:	2b03      	cmp	r3, #3
 8008972:	d032      	beq.n	80089da <USBD_StdEPReq+0x1cc>
 8008974:	e097      	b.n	8008aa6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d007      	beq.n	800898c <USBD_StdEPReq+0x17e>
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	2b80      	cmp	r3, #128	; 0x80
 8008980:	d004      	beq.n	800898c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fbfd 	bl	8009184 <USBD_CtlError>
                break;
 800898a:	e091      	b.n	8008ab0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800898c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008990:	2b00      	cmp	r3, #0
 8008992:	da0b      	bge.n	80089ac <USBD_StdEPReq+0x19e>
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	3310      	adds	r3, #16
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	3304      	adds	r3, #4
 80089aa:	e00b      	b.n	80089c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	3304      	adds	r3, #4
 80089c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2202      	movs	r2, #2
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fc47 	bl	8009266 <USBD_CtlSendData>
              break;
 80089d8:	e06a      	b.n	8008ab0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	da11      	bge.n	8008a06 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	f003 020f 	and.w	r2, r3, #15
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	440b      	add	r3, r1
 80089f4:	3324      	adds	r3, #36	; 0x24
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d117      	bne.n	8008a2c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fbc0 	bl	8009184 <USBD_CtlError>
                  break;
 8008a04:	e054      	b.n	8008ab0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	f003 020f 	and.w	r2, r3, #15
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d104      	bne.n	8008a2c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fbad 	bl	8009184 <USBD_CtlError>
                  break;
 8008a2a:	e041      	b.n	8008ab0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da0b      	bge.n	8008a4c <USBD_StdEPReq+0x23e>
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	3310      	adds	r3, #16
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	4413      	add	r3, r2
 8008a48:	3304      	adds	r3, #4
 8008a4a:	e00b      	b.n	8008a64 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4413      	add	r3, r2
 8008a62:	3304      	adds	r3, #4
 8008a64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <USBD_StdEPReq+0x264>
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	2b80      	cmp	r3, #128	; 0x80
 8008a70:	d103      	bne.n	8008a7a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	e00e      	b.n	8008a98 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 f8b2 	bl	8009be8 <USBD_LL_IsStallEP>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	e002      	b.n	8008a98 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fbe1 	bl	8009266 <USBD_CtlSendData>
              break;
 8008aa4:	e004      	b.n	8008ab0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fb6b 	bl	8009184 <USBD_CtlError>
              break;
 8008aae:	bf00      	nop
          }
          break;
 8008ab0:	e004      	b.n	8008abc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fb65 	bl	8009184 <USBD_CtlError>
          break;
 8008aba:	bf00      	nop
      }
      break;
 8008abc:	e004      	b.n	8008ac8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fb5f 	bl	8009184 <USBD_CtlError>
      break;
 8008ac6:	bf00      	nop
  }

  return ret;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	885b      	ldrh	r3, [r3, #2]
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	2b0e      	cmp	r3, #14
 8008af6:	f200 8152 	bhi.w	8008d9e <USBD_GetDescriptor+0x2ca>
 8008afa:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <USBD_GetDescriptor+0x2c>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b71 	.word	0x08008b71
 8008b04:	08008b89 	.word	0x08008b89
 8008b08:	08008bc9 	.word	0x08008bc9
 8008b0c:	08008d9f 	.word	0x08008d9f
 8008b10:	08008d9f 	.word	0x08008d9f
 8008b14:	08008d3f 	.word	0x08008d3f
 8008b18:	08008d6b 	.word	0x08008d6b
 8008b1c:	08008d9f 	.word	0x08008d9f
 8008b20:	08008d9f 	.word	0x08008d9f
 8008b24:	08008d9f 	.word	0x08008d9f
 8008b28:	08008d9f 	.word	0x08008d9f
 8008b2c:	08008d9f 	.word	0x08008d9f
 8008b30:	08008d9f 	.word	0x08008d9f
 8008b34:	08008d9f 	.word	0x08008d9f
 8008b38:	08008b3d 	.word	0x08008b3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7c12      	ldrb	r2, [r2, #16]
 8008b54:	f107 0108 	add.w	r1, r7, #8
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b5e:	e126      	b.n	8008dae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fb0e 	bl	8009184 <USBD_CtlError>
        err++;
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b6e:	e11e      	b.n	8008dae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	7c12      	ldrb	r2, [r2, #16]
 8008b7c:	f107 0108 	add.w	r1, r7, #8
 8008b80:	4610      	mov	r0, r2
 8008b82:	4798      	blx	r3
 8008b84:	60f8      	str	r0, [r7, #12]
      break;
 8008b86:	e112      	b.n	8008dae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	7c1b      	ldrb	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10d      	bne.n	8008bac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	f107 0208 	add.w	r2, r7, #8
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	4798      	blx	r3
 8008ba0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008baa:	e100      	b.n	8008dae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	f107 0208 	add.w	r2, r7, #8
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4798      	blx	r3
 8008bbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	701a      	strb	r2, [r3, #0]
      break;
 8008bc6:	e0f2      	b.n	8008dae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	885b      	ldrh	r3, [r3, #2]
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b05      	cmp	r3, #5
 8008bd0:	f200 80ac 	bhi.w	8008d2c <USBD_GetDescriptor+0x258>
 8008bd4:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <USBD_GetDescriptor+0x108>)
 8008bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bda:	bf00      	nop
 8008bdc:	08008bf5 	.word	0x08008bf5
 8008be0:	08008c29 	.word	0x08008c29
 8008be4:	08008c5d 	.word	0x08008c5d
 8008be8:	08008c91 	.word	0x08008c91
 8008bec:	08008cc5 	.word	0x08008cc5
 8008bf0:	08008cf9 	.word	0x08008cf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	7c12      	ldrb	r2, [r2, #16]
 8008c0c:	f107 0108 	add.w	r1, r7, #8
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c16:	e091      	b.n	8008d3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fab2 	bl	8009184 <USBD_CtlError>
            err++;
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	3301      	adds	r3, #1
 8008c24:	72fb      	strb	r3, [r7, #11]
          break;
 8008c26:	e089      	b.n	8008d3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7c12      	ldrb	r2, [r2, #16]
 8008c40:	f107 0108 	add.w	r1, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4a:	e077      	b.n	8008d3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fa98 	bl	8009184 <USBD_CtlError>
            err++;
 8008c54:	7afb      	ldrb	r3, [r7, #11]
 8008c56:	3301      	adds	r3, #1
 8008c58:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5a:	e06f      	b.n	8008d3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	7c12      	ldrb	r2, [r2, #16]
 8008c74:	f107 0108 	add.w	r1, r7, #8
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4798      	blx	r3
 8008c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7e:	e05d      	b.n	8008d3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa7e 	bl	8009184 <USBD_CtlError>
            err++;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8e:	e055      	b.n	8008d3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	7c12      	ldrb	r2, [r2, #16]
 8008ca8:	f107 0108 	add.w	r1, r7, #8
 8008cac:	4610      	mov	r0, r2
 8008cae:	4798      	blx	r3
 8008cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cb2:	e043      	b.n	8008d3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa64 	bl	8009184 <USBD_CtlError>
            err++;
 8008cbc:	7afb      	ldrb	r3, [r7, #11]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cc2:	e03b      	b.n	8008d3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00b      	beq.n	8008ce8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	7c12      	ldrb	r2, [r2, #16]
 8008cdc:	f107 0108 	add.w	r1, r7, #8
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ce6:	e029      	b.n	8008d3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fa4a 	bl	8009184 <USBD_CtlError>
            err++;
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cf6:	e021      	b.n	8008d3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00b      	beq.n	8008d1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	7c12      	ldrb	r2, [r2, #16]
 8008d10:	f107 0108 	add.w	r1, r7, #8
 8008d14:	4610      	mov	r0, r2
 8008d16:	4798      	blx	r3
 8008d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d1a:	e00f      	b.n	8008d3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fa30 	bl	8009184 <USBD_CtlError>
            err++;
 8008d24:	7afb      	ldrb	r3, [r7, #11]
 8008d26:	3301      	adds	r3, #1
 8008d28:	72fb      	strb	r3, [r7, #11]
          break;
 8008d2a:	e007      	b.n	8008d3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fa28 	bl	8009184 <USBD_CtlError>
          err++;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	3301      	adds	r3, #1
 8008d38:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d3a:	bf00      	nop
      }
      break;
 8008d3c:	e037      	b.n	8008dae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	7c1b      	ldrb	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d109      	bne.n	8008d5a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	f107 0208 	add.w	r2, r7, #8
 8008d52:	4610      	mov	r0, r2
 8008d54:	4798      	blx	r3
 8008d56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d58:	e029      	b.n	8008dae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa11 	bl	8009184 <USBD_CtlError>
        err++;
 8008d62:	7afb      	ldrb	r3, [r7, #11]
 8008d64:	3301      	adds	r3, #1
 8008d66:	72fb      	strb	r3, [r7, #11]
      break;
 8008d68:	e021      	b.n	8008dae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	7c1b      	ldrb	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10d      	bne.n	8008d8e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	f107 0208 	add.w	r2, r7, #8
 8008d7e:	4610      	mov	r0, r2
 8008d80:	4798      	blx	r3
 8008d82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3301      	adds	r3, #1
 8008d88:	2207      	movs	r2, #7
 8008d8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d8c:	e00f      	b.n	8008dae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f9f7 	bl	8009184 <USBD_CtlError>
        err++;
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d9c:	e007      	b.n	8008dae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f9ef 	bl	8009184 <USBD_CtlError>
      err++;
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	3301      	adds	r3, #1
 8008daa:	72fb      	strb	r3, [r7, #11]
      break;
 8008dac:	bf00      	nop
  }

  if (err != 0U)
 8008dae:	7afb      	ldrb	r3, [r7, #11]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d11e      	bne.n	8008df2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	88db      	ldrh	r3, [r3, #6]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d016      	beq.n	8008dea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008dbc:	893b      	ldrh	r3, [r7, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00e      	beq.n	8008de0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	88da      	ldrh	r2, [r3, #6]
 8008dc6:	893b      	ldrh	r3, [r7, #8]
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	bf28      	it	cs
 8008dcc:	4613      	movcs	r3, r2
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dd2:	893b      	ldrh	r3, [r7, #8]
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	68f9      	ldr	r1, [r7, #12]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fa44 	bl	8009266 <USBD_CtlSendData>
 8008dde:	e009      	b.n	8008df4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f9ce 	bl	8009184 <USBD_CtlError>
 8008de8:	e004      	b.n	8008df4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa95 	bl	800931a <USBD_CtlSendStatus>
 8008df0:	e000      	b.n	8008df4 <USBD_GetDescriptor+0x320>
    return;
 8008df2:	bf00      	nop
  }
}
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop

08008dfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	889b      	ldrh	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d131      	bne.n	8008e72 <USBD_SetAddress+0x76>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	88db      	ldrh	r3, [r3, #6]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d12d      	bne.n	8008e72 <USBD_SetAddress+0x76>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	885b      	ldrh	r3, [r3, #2]
 8008e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e1c:	d829      	bhi.n	8008e72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	885b      	ldrh	r3, [r3, #2]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d104      	bne.n	8008e40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f9a3 	bl	8009184 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3e:	e01d      	b.n	8008e7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	7bfa      	ldrb	r2, [r7, #15]
 8008e44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fef8 	bl	8009c42 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa61 	bl	800931a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e66:	e009      	b.n	8008e7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e70:	e004      	b.n	8008e7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f985 	bl	8009184 <USBD_CtlError>
  }
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	885b      	ldrh	r3, [r3, #2]
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	4b4c      	ldr	r3, [pc, #304]	; (8008fcc <USBD_SetConfig+0x148>)
 8008e9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e9c:	4b4b      	ldr	r3, [pc, #300]	; (8008fcc <USBD_SetConfig+0x148>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d905      	bls.n	8008eb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f96c 	bl	8009184 <USBD_CtlError>
    return USBD_FAIL;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e088      	b.n	8008fc2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d002      	beq.n	8008ec2 <USBD_SetConfig+0x3e>
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d025      	beq.n	8008f0c <USBD_SetConfig+0x88>
 8008ec0:	e071      	b.n	8008fa6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ec2:	4b42      	ldr	r3, [pc, #264]	; (8008fcc <USBD_SetConfig+0x148>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d01c      	beq.n	8008f04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008eca:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <USBD_SetConfig+0x148>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ed4:	4b3d      	ldr	r3, [pc, #244]	; (8008fcc <USBD_SetConfig+0x148>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff f992 	bl	8008204 <USBD_SetClassConfig>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d004      	beq.n	8008ef4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f949 	bl	8009184 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ef2:	e065      	b.n	8008fc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa10 	bl	800931a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2203      	movs	r2, #3
 8008efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f02:	e05d      	b.n	8008fc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fa08 	bl	800931a <USBD_CtlSendStatus>
      break;
 8008f0a:	e059      	b.n	8008fc0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f0c:	4b2f      	ldr	r3, [pc, #188]	; (8008fcc <USBD_SetConfig+0x148>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d112      	bne.n	8008f3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <USBD_SetConfig+0x148>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f26:	4b29      	ldr	r3, [pc, #164]	; (8008fcc <USBD_SetConfig+0x148>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff f985 	bl	800823c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f9f1 	bl	800931a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f38:	e042      	b.n	8008fc0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f3a:	4b24      	ldr	r3, [pc, #144]	; (8008fcc <USBD_SetConfig+0x148>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d02a      	beq.n	8008f9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff f973 	bl	800823c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f56:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <USBD_SetConfig+0x148>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f60:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <USBD_SetConfig+0x148>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff f94c 	bl	8008204 <USBD_SetClassConfig>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00f      	beq.n	8008f96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f903 	bl	8009184 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff f958 	bl	800823c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f94:	e014      	b.n	8008fc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f9bf 	bl	800931a <USBD_CtlSendStatus>
      break;
 8008f9c:	e010      	b.n	8008fc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9bb 	bl	800931a <USBD_CtlSendStatus>
      break;
 8008fa4:	e00c      	b.n	8008fc0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f8eb 	bl	8009184 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fae:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <USBD_SetConfig+0x148>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff f941 	bl	800823c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbe:	bf00      	nop
  }

  return ret;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	200001a9 	.word	0x200001a9

08008fd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	88db      	ldrh	r3, [r3, #6]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d004      	beq.n	8008fec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8cd 	bl	8009184 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fea:	e023      	b.n	8009034 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	dc02      	bgt.n	8008ffe <USBD_GetConfig+0x2e>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dc03      	bgt.n	8009004 <USBD_GetConfig+0x34>
 8008ffc:	e015      	b.n	800902a <USBD_GetConfig+0x5a>
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d00b      	beq.n	800901a <USBD_GetConfig+0x4a>
 8009002:	e012      	b.n	800902a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3308      	adds	r3, #8
 800900e:	2201      	movs	r2, #1
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f927 	bl	8009266 <USBD_CtlSendData>
        break;
 8009018:	e00c      	b.n	8009034 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	2201      	movs	r2, #1
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f91f 	bl	8009266 <USBD_CtlSendData>
        break;
 8009028:	e004      	b.n	8009034 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f8a9 	bl	8009184 <USBD_CtlError>
        break;
 8009032:	bf00      	nop
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	3b01      	subs	r3, #1
 8009050:	2b02      	cmp	r3, #2
 8009052:	d81e      	bhi.n	8009092 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	88db      	ldrh	r3, [r3, #6]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d004      	beq.n	8009066 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f890 	bl	8009184 <USBD_CtlError>
        break;
 8009064:	e01a      	b.n	800909c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009072:	2b00      	cmp	r3, #0
 8009074:	d005      	beq.n	8009082 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f043 0202 	orr.w	r2, r3, #2
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	330c      	adds	r3, #12
 8009086:	2202      	movs	r2, #2
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f8eb 	bl	8009266 <USBD_CtlSendData>
      break;
 8009090:	e004      	b.n	800909c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f875 	bl	8009184 <USBD_CtlError>
      break;
 800909a:	bf00      	nop
  }
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d106      	bne.n	80090c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f92b 	bl	800931a <USBD_CtlSendStatus>
  }
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	3b01      	subs	r3, #1
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d80b      	bhi.n	80090fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	885b      	ldrh	r3, [r3, #2]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d10c      	bne.n	8009106 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f910 	bl	800931a <USBD_CtlSendStatus>
      }
      break;
 80090fa:	e004      	b.n	8009106 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f840 	bl	8009184 <USBD_CtlError>
      break;
 8009104:	e000      	b.n	8009108 <USBD_ClrFeature+0x3c>
      break;
 8009106:	bf00      	nop
  }
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	781a      	ldrb	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3301      	adds	r3, #1
 800912a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	781a      	ldrb	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3301      	adds	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff fa92 	bl	8008664 <SWAPBYTE>
 8009140:	4603      	mov	r3, r0
 8009142:	461a      	mov	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fa85 	bl	8008664 <SWAPBYTE>
 800915a:	4603      	mov	r3, r0
 800915c:	461a      	mov	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fa78 	bl	8008664 <SWAPBYTE>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	80da      	strh	r2, [r3, #6]
}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800918e:	2180      	movs	r1, #128	; 0x80
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fceb 	bl	8009b6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009196:	2100      	movs	r1, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fce7 	bl	8009b6c <USBD_LL_StallEP>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b086      	sub	sp, #24
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d036      	beq.n	800922a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091c0:	6938      	ldr	r0, [r7, #16]
 80091c2:	f000 f836 	bl	8009232 <USBD_GetLen>
 80091c6:	4603      	mov	r3, r0
 80091c8:	3301      	adds	r3, #1
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	4413      	add	r3, r2
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	7812      	ldrb	r2, [r2, #0]
 80091de:	701a      	strb	r2, [r3, #0]
  idx++;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	3301      	adds	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	4413      	add	r3, r2
 80091ec:	2203      	movs	r2, #3
 80091ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	3301      	adds	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80091f6:	e013      	b.n	8009220 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	4413      	add	r3, r2
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	3301      	adds	r3, #1
 8009208:	613b      	str	r3, [r7, #16]
    idx++;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	3301      	adds	r3, #1
 800920e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
    idx++;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	3301      	adds	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e7      	bne.n	80091f8 <USBD_GetString+0x52>
 8009228:	e000      	b.n	800922c <USBD_GetString+0x86>
    return;
 800922a:	bf00      	nop
  }
}
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009242:	e005      	b.n	8009250 <USBD_GetLen+0x1e>
  {
    len++;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
 8009246:	3301      	adds	r3, #1
 8009248:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	3301      	adds	r3, #1
 800924e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f5      	bne.n	8009244 <USBD_GetLen+0x12>
  }

  return len;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2202      	movs	r2, #2
 8009276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	2100      	movs	r1, #0
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 fcf7 	bl	8009c80 <USBD_LL_Transmit>

  return USBD_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	2100      	movs	r1, #0
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fce6 	bl	8009c80 <USBD_LL_Transmit>

  return USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2203      	movs	r2, #3
 80092ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fcea 	bl	8009cc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	2100      	movs	r1, #0
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fcd9 	bl	8009cc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2204      	movs	r2, #4
 8009326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800932a:	2300      	movs	r3, #0
 800932c:	2200      	movs	r2, #0
 800932e:	2100      	movs	r1, #0
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fca5 	bl	8009c80 <USBD_LL_Transmit>

  return USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2205      	movs	r2, #5
 800934c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009350:	2300      	movs	r3, #0
 8009352:	2200      	movs	r2, #0
 8009354:	2100      	movs	r1, #0
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fcb3 	bl	8009cc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800936c:	2200      	movs	r2, #0
 800936e:	4912      	ldr	r1, [pc, #72]	; (80093b8 <MX_USB_Device_Init+0x50>)
 8009370:	4812      	ldr	r0, [pc, #72]	; (80093bc <MX_USB_Device_Init+0x54>)
 8009372:	f7fe fed9 	bl	8008128 <USBD_Init>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800937c:	f7f7 f97f 	bl	800067e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009380:	490f      	ldr	r1, [pc, #60]	; (80093c0 <MX_USB_Device_Init+0x58>)
 8009382:	480e      	ldr	r0, [pc, #56]	; (80093bc <MX_USB_Device_Init+0x54>)
 8009384:	f7fe ff00 	bl	8008188 <USBD_RegisterClass>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800938e:	f7f7 f976 	bl	800067e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009392:	490c      	ldr	r1, [pc, #48]	; (80093c4 <MX_USB_Device_Init+0x5c>)
 8009394:	4809      	ldr	r0, [pc, #36]	; (80093bc <MX_USB_Device_Init+0x54>)
 8009396:	f7fe fe21 	bl	8007fdc <USBD_CDC_RegisterInterface>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80093a0:	f7f7 f96d 	bl	800067e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80093a4:	4805      	ldr	r0, [pc, #20]	; (80093bc <MX_USB_Device_Init+0x54>)
 80093a6:	f7fe ff16 	bl	80081d6 <USBD_Start>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80093b0:	f7f7 f965 	bl	800067e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80093b4:	bf00      	nop
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000134 	.word	0x20000134
 80093bc:	20000488 	.word	0x20000488
 80093c0:	2000001c 	.word	0x2000001c
 80093c4:	20000120 	.word	0x20000120

080093c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093cc:	2200      	movs	r2, #0
 80093ce:	4905      	ldr	r1, [pc, #20]	; (80093e4 <CDC_Init_FS+0x1c>)
 80093d0:	4805      	ldr	r0, [pc, #20]	; (80093e8 <CDC_Init_FS+0x20>)
 80093d2:	f7fe fe18 	bl	8008006 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093d6:	4905      	ldr	r1, [pc, #20]	; (80093ec <CDC_Init_FS+0x24>)
 80093d8:	4803      	ldr	r0, [pc, #12]	; (80093e8 <CDC_Init_FS+0x20>)
 80093da:	f7fe fe32 	bl	8008042 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20000f58 	.word	0x20000f58
 80093e8:	20000488 	.word	0x20000488
 80093ec:	20000758 	.word	0x20000758

080093f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	6039      	str	r1, [r7, #0]
 800940a:	71fb      	strb	r3, [r7, #7]
 800940c:	4613      	mov	r3, r2
 800940e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	2b23      	cmp	r3, #35	; 0x23
 8009414:	d84a      	bhi.n	80094ac <CDC_Control_FS+0xac>
 8009416:	a201      	add	r2, pc, #4	; (adr r2, 800941c <CDC_Control_FS+0x1c>)
 8009418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941c:	080094ad 	.word	0x080094ad
 8009420:	080094ad 	.word	0x080094ad
 8009424:	080094ad 	.word	0x080094ad
 8009428:	080094ad 	.word	0x080094ad
 800942c:	080094ad 	.word	0x080094ad
 8009430:	080094ad 	.word	0x080094ad
 8009434:	080094ad 	.word	0x080094ad
 8009438:	080094ad 	.word	0x080094ad
 800943c:	080094ad 	.word	0x080094ad
 8009440:	080094ad 	.word	0x080094ad
 8009444:	080094ad 	.word	0x080094ad
 8009448:	080094ad 	.word	0x080094ad
 800944c:	080094ad 	.word	0x080094ad
 8009450:	080094ad 	.word	0x080094ad
 8009454:	080094ad 	.word	0x080094ad
 8009458:	080094ad 	.word	0x080094ad
 800945c:	080094ad 	.word	0x080094ad
 8009460:	080094ad 	.word	0x080094ad
 8009464:	080094ad 	.word	0x080094ad
 8009468:	080094ad 	.word	0x080094ad
 800946c:	080094ad 	.word	0x080094ad
 8009470:	080094ad 	.word	0x080094ad
 8009474:	080094ad 	.word	0x080094ad
 8009478:	080094ad 	.word	0x080094ad
 800947c:	080094ad 	.word	0x080094ad
 8009480:	080094ad 	.word	0x080094ad
 8009484:	080094ad 	.word	0x080094ad
 8009488:	080094ad 	.word	0x080094ad
 800948c:	080094ad 	.word	0x080094ad
 8009490:	080094ad 	.word	0x080094ad
 8009494:	080094ad 	.word	0x080094ad
 8009498:	080094ad 	.word	0x080094ad
 800949c:	080094ad 	.word	0x080094ad
 80094a0:	080094ad 	.word	0x080094ad
 80094a4:	080094ad 	.word	0x080094ad
 80094a8:	080094ad 	.word	0x080094ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094ac:	bf00      	nop
  }

  return (USBD_OK);
 80094ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4805      	ldr	r0, [pc, #20]	; (80094e0 <CDC_Receive_FS+0x24>)
 80094ca:	f7fe fdba 	bl	8008042 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094ce:	4804      	ldr	r0, [pc, #16]	; (80094e0 <CDC_Receive_FS+0x24>)
 80094d0:	f7fe fe00 	bl	80080d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000488 	.word	0x20000488

080094e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094f4:	4b0d      	ldr	r3, [pc, #52]	; (800952c <CDC_Transmit_FS+0x48>)
 80094f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009506:	2301      	movs	r3, #1
 8009508:	e00b      	b.n	8009522 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800950a:	887b      	ldrh	r3, [r7, #2]
 800950c:	461a      	mov	r2, r3
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4806      	ldr	r0, [pc, #24]	; (800952c <CDC_Transmit_FS+0x48>)
 8009512:	f7fe fd78 	bl	8008006 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009516:	4805      	ldr	r0, [pc, #20]	; (800952c <CDC_Transmit_FS+0x48>)
 8009518:	f7fe fdac 	bl	8008074 <USBD_CDC_TransmitPacket>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000488 	.word	0x20000488

08009530 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009546:	4618      	mov	r0, r3
 8009548:	371c      	adds	r7, #28
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
	...

08009554 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	6039      	str	r1, [r7, #0]
 800955e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2212      	movs	r2, #18
 8009564:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009566:	4b03      	ldr	r3, [pc, #12]	; (8009574 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	20000154 	.word	0x20000154

08009578 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2204      	movs	r2, #4
 8009588:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800958a:	4b03      	ldr	r3, [pc, #12]	; (8009598 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	20000168 	.word	0x20000168

0800959c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d105      	bne.n	80095ba <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	4907      	ldr	r1, [pc, #28]	; (80095d0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80095b2:	4808      	ldr	r0, [pc, #32]	; (80095d4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80095b4:	f7ff fdf7 	bl	80091a6 <USBD_GetString>
 80095b8:	e004      	b.n	80095c4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	4904      	ldr	r1, [pc, #16]	; (80095d0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80095be:	4805      	ldr	r0, [pc, #20]	; (80095d4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80095c0:	f7ff fdf1 	bl	80091a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20001758 	.word	0x20001758
 80095d4:	08009ec8 	.word	0x08009ec8

080095d8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	6039      	str	r1, [r7, #0]
 80095e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	4904      	ldr	r1, [pc, #16]	; (80095f8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80095e8:	4804      	ldr	r0, [pc, #16]	; (80095fc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80095ea:	f7ff fddc 	bl	80091a6 <USBD_GetString>
  return USBD_StrDesc;
 80095ee:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	20001758 	.word	0x20001758
 80095fc:	08009ee0 	.word	0x08009ee0

08009600 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	221a      	movs	r2, #26
 8009610:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009612:	f000 f843 	bl	800969c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009616:	4b02      	ldr	r3, [pc, #8]	; (8009620 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	2000016c 	.word	0x2000016c

08009624 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	6039      	str	r1, [r7, #0]
 800962e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d105      	bne.n	8009642 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	4907      	ldr	r1, [pc, #28]	; (8009658 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800963a:	4808      	ldr	r0, [pc, #32]	; (800965c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800963c:	f7ff fdb3 	bl	80091a6 <USBD_GetString>
 8009640:	e004      	b.n	800964c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	4904      	ldr	r1, [pc, #16]	; (8009658 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009646:	4805      	ldr	r0, [pc, #20]	; (800965c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009648:	f7ff fdad 	bl	80091a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800964c:	4b02      	ldr	r3, [pc, #8]	; (8009658 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20001758 	.word	0x20001758
 800965c:	08009ef4 	.word	0x08009ef4

08009660 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	6039      	str	r1, [r7, #0]
 800966a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d105      	bne.n	800967e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	4907      	ldr	r1, [pc, #28]	; (8009694 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009676:	4808      	ldr	r0, [pc, #32]	; (8009698 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009678:	f7ff fd95 	bl	80091a6 <USBD_GetString>
 800967c:	e004      	b.n	8009688 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	4904      	ldr	r1, [pc, #16]	; (8009694 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009682:	4805      	ldr	r0, [pc, #20]	; (8009698 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009684:	f7ff fd8f 	bl	80091a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009688:	4b02      	ldr	r3, [pc, #8]	; (8009694 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800968a:	4618      	mov	r0, r3
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20001758 	.word	0x20001758
 8009698:	08009f00 	.word	0x08009f00

0800969c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096a2:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <Get_SerialNum+0x44>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096a8:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <Get_SerialNum+0x48>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096ae:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <Get_SerialNum+0x4c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4413      	add	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d009      	beq.n	80096d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096c2:	2208      	movs	r2, #8
 80096c4:	4909      	ldr	r1, [pc, #36]	; (80096ec <Get_SerialNum+0x50>)
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 f814 	bl	80096f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096cc:	2204      	movs	r2, #4
 80096ce:	4908      	ldr	r1, [pc, #32]	; (80096f0 <Get_SerialNum+0x54>)
 80096d0:	68b8      	ldr	r0, [r7, #8]
 80096d2:	f000 f80f 	bl	80096f4 <IntToUnicode>
  }
}
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	1fff7590 	.word	0x1fff7590
 80096e4:	1fff7594 	.word	0x1fff7594
 80096e8:	1fff7598 	.word	0x1fff7598
 80096ec:	2000016e 	.word	0x2000016e
 80096f0:	2000017e 	.word	0x2000017e

080096f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009706:	2300      	movs	r3, #0
 8009708:	75fb      	strb	r3, [r7, #23]
 800970a:	e027      	b.n	800975c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	0f1b      	lsrs	r3, r3, #28
 8009710:	2b09      	cmp	r3, #9
 8009712:	d80b      	bhi.n	800972c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	0f1b      	lsrs	r3, r3, #28
 8009718:	b2da      	uxtb	r2, r3
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	4619      	mov	r1, r3
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	440b      	add	r3, r1
 8009724:	3230      	adds	r2, #48	; 0x30
 8009726:	b2d2      	uxtb	r2, r2
 8009728:	701a      	strb	r2, [r3, #0]
 800972a:	e00a      	b.n	8009742 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	0f1b      	lsrs	r3, r3, #28
 8009730:	b2da      	uxtb	r2, r3
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	4619      	mov	r1, r3
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	440b      	add	r3, r1
 800973c:	3237      	adds	r2, #55	; 0x37
 800973e:	b2d2      	uxtb	r2, r2
 8009740:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	005b      	lsls	r3, r3, #1
 800974c:	3301      	adds	r3, #1
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	4413      	add	r3, r2
 8009752:	2200      	movs	r2, #0
 8009754:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	3301      	adds	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]
 800975c:	7dfa      	ldrb	r2, [r7, #23]
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	429a      	cmp	r2, r3
 8009762:	d3d3      	bcc.n	800970c <IntToUnicode+0x18>
  }
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <LL_AHB2_GRP1_EnableClock>:
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800977a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800977e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009780:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4313      	orrs	r3, r2
 8009788:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800978a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800978e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4013      	ands	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009796:	68fb      	ldr	r3, [r7, #12]
}
 8009798:	bf00      	nop
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <LL_APB1_GRP1_EnableClock>:
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80097ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80097bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4013      	ands	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80097c8:	68fb      	ldr	r3, [r7, #12]
}
 80097ca:	bf00      	nop
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
	...

080097d8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b09c      	sub	sp, #112	; 0x70
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	609a      	str	r2, [r3, #8]
 80097ec:	60da      	str	r2, [r3, #12]
 80097ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80097f0:	f107 030c 	add.w	r3, r7, #12
 80097f4:	2250      	movs	r2, #80	; 0x50
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fb3b 	bl	8009e74 <memset>
  if(pcdHandle->Instance==USB)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a23      	ldr	r2, [pc, #140]	; (8009890 <HAL_PCD_MspInit+0xb8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d13e      	bne.n	8009886 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800980c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800980e:	2318      	movs	r3, #24
 8009810:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009816:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009818:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800981c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800981e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009822:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8009824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009828:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800982a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800982e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009830:	f107 030c 	add.w	r3, r7, #12
 8009834:	4618      	mov	r0, r3
 8009836:	f7fa fd27 	bl	8004288 <HAL_RCCEx_PeriphCLKConfig>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8009840:	f7f6 ff1d 	bl	800067e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009844:	2001      	movs	r0, #1
 8009846:	f7ff ff94 	bl	8009772 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800984a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800984e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009850:	2302      	movs	r3, #2
 8009852:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009854:	2300      	movs	r3, #0
 8009856:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009858:	2300      	movs	r3, #0
 800985a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800985c:	230a      	movs	r3, #10
 800985e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009860:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009864:	4619      	mov	r1, r3
 8009866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800986a:	f7f7 fb05 	bl	8000e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800986e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009872:	f7ff ff97 	bl	80097a4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009876:	2200      	movs	r2, #0
 8009878:	2100      	movs	r1, #0
 800987a:	2014      	movs	r0, #20
 800987c:	f7f7 fac7 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009880:	2014      	movs	r0, #20
 8009882:	f7f7 fade 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009886:	bf00      	nop
 8009888:	3770      	adds	r7, #112	; 0x70
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	40006800 	.word	0x40006800

08009894 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80098a8:	4619      	mov	r1, r3
 80098aa:	4610      	mov	r0, r2
 80098ac:	f7fe fcde 	bl	800826c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	4613      	mov	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	440b      	add	r3, r1
 80098d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	4619      	mov	r1, r3
 80098e2:	f7fe fd18 	bl	8008316 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80098e6:	bf00      	nop
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	440b      	add	r3, r1
 800990e:	333c      	adds	r3, #60	; 0x3c
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	4619      	mov	r1, r3
 8009916:	f7fe fd61 	bl	80083dc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fe75 	bl	8008620 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009946:	2301      	movs	r3, #1
 8009948:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	2b02      	cmp	r3, #2
 8009950:	d001      	beq.n	8009956 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009952:	f7f6 fe94 	bl	800067e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800995c:	7bfa      	ldrb	r2, [r7, #15]
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe fe1f 	bl	80085a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800996c:	4618      	mov	r0, r3
 800996e:	f7fe fdcb 	bl	8008508 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fe1a 	bl	80085c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <HAL_PCD_SuspendCallback+0x30>)
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	4a03      	ldr	r2, [pc, #12]	; (80099ac <HAL_PCD_SuspendCallback+0x30>)
 800999e:	f043 0306 	orr.w	r3, r3, #6
 80099a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	e000ed00 	.word	0xe000ed00

080099b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d007      	beq.n	80099d0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099c0:	4b08      	ldr	r3, [pc, #32]	; (80099e4 <HAL_PCD_ResumeCallback+0x34>)
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	4a07      	ldr	r2, [pc, #28]	; (80099e4 <HAL_PCD_ResumeCallback+0x34>)
 80099c6:	f023 0306 	bic.w	r3, r3, #6
 80099ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80099cc:	f000 f9fc 	bl	8009dc8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fe0a 	bl	80085f0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	e000ed00 	.word	0xe000ed00

080099e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80099f0:	4a2c      	ldr	r2, [pc, #176]	; (8009aa4 <USBD_LL_Init+0xbc>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a2a      	ldr	r2, [pc, #168]	; (8009aa4 <USBD_LL_Init+0xbc>)
 80099fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009a00:	f7f9 f924 	bl	8002c4c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009a04:	4b27      	ldr	r3, [pc, #156]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a06:	4a28      	ldr	r2, [pc, #160]	; (8009aa8 <USBD_LL_Init+0xc0>)
 8009a08:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a0a:	4b26      	ldr	r3, [pc, #152]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a10:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a12:	2202      	movs	r2, #2
 8009a14:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a16:	4b23      	ldr	r3, [pc, #140]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a18:	2202      	movs	r2, #2
 8009a1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009a1c:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a22:	4b20      	ldr	r3, [pc, #128]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a28:	4b1e      	ldr	r3, [pc, #120]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a2e:	4b1d      	ldr	r3, [pc, #116]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a34:	481b      	ldr	r0, [pc, #108]	; (8009aa4 <USBD_LL_Init+0xbc>)
 8009a36:	f7f7 fbb7 	bl	80011a8 <HAL_PCD_Init>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009a40:	f7f6 fe1d 	bl	800067e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a4a:	2318      	movs	r3, #24
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2100      	movs	r1, #0
 8009a50:	f7f9 f870 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a5a:	2358      	movs	r3, #88	; 0x58
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	2180      	movs	r1, #128	; 0x80
 8009a60:	f7f9 f868 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a6a:	23c0      	movs	r3, #192	; 0xc0
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2181      	movs	r1, #129	; 0x81
 8009a70:	f7f9 f860 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2101      	movs	r1, #1
 8009a82:	f7f9 f857 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a90:	2200      	movs	r2, #0
 8009a92:	2182      	movs	r1, #130	; 0x82
 8009a94:	f7f9 f84e 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20001958 	.word	0x20001958
 8009aa8:	40006800 	.word	0x40006800

08009aac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f7 fc55 	bl	8001372 <HAL_PCD_Start>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f980 	bl	8009dd4 <USBD_Get_USB_Status>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	4608      	mov	r0, r1
 8009aec:	4611      	mov	r1, r2
 8009aee:	461a      	mov	r2, r3
 8009af0:	4603      	mov	r3, r0
 8009af2:	70fb      	strb	r3, [r7, #3]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70bb      	strb	r3, [r7, #2]
 8009af8:	4613      	mov	r3, r2
 8009afa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b0a:	78bb      	ldrb	r3, [r7, #2]
 8009b0c:	883a      	ldrh	r2, [r7, #0]
 8009b0e:	78f9      	ldrb	r1, [r7, #3]
 8009b10:	f7f7 fd9d 	bl	800164e <HAL_PCD_EP_Open>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 f95a 	bl	8009dd4 <USBD_Get_USB_Status>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	460b      	mov	r3, r1
 8009b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b48:	78fa      	ldrb	r2, [r7, #3]
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7f7 fde4 	bl	800171a <HAL_PCD_EP_Close>
 8009b52:	4603      	mov	r3, r0
 8009b54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 f93b 	bl	8009dd4 <USBD_Get_USB_Status>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f7 fea5 	bl	80018da <HAL_PCD_EP_SetStall>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 f91c 	bl	8009dd4 <USBD_Get_USB_Status>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bc4:	78fa      	ldrb	r2, [r7, #3]
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7f7 fed8 	bl	800197e <HAL_PCD_EP_ClrStall>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 f8fd 	bl	8009dd4 <USBD_Get_USB_Status>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da0c      	bge.n	8009c1e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	4613      	mov	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	440b      	add	r3, r1
 8009c18:	3302      	adds	r3, #2
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	e00b      	b.n	8009c36 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c1e:	78fb      	ldrb	r3, [r7, #3]
 8009c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c24:	68f9      	ldr	r1, [r7, #12]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	440b      	add	r3, r1
 8009c30:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009c34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c5c:	78fa      	ldrb	r2, [r7, #3]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f7 fccf 	bl	8001604 <HAL_PCD_SetAddress>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f8b1 	bl	8009dd4 <USBD_Get_USB_Status>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c9e:	7af9      	ldrb	r1, [r7, #11]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	f7f7 fdd6 	bl	8001854 <HAL_PCD_EP_Transmit>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f890 	bl	8009dd4 <USBD_Get_USB_Status>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b086      	sub	sp, #24
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ce0:	7af9      	ldrb	r1, [r7, #11]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	f7f7 fd60 	bl	80017aa <HAL_PCD_EP_Receive>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f86f 	bl	8009dd4 <USBD_Get_USB_Status>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d16:	78fa      	ldrb	r2, [r7, #3]
 8009d18:	4611      	mov	r1, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7f7 fd82 	bl	8001824 <HAL_PCD_EP_GetRxCount>
 8009d20:	4603      	mov	r3, r0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009d38:	78fb      	ldrb	r3, [r7, #3]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <HAL_PCDEx_LPM_Callback+0x18>
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d013      	beq.n	8009d6a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009d42:	e023      	b.n	8009d8c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d007      	beq.n	8009d5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009d4c:	f000 f83c 	bl	8009dc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d50:	4b10      	ldr	r3, [pc, #64]	; (8009d94 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	4a0f      	ldr	r2, [pc, #60]	; (8009d94 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d56:	f023 0306 	bic.w	r3, r3, #6
 8009d5a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fc44 	bl	80085f0 <USBD_LL_Resume>
    break;
 8009d68:	e010      	b.n	8009d8c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe fc27 	bl	80085c4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d005      	beq.n	8009d8a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	4a04      	ldr	r2, [pc, #16]	; (8009d94 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d84:	f043 0306 	orr.w	r3, r3, #6
 8009d88:	6113      	str	r3, [r2, #16]
    break;
 8009d8a:	bf00      	nop
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	e000ed00 	.word	0xe000ed00

08009d98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009da0:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <USBD_static_malloc+0x18>)
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	200001ac 	.word	0x200001ac

08009db4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]

}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009dcc:	f7f6 fbce 	bl	800056c <SystemClock_Config>
}
 8009dd0:	bf00      	nop
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d817      	bhi.n	8009e18 <USBD_Get_USB_Status+0x44>
 8009de8:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <USBD_Get_USB_Status+0x1c>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e07 	.word	0x08009e07
 8009df8:	08009e0d 	.word	0x08009e0d
 8009dfc:	08009e13 	.word	0x08009e13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
    break;
 8009e04:	e00b      	b.n	8009e1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e06:	2303      	movs	r3, #3
 8009e08:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0a:	e008      	b.n	8009e1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e10:	e005      	b.n	8009e1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e12:	2303      	movs	r3, #3
 8009e14:	73fb      	strb	r3, [r7, #15]
    break;
 8009e16:	e002      	b.n	8009e1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1c:	bf00      	nop
  }
  return usb_status;
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <__libc_init_array>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4d0d      	ldr	r5, [pc, #52]	; (8009e64 <__libc_init_array+0x38>)
 8009e30:	4c0d      	ldr	r4, [pc, #52]	; (8009e68 <__libc_init_array+0x3c>)
 8009e32:	1b64      	subs	r4, r4, r5
 8009e34:	10a4      	asrs	r4, r4, #2
 8009e36:	2600      	movs	r6, #0
 8009e38:	42a6      	cmp	r6, r4
 8009e3a:	d109      	bne.n	8009e50 <__libc_init_array+0x24>
 8009e3c:	4d0b      	ldr	r5, [pc, #44]	; (8009e6c <__libc_init_array+0x40>)
 8009e3e:	4c0c      	ldr	r4, [pc, #48]	; (8009e70 <__libc_init_array+0x44>)
 8009e40:	f000 f820 	bl	8009e84 <_init>
 8009e44:	1b64      	subs	r4, r4, r5
 8009e46:	10a4      	asrs	r4, r4, #2
 8009e48:	2600      	movs	r6, #0
 8009e4a:	42a6      	cmp	r6, r4
 8009e4c:	d105      	bne.n	8009e5a <__libc_init_array+0x2e>
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e54:	4798      	blx	r3
 8009e56:	3601      	adds	r6, #1
 8009e58:	e7ee      	b.n	8009e38 <__libc_init_array+0xc>
 8009e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e5e:	4798      	blx	r3
 8009e60:	3601      	adds	r6, #1
 8009e62:	e7f2      	b.n	8009e4a <__libc_init_array+0x1e>
 8009e64:	08009f90 	.word	0x08009f90
 8009e68:	08009f90 	.word	0x08009f90
 8009e6c:	08009f90 	.word	0x08009f90
 8009e70:	08009f94 	.word	0x08009f94

08009e74 <memset>:
 8009e74:	4402      	add	r2, r0
 8009e76:	4603      	mov	r3, r0
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d100      	bne.n	8009e7e <memset+0xa>
 8009e7c:	4770      	bx	lr
 8009e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e82:	e7f9      	b.n	8009e78 <memset+0x4>

08009e84 <_init>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	bf00      	nop
 8009e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8a:	bc08      	pop	{r3}
 8009e8c:	469e      	mov	lr, r3
 8009e8e:	4770      	bx	lr

08009e90 <_fini>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	bf00      	nop
 8009e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e96:	bc08      	pop	{r3}
 8009e98:	469e      	mov	lr, r3
 8009e9a:	4770      	bx	lr

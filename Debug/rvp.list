
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009124  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009260  08009260  00019260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  20000004  0800935c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000860  2000016c  080094c4  0002016c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200009cc  080094c4  000209cc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001af27  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b1d  00000000  00000000  0003b0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000016e8  00000000  00000000  0003ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001580  00000000  00000000  000402c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00022a48  00000000  00000000  00041848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000160f8  00000000  00000000  00064290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cd594  00000000  00000000  0007a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0014791c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005cfc  00000000  00000000  00147970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000016c 	.word	0x2000016c
 8000158:	00000000 	.word	0x00000000
 800015c:	08009248 	.word	0x08009248

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000170 	.word	0x20000170
 8000178:	08009248 	.word	0x08009248

0800017c <read_register>:
#include "imu.h"

void read_register(uint8_t r, uint8_t pRxData[]) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	6039      	str	r1, [r7, #0]
 8000186:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800018e:	b2db      	uxtb	r3, r3
 8000190:	733b      	strb	r3, [r7, #12]
	CS_START();
 8000192:	2200      	movs	r2, #0
 8000194:	2110      	movs	r1, #16
 8000196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800019a:	f000 fe91 	bl	8000ec0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 800019e:	f107 010c 	add.w	r1, r7, #12
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	2201      	movs	r2, #1
 80001a8:	4809      	ldr	r0, [pc, #36]	; (80001d0 <read_register+0x54>)
 80001aa:	f004 fa29 	bl	8004600 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 80001ae:	f04f 33ff 	mov.w	r3, #4294967295
 80001b2:	2201      	movs	r2, #1
 80001b4:	6839      	ldr	r1, [r7, #0]
 80001b6:	4806      	ldr	r0, [pc, #24]	; (80001d0 <read_register+0x54>)
 80001b8:	f004 fb90 	bl	80048dc <HAL_SPI_Receive>
//	HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 1, HAL_MAX_DELAY);
	CS_END();
 80001bc:	2201      	movs	r2, #1
 80001be:	2110      	movs	r1, #16
 80001c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001c4:	f000 fe7c 	bl	8000ec0 <HAL_GPIO_WritePin>
}
 80001c8:	bf00      	nop
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	200001a0 	.word	0x200001a0

080001d4 <write_register>:

void write_register(uint8_t r, uint8_t value) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	733b      	strb	r3, [r7, #12]
 80001e8:	79bb      	ldrb	r3, [r7, #6]
 80001ea:	737b      	strb	r3, [r7, #13]
	uint8_t pRxData[2] = { 0, 0 };
 80001ec:	2300      	movs	r3, #0
 80001ee:	813b      	strh	r3, [r7, #8]
	CS_START();
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f8:	f000 fe62 	bl	8000ec0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 2, HAL_MAX_DELAY);
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f107 010c 	add.w	r1, r7, #12
 8000204:	f04f 33ff 	mov.w	r3, #4294967295
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	2302      	movs	r3, #2
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <write_register+0x54>)
 800020e:	f004 fc95 	bl	8004b3c <HAL_SPI_TransmitReceive>
	CS_END();
 8000212:	2201      	movs	r2, #1
 8000214:	2110      	movs	r1, #16
 8000216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021a:	f000 fe51 	bl	8000ec0 <HAL_GPIO_WritePin>
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200001a0 	.word	0x200001a0

0800022c <read_x>:

uint16_t read_x() {
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	uint8_t pRxData[1] = { 0 };
 8000232:	2300      	movs	r3, #0
 8000234:	713b      	strb	r3, [r7, #4]
	read_register(ACCEL_XOUT_H, pRxData);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4619      	mov	r1, r3
 800023a:	203b      	movs	r0, #59	; 0x3b
 800023c:	f7ff ff9e 	bl	800017c <read_register>
	uint8_t pRxData2[1] = { 0 };
 8000240:	2300      	movs	r3, #0
 8000242:	703b      	strb	r3, [r7, #0]
	read_register(ACCEL_XOUT_L, pRxData2);
 8000244:	463b      	mov	r3, r7
 8000246:	4619      	mov	r1, r3
 8000248:	203c      	movs	r0, #60	; 0x3c
 800024a:	f7ff ff97 	bl	800017c <read_register>
	uint16_t x = (pRxData[0] << 8) | pRxData2[0];
 800024e:	793b      	ldrb	r3, [r7, #4]
 8000250:	021b      	lsls	r3, r3, #8
 8000252:	b21a      	sxth	r2, r3
 8000254:	783b      	ldrb	r3, [r7, #0]
 8000256:	b21b      	sxth	r3, r3
 8000258:	4313      	orrs	r3, r2
 800025a:	b21b      	sxth	r3, r3
 800025c:	80fb      	strh	r3, [r7, #6]
	return x;
 800025e:	88fb      	ldrh	r3, [r7, #6]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <read_y>:

uint16_t read_y() {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
	uint8_t pRxData[1] = { 0 };
 800026e:	2300      	movs	r3, #0
 8000270:	713b      	strb	r3, [r7, #4]
	read_register(ACCEL_YOUT_H, pRxData);
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4619      	mov	r1, r3
 8000276:	203d      	movs	r0, #61	; 0x3d
 8000278:	f7ff ff80 	bl	800017c <read_register>
	uint8_t pRxData2[1] = { 0 };
 800027c:	2300      	movs	r3, #0
 800027e:	703b      	strb	r3, [r7, #0]
	read_register(ACCEL_YOUT_L, pRxData2);
 8000280:	463b      	mov	r3, r7
 8000282:	4619      	mov	r1, r3
 8000284:	203e      	movs	r0, #62	; 0x3e
 8000286:	f7ff ff79 	bl	800017c <read_register>
	uint16_t y = (pRxData[0] << 8) | pRxData2[0];
 800028a:	793b      	ldrb	r3, [r7, #4]
 800028c:	021b      	lsls	r3, r3, #8
 800028e:	b21a      	sxth	r2, r3
 8000290:	783b      	ldrb	r3, [r7, #0]
 8000292:	b21b      	sxth	r3, r3
 8000294:	4313      	orrs	r3, r2
 8000296:	b21b      	sxth	r3, r3
 8000298:	80fb      	strh	r3, [r7, #6]
	return y;
 800029a:	88fb      	ldrh	r3, [r7, #6]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <read_z>:

uint16_t read_z() {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t pRxData[1] = { 0 };
 80002aa:	2300      	movs	r3, #0
 80002ac:	713b      	strb	r3, [r7, #4]
	read_register(ACCEL_ZOUT_H, pRxData);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4619      	mov	r1, r3
 80002b2:	203f      	movs	r0, #63	; 0x3f
 80002b4:	f7ff ff62 	bl	800017c <read_register>
	uint8_t pRxData2[1] = { 0 };
 80002b8:	2300      	movs	r3, #0
 80002ba:	703b      	strb	r3, [r7, #0]
	read_register(ACCEL_ZOUT_L, pRxData2);
 80002bc:	463b      	mov	r3, r7
 80002be:	4619      	mov	r1, r3
 80002c0:	2040      	movs	r0, #64	; 0x40
 80002c2:	f7ff ff5b 	bl	800017c <read_register>
	uint16_t z = (pRxData[0] << 8) | pRxData2[0];
 80002c6:	793b      	ldrb	r3, [r7, #4]
 80002c8:	021b      	lsls	r3, r3, #8
 80002ca:	b21a      	sxth	r2, r3
 80002cc:	783b      	ldrb	r3, [r7, #0]
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	4313      	orrs	r3, r2
 80002d2:	b21b      	sxth	r3, r3
 80002d4:	80fb      	strh	r3, [r7, #6]
	return z;
 80002d6:	88fb      	ldrh	r3, [r7, #6]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80002f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4013      	ands	r3, r2
 8000302:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000304:	68fb      	ldr	r3, [r7, #12]
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
	...

08000314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	2002      	movs	r0, #2
 800032a:	f7ff ffd9 	bl	80002e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ffd6 	bl	80002e0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033a:	4814      	ldr	r0, [pc, #80]	; (800038c <MX_GPIO_Init+0x78>)
 800033c:	f000 fdc0 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2110      	movs	r1, #16
 8000344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000348:	f000 fdba 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800034c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000350:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4619      	mov	r1, r3
 8000362:	480a      	ldr	r0, [pc, #40]	; (800038c <MX_GPIO_Init+0x78>)
 8000364:	f000 fc44 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000368:	2310      	movs	r3, #16
 800036a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036c:	2301      	movs	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4619      	mov	r1, r3
 800037c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000380:	f000 fc36 	bl	8000bf0 <HAL_GPIO_Init>

}
 8000384:	bf00      	nop
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	48000400 	.word	0x48000400

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fa71 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f85f 	bl	800045c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800039e:	f000 f8c9 	bl	8000534 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a2:	f7ff ffb7 	bl	8000314 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80003a6:	f008 fab7 	bl	8008918 <MX_USB_Device_Init>
  MX_SPI1_Init();
 80003aa:	f000 f917 	bl	80005dc <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	write_register(PWR_MGMT_1, (1UL << 7));
 80003ae:	2180      	movs	r1, #128	; 0x80
 80003b0:	206b      	movs	r0, #107	; 0x6b
 80003b2:	f7ff ff0f 	bl	80001d4 <write_register>
	HAL_Delay(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f000 fae6 	bl	8000988 <HAL_Delay>
	write_register(PWR_MGMT_1, (1UL << 7));
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	206b      	movs	r0, #107	; 0x6b
 80003c0:	f7ff ff08 	bl	80001d4 <write_register>
	HAL_Delay(100);
 80003c4:	2064      	movs	r0, #100	; 0x64
 80003c6:	f000 fadf 	bl	8000988 <HAL_Delay>
	for (int i = 0; i < 5; ++i) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
 80003ce:	e00f      	b.n	80003f0 <main+0x60>
		uint8_t pRxData[2] = { 0, 0 };
 80003d0:	2300      	movs	r3, #0
 80003d2:	813b      	strh	r3, [r7, #8]
		read_register(PWR_MGMT_1, pRxData);
 80003d4:	f107 0308 	add.w	r3, r7, #8
 80003d8:	4619      	mov	r1, r3
 80003da:	206b      	movs	r0, #107	; 0x6b
 80003dc:	f7ff fece 	bl	800017c <read_register>
		if (pRxData[0] & (1UL << 6)) {
 80003e0:	7a3b      	ldrb	r3, [r7, #8]
 80003e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d106      	bne.n	80003f8 <main+0x68>
	for (int i = 0; i < 5; ++i) {
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	3301      	adds	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	ddec      	ble.n	80003d0 <main+0x40>
 80003f6:	e000      	b.n	80003fa <main+0x6a>
			break;
 80003f8:	bf00      	nop
		}
	}
	write_register(PWR_MGMT_1, 0);
 80003fa:	2100      	movs	r1, #0
 80003fc:	206b      	movs	r0, #107	; 0x6b
 80003fe:	f7ff fee9 	bl	80001d4 <write_register>
	for (int i = 0; i < 5; ++i) {
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	e00c      	b.n	8000422 <main+0x92>
		uint8_t pRxData[2] = { 0, 0 };
 8000408:	2300      	movs	r3, #0
 800040a:	80bb      	strh	r3, [r7, #4]
		read_register(WHO_AM_I, pRxData);
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	4619      	mov	r1, r3
 8000410:	2075      	movs	r0, #117	; 0x75
 8000412:	f7ff feb3 	bl	800017c <read_register>
		if (pRxData[0] == 0xAF) {
 8000416:	793b      	ldrb	r3, [r7, #4]
 8000418:	2baf      	cmp	r3, #175	; 0xaf
 800041a:	d006      	beq.n	800042a <main+0x9a>
	for (int i = 0; i < 5; ++i) {
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	3301      	adds	r3, #1
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	2b04      	cmp	r3, #4
 8000426:	ddef      	ble.n	8000408 <main+0x78>
 8000428:	e000      	b.n	800042c <main+0x9c>
			break;
 800042a:	bf00      	nop
		}
	}
	write_register(PWR_MGMT_2, 0);
 800042c:	2100      	movs	r1, #0
 800042e:	206c      	movs	r0, #108	; 0x6c
 8000430:	f7ff fed0 	bl	80001d4 <write_register>
	HAL_Delay(10);
 8000434:	200a      	movs	r0, #10
 8000436:	f000 faa7 	bl	8000988 <HAL_Delay>
//		TOGGLE_LED();
//		HAL_Delay(500);
//		TOGGLE_LED();
//		HAL_Delay(500);

		uint16_t x = read_x();
 800043a:	f7ff fef7 	bl	800022c <read_x>
 800043e:	4603      	mov	r3, r0
 8000440:	81fb      	strh	r3, [r7, #14]
		uint16_t y = read_y();
 8000442:	f7ff ff11 	bl	8000268 <read_y>
 8000446:	4603      	mov	r3, r0
 8000448:	81bb      	strh	r3, [r7, #12]
		uint16_t z = read_z();
 800044a:	f7ff ff2b 	bl	80002a4 <read_z>
 800044e:	4603      	mov	r3, r0
 8000450:	817b      	strh	r3, [r7, #10]

		HAL_Delay(1);
 8000452:	2001      	movs	r0, #1
 8000454:	f000 fa98 	bl	8000988 <HAL_Delay>
	while (1) {
 8000458:	e7ef      	b.n	800043a <main+0xaa>
	...

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b09a      	sub	sp, #104	; 0x68
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0320 	add.w	r3, r7, #32
 8000466:	2248      	movs	r2, #72	; 0x48
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f008 fee4 	bl	8009238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000482:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <SystemClock_Config+0xd4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800048a:	4a29      	ldr	r2, [pc, #164]	; (8000530 <SystemClock_Config+0xd4>)
 800048c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <SystemClock_Config+0xd4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800049e:	2326      	movs	r3, #38	; 0x26
 80004a0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80004a2:	2300      	movs	r3, #0
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004ac:	2301      	movs	r3, #1
 80004ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b0:	2340      	movs	r3, #64	; 0x40
 80004b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004b4:	2300      	movs	r3, #0
 80004b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004b8:	2360      	movs	r3, #96	; 0x60
 80004ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	2302      	movs	r3, #2
 80004be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004c0:	2301      	movs	r3, #1
 80004c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80004c8:	2320      	movs	r3, #32
 80004ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80004d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fdac 	bl	8003040 <HAL_RCC_OscConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004ee:	f000 f83e 	bl	800056e <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80004f2:	236f      	movs	r3, #111	; 0x6f
 80004f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f6:	2303      	movs	r3, #3
 80004f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2103      	movs	r1, #3
 8000512:	4618      	mov	r0, r3
 8000514:	f003 f920 	bl	8003758 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800051e:	f000 f826 	bl	800056e <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000522:	f003 feb3 	bl	800428c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000526:	bf00      	nop
 8000528:	3768      	adds	r7, #104	; 0x68
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	58000400 	.word	0x58000400

08000534 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053a:	463b      	mov	r3, r7
 800053c:	2250      	movs	r2, #80	; 0x50
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f008 fe79 	bl	8009238 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800054c:	2300      	movs	r3, #0
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000550:	2310      	movs	r3, #16
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fd22 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000562:	f000 f804 	bl	800056e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000566:	bf00      	nop
 8000568:	3750      	adds	r7, #80	; 0x50
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000572:	b672      	cpsid	i
}
 8000574:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000576:	e7fe      	b.n	8000576 <Error_Handler+0x8>

08000578 <LL_AHB2_GRP1_EnableClock>:
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4013      	ands	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059c:	68fb      	ldr	r3, [r7, #12]
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b085      	sub	sp, #20
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4013      	ands	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_SPI1_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MX_SPI1_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_SPI1_Init+0x74>)
 80005e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_SPI1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_SPI1_Init+0x74>)
 80005f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_SPI1_Init+0x74>)
 80005fe:	2202      	movs	r2, #2
 8000600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_SPI1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_SPI1_Init+0x74>)
 800060a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_SPI1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_SPI1_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_SPI1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_SPI1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_SPI1_Init+0x74>)
 800062a:	2207      	movs	r2, #7
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_SPI1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_SPI1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_SPI1_Init+0x74>)
 800063c:	f003 ff3d 	bl	80044ba <HAL_SPI_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000646:	f7ff ff92 	bl	800056e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200001a0 	.word	0x200001a0
 8000654:	40013000 	.word	0x40013000

08000658 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_SPI_MspInit+0x5c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d117      	bne.n	80006aa <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800067a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800067e:	f7ff ff94 	bl	80005aa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff78 	bl	8000578 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000688:	23c2      	movs	r3, #194	; 0xc2
 800068a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000698:	2305      	movs	r3, #5
 800069a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f000 faa3 	bl	8000bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3720      	adds	r7, #32
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40013000 	.word	0x40013000

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2101      	movs	r1, #1
 80006c0:	f06f 000b 	mvn.w	r0, #11
 80006c4:	f000 fa5f 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2101      	movs	r1, #1
 80006cc:	f06f 000a 	mvn.w	r0, #10
 80006d0:	f000 fa59 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	f06f 0009 	mvn.w	r0, #9
 80006dc:	f000 fa53 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	f06f 0004 	mvn.w	r0, #4
 80006e8:	f000 fa4d 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	f06f 0003 	mvn.w	r0, #3
 80006f4:	f000 fa47 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	f06f 0001 	mvn.w	r0, #1
 8000700:	f000 fa41 	bl	8000b86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x4>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000754:	f000 f8ec 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <USB_LP_IRQHandler+0x10>)
 8000762:	f000 fccc 	bl	80010fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200006d8 	.word	0x200006d8

08000770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemInit+0x90>)
 8000776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077a:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemInit+0x90>)
 800077c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000798:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800079c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800079e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <SystemInit+0x94>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80007ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ba:	f023 0305 	bic.w	r3, r3, #5
 80007be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ce:	f023 0301 	bic.w	r3, r3, #1
 80007d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <SystemInit+0x98>)
 80007dc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00
 8000804:	faf6fefb 	.word	0xfaf6fefb
 8000808:	22041000 	.word	0x22041000

0800080c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800080c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000810:	3304      	adds	r3, #4

08000812 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000812:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000814:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000816:	d3f9      	bcc.n	800080c <CopyDataInit>
  bx lr
 8000818:	4770      	bx	lr

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800081a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800081c:	3004      	adds	r0, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800081e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>
  bx lr
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000828:	f7ff ffa2 	bl	8000770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <LoopForever+0x8>)
 800082e:	490c      	ldr	r1, [pc, #48]	; (8000860 <LoopForever+0xc>)
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <LoopForever+0x10>)
 8000832:	2300      	movs	r3, #0
 8000834:	f7ff ffed 	bl	8000812 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <LoopForever+0x14>)
 800083a:	490c      	ldr	r1, [pc, #48]	; (800086c <LoopForever+0x18>)
 800083c:	2300      	movs	r3, #0
 800083e:	f7ff ffee 	bl	800081e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopForever+0x1c>)
 8000844:	490b      	ldr	r1, [pc, #44]	; (8000874 <LoopForever+0x20>)
 8000846:	2300      	movs	r3, #0
 8000848:	f7ff ffe9 	bl	800081e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084c:	f008 fcd0 	bl	80091f0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000850:	f7ff fd9e 	bl	8000390 <main>

08000854 <LoopForever>:

LoopForever:
  b LoopForever
 8000854:	e7fe      	b.n	8000854 <LoopForever>
 8000856:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000858:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 800085c:	20000004 	.word	0x20000004
 8000860:	2000016c 	.word	0x2000016c
 8000864:	0800935c 	.word	0x0800935c
  INIT_BSS _sbss, _ebss
 8000868:	2000016c 	.word	0x2000016c
 800086c:	200009cc 	.word	0x200009cc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000870:	20030000 	.word	0x20030000
 8000874:	20030000 	.word	0x20030000

08000878 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_Init+0x3c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <HAL_Init+0x3c>)
 800088c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000890:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000892:	2003      	movs	r0, #3
 8000894:	f000 f96c 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000898:	2000      	movs	r0, #0
 800089a:	f000 f80f 	bl	80008bc <HAL_InitTick>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	e001      	b.n	80008ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008aa:	f7ff ff05 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58004000 	.word	0x58004000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_InitTick+0x6c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d024      	beq.n	800091a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008d0:	f003 f8ee 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 80008d4:	4602      	mov	r2, r0
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_InitTick+0x6c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f974 	bl	8000bd6 <HAL_SYSTICK_Config>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10f      	bne.n	8000914 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d809      	bhi.n	800090e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000902:	f000 f940 	bl	8000b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <HAL_InitTick+0x70>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	e007      	b.n	800091e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e004      	b.n	800091e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e001      	b.n	800091e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000000c 	.word	0x2000000c
 800092c:	20000008 	.word	0x20000008

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2000000c 	.word	0x2000000c
 8000954:	20000204 	.word	0x20000204

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000204 	.word	0x20000204

08000970 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetTickPrio+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff ffe2 	bl	8000958 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_Delay+0x44>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffd2 	bl	8000958 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
    {
    }
  }
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000000c 	.word	0x2000000c

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4907      	ldr	r1, [pc, #28]	; (8000a6c <__NVIC_EnableIRQ+0x38>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff29 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff40 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff33 	bl	8000a34 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa4 	bl	8000b2c <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	e146      	b.n	8000e8e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 8138 	beq.w	8000e88 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_GPIO_Init+0x40>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d130      	bne.n	8000c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	f003 0201 	and.w	r2, r3, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	6939      	ldr	r1, [r7, #16]
 8000d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0203 	and.w	r2, r3, #3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8092 	beq.w	8000e88 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d64:	4a51      	ldr	r2, [pc, #324]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d8e:	d013      	beq.n	8000db8 <HAL_GPIO_Init+0x1c8>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a47      	ldr	r2, [pc, #284]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d00d      	beq.n	8000db4 <HAL_GPIO_Init+0x1c4>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d007      	beq.n	8000db0 <HAL_GPIO_Init+0x1c0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d101      	bne.n	8000dac <HAL_GPIO_Init+0x1bc>
 8000da8:	2304      	movs	r3, #4
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000dac:	2307      	movs	r3, #7
 8000dae:	e004      	b.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000db8:	2300      	movs	r3, #0
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	f002 0203 	and.w	r2, r2, #3
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	4093      	lsls	r3, r2
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dca:	4938      	ldr	r1, [pc, #224]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dfc:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e26:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e52:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa22 f303 	lsr.w	r3, r2, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f47f aeb1 	bne.w	8000c00 <HAL_GPIO_Init+0x10>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48001000 	.word	0x48001000
 8000ebc:	58000800 	.word	0x58000800

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af06      	add	r7, sp, #24
 8000ef6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e0d7      	b.n	80010b2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d106      	bne.n	8000f1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f007 fe66 	bl	8008be8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 f9ee 	bl	800530a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e04c      	b.n	8000fce <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	440b      	add	r3, r1
 8000f44:	3301      	adds	r3, #1
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	b298      	uxth	r0, r3
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	3336      	adds	r3, #54	; 0x36
 8000f72:	4602      	mov	r2, r0
 8000f74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	3303      	adds	r3, #3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3338      	adds	r3, #56	; 0x38
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	333c      	adds	r3, #60	; 0x3c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	3340      	adds	r3, #64	; 0x40
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3ad      	bcc.n	8000f34 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e044      	b.n	8001068 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	440b      	add	r3, r1
 8001018:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3301      	adds	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3b5      	bcc.n	8000fde <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	687e      	ldr	r6, [r7, #4]
 800107a:	466d      	mov	r5, sp
 800107c:	f106 0410 	add.w	r4, r6, #16
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	602b      	str	r3, [r5, #0]
 8001088:	1d33      	adds	r3, r6, #4
 800108a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f004 f957 	bl	8005340 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f001 fc11 	bl	80028d2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_PCD_Start+0x16>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e012      	b.n	80010f6 <HAL_PCD_Start+0x3c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 f8fd 	bl	80052dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 f8b2 	bl	8007250 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f8b7 	bl	800727e <USB_ReadInterrupts>
 8001110:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fb0e 	bl	800173e <PCD_EP_ISR_Handler>

    return;
 8001122:	e110      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112a:	2b00      	cmp	r3, #0
 800112c:	d013      	beq.n	8001156 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001140:	b292      	uxth	r2, r2
 8001142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f007 fe01 	bl	8008d4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800114c:	2100      	movs	r1, #0
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f8fc 	bl	800134c <HAL_PCD_SetAddress>

    return;
 8001154:	e0f7      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00c      	beq.n	800117a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001172:	b292      	uxth	r2, r2
 8001174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001178:	e0e5      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00c      	beq.n	800119e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800118c:	b29a      	uxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001196:	b292      	uxth	r2, r2
 8001198:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800119c:	e0d3      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d034      	beq.n	8001212 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0204 	bic.w	r2, r2, #4
 80011ba:	b292      	uxth	r2, r2
 80011bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0208 	bic.w	r2, r2, #8
 80011d2:	b292      	uxth	r2, r2
 80011d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d107      	bne.n	80011f2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011ea:	2100      	movs	r1, #0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f007 ff7f 	bl	80090f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f007 fde4 	bl	8008dc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800120a:	b292      	uxth	r2, r2
 800120c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001210:	e099      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001218:	2b00      	cmp	r3, #0
 800121a:	d027      	beq.n	800126c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0208 	orr.w	r2, r2, #8
 800122e:	b292      	uxth	r2, r2
 8001230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001246:	b292      	uxth	r2, r2
 8001248:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0204 	orr.w	r2, r2, #4
 800125e:	b292      	uxth	r2, r2
 8001260:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f007 fd91 	bl	8008d8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800126a:	e06c      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	2b00      	cmp	r3, #0
 8001274:	d040      	beq.n	80012f8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001288:	b292      	uxth	r2, r2
 800128a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d12b      	bne.n	80012f0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0204 	orr.w	r2, r2, #4
 80012aa:	b292      	uxth	r2, r2
 80012ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0208 	orr.w	r2, r2, #8
 80012c2:	b292      	uxth	r2, r2
 80012c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012d8:	b29b      	uxth	r3, r3
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012e6:	2101      	movs	r1, #1
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f007 ff01 	bl	80090f0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80012ee:	e02a      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f007 fd4b 	bl	8008d8c <HAL_PCD_SuspendCallback>
    return;
 80012f6:	e026      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00f      	beq.n	8001322 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001314:	b292      	uxth	r2, r2
 8001316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f007 fd09 	bl	8008d32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001320:	e011      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133e:	b292      	uxth	r2, r2
 8001340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001344:	bf00      	nop
  }
}
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_PCD_SetAddress+0x1a>
 8001362:	2302      	movs	r3, #2
 8001364:	e013      	b.n	800138e <HAL_PCD_SetAddress+0x42>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	78fa      	ldrb	r2, [r7, #3]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f005 ff52 	bl	8007228 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	4608      	mov	r0, r1
 80013a0:	4611      	mov	r1, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	4603      	mov	r3, r0
 80013a6:	70fb      	strb	r3, [r7, #3]
 80013a8:	460b      	mov	r3, r1
 80013aa:	803b      	strh	r3, [r7, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da0e      	bge.n	80013da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2201      	movs	r2, #1
 80013d6:	705a      	strb	r2, [r3, #1]
 80013d8:	e00e      	b.n	80013f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	f003 0207 	and.w	r2, r3, #7
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001404:	883a      	ldrh	r2, [r7, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	78ba      	ldrb	r2, [r7, #2]
 800140e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001422:	78bb      	ldrb	r3, [r7, #2]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d102      	bne.n	800142e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_PCD_EP_Open+0xa6>
 8001438:	2302      	movs	r3, #2
 800143a:	e00e      	b.n	800145a <HAL_PCD_EP_Open+0xc4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68f9      	ldr	r1, [r7, #12]
 800144a:	4618      	mov	r0, r3
 800144c:	f003 ff9a 	bl	8005384 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001458:	7afb      	ldrb	r3, [r7, #11]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800146e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da0e      	bge.n	8001494 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	705a      	strb	r2, [r3, #1]
 8001492:	e00e      	b.n	80014b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	f003 0207 	and.w	r2, r3, #7
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_PCD_EP_Close+0x6a>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e00e      	b.n	80014ea <HAL_PCD_EP_Close+0x88>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fae6 	bl	8005aac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	460b      	mov	r3, r1
 8001500:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	f003 0207 	and.w	r2, r3, #7
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2200      	movs	r2, #0
 8001530:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	b2da      	uxtb	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6979      	ldr	r1, [r7, #20]
 800154e:	4618      	mov	r0, r3
 8001550:	f004 fc99 	bl	8005e86 <USB_EPStartXfer>
 8001554:	e005      	b.n	8001562 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6979      	ldr	r1, [r7, #20]
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fc92 	bl	8005e86 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	460b      	mov	r3, r1
 800157a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2201      	movs	r2, #1
 80015b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6979      	ldr	r1, [r7, #20]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 fc56 	bl	8005e86 <USB_EPStartXfer>
 80015da:	e005      	b.n	80015e8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6979      	ldr	r1, [r7, #20]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fc4f 	bl	8005e86 <USB_EPStartXfer>
  }

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	f003 0207 	and.w	r2, r3, #7
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	d901      	bls.n	8001610 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e03e      	b.n	800168e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001614:	2b00      	cmp	r3, #0
 8001616:	da0e      	bge.n	8001636 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2201      	movs	r2, #1
 8001632:	705a      	strb	r2, [r3, #1]
 8001634:	e00c      	b.n	8001650 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	b2da      	uxtb	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_PCD_EP_SetStall+0x7e>
 800166c:	2302      	movs	r3, #2
 800166e:	e00e      	b.n	800168e <HAL_PCD_EP_SetStall+0x9c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	4618      	mov	r0, r3
 8001680:	f005 fcd3 	bl	800702a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f003 020f 	and.w	r2, r3, #15
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d901      	bls.n	80016b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e040      	b.n	8001736 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da0e      	bge.n	80016da <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	705a      	strb	r2, [r3, #1]
 80016d8:	e00e      	b.n	80016f8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	f003 0207 	and.w	r2, r3, #7
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	b2da      	uxtb	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_PCD_EP_ClrStall+0x82>
 8001714:	2302      	movs	r3, #2
 8001716:	e00e      	b.n	8001736 <HAL_PCD_EP_ClrStall+0xa0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68f9      	ldr	r1, [r7, #12]
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fcd0 	bl	80070cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b096      	sub	sp, #88	; 0x58
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001746:	e39c      	b.n	8001e82 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001750:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001754:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001762:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 815e 	bne.w	8001a28 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800176c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	d150      	bne.n	800181a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001788:	81fb      	strh	r3, [r7, #14]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001798:	b29b      	uxth	r3, r3
 800179a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3328      	adds	r3, #40	; 0x28
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	441a      	add	r2, r3
 80017d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017d8:	2100      	movs	r1, #0
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f007 fa8f 	bl	8008cfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 834a 	beq.w	8001e82 <PCD_EP_ISR_Handler+0x744>
 80017ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 8345 	bne.w	8001e82 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001804:	b2da      	uxtb	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b292      	uxth	r2, r2
 800180c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001818:	e333      	b.n	8001e82 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001820:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800182c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001834:	2b00      	cmp	r3, #0
 8001836:	d032      	beq.n	800189e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001840:	b29b      	uxth	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	4413      	add	r3, r2
 8001852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800185c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800185e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800186a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800186c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800186e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001870:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001872:	b29b      	uxth	r3, r3
 8001874:	f005 fd55 	bl	8007322 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b29a      	uxth	r2, r3
 8001880:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001884:	4013      	ands	r3, r2
 8001886:	823b      	strh	r3, [r7, #16]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	8a3a      	ldrh	r2, [r7, #16]
 800188e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001892:	b292      	uxth	r2, r2
 8001894:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f007 fa04 	bl	8008ca4 <HAL_PCD_SetupStageCallback>
 800189c:	e2f1      	b.n	8001e82 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800189e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f280 82ed 	bge.w	8001e82 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018b4:	4013      	ands	r3, r2
 80018b6:	83fb      	strh	r3, [r7, #30]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	8bfa      	ldrh	r2, [r7, #30]
 80018be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c2:	b292      	uxth	r2, r2
 80018c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d019      	beq.n	800192a <PCD_EP_ISR_Handler+0x1ec>
 80018f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d015      	beq.n	800192a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001904:	6959      	ldr	r1, [r3, #20]
 8001906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001908:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800190a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800190c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800190e:	b29b      	uxth	r3, r3
 8001910:	f005 fd07 	bl	8007322 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	441a      	add	r2, r3
 800191e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001920:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001922:	2100      	movs	r1, #0
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f007 f9cf 	bl	8008cc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 82a3 	bne.w	8001e82 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4413      	add	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2b3e      	cmp	r3, #62	; 0x3e
 8001962:	d918      	bls.n	8001996 <PCD_EP_ISR_Handler+0x258>
 8001964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
 800196c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <PCD_EP_ISR_Handler+0x240>
 8001978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197a:	3b01      	subs	r3, #1
 800197c:	647b      	str	r3, [r7, #68]	; 0x44
 800197e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001980:	b29b      	uxth	r3, r3
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	b29b      	uxth	r3, r3
 8001986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800198a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800198e:	b29a      	uxth	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	801a      	strh	r2, [r3, #0]
 8001994:	e029      	b.n	80019ea <PCD_EP_ISR_Handler+0x2ac>
 8001996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d112      	bne.n	80019c4 <PCD_EP_ISR_Handler+0x286>
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019bc:	b29a      	uxth	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	e012      	b.n	80019ea <PCD_EP_ISR_Handler+0x2ac>
 80019c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
 80019cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <PCD_EP_ISR_Handler+0x2a0>
 80019d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019da:	3301      	adds	r3, #1
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
 80019de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	827b      	strh	r3, [r7, #18]
 80019fc:	8a7b      	ldrh	r3, [r7, #18]
 80019fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a02:	827b      	strh	r3, [r7, #18]
 8001a04:	8a7b      	ldrh	r3, [r7, #18]
 8001a06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a0a:	827b      	strh	r3, [r7, #18]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	8a7b      	ldrh	r3, [r7, #18]
 8001a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	8013      	strh	r3, [r2, #0]
 8001a26:	e22c      	b.n	8001e82 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a3c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f280 80f6 	bge.w	8001c32 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a7c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a94:	7b1b      	ldrb	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d123      	bne.n	8001ae2 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001abe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001ac2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 808e 	beq.w	8001be8 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad2:	6959      	ldr	r1, [r3, #20]
 8001ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad6:	88da      	ldrh	r2, [r3, #6]
 8001ad8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001adc:	f005 fc21 	bl	8007322 <USB_ReadPMA>
 8001ae0:	e082      	b.n	8001be8 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae4:	78db      	ldrb	r3, [r3, #3]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d10a      	bne.n	8001b00 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001aea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001aee:	461a      	mov	r2, r3
 8001af0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f9d3 	bl	8001e9e <HAL_PCD_EP_DB_Receive>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001afe:	e073      	b.n	8001be8 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	441a      	add	r2, r3
 8001b2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d022      	beq.n	8001ba4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001b86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d02c      	beq.n	8001be8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b94:	6959      	ldr	r1, [r3, #20]
 8001b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b98:	891a      	ldrh	r2, [r3, #8]
 8001b9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b9e:	f005 fbc0 	bl	8007322 <USB_ReadPMA>
 8001ba2:	e021      	b.n	8001be8 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001bcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bda:	6959      	ldr	r1, [r3, #20]
 8001bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bde:	895a      	ldrh	r2, [r3, #10]
 8001be0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001be4:	f005 fb9d 	bl	8007322 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bf0:	441a      	add	r2, r3
 8001bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bfe:	441a      	add	r2, r3
 8001c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c02:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <PCD_EP_ISR_Handler+0x4da>
 8001c0c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d206      	bcs.n	8001c26 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f007 f852 	bl	8008cc8 <HAL_PCD_DataOutStageCallback>
 8001c24:	e005      	b.n	8001c32 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 f92a 	bl	8005e86 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8121 	beq.w	8001e82 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c40:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	441a      	add	r2, r3
 8001c80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	f000 80a2 	beq.w	8001dde <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8001c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca2:	7b1b      	ldrb	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8093 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001caa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d046      	beq.n	8001d44 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d126      	bne.n	8001d0c <PCD_EP_ISR_Handler+0x5ce>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	4413      	add	r3, r2
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	00da      	lsls	r2, r3, #3
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	4413      	add	r3, r2
 8001ce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	e061      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x692>
 8001d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d15d      	bne.n	8001dd0 <PCD_EP_ISR_Handler+0x692>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	4413      	add	r3, r2
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	00da      	lsls	r2, r3, #3
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	4413      	add	r3, r2
 8001d36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	2200      	movs	r2, #0
 8001d40:	801a      	strh	r2, [r3, #0]
 8001d42:	e045      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d4c:	785b      	ldrb	r3, [r3, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d126      	bne.n	8001da0 <PCD_EP_ISR_Handler+0x662>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d66:	4413      	add	r3, r2
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	00da      	lsls	r2, r3, #3
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	4413      	add	r3, r2
 8001d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	801a      	strh	r2, [r3, #0]
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e017      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x692>
 8001da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da2:	785b      	ldrb	r3, [r3, #1]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d113      	bne.n	8001dd0 <PCD_EP_ISR_Handler+0x692>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db6:	4413      	add	r3, r2
 8001db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	00da      	lsls	r2, r3, #3
 8001dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f006 ff91 	bl	8008cfe <HAL_PCD_DataInStageCallback>
 8001ddc:	e051      	b.n	8001e82 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001dde:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d144      	bne.n	8001e74 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d907      	bls.n	8001e2e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8001e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e26:	1ad2      	subs	r2, r2, r3
 8001e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e2a:	619a      	str	r2, [r3, #24]
 8001e2c:	e002      	b.n	8001e34 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f006 ff5b 	bl	8008cfe <HAL_PCD_DataInStageCallback>
 8001e48:	e01b      	b.n	8001e82 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e52:	441a      	add	r2, r3
 8001e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e56:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e60:	441a      	add	r2, r3
 8001e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e64:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 f80a 	bl	8005e86 <USB_EPStartXfer>
 8001e72:	e006      	b.n	8001e82 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e74:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f917 	bl	80020b0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f6ff ac5a 	blt.w	8001748 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3758      	adds	r7, #88	; 0x58
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b088      	sub	sp, #32
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d07c      	beq.n	8001fb0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	8b7b      	ldrh	r3, [r7, #26]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d306      	bcc.n	8001ef4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	8b7b      	ldrh	r3, [r7, #26]
 8001eec:	1ad2      	subs	r2, r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	619a      	str	r2, [r3, #24]
 8001ef2:	e002      	b.n	8001efa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d123      	bne.n	8001f4a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1c:	833b      	strh	r3, [r7, #24]
 8001f1e:	8b3b      	ldrh	r3, [r7, #24]
 8001f20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f24:	833b      	strh	r3, [r7, #24]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	441a      	add	r2, r3
 8001f34:	8b3b      	ldrh	r3, [r7, #24]
 8001f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01f      	beq.n	8001f94 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	82fb      	strh	r3, [r7, #22]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	441a      	add	r2, r3
 8001f7e:	8afb      	ldrh	r3, [r7, #22]
 8001f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f94:	8b7b      	ldrh	r3, [r7, #26]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8085 	beq.w	80020a6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6959      	ldr	r1, [r3, #20]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	891a      	ldrh	r2, [r3, #8]
 8001fa8:	8b7b      	ldrh	r3, [r7, #26]
 8001faa:	f005 f9ba 	bl	8007322 <USB_ReadPMA>
 8001fae:	e07a      	b.n	80020a6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	8b7b      	ldrh	r3, [r7, #26]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d306      	bcc.n	8001fee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	699a      	ldr	r2, [r3, #24]
 8001fe4:	8b7b      	ldrh	r3, [r7, #26]
 8001fe6:	1ad2      	subs	r2, r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	619a      	str	r2, [r3, #24]
 8001fec:	e002      	b.n	8001ff4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d123      	bne.n	8002044 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002016:	83fb      	strh	r3, [r7, #30]
 8002018:	8bfb      	ldrh	r3, [r7, #30]
 800201a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800201e:	83fb      	strh	r3, [r7, #30]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	441a      	add	r2, r3
 800202e:	8bfb      	ldrh	r3, [r7, #30]
 8002030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002040:	b29b      	uxth	r3, r3
 8002042:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d11f      	bne.n	800208e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002068:	83bb      	strh	r3, [r7, #28]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	441a      	add	r2, r3
 8002078:	8bbb      	ldrh	r3, [r7, #28]
 800207a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800207e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002086:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800208a:	b29b      	uxth	r3, r3
 800208c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800208e:	8b7b      	ldrh	r3, [r7, #26]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	6959      	ldr	r1, [r3, #20]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	895a      	ldrh	r2, [r3, #10]
 80020a0:	8b7b      	ldrh	r3, [r7, #26]
 80020a2:	f005 f93e 	bl	8007322 <USB_ReadPMA>
    }
  }

  return count;
 80020a6:	8b7b      	ldrh	r3, [r7, #26]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0a2      	sub	sp, #136	; 0x88
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	4613      	mov	r3, r2
 80020bc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 81c5 	beq.w	8002454 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d907      	bls.n	800210e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	e002      	b.n	8002114 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 80b9 	bne.w	8002290 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d126      	bne.n	8002174 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213a:	4413      	add	r3, r2
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	00da      	lsls	r2, r3, #3
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	4413      	add	r3, r2
 8002148:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002158:	b29a      	uxth	r2, r3
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800216c:	b29a      	uxth	r2, r3
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	e01a      	b.n	80021aa <HAL_PCD_EP_DB_Transmit+0xfa>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	785b      	ldrb	r3, [r3, #1]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d116      	bne.n	80021aa <HAL_PCD_EP_DB_Transmit+0xfa>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	4413      	add	r3, r2
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	00da      	lsls	r2, r3, #3
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	4413      	add	r3, r2
 800219e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	2200      	movs	r2, #0
 80021a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	623b      	str	r3, [r7, #32]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d126      	bne.n	8002206 <HAL_PCD_EP_DB_Transmit+0x156>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4413      	add	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	00da      	lsls	r2, r3, #3
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4413      	add	r3, r2
 80021da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	801a      	strh	r2, [r3, #0]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fe:	b29a      	uxth	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	e017      	b.n	8002236 <HAL_PCD_EP_DB_Transmit+0x186>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d113      	bne.n	8002236 <HAL_PCD_EP_DB_Transmit+0x186>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	4413      	add	r3, r2
 800221e:	623b      	str	r3, [r7, #32]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	00da      	lsls	r2, r3, #3
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	4413      	add	r3, r2
 800222a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2200      	movs	r2, #0
 8002234:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f006 fd5e 	bl	8008cfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 82d2 	beq.w	80027f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002268:	827b      	strh	r3, [r7, #18]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	8a7b      	ldrh	r3, [r7, #18]
 800227a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800227e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228a:	b29b      	uxth	r3, r3
 800228c:	8013      	strh	r3, [r2, #0]
 800228e:	e2b0      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d021      	beq.n	80022de <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	441a      	add	r2, r3
 80022c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80022ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022da:	b29b      	uxth	r3, r3
 80022dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	f040 8284 	bne.w	80027f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022f2:	441a      	add	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002300:	441a      	add	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6a1a      	ldr	r2, [r3, #32]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	d309      	bcc.n	8002326 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6a1a      	ldr	r2, [r3, #32]
 800231c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800231e:	1ad2      	subs	r2, r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	621a      	str	r2, [r3, #32]
 8002324:	e015      	b.n	8002352 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800232e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002332:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800233c:	e009      	b.n	8002352 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	785b      	ldrb	r3, [r3, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d155      	bne.n	8002406 <HAL_PCD_EP_DB_Transmit+0x356>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002368:	b29b      	uxth	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236e:	4413      	add	r3, r2
 8002370:	63bb      	str	r3, [r7, #56]	; 0x38
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	00da      	lsls	r2, r3, #3
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	4413      	add	r3, r2
 800237c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
 8002382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002384:	2b3e      	cmp	r3, #62	; 0x3e
 8002386:	d916      	bls.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x306>
 8002388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
 800238e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239a:	3b01      	subs	r3, #1
 800239c:	64bb      	str	r3, [r7, #72]	; 0x48
 800239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	029b      	lsls	r3, r3, #10
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b2:	801a      	strh	r2, [r3, #0]
 80023b4:	e043      	b.n	800243e <HAL_PCD_EP_DB_Transmit+0x38e>
 80023b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d112      	bne.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x332>
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023da:	b29a      	uxth	r2, r3
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	801a      	strh	r2, [r3, #0]
 80023e0:	e02d      	b.n	800243e <HAL_PCD_EP_DB_Transmit+0x38e>
 80023e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x348>
 80023f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f4:	3301      	adds	r3, #1
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	b29a      	uxth	r2, r3
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	e01b      	b.n	800243e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d117      	bne.n	800243e <HAL_PCD_EP_DB_Transmit+0x38e>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	643b      	str	r3, [r7, #64]	; 0x40
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002422:	4413      	add	r3, r2
 8002424:	643b      	str	r3, [r7, #64]	; 0x40
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00da      	lsls	r2, r3, #3
 800242c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242e:	4413      	add	r3, r2
 8002430:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002438:	b29a      	uxth	r2, r3
 800243a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6959      	ldr	r1, [r3, #20]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	891a      	ldrh	r2, [r3, #8]
 800244a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244c:	b29b      	uxth	r3, r3
 800244e:	f004 ff26 	bl	800729e <USB_WritePMA>
 8002452:	e1ce      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245c:	b29b      	uxth	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	4413      	add	r3, r2
 800246e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002478:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002484:	429a      	cmp	r2, r3
 8002486:	d307      	bcc.n	8002498 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002490:	1ad2      	subs	r2, r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	619a      	str	r2, [r3, #24]
 8002496:	e002      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 80c4 	bne.w	8002630 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d126      	bne.n	80024fe <HAL_PCD_EP_DB_Transmit+0x44e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c4:	4413      	add	r3, r2
 80024c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	00da      	lsls	r2, r3, #3
 80024ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d0:	4413      	add	r3, r2
 80024d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024d6:	667b      	str	r3, [r7, #100]	; 0x64
 80024d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024fa:	801a      	strh	r2, [r3, #0]
 80024fc:	e01a      	b.n	8002534 <HAL_PCD_EP_DB_Transmit+0x484>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d116      	bne.n	8002534 <HAL_PCD_EP_DB_Transmit+0x484>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	673b      	str	r3, [r7, #112]	; 0x70
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800251a:	4413      	add	r3, r2
 800251c:	673b      	str	r3, [r7, #112]	; 0x70
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	00da      	lsls	r2, r3, #3
 8002524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002526:	4413      	add	r3, r2
 8002528:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800252c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800252e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002530:	2200      	movs	r2, #0
 8002532:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	67fb      	str	r3, [r7, #124]	; 0x7c
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	785b      	ldrb	r3, [r3, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d12f      	bne.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255a:	4413      	add	r3, r2
 800255c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	00da      	lsls	r2, r3, #3
 8002566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800256a:	4413      	add	r3, r2
 800256c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002580:	b29a      	uxth	r2, r3
 8002582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002586:	801a      	strh	r2, [r3, #0]
 8002588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002598:	b29a      	uxth	r2, r3
 800259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	e017      	b.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x522>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d113      	bne.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x522>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025b8:	4413      	add	r3, r2
 80025ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00da      	lsls	r2, r3, #3
 80025c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025c4:	4413      	add	r3, r2
 80025c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80025cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ce:	2200      	movs	r2, #0
 80025d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f006 fb90 	bl	8008cfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 8104 	bne.w	80027f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002604:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800261a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800261e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262a:	b29b      	uxth	r3, r3
 800262c:	8013      	strh	r3, [r2, #0]
 800262e:	e0e0      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d121      	bne.n	800267e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002654:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002684:	2b01      	cmp	r3, #1
 8002686:	f040 80b4 	bne.w	80027f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002692:	441a      	add	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026a0:	441a      	add	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	6a1a      	ldr	r2, [r3, #32]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d309      	bcc.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6a1a      	ldr	r2, [r3, #32]
 80026bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026be:	1ad2      	subs	r2, r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	621a      	str	r2, [r3, #32]
 80026c4:	e015      	b.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80026ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026dc:	e009      	b.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	663b      	str	r3, [r7, #96]	; 0x60
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	785b      	ldrb	r3, [r3, #1]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d155      	bne.n	80027ac <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	65bb      	str	r3, [r7, #88]	; 0x58
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270e:	b29b      	uxth	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002714:	4413      	add	r3, r2
 8002716:	65bb      	str	r3, [r7, #88]	; 0x58
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	00da      	lsls	r2, r3, #3
 800271e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002720:	4413      	add	r3, r2
 8002722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
 8002728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272a:	2b3e      	cmp	r3, #62	; 0x3e
 800272c:	d916      	bls.n	800275c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800272e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	677b      	str	r3, [r7, #116]	; 0x74
 8002734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_PCD_EP_DB_Transmit+0x694>
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	3b01      	subs	r3, #1
 8002742:	677b      	str	r3, [r7, #116]	; 0x74
 8002744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002746:	b29b      	uxth	r3, r3
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	b29b      	uxth	r3, r3
 800274c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002754:	b29a      	uxth	r2, r3
 8002756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	e040      	b.n	80027de <HAL_PCD_EP_DB_Transmit+0x72e>
 800275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d112      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800276c:	b29a      	uxth	r2, r3
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	801a      	strh	r2, [r3, #0]
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002780:	b29a      	uxth	r2, r3
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	e02a      	b.n	80027de <HAL_PCD_EP_DB_Transmit+0x72e>
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	677b      	str	r3, [r7, #116]	; 0x74
 800278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279a:	3301      	adds	r3, #1
 800279c:	677b      	str	r3, [r7, #116]	; 0x74
 800279e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	e018      	b.n	80027de <HAL_PCD_EP_DB_Transmit+0x72e>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d114      	bne.n	80027de <HAL_PCD_EP_DB_Transmit+0x72e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c2:	4413      	add	r3, r2
 80027c4:	663b      	str	r3, [r7, #96]	; 0x60
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	00da      	lsls	r2, r3, #3
 80027cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ce:	4413      	add	r3, r2
 80027d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d8:	b29a      	uxth	r2, r3
 80027da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6959      	ldr	r1, [r3, #20]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	895a      	ldrh	r2, [r3, #10]
 80027ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f004 fd56 	bl	800729e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280c:	823b      	strh	r3, [r7, #16]
 800280e:	8a3b      	ldrh	r3, [r7, #16]
 8002810:	f083 0310 	eor.w	r3, r3, #16
 8002814:	823b      	strh	r3, [r7, #16]
 8002816:	8a3b      	ldrh	r3, [r7, #16]
 8002818:	f083 0320 	eor.w	r3, r3, #32
 800281c:	823b      	strh	r3, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	441a      	add	r2, r3
 800282c:	8a3b      	ldrh	r3, [r7, #16]
 800282e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3788      	adds	r7, #136	; 0x88
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	4613      	mov	r3, r2
 800285c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286a:	897b      	ldrh	r3, [r7, #10]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e009      	b.n	8002896 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002882:	897a      	ldrh	r2, [r7, #10]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002896:	893b      	ldrh	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2200      	movs	r2, #0
 80028a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	80da      	strh	r2, [r3, #6]
 80028aa:	e00b      	b.n	80028c4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2201      	movs	r2, #1
 80028b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b29a      	uxth	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800290a:	b29b      	uxth	r3, r3
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	58000400 	.word	0x58000400

08002948 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_PWREx_GetVoltageRange+0x18>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	58000400 	.word	0x58000400

08002964 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_PWREx_EnableVddUSB+0x1c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <HAL_PWREx_EnableVddUSB+0x1c>)
 800296e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002972:	6053      	str	r3, [r2, #4]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	58000400 	.word	0x58000400

08002984 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002996:	d101      	bne.n	800299c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f6:	d101      	bne.n	80029fc <LL_RCC_HSE_IsReady+0x18>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <LL_RCC_HSE_IsReady+0x1a>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a56:	d101      	bne.n	8002a5c <LL_RCC_HSI_IsReady+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_RCC_HSI_IsReady+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d101      	bne.n	8002aee <LL_RCC_HSI48_IsReady+0x18>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <LL_RCC_HSI48_IsReady+0x1a>
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d101      	bne.n	8002b9a <LL_RCC_LSE_IsReady+0x18>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_RCC_LSE_IsReady+0x1a>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d101      	bne.n	8002c02 <LL_RCC_LSI1_IsReady+0x18>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_RCC_LSI1_IsReady+0x1a>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d101      	bne.n	8002c6a <LL_RCC_LSI2_IsReady+0x18>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <LL_RCC_LSI2_IsReady+0x1a>
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d101      	bne.n	8002cf6 <LL_RCC_MSI_IsReady+0x16>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_RCC_MSI_IsReady+0x18>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2bb0      	cmp	r3, #176	; 0xb0
 8002d40:	d901      	bls.n	8002d46 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002d42:	23b0      	movs	r3, #176	; 0xb0
 8002d44:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002d46:	687b      	ldr	r3, [r7, #4]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 0203 	bic.w	r2, r3, #3
 8002d90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 030c 	and.w	r3, r3, #12
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e22:	f023 020f 	bic.w	r2, r3, #15
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	6013      	str	r3, [r2, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f12:	d101      	bne.n	8002f18 <LL_RCC_PLL_IsReady+0x18>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <LL_RCC_PLL_IsReady+0x1a>
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0303 	and.w	r3, r3, #3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d101      	bne.n	8002f9e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fbe:	d101      	bne.n	8002fc4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d101      	bne.n	8002fea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003008:	d101      	bne.n	800300e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003028:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800302c:	d101      	bne.n	8003032 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b08d      	sub	sp, #52	; 0x34
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e37e      	b.n	8003750 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8092 	beq.w	8003184 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003060:	f7ff fea1 	bl	8002da6 <LL_RCC_GetSysClkSource>
 8003064:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003066:	f7ff ff82 	bl	8002f6e <LL_RCC_PLL_GetMainSource>
 800306a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x3e>
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d14c      	bne.n	8003112 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	2b01      	cmp	r3, #1
 800307c:	d149      	bne.n	8003112 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800307e:	f7ff fe2f 	bl	8002ce0 <LL_RCC_MSI_IsReady>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_OscConfig+0x54>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e35d      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003098:	f7ff fe47 	bl	8002d2a <LL_RCC_MSI_GetRange>
 800309c:	4603      	mov	r3, r0
 800309e:	429c      	cmp	r4, r3
 80030a0:	d914      	bls.n	80030cc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fd16 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e34c      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fe21 	bl	8002d02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fe45 	bl	8002d54 <LL_RCC_MSI_SetCalibTrimming>
 80030ca:	e013      	b.n	80030f4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fe16 	bl	8002d02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fe3a 	bl	8002d54 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fcf7 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e32d      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030f4:	f000 fcdc 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4ab3      	ldr	r2, [pc, #716]	; (80033c8 <HAL_RCC_OscConfig+0x388>)
 80030fc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030fe:	4bb3      	ldr	r3, [pc, #716]	; (80033cc <HAL_RCC_OscConfig+0x38c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fbda 	bl	80008bc <HAL_InitTick>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d039      	beq.n	8003182 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e31e      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01e      	beq.n	8003158 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800311a:	f7ff fdc3 	bl	8002ca4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800311e:	f7fd fc1b 	bl	8000958 <HAL_GetTick>
 8003122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003126:	f7fd fc17 	bl	8000958 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e30b      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003138:	f7ff fdd2 	bl	8002ce0 <LL_RCC_MSI_IsReady>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f1      	beq.n	8003126 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fddb 	bl	8002d02 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fdff 	bl	8002d54 <LL_RCC_MSI_SetCalibTrimming>
 8003156:	e015      	b.n	8003184 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003158:	f7ff fdb3 	bl	8002cc2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800315c:	f7fd fbfc 	bl	8000958 <HAL_GetTick>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003164:	f7fd fbf8 	bl	8000958 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e2ec      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003176:	f7ff fdb3 	bl	8002ce0 <LL_RCC_MSI_IsReady>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f1      	bne.n	8003164 <HAL_RCC_OscConfig+0x124>
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003182:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04e      	beq.n	800322e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003190:	f7ff fe09 	bl	8002da6 <LL_RCC_GetSysClkSource>
 8003194:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003196:	f7ff feea 	bl	8002f6e <LL_RCC_PLL_GetMainSource>
 800319a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x16e>
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d10a      	bne.n	80031c4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ae:	f7ff fc19 	bl	80029e4 <LL_RCC_HSE_IsReady>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d039      	beq.n	800322c <HAL_RCC_OscConfig+0x1ec>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d135      	bne.n	800322c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e2c5      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031cc:	d102      	bne.n	80031d4 <HAL_RCC_OscConfig+0x194>
 80031ce:	f7ff fbeb 	bl	80029a8 <LL_RCC_HSE_Enable>
 80031d2:	e001      	b.n	80031d8 <HAL_RCC_OscConfig+0x198>
 80031d4:	f7ff fbf7 	bl	80029c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fd fbba 	bl	8000958 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fd fbb6 	bl	8000958 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e2aa      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80031fa:	f7ff fbf3 	bl	80029e4 <LL_RCC_HSE_IsReady>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f1      	beq.n	80031e8 <HAL_RCC_OscConfig+0x1a8>
 8003204:	e013      	b.n	800322e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fd fba7 	bl	8000958 <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320e:	f7fd fba3 	bl	8000958 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e297      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003220:	f7ff fbe0 	bl	80029e4 <LL_RCC_HSE_IsReady>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f1      	bne.n	800320e <HAL_RCC_OscConfig+0x1ce>
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d051      	beq.n	80032de <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323a:	f7ff fdb4 	bl	8002da6 <LL_RCC_GetSysClkSource>
 800323e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003240:	f7ff fe95 	bl	8002f6e <LL_RCC_PLL_GetMainSource>
 8003244:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d005      	beq.n	8003258 <HAL_RCC_OscConfig+0x218>
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d113      	bne.n	800327a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d110      	bne.n	800327a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003258:	f7ff fbf4 	bl	8002a44 <LL_RCC_HSI_IsReady>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x22e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e270      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fbf8 	bl	8002a68 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	e031      	b.n	80032de <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d019      	beq.n	80032b6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003282:	f7ff fbc1 	bl	8002a08 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fd fb67 	bl	8000958 <HAL_GetTick>
 800328a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328e:	f7fd fb63 	bl	8000958 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e257      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032a0:	f7ff fbd0 	bl	8002a44 <LL_RCC_HSI_IsReady>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f1      	beq.n	800328e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fbda 	bl	8002a68 <LL_RCC_HSI_SetCalibTrimming>
 80032b4:	e013      	b.n	80032de <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b6:	f7ff fbb6 	bl	8002a26 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd fb4d 	bl	8000958 <HAL_GetTick>
 80032be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fd fb49 	bl	8000958 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e23d      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032d4:	f7ff fbb6 	bl	8002a44 <LL_RCC_HSI_IsReady>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f1      	bne.n	80032c2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a3 	beq.w	800343e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d076      	beq.n	80033ee <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	d046      	beq.n	800339a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800330c:	f7ff fc6d 	bl	8002bea <LL_RCC_LSI1_IsReady>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d113      	bne.n	800333e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003316:	f7ff fc46 	bl	8002ba6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800331a:	f7fd fb1d 	bl	8000958 <HAL_GetTick>
 800331e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003322:	f7fd fb19 	bl	8000958 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e20d      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003334:	f7ff fc59 	bl	8002bea <LL_RCC_LSI1_IsReady>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f1      	beq.n	8003322 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800333e:	f7ff fc66 	bl	8002c0e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fd fb09 	bl	8000958 <HAL_GetTick>
 8003346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800334a:	f7fd fb05 	bl	8000958 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b03      	cmp	r3, #3
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1f9      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800335c:	f7ff fc79 	bl	8002c52 <LL_RCC_LSI2_IsReady>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f1      	beq.n	800334a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fc83 	bl	8002c76 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003370:	f7ff fc2a 	bl	8002bc8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fd faf0 	bl	8000958 <HAL_GetTick>
 8003378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800337c:	f7fd faec 	bl	8000958 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1e0      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800338e:	f7ff fc2c 	bl	8002bea <LL_RCC_LSI1_IsReady>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f1      	bne.n	800337c <HAL_RCC_OscConfig+0x33c>
 8003398:	e051      	b.n	800343e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800339a:	f7ff fc04 	bl	8002ba6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fd fadb 	bl	8000958 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033a6:	f7fd fad7 	bl	8000958 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1cb      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033b8:	f7ff fc17 	bl	8002bea <LL_RCC_LSI1_IsReady>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f1      	beq.n	80033a6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033c2:	f7ff fc35 	bl	8002c30 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033c6:	e00c      	b.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
 80033c8:	20000004 	.word	0x20000004
 80033cc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033d0:	f7fd fac2 	bl	8000958 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1b6      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033e2:	f7ff fc36 	bl	8002c52 <LL_RCC_LSI2_IsReady>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f1      	bne.n	80033d0 <HAL_RCC_OscConfig+0x390>
 80033ec:	e027      	b.n	800343e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80033ee:	f7ff fc1f 	bl	8002c30 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fd fab1 	bl	8000958 <HAL_GetTick>
 80033f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033fa:	f7fd faad 	bl	8000958 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b03      	cmp	r3, #3
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e1a1      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800340c:	f7ff fc21 	bl	8002c52 <LL_RCC_LSI2_IsReady>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f1      	bne.n	80033fa <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003416:	f7ff fbd7 	bl	8002bc8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fd fa9d 	bl	8000958 <HAL_GetTick>
 800341e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003422:	f7fd fa99 	bl	8000958 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e18d      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003434:	f7ff fbd9 	bl	8002bea <LL_RCC_LSI1_IsReady>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f1      	bne.n	8003422 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d05b      	beq.n	8003502 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344a:	4bb5      	ldr	r3, [pc, #724]	; (8003720 <HAL_RCC_OscConfig+0x6e0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d114      	bne.n	8003480 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003456:	f7ff fa67 	bl	8002928 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fd fa7d 	bl	8000958 <HAL_GetTick>
 800345e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fd fa79 	bl	8000958 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e16d      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003474:	4baa      	ldr	r3, [pc, #680]	; (8003720 <HAL_RCC_OscConfig+0x6e0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d102      	bne.n	800348e <HAL_RCC_OscConfig+0x44e>
 8003488:	f7ff fb37 	bl	8002afa <LL_RCC_LSE_Enable>
 800348c:	e00c      	b.n	80034a8 <HAL_RCC_OscConfig+0x468>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d104      	bne.n	80034a0 <HAL_RCC_OscConfig+0x460>
 8003496:	f7ff fb52 	bl	8002b3e <LL_RCC_LSE_EnableBypass>
 800349a:	f7ff fb2e 	bl	8002afa <LL_RCC_LSE_Enable>
 800349e:	e003      	b.n	80034a8 <HAL_RCC_OscConfig+0x468>
 80034a0:	f7ff fb3c 	bl	8002b1c <LL_RCC_LSE_Disable>
 80034a4:	f7ff fb5c 	bl	8002b60 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d014      	beq.n	80034da <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fd fa52 	bl	8000958 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fd fa4e 	bl	8000958 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e140      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034ce:	f7ff fb58 	bl	8002b82 <LL_RCC_LSE_IsReady>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ef      	beq.n	80034b8 <HAL_RCC_OscConfig+0x478>
 80034d8:	e013      	b.n	8003502 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7fd fa3d 	bl	8000958 <HAL_GetTick>
 80034de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fd fa39 	bl	8000958 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e12b      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80034f8:	f7ff fb43 	bl	8002b82 <LL_RCC_LSE_IsReady>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ef      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02c      	beq.n	8003568 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003516:	f7ff fabc 	bl	8002a92 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7fd fa1d 	bl	8000958 <HAL_GetTick>
 800351e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003522:	f7fd fa19 	bl	8000958 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e10d      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003534:	f7ff facf 	bl	8002ad6 <LL_RCC_HSI48_IsReady>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f1      	beq.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 800353e:	e013      	b.n	8003568 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003540:	f7ff fab8 	bl	8002ab4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd fa08 	bl	8000958 <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800354c:	f7fd fa04 	bl	8000958 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0f8      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800355e:	f7ff faba 	bl	8002ad6 <LL_RCC_HSI48_IsReady>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f1      	bne.n	800354c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80ee 	beq.w	800374e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003572:	f7ff fc18 	bl	8002da6 <LL_RCC_GetSysClkSource>
 8003576:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b02      	cmp	r3, #2
 8003586:	f040 80af 	bne.w	80036e8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0203 	and.w	r2, r3, #3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	429a      	cmp	r2, r3
 8003596:	d123      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d11c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d114      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d10d      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d106      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d05d      	beq.n	800369c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d058      	beq.n	8003698 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0ab      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035f8:	f7ff fc73 	bl	8002ee2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035fc:	f7fd f9ac 	bl	8000958 <HAL_GetTick>
 8003600:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fd f9a8 	bl	8000958 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e09c      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ef      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <HAL_RCC_OscConfig+0x6e4>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800363c:	0212      	lsls	r2, r2, #8
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003650:	430a      	orrs	r2, r1
 8003652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003656:	4313      	orrs	r3, r2
 8003658:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800365a:	f7ff fc33 	bl	8002ec4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800366e:	f7fd f973 	bl	8000958 <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7fd f96f 	bl	8000958 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e063      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ef      	beq.n	8003676 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003696:	e05a      	b.n	800374e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e059      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d151      	bne.n	800374e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036aa:	f7ff fc0b 	bl	8002ec4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036bc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036be:	f7fd f94b 	bl	8000958 <HAL_GetTick>
 80036c2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fd f947 	bl	8000958 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e03b      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ef      	beq.n	80036c6 <HAL_RCC_OscConfig+0x686>
 80036e6:	e032      	b.n	800374e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d02d      	beq.n	800374a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	f7ff fbf8 	bl	8002ee2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80036f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fc:	f023 0303 	bic.w	r3, r3, #3
 8003700:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003714:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fd f91f 	bl	8000958 <HAL_GetTick>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	e00d      	b.n	800373a <HAL_RCC_OscConfig+0x6fa>
 800371e:	bf00      	nop
 8003720:	58000400 	.word	0x58000400
 8003724:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fd f916 	bl	8000958 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ef      	bne.n	8003728 <HAL_RCC_OscConfig+0x6e8>
 8003748:	e001      	b.n	800374e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3734      	adds	r7, #52	; 0x34
 8003754:	46bd      	mov	sp, r7
 8003756:	bd90      	pop	{r4, r7, pc}

08003758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e12d      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800376c:	4b98      	ldr	r3, [pc, #608]	; (80039d0 <HAL_RCC_ClockConfig+0x278>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d91b      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b95      	ldr	r3, [pc, #596]	; (80039d0 <HAL_RCC_ClockConfig+0x278>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 0207 	bic.w	r2, r3, #7
 8003782:	4993      	ldr	r1, [pc, #588]	; (80039d0 <HAL_RCC_ClockConfig+0x278>)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378a:	f7fd f8e5 	bl	8000958 <HAL_GetTick>
 800378e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003792:	f7fd f8e1 	bl	8000958 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e111      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a4:	4b8a      	ldr	r3, [pc, #552]	; (80039d0 <HAL_RCC_ClockConfig+0x278>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d1ef      	bne.n	8003792 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fafb 	bl	8002dbe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037c8:	f7fd f8c6 	bl	8000958 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037d0:	f7fd f8c2 	bl	8000958 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0f2      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037e2:	f7ff fbd0 	bl	8002f86 <LL_RCC_IsActiveFlag_HPRE>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f1      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff faf2 	bl	8002de6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003802:	f7fd f8a9 	bl	8000958 <HAL_GetTick>
 8003806:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800380a:	f7fd f8a5 	bl	8000958 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0d5      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800381c:	f7ff fbc5 	bl	8002faa <LL_RCC_IsActiveFlag_C2HPRE>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f1      	beq.n	800380a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff faeb 	bl	8002e12 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800383c:	f7fd f88c 	bl	8000958 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003844:	f7fd f888 	bl	8000958 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0b8      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003856:	f7ff fbbb 	bl	8002fd0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f1      	beq.n	8003844 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d016      	beq.n	800389a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fae5 	bl	8002e40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003876:	f7fd f86f 	bl	8000958 <HAL_GetTick>
 800387a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800387e:	f7fd f86b 	bl	8000958 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e09b      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003890:	f7ff fbb1 	bl	8002ff6 <LL_RCC_IsActiveFlag_PPRE1>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f1      	beq.n	800387e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d017      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fadb 	bl	8002e68 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038b2:	f7fd f851 	bl	8000958 <HAL_GetTick>
 80038b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038ba:	f7fd f84d 	bl	8000958 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e07d      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038cc:	f7ff fba5 	bl	800301a <LL_RCC_IsActiveFlag_PPRE2>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f1      	beq.n	80038ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d043      	beq.n	800396a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d106      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038ea:	f7ff f87b 	bl	80029e4 <LL_RCC_HSE_IsReady>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11e      	bne.n	8003932 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e067      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d106      	bne.n	800390e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003900:	f7ff fafe 	bl	8002f00 <LL_RCC_PLL_IsReady>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d113      	bne.n	8003932 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e05c      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003916:	f7ff f9e3 	bl	8002ce0 <LL_RCC_MSI_IsReady>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d108      	bne.n	8003932 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e051      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003924:	f7ff f88e 	bl	8002a44 <LL_RCC_HSI_IsReady>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e04a      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fa21 	bl	8002d7e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fd f80c 	bl	8000958 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	e00a      	b.n	800395a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f7fd f808 	bl	8000958 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e036      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	f7ff fa24 	bl	8002da6 <LL_RCC_GetSysClkSource>
 800395e:	4602      	mov	r2, r0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	429a      	cmp	r2, r3
 8003968:	d1ec      	bne.n	8003944 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_ClockConfig+0x278>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d21b      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_RCC_ClockConfig+0x278>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 0207 	bic.w	r2, r3, #7
 8003980:	4913      	ldr	r1, [pc, #76]	; (80039d0 <HAL_RCC_ClockConfig+0x278>)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003988:	f7fc ffe6 	bl	8000958 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003990:	f7fc ffe2 	bl	8000958 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e012      	b.n	80039c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_ClockConfig+0x278>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1ef      	bne.n	8003990 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039b0:	f000 f87e 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_RCC_ClockConfig+0x27c>)
 80039b8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039ba:	f7fc ffd9 	bl	8000970 <HAL_GetTickPrio>
 80039be:	4603      	mov	r3, r0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fc ff7b 	bl	80008bc <HAL_InitTick>
 80039c6:	4603      	mov	r3, r0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	58004000 	.word	0x58004000
 80039d4:	20000004 	.word	0x20000004

080039d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039de:	f7ff f9e2 	bl	8002da6 <LL_RCC_GetSysClkSource>
 80039e2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80039ea:	f7ff f99e 	bl	8002d2a <LL_RCC_MSI_GetRange>
 80039ee:	4603      	mov	r3, r0
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	4a2b      	ldr	r2, [pc, #172]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e04b      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d102      	bne.n	8003a0c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a06:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e045      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d10a      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a12:	f7fe ffb7 	bl	8002984 <LL_RCC_HSE_IsEnabledDiv2>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d102      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a1c:	4b23      	ldr	r3, [pc, #140]	; (8003aac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e03a      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e037      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a28:	f7ff faa1 	bl	8002f6e <LL_RCC_PLL_GetMainSource>
 8003a2c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d003      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x64>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x6a>
 8003a3a:	e00d      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a3e:	60bb      	str	r3, [r7, #8]
        break;
 8003a40:	e015      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a42:	f7fe ff9f 	bl	8002984 <LL_RCC_HSE_IsEnabledDiv2>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a4c:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a4e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a50:	e00d      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a54:	60bb      	str	r3, [r7, #8]
        break;
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a58:	f7ff f967 	bl	8002d2a <LL_RCC_MSI_GetRange>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6a:	60bb      	str	r3, [r7, #8]
        break;
 8003a6c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003a6e:	f7ff fa59 	bl	8002f24 <LL_RCC_PLL_GetN>
 8003a72:	4602      	mov	r2, r0
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	fb03 f402 	mul.w	r4, r3, r2
 8003a7a:	f7ff fa6c 	bl	8002f56 <LL_RCC_PLL_GetDivider>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	3301      	adds	r3, #1
 8003a84:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a88:	f7ff fa59 	bl	8002f3e <LL_RCC_PLL_GetR>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	0f5b      	lsrs	r3, r3, #29
 8003a90:	3301      	adds	r3, #1
 8003a92:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a96:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08009314 	.word	0x08009314
 8003aa8:	00f42400 	.word	0x00f42400
 8003aac:	007a1200 	.word	0x007a1200

08003ab0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b598      	push	{r3, r4, r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ab4:	f7ff ff90 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	f7ff f9e9 	bl	8002e90 <LL_RCC_GetAHBPrescaler>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003acc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd98      	pop	{r3, r4, r7, pc}
 8003ad4:	080092d4 	.word	0x080092d4

08003ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2bb0      	cmp	r3, #176	; 0xb0
 8003ae4:	d903      	bls.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e007      	b.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003afe:	f7ff f9d3 	bl	8002ea8 <LL_RCC_GetAHB4Prescaler>
 8003b02:	4603      	mov	r3, r0
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9c      	lsrs	r4, r3, #18
 8003b22:	f7fe ff11 	bl	8002948 <HAL_PWREx_GetVoltageRange>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f000 f80c 	bl	8003b48 <RCC_SetFlashLatency>
 8003b30:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd90      	pop	{r4, r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	08009314 	.word	0x08009314
 8003b40:	080092d4 	.word	0x080092d4
 8003b44:	431bde83 	.word	0x431bde83

08003b48 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b093      	sub	sp, #76	; 0x4c
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <RCC_SetFlashLatency+0xf0>)
 8003b54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b5e:	4a37      	ldr	r2, [pc, #220]	; (8003c3c <RCC_SetFlashLatency+0xf4>)
 8003b60:	f107 031c 	add.w	r3, r7, #28
 8003b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b6a:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <RCC_SetFlashLatency+0xf8>)
 8003b6c:	f107 040c 	add.w	r4, r7, #12
 8003b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b76:	2300      	movs	r3, #0
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b80:	d11c      	bne.n	8003bbc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	643b      	str	r3, [r7, #64]	; 0x40
 8003b86:	e015      	b.n	8003bb4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b90:	4413      	add	r3, r2
 8003b92:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d808      	bhi.n	8003bae <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003bac:	e022      	b.n	8003bf4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d9e6      	bls.n	8003b88 <RCC_SetFlashLatency+0x40>
 8003bba:	e01b      	b.n	8003bf4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc0:	e015      	b.n	8003bee <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bca:	4413      	add	r3, r2
 8003bcc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d808      	bhi.n	8003be8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bde:	4413      	add	r3, r2
 8003be0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003be6:	e005      	b.n	8003bf4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	3301      	adds	r3, #1
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d9e6      	bls.n	8003bc2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <RCC_SetFlashLatency+0xfc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 0207 	bic.w	r2, r3, #7
 8003bfc:	4911      	ldr	r1, [pc, #68]	; (8003c44 <RCC_SetFlashLatency+0xfc>)
 8003bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c04:	f7fc fea8 	bl	8000958 <HAL_GetTick>
 8003c08:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c0a:	e008      	b.n	8003c1e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c0c:	f7fc fea4 	bl	8000958 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e007      	b.n	8003c2e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <RCC_SetFlashLatency+0xfc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1ef      	bne.n	8003c0c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	374c      	adds	r7, #76	; 0x4c
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd90      	pop	{r4, r7, pc}
 8003c36:	bf00      	nop
 8003c38:	08009260 	.word	0x08009260
 8003c3c:	08009270 	.word	0x08009270
 8003c40:	0800927c 	.word	0x0800927c
 8003c44:	58004000 	.word	0x58004000

08003c48 <LL_RCC_LSE_IsEnabled>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <LL_RCC_LSE_IsEnabled+0x18>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <LL_RCC_LSE_IsEnabled+0x1a>
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_RCC_LSE_IsReady>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d101      	bne.n	8003c84 <LL_RCC_LSE_IsReady+0x18>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <LL_RCC_LSE_IsReady+0x1a>
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_RCC_MSI_EnablePLLMode>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <LL_RCC_SetRFWKPClockSource>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_RCC_SetSMPSClockSource>:
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f023 0203 	bic.w	r2, r3, #3
 8003cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_RCC_SetSMPSPrescaler>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_SetUSARTClockSource>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_RCC_SetLPUARTClockSource>:
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_RCC_SetI2CClockSource>:
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_RCC_SetLPTIMClockSource>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_RCC_SetSAIClockSource>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_RCC_SetRNGClockSource>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_RCC_SetCLK48ClockSource>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_RCC_SetUSBClockSource>:
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ffe3 	bl	8003e48 <LL_RCC_SetCLK48ClockSource>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <LL_RCC_SetADCClockSource>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_RCC_SetRTCClockSource>:
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_GetRTCClockSource>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_RCC_ForceBackupDomainReset>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f36:	bf00      	nop
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_RCC_PLLSAI1_Enable>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_PLLSAI1_Disable>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f70:	6013      	str	r3, [r2, #0]
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_RCC_PLLSAI1_IsReady>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f8e:	d101      	bne.n	8003f94 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003fac:	2300      	movs	r3, #0
 8003fae:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d034      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fc4:	d021      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003fc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fca:	d81b      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fd0:	d01d      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fd6:	d815      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00b      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fe0:	d110      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ff2:	e00d      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f94d 	bl	8004298 <RCCEx_PLLSAI1_ConfigNP>
 8003ffe:	4603      	mov	r3, r0
 8004000:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004002:	e005      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	77fb      	strb	r3, [r7, #31]
        break;
 8004008:	e002      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800400a:	bf00      	nop
 800400c:	e000      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800400e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004010:	7ffb      	ldrb	r3, [r7, #31]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fee8 	bl	8003df0 <LL_RCC_SetSAIClockSource>
 8004020:	e001      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	7ffb      	ldrb	r3, [r7, #31]
 8004024:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402e:	2b00      	cmp	r3, #0
 8004030:	d046      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004032:	f7ff ff56 	bl	8003ee2 <LL_RCC_GetRTCClockSource>
 8004036:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	429a      	cmp	r2, r3
 8004040:	d03c      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004042:	f7fe fc71 	bl	8002928 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff ff30 	bl	8003eb6 <LL_RCC_SetRTCClockSource>
 8004056:	e02e      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004062:	f7ff ff4b 	bl	8003efc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004066:	f7ff ff5a 	bl	8003f1e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004082:	f7ff fde1 	bl	8003c48 <LL_RCC_LSE_IsEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b01      	cmp	r3, #1
 800408a:	d114      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800408c:	f7fc fc64 	bl	8000958 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004092:	e00b      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fc fc60 	bl	8000958 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d902      	bls.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	77fb      	strb	r3, [r7, #31]
              break;
 80040aa:	e004      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040ac:	f7ff fdde 	bl	8003c6c <LL_RCC_LSE_IsReady>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d1ee      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	77bb      	strb	r3, [r7, #30]
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7ffb      	ldrb	r3, [r7, #31]
 80040be:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fe2a 	bl	8003d2a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fe35 	bl	8003d56 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fe5d 	bl	8003dbc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d004      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fe52 	bl	8003dbc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fe2a 	bl	8003d82 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fe1f 	bl	8003d82 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d022      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fe8d 	bl	8003e74 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004162:	d107      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004172:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800417c:	d10b      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3304      	adds	r3, #4
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f8e3 	bl	800434e <RCCEx_PLLSAI1_ConfigNQ>
 8004188:	4603      	mov	r3, r0
 800418a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800418c:	7ffb      	ldrb	r3, [r7, #31]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004192:	7ffb      	ldrb	r3, [r7, #31]
 8004194:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02b      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041aa:	d008      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b4:	d003      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fe2a 	bl	8003e1c <LL_RCC_SetRNGClockSource>
 80041c8:	e00a      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7ff fe21 	bl	8003e1c <LL_RCC_SetRNGClockSource>
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff fe34 	bl	8003e48 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80041e8:	d107      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d022      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fe3d 	bl	8003e8a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004218:	d107      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004232:	d10b      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f8e3 	bl	8004404 <RCCEx_PLLSAI1_ConfigNR>
 800423e:	4603      	mov	r3, r0
 8004240:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004242:	7ffb      	ldrb	r3, [r7, #31]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004248:	7ffb      	ldrb	r3, [r7, #31]
 800424a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fd26 	bl	8003cae <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fd45 	bl	8003d02 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fd2c 	bl	8003cda <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004282:	7fbb      	ldrb	r3, [r7, #30]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004290:	f7ff fcfe 	bl	8003c90 <LL_RCC_MSI_EnablePLLMode>
}
 8004294:	bf00      	nop
 8004296:	bd80      	pop	{r7, pc}

08004298 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042a4:	f7ff fe5b 	bl	8003f5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042a8:	f7fc fb56 	bl	8000958 <HAL_GetTick>
 80042ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042ae:	e009      	b.n	80042c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b0:	f7fc fb52 	bl	8000958 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d902      	bls.n	80042c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	73fb      	strb	r3, [r7, #15]
      break;
 80042c2:	e004      	b.n	80042ce <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042c4:	f7ff fe5a 	bl	8003f7c <LL_RCC_PLLSAI1_IsReady>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d137      	bne.n	8004344 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e8:	4313      	orrs	r3, r2
 80042ea:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004302:	f7ff fe1d 	bl	8003f40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004306:	f7fc fb27 	bl	8000958 <HAL_GetTick>
 800430a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800430c:	e009      	b.n	8004322 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800430e:	f7fc fb23 	bl	8000958 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d902      	bls.n	8004322 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	73fb      	strb	r3, [r7, #15]
        break;
 8004320:	e004      	b.n	800432c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004322:	f7ff fe2b 	bl	8003f7c <LL_RCC_PLLSAI1_IsReady>
 8004326:	4603      	mov	r3, r0
 8004328:	2b01      	cmp	r3, #1
 800432a:	d1f0      	bne.n	800430e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004340:	4313      	orrs	r3, r2
 8004342:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800435a:	f7ff fe00 	bl	8003f5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800435e:	f7fc fafb 	bl	8000958 <HAL_GetTick>
 8004362:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004364:	e009      	b.n	800437a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004366:	f7fc faf7 	bl	8000958 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d902      	bls.n	800437a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	e004      	b.n	8004384 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800437a:	f7ff fdff 	bl	8003f7c <LL_RCC_PLLSAI1_IsReady>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f0      	bne.n	8004366 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d137      	bne.n	80043fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800438a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800439e:	4313      	orrs	r3, r2
 80043a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043b4:	4313      	orrs	r3, r2
 80043b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043b8:	f7ff fdc2 	bl	8003f40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043bc:	f7fc facc 	bl	8000958 <HAL_GetTick>
 80043c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043c2:	e009      	b.n	80043d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c4:	f7fc fac8 	bl	8000958 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d902      	bls.n	80043d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	73fb      	strb	r3, [r7, #15]
        break;
 80043d6:	e004      	b.n	80043e2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043d8:	f7ff fdd0 	bl	8003f7c <LL_RCC_PLLSAI1_IsReady>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d1f0      	bne.n	80043c4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043f6:	4313      	orrs	r3, r2
 80043f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004410:	f7ff fda5 	bl	8003f5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004414:	f7fc faa0 	bl	8000958 <HAL_GetTick>
 8004418:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800441a:	e009      	b.n	8004430 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800441c:	f7fc fa9c 	bl	8000958 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d902      	bls.n	8004430 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	73fb      	strb	r3, [r7, #15]
      break;
 800442e:	e004      	b.n	800443a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004430:	f7ff fda4 	bl	8003f7c <LL_RCC_PLLSAI1_IsReady>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d137      	bne.n	80044b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004454:	4313      	orrs	r3, r2
 8004456:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800446a:	4313      	orrs	r3, r2
 800446c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800446e:	f7ff fd67 	bl	8003f40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004472:	f7fc fa71 	bl	8000958 <HAL_GetTick>
 8004476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004478:	e009      	b.n	800448e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800447a:	f7fc fa6d 	bl	8000958 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d902      	bls.n	800448e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	73fb      	strb	r3, [r7, #15]
        break;
 800448c:	e004      	b.n	8004498 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800448e:	f7ff fd75 	bl	8003f7c <LL_RCC_PLLSAI1_IsReady>
 8004492:	4603      	mov	r3, r0
 8004494:	2b01      	cmp	r3, #1
 8004496:	d1f0      	bne.n	800447a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d108      	bne.n	80044b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ac:	4313      	orrs	r3, r2
 80044ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e095      	b.n	80045f8 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d108      	bne.n	80044e6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044dc:	d009      	beq.n	80044f2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	61da      	str	r2, [r3, #28]
 80044e4:	e005      	b.n	80044f2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fc f8a3 	bl	8000658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004528:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004532:	d902      	bls.n	800453a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e002      	b.n	8004540 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800453a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004548:	d007      	beq.n	800455a <HAL_SPI_Init+0xa0>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004552:	d002      	beq.n	800455a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	ea42 0103 	orr.w	r1, r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	f003 0204 	and.w	r2, r3, #4
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045d6:	ea42 0103 	orr.w	r1, r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_SPI_Transmit+0x22>
 800461e:	2302      	movs	r3, #2
 8004620:	e158      	b.n	80048d4 <HAL_SPI_Transmit+0x2d4>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800462a:	f7fc f995 	bl	8000958 <HAL_GetTick>
 800462e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d002      	beq.n	8004646 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004640:	2302      	movs	r3, #2
 8004642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004644:	e13d      	b.n	80048c2 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_SPI_Transmit+0x52>
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004656:	e134      	b.n	80048c2 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2203      	movs	r2, #3
 800465c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	88fa      	ldrh	r2, [r7, #6]
 8004676:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a2:	d10f      	bne.n	80046c4 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d007      	beq.n	80046e2 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046ea:	d94b      	bls.n	8004784 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SPI_Transmit+0xfa>
 80046f4:	8afb      	ldrh	r3, [r7, #22]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d13e      	bne.n	8004778 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	881a      	ldrh	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800471e:	e02b      	b.n	8004778 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d112      	bne.n	8004754 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	1c9a      	adds	r2, r3, #2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004752:	e011      	b.n	8004778 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004754:	f7fc f900 	bl	8000958 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d803      	bhi.n	800476c <HAL_SPI_Transmit+0x16c>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d102      	bne.n	8004772 <HAL_SPI_Transmit+0x172>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004776:	e0a4      	b.n	80048c2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1ce      	bne.n	8004720 <HAL_SPI_Transmit+0x120>
 8004782:	e07c      	b.n	800487e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SPI_Transmit+0x192>
 800478c:	8afb      	ldrh	r3, [r7, #22]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d170      	bne.n	8004874 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d912      	bls.n	80047c2 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b02      	subs	r3, #2
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c0:	e058      	b.n	8004874 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047e8:	e044      	b.n	8004874 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d12b      	bne.n	8004850 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d912      	bls.n	8004828 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	881a      	ldrh	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	1c9a      	adds	r2, r3, #2
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b02      	subs	r3, #2
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004826:	e025      	b.n	8004874 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800484e:	e011      	b.n	8004874 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004850:	f7fc f882 	bl	8000958 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d803      	bhi.n	8004868 <HAL_SPI_Transmit+0x268>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d102      	bne.n	800486e <HAL_SPI_Transmit+0x26e>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004872:	e026      	b.n	80048c2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1b5      	bne.n	80047ea <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fce4 	bl	8005250 <SPI_EndRxTxTransaction>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e000      	b.n	80048c2 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80048c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f8:	d112      	bne.n	8004920 <HAL_SPI_Receive+0x44>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10e      	bne.n	8004920 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2204      	movs	r2, #4
 8004906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f910 	bl	8004b3c <HAL_SPI_TransmitReceive>
 800491c:	4603      	mov	r3, r0
 800491e:	e109      	b.n	8004b34 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_SPI_Receive+0x52>
 800492a:	2302      	movs	r3, #2
 800492c:	e102      	b.n	8004b34 <HAL_SPI_Receive+0x258>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004936:	f7fc f80f 	bl	8000958 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800494c:	e0e9      	b.n	8004b22 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_SPI_Receive+0x7e>
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800495e:	e0e0      	b.n	8004b22 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2204      	movs	r2, #4
 8004964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	88fa      	ldrh	r2, [r7, #6]
 8004980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049aa:	d908      	bls.n	80049be <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	e007      	b.n	80049ce <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d6:	d10f      	bne.n	80049f8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d007      	beq.n	8004a16 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a1e:	d867      	bhi.n	8004af0 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a20:	e030      	b.n	8004a84 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d117      	bne.n	8004a60 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f103 020c 	add.w	r2, r3, #12
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a5e:	e011      	b.n	8004a84 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a60:	f7fb ff7a 	bl	8000958 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d803      	bhi.n	8004a78 <HAL_SPI_Receive+0x19c>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Receive+0x1a2>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a82:	e04e      	b.n	8004b22 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1c8      	bne.n	8004a22 <HAL_SPI_Receive+0x146>
 8004a90:	e034      	b.n	8004afc <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d115      	bne.n	8004acc <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004aca:	e011      	b.n	8004af0 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004acc:	f7fb ff44 	bl	8000958 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d803      	bhi.n	8004ae4 <HAL_SPI_Receive+0x208>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d102      	bne.n	8004aea <HAL_SPI_Receive+0x20e>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004aee:	e018      	b.n	8004b22 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ca      	bne.n	8004a92 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	6839      	ldr	r1, [r7, #0]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fb4d 	bl	80051a0 <SPI_EndRxTransaction>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
 8004b1e:	e000      	b.n	8004b22 <HAL_SPI_Receive+0x246>
  }

error :
 8004b20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_SPI_TransmitReceive+0x26>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e1fb      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x41e>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b6a:	f7fb fef5 	bl	8000958 <HAL_GetTick>
 8004b6e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b76:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b7e:	887b      	ldrh	r3, [r7, #2]
 8004b80:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b86:	7efb      	ldrb	r3, [r7, #27]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d00e      	beq.n	8004baa <HAL_SPI_TransmitReceive+0x6e>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b92:	d106      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x66>
 8004b9c:	7efb      	ldrb	r3, [r7, #27]
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d003      	beq.n	8004baa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ba8:	e1cd      	b.n	8004f46 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x80>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x80>
 8004bb6:	887b      	ldrh	r3, [r7, #2]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bc2:	e1c0      	b.n	8004f46 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d003      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2205      	movs	r2, #5
 8004bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	887a      	ldrh	r2, [r7, #2]
 8004be8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	887a      	ldrh	r2, [r7, #2]
 8004bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c1a:	d802      	bhi.n	8004c22 <HAL_SPI_TransmitReceive+0xe6>
 8004c1c:	8a3b      	ldrh	r3, [r7, #16]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d908      	bls.n	8004c34 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	e007      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	d007      	beq.n	8004c62 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c6a:	d97c      	bls.n	8004d66 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x13e>
 8004c74:	8a7b      	ldrh	r3, [r7, #18]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d169      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	881a      	ldrh	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	1c9a      	adds	r2, r3, #2
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c9e:	e056      	b.n	8004d4e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d11b      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x1aa>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d016      	beq.n	8004ce6 <HAL_SPI_TransmitReceive+0x1aa>
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d113      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d11c      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x1f2>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d016      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	b292      	uxth	r2, r2
 8004d0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	1c9a      	adds	r2, r3, #2
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d2e:	f7fb fe13 	bl	8000958 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d807      	bhi.n	8004d4e <HAL_SPI_TransmitReceive+0x212>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d003      	beq.n	8004d4e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d4c:	e0fb      	b.n	8004f46 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1a3      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x164>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d19d      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x164>
 8004d64:	e0df      	b.n	8004f26 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0x23a>
 8004d6e:	8a7b      	ldrh	r3, [r7, #18]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	f040 80cb 	bne.w	8004f0c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d912      	bls.n	8004da6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	881a      	ldrh	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	1c9a      	adds	r2, r3, #2
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b02      	subs	r3, #2
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da4:	e0b2      	b.n	8004f0c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dcc:	e09e      	b.n	8004f0c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d134      	bne.n	8004e46 <HAL_SPI_TransmitReceive+0x30a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d02f      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x30a>
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d12c      	bne.n	8004e46 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d912      	bls.n	8004e1c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b02      	subs	r3, #2
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e1a:	e012      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	7812      	ldrb	r2, [r2, #0]
 8004e28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d148      	bne.n	8004ee6 <HAL_SPI_TransmitReceive+0x3aa>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d042      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d923      	bls.n	8004eb4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	b292      	uxth	r2, r2
 8004e78:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	1c9a      	adds	r2, r3, #2
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b02      	subs	r3, #2
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d81f      	bhi.n	8004ee2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	e016      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f103 020c 	add.w	r2, r3, #12
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ee6:	f7fb fd37 	bl	8000958 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d803      	bhi.n	8004efe <HAL_SPI_TransmitReceive+0x3c2>
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d102      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x3c8>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d103      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f0a:	e01c      	b.n	8004f46 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f47f af5b 	bne.w	8004dce <HAL_SPI_TransmitReceive+0x292>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f47f af54 	bne.w	8004dce <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f990 	bl	8005250 <SPI_EndRxTxTransaction>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d006      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	661a      	str	r2, [r3, #96]	; 0x60
 8004f42:	e000      	b.n	8004f46 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004f44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3728      	adds	r7, #40	; 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f74:	f7fb fcf0 	bl	8000958 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	4413      	add	r3, r2
 8004f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f84:	f7fb fce8 	bl	8000958 <HAL_GetTick>
 8004f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	015b      	lsls	r3, r3, #5
 8004f90:	0d1b      	lsrs	r3, r3, #20
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9a:	e054      	b.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d050      	beq.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fa4:	f7fb fcd8 	bl	8000958 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d902      	bls.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d13d      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd2:	d111      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d004      	beq.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d107      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005000:	d10f      	bne.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e017      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3b01      	subs	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	429a      	cmp	r2, r3
 8005062:	d19b      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000004 	.word	0x20000004

08005074 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005086:	f7fb fc67 	bl	8000958 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	4413      	add	r3, r2
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005096:	f7fb fc5f 	bl	8000958 <HAL_GetTick>
 800509a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050a4:	4b3d      	ldr	r3, [pc, #244]	; (800519c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	00da      	lsls	r2, r3, #3
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	0d1b      	lsrs	r3, r3, #20
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050bc:	e060      	b.n	8005180 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050c4:	d107      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d104      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d050      	beq.n	8005180 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050de:	f7fb fc3b 	bl	8000958 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d902      	bls.n	80050f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d13d      	bne.n	8005170 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005102:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510c:	d111      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005116:	d004      	beq.n	8005122 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005120:	d107      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005130:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513a:	d10f      	bne.n	800515c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800515a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e010      	b.n	8005192 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	3b01      	subs	r3, #1
 800517e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4013      	ands	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d196      	bne.n	80050be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3728      	adds	r7, #40	; 0x28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000004 	.word	0x20000004

080051a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b4:	d111      	bne.n	80051da <SPI_EndRxTransaction+0x3a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	d004      	beq.n	80051ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c8:	d107      	bne.n	80051da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2200      	movs	r2, #0
 80051e2:	2180      	movs	r1, #128	; 0x80
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff febd 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f4:	f043 0220 	orr.w	r2, r3, #32
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e023      	b.n	8005248 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005208:	d11d      	bne.n	8005246 <SPI_EndRxTransaction+0xa6>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005212:	d004      	beq.n	800521e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521c:	d113      	bne.n	8005246 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff ff22 	bl	8005074 <SPI_WaitFifoStateUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e000      	b.n	8005248 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2200      	movs	r2, #0
 8005264:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff ff03 	bl	8005074 <SPI_WaitFifoStateUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e027      	b.n	80052d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2200      	movs	r2, #0
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f7ff fe68 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529e:	f043 0220 	orr.w	r2, r3, #32
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e014      	b.n	80052d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7ff fedc 	bl	8005074 <SPI_WaitFifoStateUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d007      	beq.n	80052d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e000      	b.n	80052d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80052f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005312:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005316:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	b29b      	uxth	r3, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	b29b      	uxth	r3, r3
 8005328:	4013      	ands	r3, r2
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005340:	b084      	sub	sp, #16
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	f107 0014 	add.w	r0, r7, #20
 800534e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	b004      	add	sp, #16
 8005380:	4770      	bx	lr
	...

08005384 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005384:	b480      	push	{r7}
 8005386:	b09d      	sub	sp, #116	; 0x74
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	78db      	ldrb	r3, [r3, #3]
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d81f      	bhi.n	80053f6 <USB_ActivateEndpoint+0x72>
 80053b6:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <USB_ActivateEndpoint+0x38>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053cd 	.word	0x080053cd
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053ff 	.word	0x080053ff
 80053c8:	080053db 	.word	0x080053db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053d8:	e012      	b.n	8005400 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80053e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053e6:	e00b      	b.n	8005400 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80053e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053f4:	e004      	b.n	8005400 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80053fc:	e000      	b.n	8005400 <USB_ActivateEndpoint+0x7c>
      break;
 80053fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800540e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	b21b      	sxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	b21a      	sxth	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	b21b      	sxth	r3, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	b21b      	sxth	r3, r3
 8005446:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	441a      	add	r2, r3
 8005454:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	b29b      	uxth	r3, r3
 800546a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7b1b      	ldrb	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 8149 	bne.w	8005708 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8084 	beq.w	8005588 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	00da      	lsls	r2, r3, #3
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	88db      	ldrh	r3, [r3, #6]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	827b      	strh	r3, [r7, #18]
 80054c2:	8a7b      	ldrh	r3, [r7, #18]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <USB_ActivateEndpoint+0x180>
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	823b      	strh	r3, [r7, #16]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	8a3b      	ldrh	r3, [r7, #16]
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	78db      	ldrb	r3, [r3, #3]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d020      	beq.n	800554e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	81bb      	strh	r3, [r7, #12]
 8005524:	89bb      	ldrh	r3, [r7, #12]
 8005526:	f083 0320 	eor.w	r3, r3, #32
 800552a:	81bb      	strh	r3, [r7, #12]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	89bb      	ldrh	r3, [r7, #12]
 8005538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005548:	b29b      	uxth	r3, r3
 800554a:	8013      	strh	r3, [r2, #0]
 800554c:	e2a6      	b.n	8005a9c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005564:	81fb      	strh	r3, [r7, #14]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	441a      	add	r2, r3
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005582:	b29b      	uxth	r3, r3
 8005584:	8013      	strh	r3, [r2, #0]
 8005586:	e289      	b.n	8005a9c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005592:	b29b      	uxth	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	4413      	add	r3, r2
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	00da      	lsls	r2, r3, #3
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	88db      	ldrh	r3, [r3, #6]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	4413      	add	r3, r2
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	00da      	lsls	r2, r3, #3
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	4413      	add	r3, r2
 80055da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b3e      	cmp	r3, #62	; 0x3e
 80055e6:	d918      	bls.n	800561a <USB_ActivateEndpoint+0x296>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <USB_ActivateEndpoint+0x27e>
 80055fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055fe:	3b01      	subs	r3, #1
 8005600:	66bb      	str	r3, [r7, #104]	; 0x68
 8005602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005604:	b29b      	uxth	r3, r3
 8005606:	029b      	lsls	r3, r3, #10
 8005608:	b29b      	uxth	r3, r3
 800560a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005612:	b29a      	uxth	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	e029      	b.n	800566e <USB_ActivateEndpoint+0x2ea>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d112      	bne.n	8005648 <USB_ActivateEndpoint+0x2c4>
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800562c:	b29a      	uxth	r2, r3
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005640:	b29a      	uxth	r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e012      	b.n	800566e <USB_ActivateEndpoint+0x2ea>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <USB_ActivateEndpoint+0x2de>
 800565c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800565e:	3301      	adds	r3, #1
 8005660:	66bb      	str	r3, [r7, #104]	; 0x68
 8005662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005664:	b29b      	uxth	r3, r3
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	b29a      	uxth	r2, r3
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	847b      	strh	r3, [r7, #34]	; 0x22
 800567c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800567e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01b      	beq.n	80056be <USB_ActivateEndpoint+0x33a>
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	843b      	strh	r3, [r7, #32]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	8c3b      	ldrh	r3, [r7, #32]
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	83fb      	strh	r3, [r7, #30]
 80056d6:	8bfb      	ldrh	r3, [r7, #30]
 80056d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056dc:	83fb      	strh	r3, [r7, #30]
 80056de:	8bfb      	ldrh	r3, [r7, #30]
 80056e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056e4:	83fb      	strh	r3, [r7, #30]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8bfb      	ldrh	r3, [r7, #30]
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
 8005706:	e1c9      	b.n	8005a9c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	78db      	ldrb	r3, [r3, #3]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d11e      	bne.n	800574e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005740:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
 800574c:	e01d      	b.n	800578a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005764:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800579a:	4413      	add	r3, r2
 800579c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	00da      	lsls	r2, r3, #3
 80057a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	891b      	ldrh	r3, [r3, #8]
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	657b      	str	r3, [r7, #84]	; 0x54
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ce:	4413      	add	r3, r2
 80057d0:	657b      	str	r3, [r7, #84]	; 0x54
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	00da      	lsls	r2, r3, #3
 80057d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057da:	4413      	add	r3, r2
 80057dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057e0:	653b      	str	r3, [r7, #80]	; 0x50
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	895b      	ldrh	r3, [r3, #10]
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 8093 	bne.w	8005922 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800580c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01b      	beq.n	8005850 <USB_ActivateEndpoint+0x4cc>
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800583c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	b29b      	uxth	r3, r3
 800584e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800585e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01b      	beq.n	80058a0 <USB_ActivateEndpoint+0x51c>
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800588c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005898:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800589c:	b29b      	uxth	r3, r3
 800589e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80058b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058be:	873b      	strh	r3, [r7, #56]	; 0x38
 80058c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	441a      	add	r2, r3
 800590a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800590c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]
 8005920:	e0bc      	b.n	8005a9c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01d      	beq.n	800597a <USB_ActivateEndpoint+0x5f6>
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005954:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800598a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01d      	beq.n	80059d2 <USB_ActivateEndpoint+0x64e>
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	441a      	add	r2, r3
 80059ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	78db      	ldrb	r3, [r3, #3]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d024      	beq.n	8005a24 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059f8:	f083 0320 	eor.w	r3, r3, #32
 80059fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]
 8005a22:	e01d      	b.n	8005a60 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005a9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3774      	adds	r7, #116	; 0x74
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b08d      	sub	sp, #52	; 0x34
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	7b1b      	ldrb	r3, [r3, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 808e 	bne.w	8005bdc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d044      	beq.n	8005b52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	81bb      	strh	r3, [r7, #12]
 8005ad6:	89bb      	ldrh	r3, [r7, #12]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01b      	beq.n	8005b18 <USB_DeactivateEndpoint+0x6c>
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	817b      	strh	r3, [r7, #10]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	897b      	ldrh	r3, [r7, #10]
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2e:	813b      	strh	r3, [r7, #8]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	893b      	ldrh	r3, [r7, #8]
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]
 8005b50:	e192      	b.n	8005e78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	827b      	strh	r3, [r7, #18]
 8005b60:	8a7b      	ldrh	r3, [r7, #18]
 8005b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <USB_DeactivateEndpoint+0xf6>
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	823b      	strh	r3, [r7, #16]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8a3b      	ldrh	r3, [r7, #16]
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	81fb      	strh	r3, [r7, #14]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	89fb      	ldrh	r3, [r7, #14]
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]
 8005bda:	e14d      	b.n	8005e78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 80a5 	bne.w	8005d30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	843b      	strh	r3, [r7, #32]
 8005bf4:	8c3b      	ldrh	r3, [r7, #32]
 8005bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01b      	beq.n	8005c36 <USB_DeactivateEndpoint+0x18a>
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c14:	83fb      	strh	r3, [r7, #30]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	8bfb      	ldrh	r3, [r7, #30]
 8005c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	83bb      	strh	r3, [r7, #28]
 8005c44:	8bbb      	ldrh	r3, [r7, #28]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01b      	beq.n	8005c86 <USB_DeactivateEndpoint+0x1da>
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	837b      	strh	r3, [r7, #26]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	8b7b      	ldrh	r3, [r7, #26]
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	833b      	strh	r3, [r7, #24]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	441a      	add	r2, r3
 8005ca8:	8b3b      	ldrh	r3, [r7, #24]
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	82fb      	strh	r3, [r7, #22]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	8afb      	ldrh	r3, [r7, #22]
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0c:	82bb      	strh	r3, [r7, #20]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8abb      	ldrh	r3, [r7, #20]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
 8005d2e:	e0a3      	b.n	8005e78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <USB_DeactivateEndpoint+0x2d4>
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <USB_DeactivateEndpoint+0x324>
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	853b      	strh	r3, [r7, #40]	; 0x28
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3734      	adds	r7, #52	; 0x34
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b0c2      	sub	sp, #264	; 0x108
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	6018      	str	r0, [r3, #0]
 8005e90:	463b      	mov	r3, r7
 8005e92:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	f040 8509 	bne.w	80068b2 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d905      	bls.n	8005ebc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005eba:	e004      	b.n	8005ec6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	7b1b      	ldrb	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d128      	bne.n	8005f22 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6959      	ldr	r1, [r3, #20]
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	88da      	ldrh	r2, [r3, #6]
 8005edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	1d38      	adds	r0, r7, #4
 8005ee4:	6800      	ldr	r0, [r0, #0]
 8005ee6:	f001 f9da 	bl	800729e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	1d3b      	adds	r3, r7, #4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	00da      	lsls	r2, r3, #3
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	f000 bc9f 	b.w	8006860 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	78db      	ldrb	r3, [r3, #3]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	f040 8347 	bne.w	80065bc <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f2e:	463b      	mov	r3, r7
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	f240 82eb 	bls.w	8006516 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f40:	1d3b      	adds	r3, r7, #4
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	463b      	mov	r3, r7
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005f5e:	1d3b      	adds	r3, r7, #4
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	463b      	mov	r3, r7
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6a1a      	ldr	r2, [r3, #32]
 8005f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	463b      	mov	r3, r7
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8159 	beq.w	8006264 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d164      	bne.n	800608c <USB_EPStartXfer+0x206>
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	4413      	add	r3, r2
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fda:	463b      	mov	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	00da      	lsls	r2, r3, #3
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff2:	d91c      	bls.n	800602e <USB_EPStartXfer+0x1a8>
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <USB_EPStartXfer+0x18e>
 800600a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800600e:	3b01      	subs	r3, #1
 8006010:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006014:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006018:	b29b      	uxth	r3, r3
 800601a:	029b      	lsls	r3, r3, #10
 800601c:	b29b      	uxth	r3, r3
 800601e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006026:	b29a      	uxth	r2, r3
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e04a      	b.n	80060c4 <USB_EPStartXfer+0x23e>
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006032:	2b00      	cmp	r3, #0
 8006034:	d112      	bne.n	800605c <USB_EPStartXfer+0x1d6>
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006040:	b29a      	uxth	r2, r3
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006054:	b29a      	uxth	r2, r3
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	e033      	b.n	80060c4 <USB_EPStartXfer+0x23e>
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <USB_EPStartXfer+0x1f6>
 8006072:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006076:	3301      	adds	r3, #1
 8006078:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800607c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006080:	b29b      	uxth	r3, r3
 8006082:	029b      	lsls	r3, r3, #10
 8006084:	b29a      	uxth	r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	e01b      	b.n	80060c4 <USB_EPStartXfer+0x23e>
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d116      	bne.n	80060c4 <USB_EPStartXfer+0x23e>
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	4413      	add	r3, r2
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30
 80060a8:	463b      	mov	r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	00da      	lsls	r2, r3, #3
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	4413      	add	r3, r2
 80060b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	b29a      	uxth	r2, r3
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	895b      	ldrh	r3, [r3, #10]
 80060ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ce:	463b      	mov	r3, r7
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6959      	ldr	r1, [r3, #20]
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060de:	1d38      	adds	r0, r7, #4
 80060e0:	6800      	ldr	r0, [r0, #0]
 80060e2:	f001 f8dc 	bl	800729e <USB_WritePMA>
            ep->xfer_buff += len;
 80060e6:	463b      	mov	r3, r7
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f0:	441a      	add	r2, r3
 80060f2:	463b      	mov	r3, r7
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060f8:	463b      	mov	r3, r7
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6a1a      	ldr	r2, [r3, #32]
 80060fe:	463b      	mov	r3, r7
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	429a      	cmp	r2, r3
 8006106:	d909      	bls.n	800611c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006112:	1ad2      	subs	r2, r2, r3
 8006114:	463b      	mov	r3, r7
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	621a      	str	r2, [r3, #32]
 800611a:	e008      	b.n	800612e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800611c:	463b      	mov	r3, r7
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2200      	movs	r2, #0
 800612c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d164      	bne.n	8006202 <USB_EPStartXfer+0x37c>
 8006138:	1d3b      	adds	r3, r7, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	1d3b      	adds	r3, r7, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006146:	b29b      	uxth	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	4413      	add	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	00da      	lsls	r2, r3, #3
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	4413      	add	r3, r2
 800615c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	2b3e      	cmp	r3, #62	; 0x3e
 8006168:	d91c      	bls.n	80061a4 <USB_EPStartXfer+0x31e>
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <USB_EPStartXfer+0x304>
 8006180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006184:	3b01      	subs	r3, #1
 8006186:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800618a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800618e:	b29b      	uxth	r3, r3
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	b29b      	uxth	r3, r3
 8006194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619c:	b29a      	uxth	r2, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e04d      	b.n	8006240 <USB_EPStartXfer+0x3ba>
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d112      	bne.n	80061d2 <USB_EPStartXfer+0x34c>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e036      	b.n	8006240 <USB_EPStartXfer+0x3ba>
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <USB_EPStartXfer+0x36c>
 80061e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ec:	3301      	adds	r3, #1
 80061ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	029b      	lsls	r3, r3, #10
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	e01e      	b.n	8006240 <USB_EPStartXfer+0x3ba>
 8006202:	463b      	mov	r3, r7
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d119      	bne.n	8006240 <USB_EPStartXfer+0x3ba>
 800620c:	1d3b      	adds	r3, r7, #4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800621a:	b29b      	uxth	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	4413      	add	r3, r2
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	463b      	mov	r3, r7
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	00da      	lsls	r2, r3, #3
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	4413      	add	r3, r2
 8006230:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623a:	b29a      	uxth	r2, r3
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006240:	463b      	mov	r3, r7
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	891b      	ldrh	r3, [r3, #8]
 8006246:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6959      	ldr	r1, [r3, #20]
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	b29b      	uxth	r3, r3
 8006256:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800625a:	1d38      	adds	r0, r7, #4
 800625c:	6800      	ldr	r0, [r0, #0]
 800625e:	f001 f81e 	bl	800729e <USB_WritePMA>
 8006262:	e2fd      	b.n	8006860 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d164      	bne.n	8006338 <USB_EPStartXfer+0x4b2>
 800626e:	1d3b      	adds	r3, r7, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	64bb      	str	r3, [r7, #72]	; 0x48
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006282:	4413      	add	r3, r2
 8006284:	64bb      	str	r3, [r7, #72]	; 0x48
 8006286:	463b      	mov	r3, r7
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	00da      	lsls	r2, r3, #3
 800628e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006290:	4413      	add	r3, r2
 8006292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006296:	647b      	str	r3, [r7, #68]	; 0x44
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629c:	2b3e      	cmp	r3, #62	; 0x3e
 800629e:	d91c      	bls.n	80062da <USB_EPStartXfer+0x454>
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a4:	095b      	lsrs	r3, r3, #5
 80062a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <USB_EPStartXfer+0x43a>
 80062b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062ba:	3b01      	subs	r3, #1
 80062bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	029b      	lsls	r3, r3, #10
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	e04d      	b.n	8006376 <USB_EPStartXfer+0x4f0>
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d112      	bne.n	8006308 <USB_EPStartXfer+0x482>
 80062e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29a      	uxth	r2, r3
 8006302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e036      	b.n	8006376 <USB_EPStartXfer+0x4f0>
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <USB_EPStartXfer+0x4a2>
 800631e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006322:	3301      	adds	r3, #1
 8006324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006328:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800632c:	b29b      	uxth	r3, r3
 800632e:	029b      	lsls	r3, r3, #10
 8006330:	b29a      	uxth	r2, r3
 8006332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	e01e      	b.n	8006376 <USB_EPStartXfer+0x4f0>
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d119      	bne.n	8006376 <USB_EPStartXfer+0x4f0>
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	653b      	str	r3, [r7, #80]	; 0x50
 8006348:	1d3b      	adds	r3, r7, #4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006350:	b29b      	uxth	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006356:	4413      	add	r3, r2
 8006358:	653b      	str	r3, [r7, #80]	; 0x50
 800635a:	463b      	mov	r3, r7
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	00da      	lsls	r2, r3, #3
 8006362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006364:	4413      	add	r3, r2
 8006366:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800636a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006370:	b29a      	uxth	r2, r3
 8006372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006374:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006376:	463b      	mov	r3, r7
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	891b      	ldrh	r3, [r3, #8]
 800637c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6959      	ldr	r1, [r3, #20]
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638a:	b29b      	uxth	r3, r3
 800638c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006390:	1d38      	adds	r0, r7, #4
 8006392:	6800      	ldr	r0, [r0, #0]
 8006394:	f000 ff83 	bl	800729e <USB_WritePMA>
            ep->xfer_buff += len;
 8006398:	463b      	mov	r3, r7
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	441a      	add	r2, r3
 80063a4:	463b      	mov	r3, r7
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063aa:	463b      	mov	r3, r7
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d909      	bls.n	80063ce <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80063ba:	463b      	mov	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6a1a      	ldr	r2, [r3, #32]
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c4:	1ad2      	subs	r2, r2, r3
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	621a      	str	r2, [r3, #32]
 80063cc:	e008      	b.n	80063e0 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 80063ce:	463b      	mov	r3, r7
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80063d8:	463b      	mov	r3, r7
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2200      	movs	r2, #0
 80063de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	643b      	str	r3, [r7, #64]	; 0x40
 80063e6:	463b      	mov	r3, r7
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d164      	bne.n	80064ba <USB_EPStartXfer+0x634>
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063f6:	1d3b      	adds	r3, r7, #4
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	4413      	add	r3, r2
 8006406:	63bb      	str	r3, [r7, #56]	; 0x38
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	00da      	lsls	r2, r3, #3
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	4413      	add	r3, r2
 8006414:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
 800641a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641e:	2b3e      	cmp	r3, #62	; 0x3e
 8006420:	d91c      	bls.n	800645c <USB_EPStartXfer+0x5d6>
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	2b00      	cmp	r3, #0
 8006436:	d104      	bne.n	8006442 <USB_EPStartXfer+0x5bc>
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	3b01      	subs	r3, #1
 800643e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006446:	b29b      	uxth	r3, r3
 8006448:	029b      	lsls	r3, r3, #10
 800644a:	b29b      	uxth	r3, r3
 800644c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006454:	b29a      	uxth	r2, r3
 8006456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006458:	801a      	strh	r2, [r3, #0]
 800645a:	e04a      	b.n	80064f2 <USB_EPStartXfer+0x66c>
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006460:	2b00      	cmp	r3, #0
 8006462:	d112      	bne.n	800648a <USB_EPStartXfer+0x604>
 8006464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800646e:	b29a      	uxth	r2, r3
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006482:	b29a      	uxth	r2, r3
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	e033      	b.n	80064f2 <USB_EPStartXfer+0x66c>
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <USB_EPStartXfer+0x624>
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	3301      	adds	r3, #1
 80064a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e01b      	b.n	80064f2 <USB_EPStartXfer+0x66c>
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d116      	bne.n	80064f2 <USB_EPStartXfer+0x66c>
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d2:	4413      	add	r3, r2
 80064d4:	643b      	str	r3, [r7, #64]	; 0x40
 80064d6:	463b      	mov	r3, r7
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	00da      	lsls	r2, r3, #3
 80064de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e0:	4413      	add	r3, r2
 80064e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	895b      	ldrh	r3, [r3, #10]
 80064f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6959      	ldr	r1, [r3, #20]
 8006502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006506:	b29b      	uxth	r3, r3
 8006508:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800650c:	1d38      	adds	r0, r7, #4
 800650e:	6800      	ldr	r0, [r0, #0]
 8006510:	f000 fec5 	bl	800729e <USB_WritePMA>
 8006514:	e1a4      	b.n	8006860 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006516:	463b      	mov	r3, r7
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	463b      	mov	r3, r7
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800653e:	1d3b      	adds	r3, r7, #4
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	441a      	add	r2, r3
 800654c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006560:	b29b      	uxth	r3, r3
 8006562:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006564:	1d3b      	adds	r3, r7, #4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006572:	b29b      	uxth	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006578:	4413      	add	r3, r2
 800657a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800657c:	463b      	mov	r3, r7
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	00da      	lsls	r2, r3, #3
 8006584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006586:	4413      	add	r3, r2
 8006588:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800658c:	65bb      	str	r3, [r7, #88]	; 0x58
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006592:	b29a      	uxth	r2, r3
 8006594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006596:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	891b      	ldrh	r3, [r3, #8]
 800659e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6959      	ldr	r1, [r3, #20]
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065b2:	1d38      	adds	r0, r7, #4
 80065b4:	6800      	ldr	r0, [r0, #0]
 80065b6:	f000 fe72 	bl	800729e <USB_WritePMA>
 80065ba:	e151      	b.n	8006860 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80065bc:	463b      	mov	r3, r7
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	463b      	mov	r3, r7
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065ce:	1d3b      	adds	r3, r7, #4
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	463b      	mov	r3, r7
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 809b 	beq.w	8006720 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065ea:	1d3b      	adds	r3, r7, #4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	673b      	str	r3, [r7, #112]	; 0x70
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d164      	bne.n	80066c4 <USB_EPStartXfer+0x83e>
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006600:	1d3b      	adds	r3, r7, #4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006608:	b29b      	uxth	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800660e:	4413      	add	r3, r2
 8006610:	66bb      	str	r3, [r7, #104]	; 0x68
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800661c:	4413      	add	r3, r2
 800661e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006622:	667b      	str	r3, [r7, #100]	; 0x64
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	2b3e      	cmp	r3, #62	; 0x3e
 800662a:	d91c      	bls.n	8006666 <USB_EPStartXfer+0x7e0>
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <USB_EPStartXfer+0x7c6>
 8006642:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006646:	3b01      	subs	r3, #1
 8006648:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800664c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006650:	b29b      	uxth	r3, r3
 8006652:	029b      	lsls	r3, r3, #10
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665e:	b29a      	uxth	r2, r3
 8006660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	e04a      	b.n	80066fc <USB_EPStartXfer+0x876>
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666a:	2b00      	cmp	r3, #0
 800666c:	d112      	bne.n	8006694 <USB_EPStartXfer+0x80e>
 800666e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006678:	b29a      	uxth	r2, r3
 800667a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668c:	b29a      	uxth	r2, r3
 800668e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	e033      	b.n	80066fc <USB_EPStartXfer+0x876>
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006698:	085b      	lsrs	r3, r3, #1
 800669a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d004      	beq.n	80066b4 <USB_EPStartXfer+0x82e>
 80066aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066ae:	3301      	adds	r3, #1
 80066b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	e01b      	b.n	80066fc <USB_EPStartXfer+0x876>
 80066c4:	463b      	mov	r3, r7
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d116      	bne.n	80066fc <USB_EPStartXfer+0x876>
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066dc:	4413      	add	r3, r2
 80066de:	673b      	str	r3, [r7, #112]	; 0x70
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	00da      	lsls	r2, r3, #3
 80066e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066ea:	4413      	add	r3, r2
 80066ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80066fc:	463b      	mov	r3, r7
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	895b      	ldrh	r3, [r3, #10]
 8006702:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006706:	463b      	mov	r3, r7
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6959      	ldr	r1, [r3, #20]
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	b29b      	uxth	r3, r3
 8006712:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006716:	1d38      	adds	r0, r7, #4
 8006718:	6800      	ldr	r0, [r0, #0]
 800671a:	f000 fdc0 	bl	800729e <USB_WritePMA>
 800671e:	e09f      	b.n	8006860 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006720:	463b      	mov	r3, r7
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d164      	bne.n	80067f4 <USB_EPStartXfer+0x96e>
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006738:	b29b      	uxth	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800673e:	4413      	add	r3, r2
 8006740:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006742:	463b      	mov	r3, r7
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	00da      	lsls	r2, r3, #3
 800674a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800674c:	4413      	add	r3, r2
 800674e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006752:	67bb      	str	r3, [r7, #120]	; 0x78
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006758:	2b3e      	cmp	r3, #62	; 0x3e
 800675a:	d91c      	bls.n	8006796 <USB_EPStartXfer+0x910>
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <USB_EPStartXfer+0x8f6>
 8006772:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006776:	3b01      	subs	r3, #1
 8006778:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800677c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006780:	b29b      	uxth	r3, r3
 8006782:	029b      	lsls	r3, r3, #10
 8006784:	b29b      	uxth	r3, r3
 8006786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678e:	b29a      	uxth	r2, r3
 8006790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e053      	b.n	800683e <USB_EPStartXfer+0x9b8>
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679a:	2b00      	cmp	r3, #0
 800679c:	d112      	bne.n	80067c4 <USB_EPStartXfer+0x93e>
 800679e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067bc:	b29a      	uxth	r2, r3
 80067be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c0:	801a      	strh	r2, [r3, #0]
 80067c2:	e03c      	b.n	800683e <USB_EPStartXfer+0x9b8>
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <USB_EPStartXfer+0x95e>
 80067da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067de:	3301      	adds	r3, #1
 80067e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e024      	b.n	800683e <USB_EPStartXfer+0x9b8>
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d11f      	bne.n	800683e <USB_EPStartXfer+0x9b8>
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006806:	1d3b      	adds	r3, r7, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006816:	4413      	add	r3, r2
 8006818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	00da      	lsls	r2, r3, #3
 8006824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006828:	4413      	add	r3, r2
 800682a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800682e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006836:	b29a      	uxth	r2, r3
 8006838:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800683c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	891b      	ldrh	r3, [r3, #8]
 8006844:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6959      	ldr	r1, [r3, #20]
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006852:	b29b      	uxth	r3, r3
 8006854:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006858:	1d38      	adds	r0, r7, #4
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	f000 fd1f 	bl	800729e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006860:	1d3b      	adds	r3, r7, #4
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	463b      	mov	r3, r7
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687a:	817b      	strh	r3, [r7, #10]
 800687c:	897b      	ldrh	r3, [r7, #10]
 800687e:	f083 0310 	eor.w	r3, r3, #16
 8006882:	817b      	strh	r3, [r7, #10]
 8006884:	897b      	ldrh	r3, [r7, #10]
 8006886:	f083 0320 	eor.w	r3, r3, #32
 800688a:	817b      	strh	r3, [r7, #10]
 800688c:	1d3b      	adds	r3, r7, #4
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	463b      	mov	r3, r7
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	897b      	ldrh	r3, [r7, #10]
 800689c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	8013      	strh	r3, [r2, #0]
 80068b0:	e3b5      	b.n	800701e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068b2:	463b      	mov	r3, r7
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	7b1b      	ldrb	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 8090 	bne.w	80069de <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068be:	463b      	mov	r3, r7
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	699a      	ldr	r2, [r3, #24]
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d90e      	bls.n	80068ec <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80068ce:	463b      	mov	r3, r7
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80068d8:	463b      	mov	r3, r7
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	463b      	mov	r3, r7
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	619a      	str	r2, [r3, #24]
 80068ea:	e008      	b.n	80068fe <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 80068ec:	463b      	mov	r3, r7
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80068fe:	1d3b      	adds	r3, r7, #4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006916:	4413      	add	r3, r2
 8006918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	00da      	lsls	r2, r3, #3
 8006924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006928:	4413      	add	r3, r2
 800692a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800692e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006936:	2b3e      	cmp	r3, #62	; 0x3e
 8006938:	d91d      	bls.n	8006976 <USB_EPStartXfer+0xaf0>
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <USB_EPStartXfer+0xad4>
 8006950:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006954:	3b01      	subs	r3, #1
 8006956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800695a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800695e:	b29b      	uxth	r3, r3
 8006960:	029b      	lsls	r3, r3, #10
 8006962:	b29b      	uxth	r3, r3
 8006964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696c:	b29a      	uxth	r2, r3
 800696e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006972:	801a      	strh	r2, [r3, #0]
 8006974:	e325      	b.n	8006fc2 <USB_EPStartXfer+0x113c>
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697a:	2b00      	cmp	r3, #0
 800697c:	d116      	bne.n	80069ac <USB_EPStartXfer+0xb26>
 800697e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e30a      	b.n	8006fc2 <USB_EPStartXfer+0x113c>
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d004      	beq.n	80069cc <USB_EPStartXfer+0xb46>
 80069c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069c6:	3301      	adds	r3, #1
 80069c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	029b      	lsls	r3, r3, #10
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e2f1      	b.n	8006fc2 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80069de:	463b      	mov	r3, r7
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	78db      	ldrb	r3, [r3, #3]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	f040 818f 	bne.w	8006d08 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d175      	bne.n	8006ae0 <USB_EPStartXfer+0xc5a>
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069fc:	1d3b      	adds	r3, r7, #4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	00da      	lsls	r2, r3, #3
 8006a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a1e:	4413      	add	r3, r2
 8006a20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a30:	d91f      	bls.n	8006a72 <USB_EPStartXfer+0xbec>
 8006a32:	463b      	mov	r3, r7
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a3e:	463b      	mov	r3, r7
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <USB_EPStartXfer+0xbd0>
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a50:	3b01      	subs	r3, #1
 8006a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	029b      	lsls	r3, r3, #10
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a6e:	801a      	strh	r2, [r3, #0]
 8006a70:	e05c      	b.n	8006b2c <USB_EPStartXfer+0xca6>
 8006a72:	463b      	mov	r3, r7
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d116      	bne.n	8006aaa <USB_EPStartXfer+0xc24>
 8006a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	e040      	b.n	8006b2c <USB_EPStartXfer+0xca6>
 8006aaa:	463b      	mov	r3, r7
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <USB_EPStartXfer+0xc48>
 8006ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac8:	3301      	adds	r3, #1
 8006aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	029b      	lsls	r3, r3, #10
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	e025      	b.n	8006b2c <USB_EPStartXfer+0xca6>
 8006ae0:	463b      	mov	r3, r7
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d120      	bne.n	8006b2c <USB_EPStartXfer+0xca6>
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b02:	4413      	add	r3, r2
 8006b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b08:	463b      	mov	r3, r7
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	00da      	lsls	r2, r3, #3
 8006b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b14:	4413      	add	r3, r2
 8006b16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b1e:	463b      	mov	r3, r7
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	1d3b      	adds	r3, r7, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b34:	463b      	mov	r3, r7
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d175      	bne.n	8006c2a <USB_EPStartXfer+0xda4>
 8006b3e:	1d3b      	adds	r3, r7, #4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b56:	4413      	add	r3, r2
 8006b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	00da      	lsls	r2, r3, #3
 8006b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b68:	4413      	add	r3, r2
 8006b6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b72:	463b      	mov	r3, r7
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b3e      	cmp	r3, #62	; 0x3e
 8006b7a:	d91f      	bls.n	8006bbc <USB_EPStartXfer+0xd36>
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b88:	463b      	mov	r3, r7
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <USB_EPStartXfer+0xd1a>
 8006b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	029b      	lsls	r3, r3, #10
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	e058      	b.n	8006c6e <USB_EPStartXfer+0xde8>
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d116      	bne.n	8006bf4 <USB_EPStartXfer+0xd6e>
 8006bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	e03c      	b.n	8006c6e <USB_EPStartXfer+0xde8>
 8006bf4:	463b      	mov	r3, r7
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c00:	463b      	mov	r3, r7
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <USB_EPStartXfer+0xd92>
 8006c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c12:	3301      	adds	r3, #1
 8006c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	029b      	lsls	r3, r3, #10
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	e021      	b.n	8006c6e <USB_EPStartXfer+0xde8>
 8006c2a:	463b      	mov	r3, r7
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d11c      	bne.n	8006c6e <USB_EPStartXfer+0xde8>
 8006c34:	1d3b      	adds	r3, r7, #4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c44:	4413      	add	r3, r2
 8006c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	00da      	lsls	r2, r3, #3
 8006c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c56:	4413      	add	r3, r2
 8006c58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c60:	463b      	mov	r3, r7
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c6c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c6e:	463b      	mov	r3, r7
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 81a4 	beq.w	8006fc2 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	463b      	mov	r3, r7
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <USB_EPStartXfer+0xe20>
 8006c9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10d      	bne.n	8006cc2 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ca6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f040 8187 	bne.w	8006fc2 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 8180 	bne.w	8006fc2 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cc2:	1d3b      	adds	r3, r7, #4
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cdc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006ce0:	1d3b      	adds	r3, r7, #4
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	441a      	add	r2, r3
 8006cee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]
 8006d06:	e15c      	b.n	8006fc2 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d08:	463b      	mov	r3, r7
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	78db      	ldrb	r3, [r3, #3]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	f040 8155 	bne.w	8006fbe <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d90e      	bls.n	8006d42 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8006d24:	463b      	mov	r3, r7
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006d2e:	463b      	mov	r3, r7
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d38:	1ad2      	subs	r2, r2, r3
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	619a      	str	r2, [r3, #24]
 8006d40:	e008      	b.n	8006d54 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2200      	movs	r2, #0
 8006d52:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d54:	463b      	mov	r3, r7
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d16f      	bne.n	8006e3e <USB_EPStartXfer+0xfb8>
 8006d5e:	1d3b      	adds	r3, r7, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d66:	1d3b      	adds	r3, r7, #4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d76:	4413      	add	r3, r2
 8006d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d7c:	463b      	mov	r3, r7
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	00da      	lsls	r2, r3, #3
 8006d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d96:	2b3e      	cmp	r3, #62	; 0x3e
 8006d98:	d91d      	bls.n	8006dd6 <USB_EPStartXfer+0xf50>
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <USB_EPStartXfer+0xf34>
 8006db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	029b      	lsls	r3, r3, #10
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dd2:	801a      	strh	r2, [r3, #0]
 8006dd4:	e058      	b.n	8006e88 <USB_EPStartXfer+0x1002>
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d116      	bne.n	8006e0c <USB_EPStartXfer+0xf86>
 8006dde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	e03d      	b.n	8006e88 <USB_EPStartXfer+0x1002>
 8006e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <USB_EPStartXfer+0xfa6>
 8006e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e26:	3301      	adds	r3, #1
 8006e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	029b      	lsls	r3, r3, #10
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	e024      	b.n	8006e88 <USB_EPStartXfer+0x1002>
 8006e3e:	463b      	mov	r3, r7
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d11f      	bne.n	8006e88 <USB_EPStartXfer+0x1002>
 8006e48:	1d3b      	adds	r3, r7, #4
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e50:	1d3b      	adds	r3, r7, #4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e60:	4413      	add	r3, r2
 8006e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e66:	463b      	mov	r3, r7
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00da      	lsls	r2, r3, #3
 8006e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e90:	463b      	mov	r3, r7
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	785b      	ldrb	r3, [r3, #1]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d16f      	bne.n	8006f7a <USB_EPStartXfer+0x10f4>
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ea2:	1d3b      	adds	r3, r7, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006eb8:	463b      	mov	r3, r7
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006eca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ed4:	d91d      	bls.n	8006f12 <USB_EPStartXfer+0x108c>
 8006ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <USB_EPStartXfer+0x1070>
 8006eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	029b      	lsls	r3, r3, #10
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	e057      	b.n	8006fc2 <USB_EPStartXfer+0x113c>
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d116      	bne.n	8006f48 <USB_EPStartXfer+0x10c2>
 8006f1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e03c      	b.n	8006fc2 <USB_EPStartXfer+0x113c>
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <USB_EPStartXfer+0x10e2>
 8006f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f62:	3301      	adds	r3, #1
 8006f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	e023      	b.n	8006fc2 <USB_EPStartXfer+0x113c>
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d11e      	bne.n	8006fc2 <USB_EPStartXfer+0x113c>
 8006f84:	1d3b      	adds	r3, r7, #4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f94:	4413      	add	r3, r2
 8006f96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	00da      	lsls	r2, r3, #3
 8006fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e001      	b.n	8006fc2 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e02e      	b.n	8007020 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fdc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fe0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fe4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fe8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ff0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ff4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006ff8:	1d3b      	adds	r3, r7, #4
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800700a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701a:	b29b      	uxth	r3, r3
 800701c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d020      	beq.n	800707e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007052:	81bb      	strh	r3, [r7, #12]
 8007054:	89bb      	ldrh	r3, [r7, #12]
 8007056:	f083 0310 	eor.w	r3, r3, #16
 800705a:	81bb      	strh	r3, [r7, #12]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	89bb      	ldrh	r3, [r7, #12]
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]
 800707c:	e01f      	b.n	80070be <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	81fb      	strh	r3, [r7, #14]
 8007096:	89fb      	ldrh	r3, [r7, #14]
 8007098:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800709c:	81fb      	strh	r3, [r7, #14]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	441a      	add	r2, r3
 80070a8:	89fb      	ldrh	r3, [r7, #14]
 80070aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	7b1b      	ldrb	r3, [r3, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 809d 	bne.w	800721a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d04c      	beq.n	8007182 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	823b      	strh	r3, [r7, #16]
 80070f6:	8a3b      	ldrh	r3, [r7, #16]
 80070f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01b      	beq.n	8007138 <USB_EPClearStall+0x6c>
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007116:	81fb      	strh	r3, [r7, #14]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	441a      	add	r2, r3
 8007122:	89fb      	ldrh	r3, [r7, #14]
 8007124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800712c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007130:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	78db      	ldrb	r3, [r3, #3]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d06c      	beq.n	800721a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007156:	81bb      	strh	r3, [r7, #12]
 8007158:	89bb      	ldrh	r3, [r7, #12]
 800715a:	f083 0320 	eor.w	r3, r3, #32
 800715e:	81bb      	strh	r3, [r7, #12]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	441a      	add	r2, r3
 800716a:	89bb      	ldrh	r3, [r7, #12]
 800716c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717c:	b29b      	uxth	r3, r3
 800717e:	8013      	strh	r3, [r2, #0]
 8007180:	e04b      	b.n	800721a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	82fb      	strh	r3, [r7, #22]
 8007190:	8afb      	ldrh	r3, [r7, #22]
 8007192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01b      	beq.n	80071d2 <USB_EPClearStall+0x106>
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b0:	82bb      	strh	r3, [r7, #20]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	441a      	add	r2, r3
 80071bc:	8abb      	ldrh	r3, [r7, #20]
 80071be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e8:	827b      	strh	r3, [r7, #18]
 80071ea:	8a7b      	ldrh	r3, [r7, #18]
 80071ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071f0:	827b      	strh	r3, [r7, #18]
 80071f2:	8a7b      	ldrh	r3, [r7, #18]
 80071f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071f8:	827b      	strh	r3, [r7, #18]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	441a      	add	r2, r3
 8007204:	8a7b      	ldrh	r3, [r7, #18]
 8007206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007216:	b29b      	uxth	r3, r3
 8007218:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d103      	bne.n	8007242 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2280      	movs	r2, #128	; 0x80
 800723e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800725e:	b29b      	uxth	r3, r3
 8007260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007268:	b29a      	uxth	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800728c:	b29b      	uxth	r3, r3
 800728e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800729e:	b480      	push	{r7}
 80072a0:	b08d      	sub	sp, #52	; 0x34
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	4611      	mov	r1, r2
 80072aa:	461a      	mov	r2, r3
 80072ac:	460b      	mov	r3, r1
 80072ae:	80fb      	strh	r3, [r7, #6]
 80072b0:	4613      	mov	r3, r2
 80072b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072b4:	88bb      	ldrh	r3, [r7, #4]
 80072b6:	3301      	adds	r3, #1
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d4:	e01b      	b.n	800730e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	3301      	adds	r3, #1
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	3302      	adds	r3, #2
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	3301      	adds	r3, #1
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	3b01      	subs	r3, #1
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e0      	bne.n	80072d6 <USB_WritePMA+0x38>
  }
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	3734      	adds	r7, #52	; 0x34
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007322:	b480      	push	{r7}
 8007324:	b08b      	sub	sp, #44	; 0x2c
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	4611      	mov	r1, r2
 800732e:	461a      	mov	r2, r3
 8007330:	460b      	mov	r3, r1
 8007332:	80fb      	strh	r3, [r7, #6]
 8007334:	4613      	mov	r3, r2
 8007336:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007338:	88bb      	ldrh	r3, [r7, #4]
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	b29b      	uxth	r3, r3
 800733e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007348:	88fa      	ldrh	r2, [r7, #6]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007352:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
 8007358:	e018      	b.n	800738c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	3302      	adds	r3, #2
 8007366:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	b2da      	uxtb	r2, r3
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	3301      	adds	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	0a1b      	lsrs	r3, r3, #8
 800737a:	b2da      	uxtb	r2, r3
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	3301      	adds	r3, #1
 8007384:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	3b01      	subs	r3, #1
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e3      	bne.n	800735a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007392:	88bb      	ldrh	r3, [r7, #4]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d007      	beq.n	80073ae <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	701a      	strb	r2, [r3, #0]
  }
}
 80073ae:	bf00      	nop
 80073b0:	372c      	adds	r7, #44	; 0x2c
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80073c6:	2010      	movs	r0, #16
 80073c8:	f001 fec8 	bl	800915c <USBD_static_malloc>
 80073cc:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80073dc:	2302      	movs	r3, #2
 80073de:	e01b      	b.n	8007418 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7c1b      	ldrb	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2207      	movs	r2, #7
 80073f4:	875a      	strh	r2, [r3, #58]	; 0x3a
 80073f6:	e002      	b.n	80073fe <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	220a      	movs	r2, #10
 80073fc:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80073fe:	2304      	movs	r3, #4
 8007400:	2203      	movs	r2, #3
 8007402:	2181      	movs	r1, #129	; 0x81
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 fd62 	bl	8008ece <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800742c:	2181      	movs	r1, #129	; 0x81
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 fd73 	bl	8008f1a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007446:	2b00      	cmp	r3, #0
 8007448:	d009      	beq.n	800745e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007450:	4618      	mov	r0, r3
 8007452:	f001 fe91 	bl	8009178 <USBD_static_free>
    pdev->pClassData = NULL;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007478:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007488:	2303      	movs	r3, #3
 800748a:	e0e8      	b.n	800765e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007494:	2b00      	cmp	r3, #0
 8007496:	d046      	beq.n	8007526 <USBD_HID_Setup+0xbe>
 8007498:	2b20      	cmp	r3, #32
 800749a:	f040 80d8 	bne.w	800764e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	3b02      	subs	r3, #2
 80074a4:	2b09      	cmp	r3, #9
 80074a6:	d836      	bhi.n	8007516 <USBD_HID_Setup+0xae>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <USBD_HID_Setup+0x48>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	08007507 	.word	0x08007507
 80074b4:	080074e7 	.word	0x080074e7
 80074b8:	08007517 	.word	0x08007517
 80074bc:	08007517 	.word	0x08007517
 80074c0:	08007517 	.word	0x08007517
 80074c4:	08007517 	.word	0x08007517
 80074c8:	08007517 	.word	0x08007517
 80074cc:	08007517 	.word	0x08007517
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074d9 	.word	0x080074d9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	885b      	ldrh	r3, [r3, #2]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	601a      	str	r2, [r3, #0]
          break;
 80074e4:	e01e      	b.n	8007524 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 f9b0 	bl	8008852 <USBD_CtlSendData>
          break;
 80074f2:	e017      	b.n	8007524 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	885b      	ldrh	r3, [r3, #2]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	605a      	str	r2, [r3, #4]
          break;
 8007504:	e00e      	b.n	8007524 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3304      	adds	r3, #4
 800750a:	2201      	movs	r2, #1
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f99f 	bl	8008852 <USBD_CtlSendData>
          break;
 8007514:	e006      	b.n	8007524 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 f929 	bl	8008770 <USBD_CtlError>
          ret = USBD_FAIL;
 800751e:	2303      	movs	r3, #3
 8007520:	75fb      	strb	r3, [r7, #23]
          break;
 8007522:	bf00      	nop
      }
      break;
 8007524:	e09a      	b.n	800765c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	785b      	ldrb	r3, [r3, #1]
 800752a:	2b0b      	cmp	r3, #11
 800752c:	f200 8086 	bhi.w	800763c <USBD_HID_Setup+0x1d4>
 8007530:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <USBD_HID_Setup+0xd0>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	08007569 	.word	0x08007569
 800753c:	0800764b 	.word	0x0800764b
 8007540:	0800763d 	.word	0x0800763d
 8007544:	0800763d 	.word	0x0800763d
 8007548:	0800763d 	.word	0x0800763d
 800754c:	0800763d 	.word	0x0800763d
 8007550:	08007593 	.word	0x08007593
 8007554:	0800763d 	.word	0x0800763d
 8007558:	0800763d 	.word	0x0800763d
 800755c:	0800763d 	.word	0x0800763d
 8007560:	080075eb 	.word	0x080075eb
 8007564:	08007615 	.word	0x08007615
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b03      	cmp	r3, #3
 8007572:	d107      	bne.n	8007584 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007574:	f107 030a 	add.w	r3, r7, #10
 8007578:	2202      	movs	r2, #2
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 f968 	bl	8008852 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007582:	e063      	b.n	800764c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 f8f2 	bl	8008770 <USBD_CtlError>
            ret = USBD_FAIL;
 800758c:	2303      	movs	r3, #3
 800758e:	75fb      	strb	r3, [r7, #23]
          break;
 8007590:	e05c      	b.n	800764c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	885b      	ldrh	r3, [r3, #2]
 8007596:	0a1b      	lsrs	r3, r3, #8
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b22      	cmp	r3, #34	; 0x22
 800759c:	d108      	bne.n	80075b0 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	88db      	ldrh	r3, [r3, #6]
 80075a2:	2b4a      	cmp	r3, #74	; 0x4a
 80075a4:	bf28      	it	cs
 80075a6:	234a      	movcs	r3, #74	; 0x4a
 80075a8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80075aa:	4b2f      	ldr	r3, [pc, #188]	; (8007668 <USBD_HID_Setup+0x200>)
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	e015      	b.n	80075dc <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	885b      	ldrh	r3, [r3, #2]
 80075b4:	0a1b      	lsrs	r3, r3, #8
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b21      	cmp	r3, #33	; 0x21
 80075ba:	d108      	bne.n	80075ce <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80075bc:	4b2b      	ldr	r3, [pc, #172]	; (800766c <USBD_HID_Setup+0x204>)
 80075be:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	88db      	ldrh	r3, [r3, #6]
 80075c4:	2b09      	cmp	r3, #9
 80075c6:	bf28      	it	cs
 80075c8:	2309      	movcs	r3, #9
 80075ca:	82bb      	strh	r3, [r7, #20]
 80075cc:	e006      	b.n	80075dc <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f8cd 	bl	8008770 <USBD_CtlError>
            ret = USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	75fb      	strb	r3, [r7, #23]
            break;
 80075da:	e037      	b.n	800764c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80075dc:	8abb      	ldrh	r3, [r7, #20]
 80075de:	461a      	mov	r2, r3
 80075e0:	6939      	ldr	r1, [r7, #16]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 f935 	bl	8008852 <USBD_CtlSendData>
          break;
 80075e8:	e030      	b.n	800764c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d107      	bne.n	8007606 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3308      	adds	r3, #8
 80075fa:	2201      	movs	r2, #1
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 f927 	bl	8008852 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007604:	e022      	b.n	800764c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f8b1 	bl	8008770 <USBD_CtlError>
            ret = USBD_FAIL;
 800760e:	2303      	movs	r3, #3
 8007610:	75fb      	strb	r3, [r7, #23]
          break;
 8007612:	e01b      	b.n	800764c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b03      	cmp	r3, #3
 800761e:	d106      	bne.n	800762e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	885b      	ldrh	r3, [r3, #2]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800762c:	e00e      	b.n	800764c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f89d 	bl	8008770 <USBD_CtlError>
            ret = USBD_FAIL;
 8007636:	2303      	movs	r3, #3
 8007638:	75fb      	strb	r3, [r7, #23]
          break;
 800763a:	e007      	b.n	800764c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f896 	bl	8008770 <USBD_CtlError>
          ret = USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	75fb      	strb	r3, [r7, #23]
          break;
 8007648:	e000      	b.n	800764c <USBD_HID_Setup+0x1e4>
          break;
 800764a:	bf00      	nop
      }
      break;
 800764c:	e006      	b.n	800765c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f88d 	bl	8008770 <USBD_CtlError>
      ret = USBD_FAIL;
 8007656:	2303      	movs	r3, #3
 8007658:	75fb      	strb	r3, [r7, #23]
      break;
 800765a:	bf00      	nop
  }

  return (uint8_t)ret;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	200000cc 	.word	0x200000cc
 800766c:	200000b4 	.word	0x200000b4

08007670 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2222      	movs	r2, #34	; 0x22
 800767c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800767e:	4b03      	ldr	r3, [pc, #12]	; (800768c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	20000048 	.word	0x20000048

08007690 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2222      	movs	r2, #34	; 0x22
 800769c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	2000006c 	.word	0x2000006c

080076b0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2222      	movs	r2, #34	; 0x22
 80076bc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20000090 	.word	0x20000090

080076d0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076e2:	2200      	movs	r2, #0
 80076e4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	220a      	movs	r2, #10
 8007700:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007702:	4b03      	ldr	r3, [pc, #12]	; (8007710 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	200000c0 	.word	0x200000c0

08007714 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007728:	2303      	movs	r3, #3
 800772a:	e01f      	b.n	800776c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	79fa      	ldrb	r2, [r7, #7]
 800775e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f001 fb49 	bl	8008df8 <USBD_LL_Init>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]

  return ret;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007788:	2303      	movs	r3, #3
 800778a:	e016      	b.n	80077ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	f107 020e 	add.w	r2, r7, #14
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	4602      	mov	r2, r0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fb64 	bl	8008e98 <USBD_LL_Start>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077fc:	2303      	movs	r3, #3
 80077fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	78fa      	ldrb	r2, [r7, #3]
 8007814:	4611      	mov	r1, r2
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	4611      	mov	r1, r2
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
  }

  return USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 ff46 	bl	80086fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	2b02      	cmp	r3, #2
 8007892:	d01a      	beq.n	80078ca <USBD_LL_SetupStage+0x72>
 8007894:	2b02      	cmp	r3, #2
 8007896:	d822      	bhi.n	80078de <USBD_LL_SetupStage+0x86>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <USBD_LL_SetupStage+0x4a>
 800789c:	2b01      	cmp	r3, #1
 800789e:	d00a      	beq.n	80078b6 <USBD_LL_SetupStage+0x5e>
 80078a0:	e01d      	b.n	80078de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f9ee 	bl	8007c8c <USBD_StdDevReq>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]
      break;
 80078b4:	e020      	b.n	80078f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa52 	bl	8007d68 <USBD_StdItfReq>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	e016      	b.n	80078f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa91 	bl	8007dfa <USBD_StdEPReq>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e00c      	b.n	80078f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 fb33 	bl	8008f58 <USBD_LL_StallEP>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
      break;
 80078f6:	bf00      	nop
  }

  return ret;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	460b      	mov	r3, r1
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d138      	bne.n	8007988 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800791c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007924:	2b03      	cmp	r3, #3
 8007926:	d14a      	bne.n	80079be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	429a      	cmp	r2, r3
 8007932:	d913      	bls.n	800795c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	4293      	cmp	r3, r2
 800794c:	bf28      	it	cs
 800794e:	4613      	movcs	r3, r2
 8007950:	461a      	mov	r2, r3
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 ffa8 	bl	80088aa <USBD_CtlContinueRx>
 800795a:	e030      	b.n	80079be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b03      	cmp	r3, #3
 8007966:	d10b      	bne.n	8007980 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 ffa3 	bl	80088cc <USBD_CtlSendStatus>
 8007986:	e01a      	b.n	80079be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b03      	cmp	r3, #3
 8007992:	d114      	bne.n	80079be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00e      	beq.n	80079be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	7afa      	ldrb	r2, [r7, #11]
 80079aa:	4611      	mov	r1, r2
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	4798      	blx	r3
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	e000      	b.n	80079c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80079d6:	7afb      	ldrb	r3, [r7, #11]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d16b      	bne.n	8007ab4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3314      	adds	r3, #20
 80079e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d156      	bne.n	8007a9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d914      	bls.n	8007a22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	1ad2      	subs	r2, r2, r3
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 ff3a 	bl	8008888 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a14:	2300      	movs	r3, #0
 8007a16:	2200      	movs	r2, #0
 8007a18:	2100      	movs	r1, #0
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f001 fb47 	bl	80090ae <USBD_LL_PrepareReceive>
 8007a20:	e03b      	b.n	8007a9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d11c      	bne.n	8007a68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d316      	bcc.n	8007a68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d20f      	bcs.n	8007a68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 ff1b 	bl	8008888 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f001 fb24 	bl	80090ae <USBD_LL_PrepareReceive>
 8007a66:	e018      	b.n	8007a9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d10b      	bne.n	8007a8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a8c:	2180      	movs	r1, #128	; 0x80
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f001 fa62 	bl	8008f58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 ff2c 	bl	80088f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d122      	bne.n	8007aea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7ff fe98 	bl	80077da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ab2:	e01a      	b.n	8007aea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d114      	bne.n	8007aea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	7afa      	ldrb	r2, [r7, #11]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	4798      	blx	r3
 8007adc:	4603      	mov	r3, r0
 8007ade:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	e000      	b.n	8007aec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e02f      	b.n	8007b88 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00f      	beq.n	8007b52 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6852      	ldr	r2, [r2, #4]
 8007b4a:	b2d2      	uxtb	r2, r2
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b52:	2340      	movs	r3, #64	; 0x40
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 f9b8 	bl	8008ece <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2240      	movs	r2, #64	; 0x40
 8007b6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b6e:	2340      	movs	r3, #64	; 0x40
 8007b70:	2200      	movs	r2, #0
 8007b72:	2180      	movs	r1, #128	; 0x80
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f9aa 	bl	8008ece <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2240      	movs	r2, #64	; 0x40
 8007b84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	78fa      	ldrb	r2, [r7, #3]
 8007ba0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d106      	bne.n	8007bfe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e012      	b.n	8007c48 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d10b      	bne.n	8007c46 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	3301      	adds	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c6e:	8a3b      	ldrh	r3, [r7, #16]
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	b21a      	sxth	r2, r3
 8007c74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c7e:	89fb      	ldrh	r3, [r7, #14]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d005      	beq.n	8007cb2 <USBD_StdDevReq+0x26>
 8007ca6:	2b40      	cmp	r3, #64	; 0x40
 8007ca8:	d853      	bhi.n	8007d52 <USBD_StdDevReq+0xc6>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00b      	beq.n	8007cc6 <USBD_StdDevReq+0x3a>
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d14f      	bne.n	8007d52 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc4:	e04a      	b.n	8007d5c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	d83b      	bhi.n	8007d46 <USBD_StdDevReq+0xba>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <USBD_StdDevReq+0x48>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007d29 	.word	0x08007d29
 8007cd8:	08007d3d 	.word	0x08007d3d
 8007cdc:	08007d47 	.word	0x08007d47
 8007ce0:	08007d33 	.word	0x08007d33
 8007ce4:	08007d47 	.word	0x08007d47
 8007ce8:	08007d07 	.word	0x08007d07
 8007cec:	08007cfd 	.word	0x08007cfd
 8007cf0:	08007d47 	.word	0x08007d47
 8007cf4:	08007d1f 	.word	0x08007d1f
 8007cf8:	08007d11 	.word	0x08007d11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f9de 	bl	80080c0 <USBD_GetDescriptor>
          break;
 8007d04:	e024      	b.n	8007d50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fb6d 	bl	80083e8 <USBD_SetAddress>
          break;
 8007d0e:	e01f      	b.n	8007d50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fbac 	bl	8008470 <USBD_SetConfig>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
          break;
 8007d1c:	e018      	b.n	8007d50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fc4b 	bl	80085bc <USBD_GetConfig>
          break;
 8007d26:	e013      	b.n	8007d50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fc7c 	bl	8008628 <USBD_GetStatus>
          break;
 8007d30:	e00e      	b.n	8007d50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fcab 	bl	8008690 <USBD_SetFeature>
          break;
 8007d3a:	e009      	b.n	8007d50 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fcba 	bl	80086b8 <USBD_ClrFeature>
          break;
 8007d44:	e004      	b.n	8007d50 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fd11 	bl	8008770 <USBD_CtlError>
          break;
 8007d4e:	bf00      	nop
      }
      break;
 8007d50:	e004      	b.n	8007d5c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fd0b 	bl	8008770 <USBD_CtlError>
      break;
 8007d5a:	bf00      	nop
  }

  return ret;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop

08007d68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d7e:	2b40      	cmp	r3, #64	; 0x40
 8007d80:	d005      	beq.n	8007d8e <USBD_StdItfReq+0x26>
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d82f      	bhi.n	8007de6 <USBD_StdItfReq+0x7e>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <USBD_StdItfReq+0x26>
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d12b      	bne.n	8007de6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d81d      	bhi.n	8007dd8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	889b      	ldrh	r3, [r3, #4]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d813      	bhi.n	8007dce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	88db      	ldrh	r3, [r3, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d110      	bne.n	8007de2 <USBD_StdItfReq+0x7a>
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10d      	bne.n	8007de2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fd80 	bl	80088cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dcc:	e009      	b.n	8007de2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fccd 	bl	8008770 <USBD_CtlError>
          break;
 8007dd6:	e004      	b.n	8007de2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fcc8 	bl	8008770 <USBD_CtlError>
          break;
 8007de0:	e000      	b.n	8007de4 <USBD_StdItfReq+0x7c>
          break;
 8007de2:	bf00      	nop
      }
      break;
 8007de4:	e004      	b.n	8007df0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fcc1 	bl	8008770 <USBD_CtlError>
      break;
 8007dee:	bf00      	nop
  }

  return ret;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	889b      	ldrh	r3, [r3, #4]
 8007e0c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d007      	beq.n	8007e2a <USBD_StdEPReq+0x30>
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	f200 8145 	bhi.w	80080aa <USBD_StdEPReq+0x2b0>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00c      	beq.n	8007e3e <USBD_StdEPReq+0x44>
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	f040 8140 	bne.w	80080aa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	e13a      	b.n	80080b4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d007      	beq.n	8007e56 <USBD_StdEPReq+0x5c>
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	f300 8129 	bgt.w	800809e <USBD_StdEPReq+0x2a4>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d07f      	beq.n	8007f50 <USBD_StdEPReq+0x156>
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d03c      	beq.n	8007ece <USBD_StdEPReq+0xd4>
 8007e54:	e123      	b.n	800809e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d002      	beq.n	8007e68 <USBD_StdEPReq+0x6e>
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d016      	beq.n	8007e94 <USBD_StdEPReq+0x9a>
 8007e66:	e02c      	b.n	8007ec2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00d      	beq.n	8007e8a <USBD_StdEPReq+0x90>
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b80      	cmp	r3, #128	; 0x80
 8007e72:	d00a      	beq.n	8007e8a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 f86d 	bl	8008f58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e7e:	2180      	movs	r1, #128	; 0x80
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 f869 	bl	8008f58 <USBD_LL_StallEP>
 8007e86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e88:	e020      	b.n	8007ecc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc6f 	bl	8008770 <USBD_CtlError>
              break;
 8007e92:	e01b      	b.n	8007ecc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	885b      	ldrh	r3, [r3, #2]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10e      	bne.n	8007eba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <USBD_StdEPReq+0xc0>
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b80      	cmp	r3, #128	; 0x80
 8007ea6:	d008      	beq.n	8007eba <USBD_StdEPReq+0xc0>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	88db      	ldrh	r3, [r3, #6]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 f84f 	bl	8008f58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fd06 	bl	80088cc <USBD_CtlSendStatus>

              break;
 8007ec0:	e004      	b.n	8007ecc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fc53 	bl	8008770 <USBD_CtlError>
              break;
 8007eca:	bf00      	nop
          }
          break;
 8007ecc:	e0ec      	b.n	80080a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d002      	beq.n	8007ee0 <USBD_StdEPReq+0xe6>
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d016      	beq.n	8007f0c <USBD_StdEPReq+0x112>
 8007ede:	e030      	b.n	8007f42 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00d      	beq.n	8007f02 <USBD_StdEPReq+0x108>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d00a      	beq.n	8007f02 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 f831 	bl	8008f58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ef6:	2180      	movs	r1, #128	; 0x80
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f82d 	bl	8008f58 <USBD_LL_StallEP>
 8007efe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f00:	e025      	b.n	8007f4e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc33 	bl	8008770 <USBD_CtlError>
              break;
 8007f0a:	e020      	b.n	8007f4e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	885b      	ldrh	r3, [r3, #2]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d11b      	bne.n	8007f4c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d004      	beq.n	8007f28 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 f837 	bl	8008f96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fccf 	bl	80088cc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	4798      	blx	r3
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007f40:	e004      	b.n	8007f4c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fc13 	bl	8008770 <USBD_CtlError>
              break;
 8007f4a:	e000      	b.n	8007f4e <USBD_StdEPReq+0x154>
              break;
 8007f4c:	bf00      	nop
          }
          break;
 8007f4e:	e0ab      	b.n	80080a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d002      	beq.n	8007f62 <USBD_StdEPReq+0x168>
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d032      	beq.n	8007fc6 <USBD_StdEPReq+0x1cc>
 8007f60:	e097      	b.n	8008092 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <USBD_StdEPReq+0x17e>
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	2b80      	cmp	r3, #128	; 0x80
 8007f6c:	d004      	beq.n	8007f78 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fbfd 	bl	8008770 <USBD_CtlError>
                break;
 8007f76:	e091      	b.n	800809c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da0b      	bge.n	8007f98 <USBD_StdEPReq+0x19e>
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	3310      	adds	r3, #16
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	3304      	adds	r3, #4
 8007f96:	e00b      	b.n	8007fb0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	3304      	adds	r3, #4
 8007fb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc47 	bl	8008852 <USBD_CtlSendData>
              break;
 8007fc4:	e06a      	b.n	800809c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	da11      	bge.n	8007ff2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	f003 020f 	and.w	r2, r3, #15
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	3324      	adds	r3, #36	; 0x24
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d117      	bne.n	8008018 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fbc0 	bl	8008770 <USBD_CtlError>
                  break;
 8007ff0:	e054      	b.n	800809c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	f003 020f 	and.w	r2, r3, #15
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d104      	bne.n	8008018 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fbad 	bl	8008770 <USBD_CtlError>
                  break;
 8008016:	e041      	b.n	800809c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800801c:	2b00      	cmp	r3, #0
 800801e:	da0b      	bge.n	8008038 <USBD_StdEPReq+0x23e>
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	3310      	adds	r3, #16
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	4413      	add	r3, r2
 8008034:	3304      	adds	r3, #4
 8008036:	e00b      	b.n	8008050 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	4413      	add	r3, r2
 800804e:	3304      	adds	r3, #4
 8008050:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <USBD_StdEPReq+0x264>
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b80      	cmp	r3, #128	; 0x80
 800805c:	d103      	bne.n	8008066 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e00e      	b.n	8008084 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 ffb2 	bl	8008fd4 <USBD_LL_IsStallEP>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2201      	movs	r2, #1
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	e002      	b.n	8008084 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2202      	movs	r2, #2
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fbe1 	bl	8008852 <USBD_CtlSendData>
              break;
 8008090:	e004      	b.n	800809c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fb6b 	bl	8008770 <USBD_CtlError>
              break;
 800809a:	bf00      	nop
          }
          break;
 800809c:	e004      	b.n	80080a8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fb65 	bl	8008770 <USBD_CtlError>
          break;
 80080a6:	bf00      	nop
      }
      break;
 80080a8:	e004      	b.n	80080b4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fb5f 	bl	8008770 <USBD_CtlError>
      break;
 80080b2:	bf00      	nop
  }

  return ret;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	885b      	ldrh	r3, [r3, #2]
 80080da:	0a1b      	lsrs	r3, r3, #8
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	2b0e      	cmp	r3, #14
 80080e2:	f200 8152 	bhi.w	800838a <USBD_GetDescriptor+0x2ca>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <USBD_GetDescriptor+0x2c>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	0800815d 	.word	0x0800815d
 80080f0:	08008175 	.word	0x08008175
 80080f4:	080081b5 	.word	0x080081b5
 80080f8:	0800838b 	.word	0x0800838b
 80080fc:	0800838b 	.word	0x0800838b
 8008100:	0800832b 	.word	0x0800832b
 8008104:	08008357 	.word	0x08008357
 8008108:	0800838b 	.word	0x0800838b
 800810c:	0800838b 	.word	0x0800838b
 8008110:	0800838b 	.word	0x0800838b
 8008114:	0800838b 	.word	0x0800838b
 8008118:	0800838b 	.word	0x0800838b
 800811c:	0800838b 	.word	0x0800838b
 8008120:	0800838b 	.word	0x0800838b
 8008124:	08008129 	.word	0x08008129
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800814a:	e126      	b.n	800839a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fb0e 	bl	8008770 <USBD_CtlError>
        err++;
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	3301      	adds	r3, #1
 8008158:	72fb      	strb	r3, [r7, #11]
      break;
 800815a:	e11e      	b.n	800839a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7c12      	ldrb	r2, [r2, #16]
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	60f8      	str	r0, [r7, #12]
      break;
 8008172:	e112      	b.n	800839a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7c1b      	ldrb	r3, [r3, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10d      	bne.n	8008198 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008184:	f107 0208 	add.w	r2, r7, #8
 8008188:	4610      	mov	r0, r2
 800818a:	4798      	blx	r3
 800818c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3301      	adds	r3, #1
 8008192:	2202      	movs	r2, #2
 8008194:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008196:	e100      	b.n	800839a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	f107 0208 	add.w	r2, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	2202      	movs	r2, #2
 80081b0:	701a      	strb	r2, [r3, #0]
      break;
 80081b2:	e0f2      	b.n	800839a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b05      	cmp	r3, #5
 80081bc:	f200 80ac 	bhi.w	8008318 <USBD_GetDescriptor+0x258>
 80081c0:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <USBD_GetDescriptor+0x108>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	080081e1 	.word	0x080081e1
 80081cc:	08008215 	.word	0x08008215
 80081d0:	08008249 	.word	0x08008249
 80081d4:	0800827d 	.word	0x0800827d
 80081d8:	080082b1 	.word	0x080082b1
 80081dc:	080082e5 	.word	0x080082e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7c12      	ldrb	r2, [r2, #16]
 80081f8:	f107 0108 	add.w	r1, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008202:	e091      	b.n	8008328 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fab2 	bl	8008770 <USBD_CtlError>
            err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
          break;
 8008212:	e089      	b.n	8008328 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	f107 0108 	add.w	r1, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008236:	e077      	b.n	8008328 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa98 	bl	8008770 <USBD_CtlError>
            err++;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	3301      	adds	r3, #1
 8008244:	72fb      	strb	r3, [r7, #11]
          break;
 8008246:	e06f      	b.n	8008328 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	7c12      	ldrb	r2, [r2, #16]
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
 8008268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826a:	e05d      	b.n	8008328 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa7e 	bl	8008770 <USBD_CtlError>
            err++;
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	3301      	adds	r3, #1
 8008278:	72fb      	strb	r3, [r7, #11]
          break;
 800827a:	e055      	b.n	8008328 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	7c12      	ldrb	r2, [r2, #16]
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800829e:	e043      	b.n	8008328 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa64 	bl	8008770 <USBD_CtlError>
            err++;
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	3301      	adds	r3, #1
 80082ac:	72fb      	strb	r3, [r7, #11]
          break;
 80082ae:	e03b      	b.n	8008328 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00b      	beq.n	80082d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7c12      	ldrb	r2, [r2, #16]
 80082c8:	f107 0108 	add.w	r1, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d2:	e029      	b.n	8008328 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa4a 	bl	8008770 <USBD_CtlError>
            err++;
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	3301      	adds	r3, #1
 80082e0:	72fb      	strb	r3, [r7, #11]
          break;
 80082e2:	e021      	b.n	8008328 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	7c12      	ldrb	r2, [r2, #16]
 80082fc:	f107 0108 	add.w	r1, r7, #8
 8008300:	4610      	mov	r0, r2
 8008302:	4798      	blx	r3
 8008304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008306:	e00f      	b.n	8008328 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa30 	bl	8008770 <USBD_CtlError>
            err++;
 8008310:	7afb      	ldrb	r3, [r7, #11]
 8008312:	3301      	adds	r3, #1
 8008314:	72fb      	strb	r3, [r7, #11]
          break;
 8008316:	e007      	b.n	8008328 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa28 	bl	8008770 <USBD_CtlError>
          err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008326:	bf00      	nop
      }
      break;
 8008328:	e037      	b.n	800839a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7c1b      	ldrb	r3, [r3, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d109      	bne.n	8008346 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833a:	f107 0208 	add.w	r2, r7, #8
 800833e:	4610      	mov	r0, r2
 8008340:	4798      	blx	r3
 8008342:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008344:	e029      	b.n	800839a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fa11 	bl	8008770 <USBD_CtlError>
        err++;
 800834e:	7afb      	ldrb	r3, [r7, #11]
 8008350:	3301      	adds	r3, #1
 8008352:	72fb      	strb	r3, [r7, #11]
      break;
 8008354:	e021      	b.n	800839a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	7c1b      	ldrb	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10d      	bne.n	800837a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	f107 0208 	add.w	r2, r7, #8
 800836a:	4610      	mov	r0, r2
 800836c:	4798      	blx	r3
 800836e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3301      	adds	r3, #1
 8008374:	2207      	movs	r2, #7
 8008376:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008378:	e00f      	b.n	800839a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f9f7 	bl	8008770 <USBD_CtlError>
        err++;
 8008382:	7afb      	ldrb	r3, [r7, #11]
 8008384:	3301      	adds	r3, #1
 8008386:	72fb      	strb	r3, [r7, #11]
      break;
 8008388:	e007      	b.n	800839a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f9ef 	bl	8008770 <USBD_CtlError>
      err++;
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	3301      	adds	r3, #1
 8008396:	72fb      	strb	r3, [r7, #11]
      break;
 8008398:	bf00      	nop
  }

  if (err != 0U)
 800839a:	7afb      	ldrb	r3, [r7, #11]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d11e      	bne.n	80083de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	88db      	ldrh	r3, [r3, #6]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d016      	beq.n	80083d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80083a8:	893b      	ldrh	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00e      	beq.n	80083cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	88da      	ldrh	r2, [r3, #6]
 80083b2:	893b      	ldrh	r3, [r7, #8]
 80083b4:	4293      	cmp	r3, r2
 80083b6:	bf28      	it	cs
 80083b8:	4613      	movcs	r3, r2
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083be:	893b      	ldrh	r3, [r7, #8]
 80083c0:	461a      	mov	r2, r3
 80083c2:	68f9      	ldr	r1, [r7, #12]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa44 	bl	8008852 <USBD_CtlSendData>
 80083ca:	e009      	b.n	80083e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f9ce 	bl	8008770 <USBD_CtlError>
 80083d4:	e004      	b.n	80083e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa78 	bl	80088cc <USBD_CtlSendStatus>
 80083dc:	e000      	b.n	80083e0 <USBD_GetDescriptor+0x320>
    return;
 80083de:	bf00      	nop
  }
}
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop

080083e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	889b      	ldrh	r3, [r3, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d131      	bne.n	800845e <USBD_SetAddress+0x76>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	88db      	ldrh	r3, [r3, #6]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d12d      	bne.n	800845e <USBD_SetAddress+0x76>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	885b      	ldrh	r3, [r3, #2]
 8008406:	2b7f      	cmp	r3, #127	; 0x7f
 8008408:	d829      	bhi.n	800845e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	885b      	ldrh	r3, [r3, #2]
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008414:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b03      	cmp	r3, #3
 8008420:	d104      	bne.n	800842c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f9a3 	bl	8008770 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842a:	e01d      	b.n	8008468 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7bfa      	ldrb	r2, [r7, #15]
 8008430:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fdf8 	bl	800902e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa44 	bl	80088cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d004      	beq.n	8008454 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2202      	movs	r2, #2
 800844e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008452:	e009      	b.n	8008468 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800845c:	e004      	b.n	8008468 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f985 	bl	8008770 <USBD_CtlError>
  }
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	885b      	ldrh	r3, [r3, #2]
 8008482:	b2da      	uxtb	r2, r3
 8008484:	4b4c      	ldr	r3, [pc, #304]	; (80085b8 <USBD_SetConfig+0x148>)
 8008486:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008488:	4b4b      	ldr	r3, [pc, #300]	; (80085b8 <USBD_SetConfig+0x148>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d905      	bls.n	800849c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f96c 	bl	8008770 <USBD_CtlError>
    return USBD_FAIL;
 8008498:	2303      	movs	r3, #3
 800849a:	e088      	b.n	80085ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d002      	beq.n	80084ae <USBD_SetConfig+0x3e>
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d025      	beq.n	80084f8 <USBD_SetConfig+0x88>
 80084ac:	e071      	b.n	8008592 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084ae:	4b42      	ldr	r3, [pc, #264]	; (80085b8 <USBD_SetConfig+0x148>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01c      	beq.n	80084f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80084b6:	4b40      	ldr	r3, [pc, #256]	; (80085b8 <USBD_SetConfig+0x148>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084c0:	4b3d      	ldr	r3, [pc, #244]	; (80085b8 <USBD_SetConfig+0x148>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff f992 	bl	80077f0 <USBD_SetClassConfig>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d004      	beq.n	80084e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f949 	bl	8008770 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084de:	e065      	b.n	80085ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9f3 	bl	80088cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2203      	movs	r2, #3
 80084ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ee:	e05d      	b.n	80085ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9eb 	bl	80088cc <USBD_CtlSendStatus>
      break;
 80084f6:	e059      	b.n	80085ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084f8:	4b2f      	ldr	r3, [pc, #188]	; (80085b8 <USBD_SetConfig+0x148>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d112      	bne.n	8008526 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008508:	4b2b      	ldr	r3, [pc, #172]	; (80085b8 <USBD_SetConfig+0x148>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008512:	4b29      	ldr	r3, [pc, #164]	; (80085b8 <USBD_SetConfig+0x148>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff f985 	bl	8007828 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f9d4 	bl	80088cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008524:	e042      	b.n	80085ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008526:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <USBD_SetConfig+0x148>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d02a      	beq.n	800858a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff f973 	bl	8007828 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008542:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <USBD_SetConfig+0x148>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800854c:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <USBD_SetConfig+0x148>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff f94c 	bl	80077f0 <USBD_SetClassConfig>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00f      	beq.n	8008582 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f903 	bl	8008770 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7ff f958 	bl	8007828 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008580:	e014      	b.n	80085ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f9a2 	bl	80088cc <USBD_CtlSendStatus>
      break;
 8008588:	e010      	b.n	80085ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f99e 	bl	80088cc <USBD_CtlSendStatus>
      break;
 8008590:	e00c      	b.n	80085ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f8eb 	bl	8008770 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <USBD_SetConfig+0x148>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff f941 	bl	8007828 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	73fb      	strb	r3, [r7, #15]
      break;
 80085aa:	bf00      	nop
  }

  return ret;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000188 	.word	0x20000188

080085bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	88db      	ldrh	r3, [r3, #6]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d004      	beq.n	80085d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f8cd 	bl	8008770 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085d6:	e023      	b.n	8008620 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	dc02      	bgt.n	80085ea <USBD_GetConfig+0x2e>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dc03      	bgt.n	80085f0 <USBD_GetConfig+0x34>
 80085e8:	e015      	b.n	8008616 <USBD_GetConfig+0x5a>
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d00b      	beq.n	8008606 <USBD_GetConfig+0x4a>
 80085ee:	e012      	b.n	8008616 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3308      	adds	r3, #8
 80085fa:	2201      	movs	r2, #1
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f927 	bl	8008852 <USBD_CtlSendData>
        break;
 8008604:	e00c      	b.n	8008620 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	2201      	movs	r2, #1
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f91f 	bl	8008852 <USBD_CtlSendData>
        break;
 8008614:	e004      	b.n	8008620 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f8a9 	bl	8008770 <USBD_CtlError>
        break;
 800861e:	bf00      	nop
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	2b02      	cmp	r3, #2
 800863e:	d81e      	bhi.n	800867e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	88db      	ldrh	r3, [r3, #6]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d004      	beq.n	8008652 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f890 	bl	8008770 <USBD_CtlError>
        break;
 8008650:	e01a      	b.n	8008688 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f043 0202 	orr.w	r2, r3, #2
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	330c      	adds	r3, #12
 8008672:	2202      	movs	r2, #2
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f8eb 	bl	8008852 <USBD_CtlSendData>
      break;
 800867c:	e004      	b.n	8008688 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f875 	bl	8008770 <USBD_CtlError>
      break;
 8008686:	bf00      	nop
  }
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	885b      	ldrh	r3, [r3, #2]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d106      	bne.n	80086b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f90e 	bl	80088cc <USBD_CtlSendStatus>
  }
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d80b      	bhi.n	80086e8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d10c      	bne.n	80086f2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f8f3 	bl	80088cc <USBD_CtlSendStatus>
      }
      break;
 80086e6:	e004      	b.n	80086f2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f840 	bl	8008770 <USBD_CtlError>
      break;
 80086f0:	e000      	b.n	80086f4 <USBD_ClrFeature+0x3c>
      break;
 80086f2:	bf00      	nop
  }
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	781a      	ldrb	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff fa92 	bl	8007c50 <SWAPBYTE>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3301      	adds	r3, #1
 8008738:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3301      	adds	r3, #1
 800873e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff fa85 	bl	8007c50 <SWAPBYTE>
 8008746:	4603      	mov	r3, r0
 8008748:	461a      	mov	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff fa78 	bl	8007c50 <SWAPBYTE>
 8008760:	4603      	mov	r3, r0
 8008762:	461a      	mov	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	80da      	strh	r2, [r3, #6]
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800877a:	2180      	movs	r1, #128	; 0x80
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fbeb 	bl	8008f58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008782:	2100      	movs	r1, #0
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fbe7 	bl	8008f58 <USBD_LL_StallEP>
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d036      	beq.n	8008816 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087ac:	6938      	ldr	r0, [r7, #16]
 80087ae:	f000 f836 	bl	800881e <USBD_GetLen>
 80087b2:	4603      	mov	r3, r0
 80087b4:	3301      	adds	r3, #1
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	4413      	add	r3, r2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	7812      	ldrb	r2, [r2, #0]
 80087ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
 80087ce:	3301      	adds	r3, #1
 80087d0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	4413      	add	r3, r2
 80087d8:	2203      	movs	r2, #3
 80087da:	701a      	strb	r2, [r3, #0]
  idx++;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	3301      	adds	r3, #1
 80087e0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087e2:	e013      	b.n	800880c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	4413      	add	r3, r2
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	7812      	ldrb	r2, [r2, #0]
 80087ee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	3301      	adds	r3, #1
 80087f4:	613b      	str	r3, [r7, #16]
    idx++;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	3301      	adds	r3, #1
 80087fa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	4413      	add	r3, r2
 8008802:	2200      	movs	r2, #0
 8008804:	701a      	strb	r2, [r3, #0]
    idx++;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	3301      	adds	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e7      	bne.n	80087e4 <USBD_GetString+0x52>
 8008814:	e000      	b.n	8008818 <USBD_GetString+0x86>
    return;
 8008816:	bf00      	nop
  }
}
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800881e:	b480      	push	{r7}
 8008820:	b085      	sub	sp, #20
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800882e:	e005      	b.n	800883c <USBD_GetLen+0x1e>
  {
    len++;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	3301      	adds	r3, #1
 8008834:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	3301      	adds	r3, #1
 800883a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1f5      	bne.n	8008830 <USBD_GetLen+0x12>
  }

  return len;
 8008844:	7bfb      	ldrb	r3, [r7, #15]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2202      	movs	r2, #2
 8008862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	2100      	movs	r1, #0
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fbf7 	bl	800906c <USBD_LL_Transmit>

  return USBD_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	2100      	movs	r1, #0
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fbe6 	bl	800906c <USBD_LL_Transmit>

  return USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	2100      	movs	r1, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fbf6 	bl	80090ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2204      	movs	r2, #4
 80088d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088dc:	2300      	movs	r3, #0
 80088de:	2200      	movs	r2, #0
 80088e0:	2100      	movs	r1, #0
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fbc2 	bl	800906c <USBD_LL_Transmit>

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2205      	movs	r2, #5
 80088fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008902:	2300      	movs	r3, #0
 8008904:	2200      	movs	r2, #0
 8008906:	2100      	movs	r1, #0
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fbd0 	bl	80090ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800891c:	2200      	movs	r2, #0
 800891e:	490e      	ldr	r1, [pc, #56]	; (8008958 <MX_USB_Device_Init+0x40>)
 8008920:	480e      	ldr	r0, [pc, #56]	; (800895c <MX_USB_Device_Init+0x44>)
 8008922:	f7fe fef7 	bl	8007714 <USBD_Init>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800892c:	f7f7 fe1f 	bl	800056e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 8008930:	490b      	ldr	r1, [pc, #44]	; (8008960 <MX_USB_Device_Init+0x48>)
 8008932:	480a      	ldr	r0, [pc, #40]	; (800895c <MX_USB_Device_Init+0x44>)
 8008934:	f7fe ff1e 	bl	8007774 <USBD_RegisterClass>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800893e:	f7f7 fe16 	bl	800056e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008942:	4806      	ldr	r0, [pc, #24]	; (800895c <MX_USB_Device_Init+0x44>)
 8008944:	f7fe ff3d 	bl	80077c2 <USBD_Start>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800894e:	f7f7 fe0e 	bl	800056e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008952:	bf00      	nop
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20000118 	.word	0x20000118
 800895c:	20000208 	.word	0x20000208
 8008960:	20000010 	.word	0x20000010

08008964 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2212      	movs	r2, #18
 8008974:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 8008976:	4b03      	ldr	r3, [pc, #12]	; (8008984 <USBD_HID_DeviceDescriptor+0x20>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	20000138 	.word	0x20000138

08008988 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	6039      	str	r1, [r7, #0]
 8008992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2204      	movs	r2, #4
 8008998:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800899a:	4b03      	ldr	r3, [pc, #12]	; (80089a8 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	2000014c 	.word	0x2000014c

080089ac <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	6039      	str	r1, [r7, #0]
 80089b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d105      	bne.n	80089ca <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	4907      	ldr	r1, [pc, #28]	; (80089e0 <USBD_HID_ProductStrDescriptor+0x34>)
 80089c2:	4808      	ldr	r0, [pc, #32]	; (80089e4 <USBD_HID_ProductStrDescriptor+0x38>)
 80089c4:	f7ff fee5 	bl	8008792 <USBD_GetString>
 80089c8:	e004      	b.n	80089d4 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	4904      	ldr	r1, [pc, #16]	; (80089e0 <USBD_HID_ProductStrDescriptor+0x34>)
 80089ce:	4805      	ldr	r0, [pc, #20]	; (80089e4 <USBD_HID_ProductStrDescriptor+0x38>)
 80089d0:	f7ff fedf 	bl	8008792 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <USBD_HID_ProductStrDescriptor+0x34>)
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200004d8 	.word	0x200004d8
 80089e4:	0800928c 	.word	0x0800928c

080089e8 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	6039      	str	r1, [r7, #0]
 80089f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	4904      	ldr	r1, [pc, #16]	; (8008a08 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 80089f8:	4804      	ldr	r0, [pc, #16]	; (8008a0c <USBD_HID_ManufacturerStrDescriptor+0x24>)
 80089fa:	f7ff feca 	bl	8008792 <USBD_GetString>
  return USBD_StrDesc;
 80089fe:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	200004d8 	.word	0x200004d8
 8008a0c:	080092a4 	.word	0x080092a4

08008a10 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	6039      	str	r1, [r7, #0]
 8008a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	221a      	movs	r2, #26
 8008a20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a22:	f000 f843 	bl	8008aac <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008a26:	4b02      	ldr	r3, [pc, #8]	; (8008a30 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20000150 	.word	0x20000150

08008a34 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	6039      	str	r1, [r7, #0]
 8008a3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d105      	bne.n	8008a52 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	4907      	ldr	r1, [pc, #28]	; (8008a68 <USBD_HID_ConfigStrDescriptor+0x34>)
 8008a4a:	4808      	ldr	r0, [pc, #32]	; (8008a6c <USBD_HID_ConfigStrDescriptor+0x38>)
 8008a4c:	f7ff fea1 	bl	8008792 <USBD_GetString>
 8008a50:	e004      	b.n	8008a5c <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	4904      	ldr	r1, [pc, #16]	; (8008a68 <USBD_HID_ConfigStrDescriptor+0x34>)
 8008a56:	4805      	ldr	r0, [pc, #20]	; (8008a6c <USBD_HID_ConfigStrDescriptor+0x38>)
 8008a58:	f7ff fe9b 	bl	8008792 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200004d8 	.word	0x200004d8
 8008a6c:	080092b8 	.word	0x080092b8

08008a70 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	6039      	str	r1, [r7, #0]
 8008a7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d105      	bne.n	8008a8e <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	4907      	ldr	r1, [pc, #28]	; (8008aa4 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8008a86:	4808      	ldr	r0, [pc, #32]	; (8008aa8 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8008a88:	f7ff fe83 	bl	8008792 <USBD_GetString>
 8008a8c:	e004      	b.n	8008a98 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	4904      	ldr	r1, [pc, #16]	; (8008aa4 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8008a92:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8008a94:	f7ff fe7d 	bl	8008792 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a98:	4b02      	ldr	r3, [pc, #8]	; (8008aa4 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	200004d8 	.word	0x200004d8
 8008aa8:	080092c4 	.word	0x080092c4

08008aac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <Get_SerialNum+0x44>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ab8:	4b0e      	ldr	r3, [pc, #56]	; (8008af4 <Get_SerialNum+0x48>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008abe:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <Get_SerialNum+0x4c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ad2:	2208      	movs	r2, #8
 8008ad4:	4909      	ldr	r1, [pc, #36]	; (8008afc <Get_SerialNum+0x50>)
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 f814 	bl	8008b04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008adc:	2204      	movs	r2, #4
 8008ade:	4908      	ldr	r1, [pc, #32]	; (8008b00 <Get_SerialNum+0x54>)
 8008ae0:	68b8      	ldr	r0, [r7, #8]
 8008ae2:	f000 f80f 	bl	8008b04 <IntToUnicode>
  }
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	1fff7590 	.word	0x1fff7590
 8008af4:	1fff7594 	.word	0x1fff7594
 8008af8:	1fff7598 	.word	0x1fff7598
 8008afc:	20000152 	.word	0x20000152
 8008b00:	20000162 	.word	0x20000162

08008b04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b16:	2300      	movs	r3, #0
 8008b18:	75fb      	strb	r3, [r7, #23]
 8008b1a:	e027      	b.n	8008b6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	0f1b      	lsrs	r3, r3, #28
 8008b20:	2b09      	cmp	r3, #9
 8008b22:	d80b      	bhi.n	8008b3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	0f1b      	lsrs	r3, r3, #28
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	4619      	mov	r1, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	440b      	add	r3, r1
 8008b34:	3230      	adds	r2, #48	; 0x30
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	e00a      	b.n	8008b52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	0f1b      	lsrs	r3, r3, #28
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	005b      	lsls	r3, r3, #1
 8008b46:	4619      	mov	r1, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	440b      	add	r3, r1
 8008b4c:	3237      	adds	r2, #55	; 0x37
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	75fb      	strb	r3, [r7, #23]
 8008b6c:	7dfa      	ldrb	r2, [r7, #23]
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d3d3      	bcc.n	8008b1c <IntToUnicode+0x18>
  }
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <LL_AHB2_GRP1_EnableClock>:
{
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
}
 8008ba8:	bf00      	nop
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <LL_APB1_GRP1_EnableClock>:
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
}
 8008bda:	bf00      	nop
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
	...

08008be8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b09c      	sub	sp, #112	; 0x70
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	609a      	str	r2, [r3, #8]
 8008bfc:	60da      	str	r2, [r3, #12]
 8008bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008c00:	f107 030c 	add.w	r3, r7, #12
 8008c04:	2250      	movs	r2, #80	; 0x50
 8008c06:	2100      	movs	r1, #0
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fb15 	bl	8009238 <memset>
  if(pcdHandle->Instance==USB)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a23      	ldr	r2, [pc, #140]	; (8008ca0 <HAL_PCD_MspInit+0xb8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d13e      	bne.n	8008c96 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8008c1e:	2318      	movs	r3, #24
 8008c20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8008c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008c2e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008c32:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8008c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008c3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c3e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008c40:	f107 030c 	add.w	r3, r7, #12
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fb f9ab 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8008c50:	f7f7 fc8d 	bl	800056e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c54:	2001      	movs	r0, #1
 8008c56:	f7ff ff94 	bl	8008b82 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c60:	2302      	movs	r3, #2
 8008c62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c64:	2300      	movs	r3, #0
 8008c66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8008c6c:	230a      	movs	r3, #10
 8008c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008c74:	4619      	mov	r1, r3
 8008c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c7a:	f7f7 ffb9 	bl	8000bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c7e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008c82:	f7ff ff97 	bl	8008bb4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008c86:	2200      	movs	r2, #0
 8008c88:	2100      	movs	r1, #0
 8008c8a:	2014      	movs	r0, #20
 8008c8c:	f7f7 ff7b 	bl	8000b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008c90:	2014      	movs	r0, #20
 8008c92:	f7f7 ff92 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c96:	bf00      	nop
 8008c98:	3770      	adds	r7, #112	; 0x70
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	40006800 	.word	0x40006800

08008ca4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f7fe fdcc 	bl	8007858 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008cda:	78fa      	ldrb	r2, [r7, #3]
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	440b      	add	r3, r1
 8008ce8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	f7fe fe06 	bl	8007902 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008d10:	78fa      	ldrb	r2, [r7, #3]
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	440b      	add	r3, r1
 8008d1e:	333c      	adds	r3, #60	; 0x3c
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	4619      	mov	r1, r3
 8008d26:	f7fe fe4f 	bl	80079c8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008d2a:	bf00      	nop
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe ff63 	bl	8007c0c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d56:	2301      	movs	r3, #1
 8008d58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d001      	beq.n	8008d66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d62:	f7f7 fc04 	bl	800056e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008d6c:	7bfa      	ldrb	r2, [r7, #15]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe ff0d 	bl	8007b90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe feb9 	bl	8007af4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe ff08 	bl	8007bb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008da8:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <HAL_PCD_SuspendCallback+0x30>)
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	4a03      	ldr	r2, [pc, #12]	; (8008dbc <HAL_PCD_SuspendCallback+0x30>)
 8008dae:	f043 0306 	orr.w	r3, r3, #6
 8008db2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	e000ed00 	.word	0xe000ed00

08008dc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d007      	beq.n	8008de0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dd0:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <HAL_PCD_ResumeCallback+0x34>)
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	4a07      	ldr	r2, [pc, #28]	; (8008df4 <HAL_PCD_ResumeCallback+0x34>)
 8008dd6:	f023 0306 	bic.w	r3, r3, #6
 8008dda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008ddc:	f000 f9d6 	bl	800918c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fef8 	bl	8007bdc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	e000ed00 	.word	0xe000ed00

08008df8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008e00:	4a23      	ldr	r2, [pc, #140]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a21      	ldr	r2, [pc, #132]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008e10:	f7f9 fda8 	bl	8002964 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8008e14:	4b1e      	ldr	r3, [pc, #120]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e16:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <USBD_LL_Init+0x9c>)
 8008e18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e1a:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e1c:	2208      	movs	r2, #8
 8008e1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e20:	4b1b      	ldr	r3, [pc, #108]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e22:	2202      	movs	r2, #2
 8008e24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e26:	4b1a      	ldr	r3, [pc, #104]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e28:	2202      	movs	r2, #2
 8008e2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008e2c:	4b18      	ldr	r3, [pc, #96]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e32:	4b17      	ldr	r3, [pc, #92]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008e38:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e3e:	4b14      	ldr	r3, [pc, #80]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e44:	4812      	ldr	r0, [pc, #72]	; (8008e90 <USBD_LL_Init+0x98>)
 8008e46:	f7f8 f853 	bl	8000ef0 <HAL_PCD_Init>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008e50:	f7f7 fb8d 	bl	800056e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e5a:	2318      	movs	r3, #24
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2100      	movs	r1, #0
 8008e60:	f7f9 fcf4 	bl	800284c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e6a:	2358      	movs	r3, #88	; 0x58
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2180      	movs	r1, #128	; 0x80
 8008e70:	f7f9 fcec 	bl	800284c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2181      	movs	r1, #129	; 0x81
 8008e82:	f7f9 fce3 	bl	800284c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	200006d8 	.word	0x200006d8
 8008e94:	40006800 	.word	0x40006800

08008e98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7f8 f903 	bl	80010ba <HAL_PCD_Start>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f96c 	bl	8009198 <USBD_Get_USB_Status>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	461a      	mov	r2, r3
 8008edc:	4603      	mov	r3, r0
 8008ede:	70fb      	strb	r3, [r7, #3]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70bb      	strb	r3, [r7, #2]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ef6:	78bb      	ldrb	r3, [r7, #2]
 8008ef8:	883a      	ldrh	r2, [r7, #0]
 8008efa:	78f9      	ldrb	r1, [r7, #3]
 8008efc:	f7f8 fa4b 	bl	8001396 <HAL_PCD_EP_Open>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 f946 	bl	8009198 <USBD_Get_USB_Status>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f34:	78fa      	ldrb	r2, [r7, #3]
 8008f36:	4611      	mov	r1, r2
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7f8 fa92 	bl	8001462 <HAL_PCD_EP_Close>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f927 	bl	8009198 <USBD_Get_USB_Status>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7f8 fb3b 	bl	80015f2 <HAL_PCD_EP_SetStall>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f908 	bl	8009198 <USBD_Get_USB_Status>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fb0:	78fa      	ldrb	r2, [r7, #3]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f8 fb6e 	bl	8001696 <HAL_PCD_EP_ClrStall>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f8e9 	bl	8009198 <USBD_Get_USB_Status>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fe6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	da0c      	bge.n	800900a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ff0:	78fb      	ldrb	r3, [r7, #3]
 8008ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff6:	68f9      	ldr	r1, [r7, #12]
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	440b      	add	r3, r1
 8009004:	3302      	adds	r3, #2
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	e00b      	b.n	8009022 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009010:	68f9      	ldr	r1, [r7, #12]
 8009012:	4613      	mov	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	440b      	add	r3, r1
 800901c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009020:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7f8 f97d 	bl	800134c <HAL_PCD_SetAddress>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f89d 	bl	8009198 <USBD_Get_USB_Status>
 800905e:	4603      	mov	r3, r0
 8009060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009062:	7bbb      	ldrb	r3, [r7, #14]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	607a      	str	r2, [r7, #4]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	460b      	mov	r3, r1
 800907a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800908a:	7af9      	ldrb	r1, [r7, #11]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	f7f8 fa6c 	bl	800156c <HAL_PCD_EP_Transmit>
 8009094:	4603      	mov	r3, r0
 8009096:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f87c 	bl	8009198 <USBD_Get_USB_Status>
 80090a0:	4603      	mov	r3, r0
 80090a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	460b      	mov	r3, r1
 80090bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090cc:	7af9      	ldrb	r1, [r7, #11]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	f7f8 fa0e 	bl	80014f2 <HAL_PCD_EP_Receive>
 80090d6:	4603      	mov	r3, r0
 80090d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 f85b 	bl	8009198 <USBD_Get_USB_Status>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <HAL_PCDEx_LPM_Callback+0x18>
 8009102:	2b01      	cmp	r3, #1
 8009104:	d013      	beq.n	800912e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009106:	e023      	b.n	8009150 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009110:	f000 f83c 	bl	800918c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009114:	4b10      	ldr	r3, [pc, #64]	; (8009158 <HAL_PCDEx_LPM_Callback+0x68>)
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	4a0f      	ldr	r2, [pc, #60]	; (8009158 <HAL_PCDEx_LPM_Callback+0x68>)
 800911a:	f023 0306 	bic.w	r3, r3, #6
 800911e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fd58 	bl	8007bdc <USBD_LL_Resume>
    break;
 800912c:	e010      	b.n	8009150 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fd3b 	bl	8007bb0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d005      	beq.n	800914e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009142:	4b05      	ldr	r3, [pc, #20]	; (8009158 <HAL_PCDEx_LPM_Callback+0x68>)
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	4a04      	ldr	r2, [pc, #16]	; (8009158 <HAL_PCDEx_LPM_Callback+0x68>)
 8009148:	f043 0306 	orr.w	r3, r3, #6
 800914c:	6113      	str	r3, [r2, #16]
    break;
 800914e:	bf00      	nop
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed00 	.word	0xe000ed00

0800915c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009164:	4b03      	ldr	r3, [pc, #12]	; (8009174 <USBD_static_malloc+0x18>)
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	2000018c 	.word	0x2000018c

08009178 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]

}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009190:	f7f7 f964 	bl	800045c <SystemClock_Config>
}
 8009194:	bf00      	nop
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d817      	bhi.n	80091dc <USBD_Get_USB_Status+0x44>
 80091ac:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <USBD_Get_USB_Status+0x1c>)
 80091ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b2:	bf00      	nop
 80091b4:	080091c5 	.word	0x080091c5
 80091b8:	080091cb 	.word	0x080091cb
 80091bc:	080091d1 	.word	0x080091d1
 80091c0:	080091d7 	.word	0x080091d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
    break;
 80091c8:	e00b      	b.n	80091e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091ca:	2303      	movs	r3, #3
 80091cc:	73fb      	strb	r3, [r7, #15]
    break;
 80091ce:	e008      	b.n	80091e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d0:	2301      	movs	r3, #1
 80091d2:	73fb      	strb	r3, [r7, #15]
    break;
 80091d4:	e005      	b.n	80091e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	73fb      	strb	r3, [r7, #15]
    break;
 80091da:	e002      	b.n	80091e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	73fb      	strb	r3, [r7, #15]
    break;
 80091e0:	bf00      	nop
  }
  return usb_status;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <__libc_init_array>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	4d0d      	ldr	r5, [pc, #52]	; (8009228 <__libc_init_array+0x38>)
 80091f4:	4c0d      	ldr	r4, [pc, #52]	; (800922c <__libc_init_array+0x3c>)
 80091f6:	1b64      	subs	r4, r4, r5
 80091f8:	10a4      	asrs	r4, r4, #2
 80091fa:	2600      	movs	r6, #0
 80091fc:	42a6      	cmp	r6, r4
 80091fe:	d109      	bne.n	8009214 <__libc_init_array+0x24>
 8009200:	4d0b      	ldr	r5, [pc, #44]	; (8009230 <__libc_init_array+0x40>)
 8009202:	4c0c      	ldr	r4, [pc, #48]	; (8009234 <__libc_init_array+0x44>)
 8009204:	f000 f820 	bl	8009248 <_init>
 8009208:	1b64      	subs	r4, r4, r5
 800920a:	10a4      	asrs	r4, r4, #2
 800920c:	2600      	movs	r6, #0
 800920e:	42a6      	cmp	r6, r4
 8009210:	d105      	bne.n	800921e <__libc_init_array+0x2e>
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	f855 3b04 	ldr.w	r3, [r5], #4
 8009218:	4798      	blx	r3
 800921a:	3601      	adds	r6, #1
 800921c:	e7ee      	b.n	80091fc <__libc_init_array+0xc>
 800921e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009222:	4798      	blx	r3
 8009224:	3601      	adds	r6, #1
 8009226:	e7f2      	b.n	800920e <__libc_init_array+0x1e>
 8009228:	08009354 	.word	0x08009354
 800922c:	08009354 	.word	0x08009354
 8009230:	08009354 	.word	0x08009354
 8009234:	08009358 	.word	0x08009358

08009238 <memset>:
 8009238:	4402      	add	r2, r0
 800923a:	4603      	mov	r3, r0
 800923c:	4293      	cmp	r3, r2
 800923e:	d100      	bne.n	8009242 <memset+0xa>
 8009240:	4770      	bx	lr
 8009242:	f803 1b01 	strb.w	r1, [r3], #1
 8009246:	e7f9      	b.n	800923c <memset+0x4>

08009248 <_init>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr

08009254 <_fini>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	bf00      	nop
 8009258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925a:	bc08      	pop	{r3}
 800925c:	469e      	mov	lr, r3
 800925e:	4770      	bx	lr

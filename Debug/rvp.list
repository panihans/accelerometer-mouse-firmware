
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa20  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800ab5c  0800ab5c  0001ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000004  0800ac58  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000930  20000188  0800add8  00020188  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000ab8  0800add8  00020ab8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   000235b3  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004852  00000000  00000000  00043767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d20  00000000  00000000  00047fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b40  00000000  00000000  00049ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024ae8  00000000  00000000  0004b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e4b1  00000000  00000000  00070308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8c11  00000000  00000000  0008e7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001673ca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007a28  00000000  00000000  00167420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000188 	.word	0x20000188
 8000158:	00000000 	.word	0x00000000
 800015c:	0800ab44 	.word	0x0800ab44

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000018c 	.word	0x2000018c
 8000178:	0800ab44 	.word	0x0800ab44

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__gedf2>:
 8000918:	f04f 3cff 	mov.w	ip, #4294967295
 800091c:	e006      	b.n	800092c <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__ledf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	e002      	b.n	800092c <__cmpdf2+0x4>
 8000926:	bf00      	nop

08000928 <__cmpdf2>:
 8000928:	f04f 0c01 	mov.w	ip, #1
 800092c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000930:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800093c:	bf18      	it	ne
 800093e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000942:	d01b      	beq.n	800097c <__cmpdf2+0x54>
 8000944:	b001      	add	sp, #4
 8000946:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094a:	bf0c      	ite	eq
 800094c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000950:	ea91 0f03 	teqne	r1, r3
 8000954:	bf02      	ittt	eq
 8000956:	ea90 0f02 	teqeq	r0, r2
 800095a:	2000      	moveq	r0, #0
 800095c:	4770      	bxeq	lr
 800095e:	f110 0f00 	cmn.w	r0, #0
 8000962:	ea91 0f03 	teq	r1, r3
 8000966:	bf58      	it	pl
 8000968:	4299      	cmppl	r1, r3
 800096a:	bf08      	it	eq
 800096c:	4290      	cmpeq	r0, r2
 800096e:	bf2c      	ite	cs
 8000970:	17d8      	asrcs	r0, r3, #31
 8000972:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000976:	f040 0001 	orr.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d102      	bne.n	800098c <__cmpdf2+0x64>
 8000986:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098a:	d107      	bne.n	800099c <__cmpdf2+0x74>
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	d1d6      	bne.n	8000944 <__cmpdf2+0x1c>
 8000996:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099a:	d0d3      	beq.n	8000944 <__cmpdf2+0x1c>
 800099c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdrcmple>:
 80009a4:	4684      	mov	ip, r0
 80009a6:	4610      	mov	r0, r2
 80009a8:	4662      	mov	r2, ip
 80009aa:	468c      	mov	ip, r1
 80009ac:	4619      	mov	r1, r3
 80009ae:	4663      	mov	r3, ip
 80009b0:	e000      	b.n	80009b4 <__aeabi_cdcmpeq>
 80009b2:	bf00      	nop

080009b4 <__aeabi_cdcmpeq>:
 80009b4:	b501      	push	{r0, lr}
 80009b6:	f7ff ffb7 	bl	8000928 <__cmpdf2>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	bf48      	it	mi
 80009be:	f110 0f00 	cmnmi.w	r0, #0
 80009c2:	bd01      	pop	{r0, pc}

080009c4 <__aeabi_dcmpeq>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff fff4 	bl	80009b4 <__aeabi_cdcmpeq>
 80009cc:	bf0c      	ite	eq
 80009ce:	2001      	moveq	r0, #1
 80009d0:	2000      	movne	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_dcmplt>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff ffea 	bl	80009b4 <__aeabi_cdcmpeq>
 80009e0:	bf34      	ite	cc
 80009e2:	2001      	movcc	r0, #1
 80009e4:	2000      	movcs	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmple>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffe0 	bl	80009b4 <__aeabi_cdcmpeq>
 80009f4:	bf94      	ite	ls
 80009f6:	2001      	movls	r0, #1
 80009f8:	2000      	movhi	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmpge>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffce 	bl	80009a4 <__aeabi_cdrcmple>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpgt>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffc4 	bl	80009a4 <__aeabi_cdrcmple>
 8000a1c:	bf34      	ite	cc
 8000a1e:	2001      	movcc	r0, #1
 8000a20:	2000      	movcs	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	// updates all the button states
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f001 fc3c 	bl	8002300 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <update_buttons+0x1c>
		left_down = 0;
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <update_buttons+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000a94:	2108      	movs	r1, #8
 8000a96:	482f      	ldr	r0, [pc, #188]	; (8000b54 <update_buttons+0xdc>)
 8000a98:	f001 fc32 	bl	8002300 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <update_buttons+0x30>
		left_down = 1;
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <update_buttons+0xd8>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 8000aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 fc26 	bl	8002300 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <update_buttons+0x48>
		middle_down = 0;
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <update_buttons+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <update_buttons+0xe4>)
 8000ac4:	f001 fc1c 	bl	8002300 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <update_buttons+0x5c>
		middle_down = 1;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <update_buttons+0xe0>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <update_buttons+0xdc>)
 8000ad8:	f001 fc12 	bl	8002300 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <update_buttons+0x70>
		right_down = 0;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <update_buttons+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 8000ae8:	2101      	movs	r1, #1
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <update_buttons+0xdc>)
 8000aec:	f001 fc08 	bl	8002300 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <update_buttons+0x84>
		right_down = 1;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <update_buttons+0xe8>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000afc:	2120      	movs	r1, #32
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <update_buttons+0xdc>)
 8000b00:	f001 fbfe 	bl	8002300 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <update_buttons+0x98>
		b4_down = 0;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <update_buttons+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000b10:	2110      	movs	r1, #16
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <update_buttons+0xdc>)
 8000b14:	f001 fbf4 	bl	8002300 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <update_buttons+0xac>
		b4_down = 1;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <update_buttons+0xec>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <update_buttons+0xdc>)
 8000b28:	f001 fbea 	bl	8002300 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <update_buttons+0xc0>
		b5_down = 0;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <update_buttons+0xf0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <update_buttons+0xdc>)
 8000b3c:	f001 fbe0 	bl	8002300 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <update_buttons+0xd4>
		b5_down = 1;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <update_buttons+0xf0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200001a4 	.word	0x200001a4
 8000b54:	48000400 	.word	0x48000400
 8000b58:	200001a5 	.word	0x200001a5
 8000b5c:	48001000 	.word	0x48001000
 8000b60:	200001a6 	.word	0x200001a6
 8000b64:	200001a7 	.word	0x200001a7
 8000b68:	200001a8 	.word	0x200001a8

08000b6c <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	// reads a single value from a register
	// r - register
	uint8_t pTxData[1] = { r | (1UL << 7) };
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000b80:	2300      	movs	r3, #0
 8000b82:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000b84:	2200      	movs	r2, #0
 8000b86:	2110      	movs	r1, #16
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f001 fbd0 	bl	8002330 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000b90:	f107 010c 	add.w	r1, r7, #12
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	2201      	movs	r2, #1
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <read_register+0x5c>)
 8000b9c:	f004 ff68 	bl	8005a70 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 8000ba0:	f107 0108 	add.w	r1, r7, #8
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <read_register+0x5c>)
 8000bac:	f005 f8ce 	bl	8005d4c <HAL_SPI_Receive>
	CS_END();
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f001 fbba 	bl	8002330 <HAL_GPIO_WritePin>
	return pRxData[0];
 8000bbc:	7a3b      	ldrb	r3, [r7, #8]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000240 	.word	0x20000240

08000bcc <write_register>:

void write_register(uint8_t r, uint8_t value) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	// writes the value to the register
	// r - register
	// value - value to write
	uint8_t pTxData[2] = { r, value };
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	733b      	strb	r3, [r7, #12]
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	737b      	strb	r3, [r7, #13]
	uint8_t pRxData[2] = { 0, 0 };
 8000be4:	2300      	movs	r3, #0
 8000be6:	813b      	strh	r3, [r7, #8]
	CS_START();
 8000be8:	2200      	movs	r2, #0
 8000bea:	2110      	movs	r1, #16
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 fb9e 	bl	8002330 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 8000bf4:	f107 010c 	add.w	r1, r7, #12
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <write_register+0x5c>)
 8000c00:	f004 ff36 	bl	8005a70 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 2, HAL_MAX_DELAY);
 8000c04:	f107 0108 	add.w	r1, r7, #8
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <write_register+0x5c>)
 8000c10:	f005 f89c 	bl	8005d4c <HAL_SPI_Receive>
	CS_END();
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 fb88 	bl	8002330 <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000240 	.word	0x20000240

08000c2c <imu_setup>:

#define ACCEL_CALIBRATION_N 100
int16_t x_offset, y_offset, z_offset = 0;
void imu_setup() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	// IMU setup operations

	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	206b      	movs	r0, #107	; 0x6b
 8000c36:	f7ff ffc9 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f001 f8c4 	bl	8001dc8 <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c40:	206b      	movs	r0, #107	; 0x6b
 8000c42:	f7ff ff93 	bl	8000b6c <read_register>
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
		if (reg & (1UL << 6)) {
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0ee      	beq.n	8000c32 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000c54:	2101      	movs	r1, #1
 8000c56:	206b      	movs	r0, #107	; 0x6b
 8000c58:	f7ff ffb8 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f001 f8b3 	bl	8001dc8 <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c62:	206b      	movs	r0, #107	; 0x6b
 8000c64:	f7ff ff82 	bl	8000b6c <read_register>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71bb      	strb	r3, [r7, #6]
		if (reg & (1 << 0)) {
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0ee      	beq.n	8000c54 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000c76:	2110      	movs	r1, #16
 8000c78:	206a      	movs	r0, #106	; 0x6a
 8000c7a:	f7ff ffa7 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f001 f8a2 	bl	8001dc8 <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000c84:	206a      	movs	r0, #106	; 0x6a
 8000c86:	f7ff ff71 	bl	8000b6c <read_register>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	717b      	strb	r3, [r7, #5]
		if (reg & (1 << 4)) {
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0ee      	beq.n	8000c76 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000c98:	2118      	movs	r1, #24
 8000c9a:	201c      	movs	r0, #28
 8000c9c:	f7ff ff96 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000ca0:	2064      	movs	r0, #100	; 0x64
 8000ca2:	f001 f891 	bl	8001dc8 <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f7ff ff60 	bl	8000b6c <read_register>
 8000cac:	4603      	mov	r3, r0
 8000cae:	713b      	strb	r3, [r7, #4]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0ee      	beq.n	8000c98 <imu_setup+0x6c>
 8000cba:	793b      	ldrb	r3, [r7, #4]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0e9      	beq.n	8000c98 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 1);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	201d      	movs	r0, #29
 8000cc8:	f7ff ff80 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f001 f87b 	bl	8001dc8 <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 8000cd2:	201d      	movs	r0, #29
 8000cd4:	f7ff ff4a 	bl	8000b6c <read_register>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	70fb      	strb	r3, [r7, #3]
		if (reg == 1) {
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d000      	beq.n	8000ce4 <imu_setup+0xb8>
	while (1) {
 8000ce2:	e7ef      	b.n	8000cc4 <imu_setup+0x98>
			break;
 8000ce4:	bf00      	nop
//		HAL_Delay(1);
//	}
//	x_offset = xsum / ACCEL_CALIBRATION_N;
//	y_offset = ysum / ACCEL_CALIBRATION_N;
//	z_offset = zsum / ACCEL_CALIBRATION_N;
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <read_x>:

int16_t read_x() {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
	// reads and returns the accel x axis
	uint8_t h = read_register(ACCEL_XOUT_H);
 8000cf4:	203b      	movs	r0, #59	; 0x3b
 8000cf6:	f7ff ff39 	bl	8000b6c <read_register>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_XOUT_L);
 8000cfe:	203c      	movs	r0, #60	; 0x3c
 8000d00:	f7ff ff34 	bl	8000b6c <read_register>
 8000d04:	4603      	mov	r3, r0
 8000d06:	71bb      	strb	r3, [r7, #6]
	int16_t x = (h << 8) | l;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	80bb      	strh	r3, [r7, #4]
	return x;
 8000d16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <read_y>:

int16_t read_y() {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
	// reads and returns the accel y axis
	uint8_t h = read_register(ACCEL_YOUT_H);
 8000d28:	203d      	movs	r0, #61	; 0x3d
 8000d2a:	f7ff ff1f 	bl	8000b6c <read_register>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_YOUT_L);
 8000d32:	203e      	movs	r0, #62	; 0x3e
 8000d34:	f7ff ff1a 	bl	8000b6c <read_register>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71bb      	strb	r3, [r7, #6]
	int16_t y = (h << 8) | l;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	80bb      	strh	r3, [r7, #4]
	return y;
 8000d4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <read_z>:

int16_t read_z() {
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
	// reads and returns the accel z axis
	uint8_t h = read_register(ACCEL_ZOUT_H);
 8000d5c:	203f      	movs	r0, #63	; 0x3f
 8000d5e:	f7ff ff05 	bl	8000b6c <read_register>
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_ZOUT_L);
 8000d66:	2040      	movs	r0, #64	; 0x40
 8000d68:	f7ff ff00 	bl	8000b6c <read_register>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71bb      	strb	r3, [r7, #6]
	int16_t z = (h << 8) | l;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	80bb      	strh	r3, [r7, #4]
	return z;
 8000d7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <filter_p>:
//float den[] = { -1, 3.1673, -3.8396, 2.1405, -0.4706 };
//#define FILTER_N 3
//float num[] = { 0.6156, -1.8468, 1.8468, -0.6156 };
//float den[] = { -1, 2.0478, -1.5057, 0.3713 };

void filter_p(int16_t r[], int16_t f[], int16_t new) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	80fb      	strh	r3, [r7, #6]
	// applies an iir filter
	// r - raw inputs array
	// f - filtered values array
	// new - the new value to add
	if (new < -10000 || new > 10000) {
 8000d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <filter_p+0x10c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	db72      	blt.n	8000e8a <filter_p+0xfe>
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dac:	4293      	cmp	r3, r2
 8000dae:	dc6c      	bgt.n	8000e8a <filter_p+0xfe>
		return;
	}
	r[0] = new;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	801a      	strh	r2, [r3, #0]
	f[0] = 0;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2200      	movs	r2, #0
 8000dba:	801a      	strh	r2, [r3, #0]
	float sum = 0;
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	e032      	b.n	8000e2e <filter_p+0xa2>
		sum += den[i] * f[i];
 8000dc8:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <filter_p+0x110>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	68ba      	ldr	r2, [r7, #8]
 8000dda:	4413      	add	r3, r2
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dec:	ed97 7a07 	vldr	s14, [r7, #28]
 8000df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df4:	edc7 7a07 	vstr	s15, [r7, #28]
		sum += num[i] * r[i];
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <filter_p+0x114>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	ed93 7a00 	vldr	s14, [r3]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e24:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	ddc9      	ble.n	8000dc8 <filter_p+0x3c>
	}
	f[0] = sum;
 8000e34:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 3a90 	vmov	r3, s15
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e01a      	b.n	8000e82 <filter_p+0xf6>
		r[i + 1] = r[i];
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	441a      	add	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3301      	adds	r3, #1
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	68f9      	ldr	r1, [r7, #12]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e62:	801a      	strh	r2, [r3, #0]
		f[i + 1] = f[i];
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	441a      	add	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	440b      	add	r3, r1
 8000e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e7a:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dae1      	bge.n	8000e4c <filter_p+0xc0>
 8000e88:	e000      	b.n	8000e8c <filter_p+0x100>
		return;
 8000e8a:	bf00      	nop
	}
}
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	ffffd8f0 	.word	0xffffd8f0
 8000e9c:	20000010 	.word	0x20000010
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <get_xyz>:
int16_t y_r[FILTER_N + 1] = { 0 };
int16_t y_f[FILTER_N + 1] = { 0 };
int16_t z_r[FILTER_N + 1] = { 0 };
int16_t z_f[FILTER_N + 1] = { 0 };

void get_xyz(int16_t *x, int16_t *y, int16_t *z) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	// returns current xyz accelerometer values
	// x - accel x return value ptr
	// y - accel y return value ptr
	// z - accel z return value ptr
	filter_p(x_r, x_f, read_x());
 8000eb0:	f7ff ff1d 	bl	8000cee <read_x>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <get_xyz+0x64>)
 8000eba:	4814      	ldr	r0, [pc, #80]	; (8000f0c <get_xyz+0x68>)
 8000ebc:	f7ff ff66 	bl	8000d8c <filter_p>
	filter_p(y_r, y_f, read_y());
 8000ec0:	f7ff ff2f 	bl	8000d22 <read_y>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4911      	ldr	r1, [pc, #68]	; (8000f10 <get_xyz+0x6c>)
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <get_xyz+0x70>)
 8000ecc:	f7ff ff5e 	bl	8000d8c <filter_p>
	filter_p(z_r, z_f, read_z());
 8000ed0:	f7ff ff41 	bl	8000d56 <read_z>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	490f      	ldr	r1, [pc, #60]	; (8000f18 <get_xyz+0x74>)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <get_xyz+0x78>)
 8000edc:	f7ff ff56 	bl	8000d8c <filter_p>
	*x = x_f[0];
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <get_xyz+0x64>)
 8000ee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	801a      	strh	r2, [r3, #0]
	*y = y_f[0];
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <get_xyz+0x6c>)
 8000eec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	801a      	strh	r2, [r3, #0]
	*z = z_f[0];
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <get_xyz+0x74>)
 8000ef6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	801a      	strh	r2, [r3, #0]
//	*x = read_x() - x_offset;
//	*y = read_y() - y_offset;
//	*z = read_z() - z_offset;
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001b4 	.word	0x200001b4
 8000f0c:	200001ac 	.word	0x200001ac
 8000f10:	200001c4 	.word	0x200001c4
 8000f14:	200001bc 	.word	0x200001bc
 8000f18:	200001d4 	.word	0x200001d4
 8000f1c:	200001cc 	.word	0x200001cc

08000f20 <get_mouse_xy>:

#define PREV_C 10
int16_t prev_x[PREV_C] = { 0 };
int16_t prev_y[PREV_C] = { 0 };

void get_mouse_xy(int8_t *x, int8_t *y) {
 8000f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f24:	b09a      	sub	sp, #104	; 0x68
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6578      	str	r0, [r7, #84]	; 0x54
 8000f2a:	6539      	str	r1, [r7, #80]	; 0x50
//		*y = -ceil(accel.y / 500.0);
//	} else {
//		*y = -floor(accel.y / 500.0);
//	}

	get_xyz(&accel.x, &accel.y, &accel.z);
 8000f2c:	4a7b      	ldr	r2, [pc, #492]	; (800111c <get_mouse_xy+0x1fc>)
 8000f2e:	497c      	ldr	r1, [pc, #496]	; (8001120 <get_mouse_xy+0x200>)
 8000f30:	487c      	ldr	r0, [pc, #496]	; (8001124 <get_mouse_xy+0x204>)
 8000f32:	f7ff ffb7 	bl	8000ea4 <get_xyz>

	// exponential moving avg. to smooth peaks
	if (i == 0) {
 8000f36:	4b7c      	ldr	r3, [pc, #496]	; (8001128 <get_mouse_xy+0x208>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d11c      	bne.n	8000f78 <get_mouse_xy+0x58>
		avg_x = accel.x;
 8000f3e:	4b79      	ldr	r3, [pc, #484]	; (8001124 <get_mouse_xy+0x204>)
 8000f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa6b 	bl	8000420 <__aeabi_i2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4977      	ldr	r1, [pc, #476]	; (800112c <get_mouse_xy+0x20c>)
 8000f50:	e9c1 2300 	strd	r2, r3, [r1]
		avg_y = accel.y;
 8000f54:	4b73      	ldr	r3, [pc, #460]	; (8001124 <get_mouse_xy+0x204>)
 8000f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa60 	bl	8000420 <__aeabi_i2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4972      	ldr	r1, [pc, #456]	; (8001130 <get_mouse_xy+0x210>)
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
		i++;
 8000f6a:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <get_mouse_xy+0x208>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4a6d      	ldr	r2, [pc, #436]	; (8001128 <get_mouse_xy+0x208>)
 8000f74:	7013      	strb	r3, [r2, #0]
 8000f76:	e047      	b.n	8001008 <get_mouse_xy+0xe8>
	} else {
		avg_x = 0.5 * accel.x + (1 - 0.5) * avg_x;
 8000f78:	4b6a      	ldr	r3, [pc, #424]	; (8001124 <get_mouse_xy+0x204>)
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa4e 	bl	8000420 <__aeabi_i2d>
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b6a      	ldr	r3, [pc, #424]	; (8001134 <get_mouse_xy+0x214>)
 8000f8a:	f7ff fab3 	bl	80004f4 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	461d      	mov	r5, r3
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <get_mouse_xy+0x20c>)
 8000f98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	4b64      	ldr	r3, [pc, #400]	; (8001134 <get_mouse_xy+0x214>)
 8000fa2:	f7ff faa7 	bl	80004f4 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4620      	mov	r0, r4
 8000fac:	4629      	mov	r1, r5
 8000fae:	f7ff f8eb 	bl	8000188 <__adddf3>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <get_mouse_xy+0x20c>)
 8000fbc:	e9c3 0100 	strd	r0, r1, [r3]
		avg_y = 0.5 * accel.y + (1 - 0.5) * avg_y;
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <get_mouse_xy+0x204>)
 8000fc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa2a 	bl	8000420 <__aeabi_i2d>
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b58      	ldr	r3, [pc, #352]	; (8001134 <get_mouse_xy+0x214>)
 8000fd2:	f7ff fa8f 	bl	80004f4 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <get_mouse_xy+0x210>)
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b52      	ldr	r3, [pc, #328]	; (8001134 <get_mouse_xy+0x214>)
 8000fea:	f7ff fa83 	bl	80004f4 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	f7ff f8c7 	bl	8000188 <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <get_mouse_xy+0x210>)
 8001004:	e9c3 0100 	strd	r0, r1, [r3]
	}

	for (int l = PREV_C - 2; l >= 0; l--) {
 8001008:	2308      	movs	r3, #8
 800100a:	667b      	str	r3, [r7, #100]	; 0x64
 800100c:	e014      	b.n	8001038 <get_mouse_xy+0x118>
		prev_x[l + 1] = prev_x[l];
 800100e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001010:	1c59      	adds	r1, r3, #1
 8001012:	4a49      	ldr	r2, [pc, #292]	; (8001138 <get_mouse_xy+0x218>)
 8001014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001016:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800101a:	4a47      	ldr	r2, [pc, #284]	; (8001138 <get_mouse_xy+0x218>)
 800101c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		prev_y[l + 1] = prev_y[l];
 8001020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001022:	1c59      	adds	r1, r3, #1
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <get_mouse_xy+0x21c>)
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800102c:	4a43      	ldr	r2, [pc, #268]	; (800113c <get_mouse_xy+0x21c>)
 800102e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	for (int l = PREV_C - 2; l >= 0; l--) {
 8001032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001034:	3b01      	subs	r3, #1
 8001036:	667b      	str	r3, [r7, #100]	; 0x64
 8001038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800103a:	2b00      	cmp	r3, #0
 800103c:	dae7      	bge.n	800100e <get_mouse_xy+0xee>
	}
	prev_x[0] = avg_x;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <get_mouse_xy+0x20c>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fcee 	bl	8000a28 <__aeabi_d2iz>
 800104c:	4603      	mov	r3, r0
 800104e:	b21b      	sxth	r3, r3
 8001050:	4a39      	ldr	r2, [pc, #228]	; (8001138 <get_mouse_xy+0x218>)
 8001052:	8013      	strh	r3, [r2, #0]
	prev_y[0] = avg_y;
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <get_mouse_xy+0x210>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fce3 	bl	8000a28 <__aeabi_d2iz>
 8001062:	4603      	mov	r3, r0
 8001064:	b21b      	sxth	r3, r3
 8001066:	4a35      	ldr	r2, [pc, #212]	; (800113c <get_mouse_xy+0x21c>)
 8001068:	8013      	strh	r3, [r2, #0]

	// movement direction trigger
	int x_reset = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
	int y_reset = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (int k = 0; k < PREV_C; k++) {
 8001072:	2300      	movs	r3, #0
 8001074:	65bb      	str	r3, [r7, #88]	; 0x58
 8001076:	e01a      	b.n	80010ae <get_mouse_xy+0x18e>
		// reset if 5 small values in a row
		if (abs(prev_x[k]) > 5) {
 8001078:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <get_mouse_xy+0x218>)
 800107a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800107c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001080:	2b00      	cmp	r3, #0
 8001082:	bfb8      	it	lt
 8001084:	425b      	neglt	r3, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	2b05      	cmp	r3, #5
 800108a:	d901      	bls.n	8001090 <get_mouse_xy+0x170>
			x_reset = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	663b      	str	r3, [r7, #96]	; 0x60
		}
		if (abs(prev_y[k]) > 5) {
 8001090:	4a2a      	ldr	r2, [pc, #168]	; (800113c <get_mouse_xy+0x21c>)
 8001092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001094:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bfb8      	it	lt
 800109c:	425b      	neglt	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d901      	bls.n	80010a8 <get_mouse_xy+0x188>
			y_reset = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (int k = 0; k < PREV_C; k++) {
 80010a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010aa:	3301      	adds	r3, #1
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80010ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	dde1      	ble.n	8001078 <get_mouse_xy+0x158>
		}
	}
	if (x_reset) {
 80010b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <get_mouse_xy+0x1a0>
		*x = 0;
 80010ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010bc:	2300      	movs	r3, #0
 80010be:	7013      	strb	r3, [r2, #0]
	}
	if (y_reset) {
 80010c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <get_mouse_xy+0x1ac>
		*y = 0;
 80010c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010c8:	2300      	movs	r3, #0
 80010ca:	7013      	strb	r3, [r2, #0]
	}

	// if x trigger is not set and accel is significant
	if (*x == 0) {
 80010cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ce:	f993 3000 	ldrsb.w	r3, [r3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d15a      	bne.n	800118c <get_mouse_xy+0x26c>
		if (avg_x < -SIG_ACCEL) {
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <get_mouse_xy+0x20c>)
 80010d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <get_mouse_xy+0x220>)
 80010e2:	f7ff fc79 	bl	80009d8 <__aeabi_dcmplt>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02d      	beq.n	8001148 <get_mouse_xy+0x228>
			*x = -avg_x / ACCEL_DIV;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <get_mouse_xy+0x20c>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	4690      	mov	r8, r2
 80010f4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <get_mouse_xy+0x224>)
 80010fe:	4640      	mov	r0, r8
 8001100:	4649      	mov	r1, r9
 8001102:	f7ff fb21 	bl	8000748 <__aeabi_ddiv>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fc8b 	bl	8000a28 <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	b25b      	sxtb	r3, r3
 8001116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001118:	7013      	strb	r3, [r2, #0]
 800111a:	e037      	b.n	800118c <get_mouse_xy+0x26c>
 800111c:	20000238 	.word	0x20000238
 8001120:	20000236 	.word	0x20000236
 8001124:	20000234 	.word	0x20000234
 8001128:	200001da 	.word	0x200001da
 800112c:	200001e0 	.word	0x200001e0
 8001130:	200001e8 	.word	0x200001e8
 8001134:	3fe00000 	.word	0x3fe00000
 8001138:	200001f0 	.word	0x200001f0
 800113c:	20000204 	.word	0x20000204
 8001140:	c0390000 	.word	0xc0390000
 8001144:	40490000 	.word	0x40490000
		} else if (avg_x > SIG_ACCEL) {
 8001148:	4ba9      	ldr	r3, [pc, #676]	; (80013f0 <get_mouse_xy+0x4d0>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4ba8      	ldr	r3, [pc, #672]	; (80013f4 <get_mouse_xy+0x4d4>)
 8001154:	f7ff fc5e 	bl	8000a14 <__aeabi_dcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d016      	beq.n	800118c <get_mouse_xy+0x26c>
			*x = -avg_x / ACCEL_DIV;
 800115e:	4ba4      	ldr	r3, [pc, #656]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	4692      	mov	sl, r2
 8001166:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4ba2      	ldr	r3, [pc, #648]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001170:	4650      	mov	r0, sl
 8001172:	4659      	mov	r1, fp
 8001174:	f7ff fae8 	bl	8000748 <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fc52 	bl	8000a28 <__aeabi_d2iz>
 8001184:	4603      	mov	r3, r0
 8001186:	b25b      	sxtb	r3, r3
 8001188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800118a:	7013      	strb	r3, [r2, #0]
		}
	}
	// if x accel is greater than starting accel
	if (*x > 0) {
 800118c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800118e:	f993 3000 	ldrsb.w	r3, [r3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd45      	ble.n	8001222 <get_mouse_xy+0x302>
		if (avg_x < -SIG_ACCEL) {
 8001196:	4b96      	ldr	r3, [pc, #600]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b96      	ldr	r3, [pc, #600]	; (80013fc <get_mouse_xy+0x4dc>)
 80011a2:	f7ff fc19 	bl	80009d8 <__aeabi_dcmplt>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d03a      	beq.n	8001222 <get_mouse_xy+0x302>
			if (fabs(avg_x / ACCEL_DIV) > fabs(*x)) {
 80011ac:	4b90      	ldr	r3, [pc, #576]	; (80013f0 <get_mouse_xy+0x4d0>)
 80011ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b90      	ldr	r3, [pc, #576]	; (80013f8 <get_mouse_xy+0x4d8>)
 80011b8:	f7ff fac6 	bl	8000748 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80011c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ca:	f993 3000 	ldrsb.w	r3, [r3]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f926 	bl	8000420 <__aeabi_i2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	643a      	str	r2, [r7, #64]	; 0x40
 80011da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
 80011e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80011e8:	f7ff fc14 	bl	8000a14 <__aeabi_dcmpgt>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d017      	beq.n	8001222 <get_mouse_xy+0x302>
				*x = -avg_x / ACCEL_DIV;
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <get_mouse_xy+0x4d0>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80011fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001206:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800120a:	f7ff fa9d 	bl	8000748 <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fc07 	bl	8000a28 <__aeabi_d2iz>
 800121a:	4603      	mov	r3, r0
 800121c:	b25b      	sxtb	r3, r3
 800121e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001220:	7013      	strb	r3, [r2, #0]
			}
		}
	}
	if (*x < 0) {
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	f993 3000 	ldrsb.w	r3, [r3]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da45      	bge.n	80012b8 <get_mouse_xy+0x398>
		if (avg_x > SIG_ACCEL) {
 800122c:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <get_mouse_xy+0x4d0>)
 800122e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <get_mouse_xy+0x4d4>)
 8001238:	f7ff fbec 	bl	8000a14 <__aeabi_dcmpgt>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d03a      	beq.n	80012b8 <get_mouse_xy+0x398>
			if (fabs(avg_x / ACCEL_DIV) > fabs(*x)) {
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <get_mouse_xy+0x4d8>)
 800124e:	f7ff fa7b 	bl	8000748 <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	633a      	str	r2, [r7, #48]	; 0x30
 8001258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
 800125e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001260:	f993 3000 	ldrsb.w	r3, [r3]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f8db 	bl	8000420 <__aeabi_i2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800127a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800127e:	f7ff fbc9 	bl	8000a14 <__aeabi_dcmpgt>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d017      	beq.n	80012b8 <get_mouse_xy+0x398>
				*x = -avg_x / ACCEL_DIV;
 8001288:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <get_mouse_xy+0x4d0>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	623a      	str	r2, [r7, #32]
 8001290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <get_mouse_xy+0x4d8>)
 800129c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012a0:	f7ff fa52 	bl	8000748 <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbbc 	bl	8000a28 <__aeabi_d2iz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b25a      	sxtb	r2, r3
 80012b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b6:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// if y trigger is not set and accel is significant
	if (*y == 0) {
 80012b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ba:	f993 3000 	ldrsb.w	r3, [r3]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d13a      	bne.n	8001338 <get_mouse_xy+0x418>
		if (avg_y < -SIG_ACCEL) {
 80012c2:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <get_mouse_xy+0x4e0>)
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <get_mouse_xy+0x4dc>)
 80012ce:	f7ff fb83 	bl	80009d8 <__aeabi_dcmplt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <get_mouse_xy+0x3de>
			*y = avg_y / ACCEL_DIV;
 80012d8:	4b49      	ldr	r3, [pc, #292]	; (8001400 <get_mouse_xy+0x4e0>)
 80012da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <get_mouse_xy+0x4d8>)
 80012e4:	f7ff fa30 	bl	8000748 <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fb9a 	bl	8000a28 <__aeabi_d2iz>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e01c      	b.n	8001338 <get_mouse_xy+0x418>
		} else if (avg_y > SIG_ACCEL) {
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <get_mouse_xy+0x4e0>)
 8001300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <get_mouse_xy+0x4d4>)
 800130a:	f7ff fb83 	bl	8000a14 <__aeabi_dcmpgt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d011      	beq.n	8001338 <get_mouse_xy+0x418>
			*y = avg_y / ACCEL_DIV;
 8001314:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <get_mouse_xy+0x4e0>)
 8001316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001320:	f7ff fa12 	bl	8000748 <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fb7c 	bl	8000a28 <__aeabi_d2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	b25a      	sxtb	r2, r3
 8001334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001336:	701a      	strb	r2, [r3, #0]
		}
	}
	// if y accel is greater than starting accel
	if (*y < 0 || *y > 0) {
 8001338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800133a:	f993 3000 	ldrsb.w	r3, [r3]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db04      	blt.n	800134c <get_mouse_xy+0x42c>
 8001342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001344:	f993 3000 	ldrsb.w	r3, [r3]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd3f      	ble.n	80013cc <get_mouse_xy+0x4ac>
		if (avg_y < -SIG_ACCEL) {
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <get_mouse_xy+0x4e0>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <get_mouse_xy+0x4dc>)
 8001358:	f7ff fb3e 	bl	80009d8 <__aeabi_dcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d034      	beq.n	80013cc <get_mouse_xy+0x4ac>
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
 8001362:	4b27      	ldr	r3, [pc, #156]	; (8001400 <get_mouse_xy+0x4e0>)
 8001364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <get_mouse_xy+0x4d8>)
 800136e:	f7ff f9eb 	bl	8000748 <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	61ba      	str	r2, [r7, #24]
 8001378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001380:	f993 3000 	ldrsb.w	r3, [r3]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f84b 	bl	8000420 <__aeabi_i2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	613a      	str	r2, [r7, #16]
 8001390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800139a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800139e:	f7ff fb39 	bl	8000a14 <__aeabi_dcmpgt>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d011      	beq.n	80013cc <get_mouse_xy+0x4ac>
				*y = avg_y / ACCEL_DIV;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <get_mouse_xy+0x4e0>)
 80013aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <get_mouse_xy+0x4d8>)
 80013b4:	f7ff f9c8 	bl	8000748 <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb32 	bl	8000a28 <__aeabi_d2iz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (*y > 0) {
 80013cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ce:	f993 3000 	ldrsb.w	r3, [r3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dd4c      	ble.n	8001470 <get_mouse_xy+0x550>
		if (avg_y > SIG_ACCEL) {
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <get_mouse_xy+0x4e0>)
 80013d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <get_mouse_xy+0x4d4>)
 80013e2:	f7ff fb17 	bl	8000a14 <__aeabi_dcmpgt>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10b      	bne.n	8001404 <get_mouse_xy+0x4e4>
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
				*y = avg_y / ACCEL_DIV;
			}
		}
	}
}
 80013ec:	e040      	b.n	8001470 <get_mouse_xy+0x550>
 80013ee:	bf00      	nop
 80013f0:	200001e0 	.word	0x200001e0
 80013f4:	40390000 	.word	0x40390000
 80013f8:	40490000 	.word	0x40490000
 80013fc:	c0390000 	.word	0xc0390000
 8001400:	200001e8 	.word	0x200001e8
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <get_mouse_xy+0x55c>)
 8001406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <get_mouse_xy+0x560>)
 8001410:	f7ff f99a 	bl	8000748 <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001422:	f993 3000 	ldrsb.w	r3, [r3]
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fffa 	bl	8000420 <__aeabi_i2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	603a      	str	r2, [r7, #0]
 8001432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800143c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001440:	f7ff fae8 	bl	8000a14 <__aeabi_dcmpgt>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <get_mouse_xy+0x52c>
}
 800144a:	e011      	b.n	8001470 <get_mouse_xy+0x550>
				*y = avg_y / ACCEL_DIV;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <get_mouse_xy+0x55c>)
 800144e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <get_mouse_xy+0x560>)
 8001458:	f7ff f976 	bl	8000748 <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fae0 	bl	8000a28 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	b25a      	sxtb	r2, r3
 800146c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800146e:	701a      	strb	r2, [r3, #0]
}
 8001470:	bf00      	nop
 8001472:	3768      	adds	r7, #104	; 0x68
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800147a:	bf00      	nop
 800147c:	200001e8 	.word	0x200001e8
 8001480:	40490000 	.word	0x40490000

08001484 <calculate_encoder_diff>:
#include "wheel.h"

int8_t calculate_encoder_diff(uint32_t prev_pos, uint32_t cur_pos) {
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	// calculates encoder diff
	// prev_pos - previous position of the encoder
	// cur_pos - current position of the encoder
	int diff = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8001498:	4293      	cmp	r3, r2
 800149a:	d90c      	bls.n	80014b6 <calculate_encoder_diff+0x32>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d807      	bhi.n	80014b6 <calculate_encoder_diff+0x32>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014b0:	33ff      	adds	r3, #255	; 0xff
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e015      	b.n	80014e2 <calculate_encoder_diff+0x5e>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80014bc:	4293      	cmp	r3, r2
 80014be:	d80c      	bhi.n	80014da <calculate_encoder_diff+0x56>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d907      	bls.n	80014da <calculate_encoder_diff+0x56>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80014d4:	3bff      	subs	r3, #255	; 0xff
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e003      	b.n	80014e2 <calculate_encoder_diff+0x5e>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) clamp(INT8_MIN, INT8_MAX, diff);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80014e8:	db07      	blt.n	80014fa <calculate_encoder_diff+0x76>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b7f      	cmp	r3, #127	; 0x7f
 80014ee:	dc02      	bgt.n	80014f6 <calculate_encoder_diff+0x72>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	e003      	b.n	80014fe <calculate_encoder_diff+0x7a>
 80014f6:	237f      	movs	r3, #127	; 0x7f
 80014f8:	e001      	b.n	80014fe <calculate_encoder_diff+0x7a>
 80014fa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <get_wheel_change>:

uint32_t encoder_prev = 0;
int8_t get_wheel_change(uint32_t encoder_timer_count) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	// returns wheel change -1, 0 or 1 when compared to the last wheel position
	// encoder_timer_count - current wheel encoder timer count
	uint32_t encoder_cur = encoder_timer_count;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60fb      	str	r3, [r7, #12]
	int8_t diff = calculate_encoder_diff(encoder_prev, encoder_cur);
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <get_wheel_change+0x48>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffb0 	bl	8001484 <calculate_encoder_diff>
 8001524:	4603      	mov	r3, r0
 8001526:	72fb      	strb	r3, [r7, #11]
	encoder_prev = encoder_cur;
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <get_wheel_change+0x48>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6013      	str	r3, [r2, #0]
	if (diff < 0) {
 800152e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da02      	bge.n	800153c <get_wheel_change+0x30>
		return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e006      	b.n	800154a <get_wheel_change+0x3e>
	}
	if (diff > 0) {
 800153c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001540:	2b00      	cmp	r3, #0
 8001542:	dd01      	ble.n	8001548 <get_wheel_change+0x3c>
		return 1;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <get_wheel_change+0x3e>
	}
	return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000218 	.word	0x20000218

08001558 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4013      	ands	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	2002      	movs	r0, #2
 80015a2:	f7ff ffd9 	bl	8001558 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff ffd6 	bl	8001558 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ac:	2010      	movs	r0, #16
 80015ae:	f7ff ffd3 	bl	8001558 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b8:	4825      	ldr	r0, [pc, #148]	; (8001650 <MX_GPIO_Init+0xc4>)
 80015ba:	f000 feb9 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2110      	movs	r1, #16
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f000 feb3 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	481b      	ldr	r0, [pc, #108]	; (8001650 <MX_GPIO_Init+0xc4>)
 80015e2:	f000 fd25 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80015e6:	2310      	movs	r3, #16
 80015e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f000 fd17 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 8001602:	23fb      	movs	r3, #251	; 0xfb
 8001604:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	480f      	ldr	r0, [pc, #60]	; (8001650 <MX_GPIO_Init+0xc4>)
 8001614:	f000 fd0c 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 8001618:	2310      	movs	r3, #16
 800161a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <MX_GPIO_Init+0xc8>)
 800162a:	f000 fd01 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 800162e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001632:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f000 fcf4 	bl	8002030 <HAL_GPIO_Init>

}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	48000400 	.word	0x48000400
 8001654:	48001000 	.word	0x48001000

08001658 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800165e:	f000 fb2d 	bl	8001cbc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001662:	f000 f85f 	bl	8001724 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001666:	f000 f8c9 	bl	80017fc <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800166a:	f7ff ff8f 	bl	800158c <MX_GPIO_Init>
	MX_USB_Device_Init();
 800166e:	f008 fdd1 	bl	800a214 <MX_USB_Device_Init>
	MX_SPI1_Init();
 8001672:	f000 f917 	bl	80018a4 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001676:	f000 fa5f 	bl	8001b38 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// start encoder timer
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800167a:	2104      	movs	r1, #4
 800167c:	481e      	ldr	r0, [pc, #120]	; (80016f8 <main+0xa0>)
 800167e:	f005 f90b 	bl	8006898 <HAL_TIM_Encoder_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	imu_setup();
 8001682:	f7ff fad3 	bl	8000c2c <imu_setup>
	int wheel_t = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
	while (1) {
		// buttons
		update_buttons();
 800168a:	f7ff f9f5 	bl	8000a78 <update_buttons>
		report.buttons = (left_down << 0) | (right_down << 1)
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <main+0xa4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	b25a      	sxtb	r2, r3
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <main+0xa8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b25a      	sxtb	r2, r3
				| (middle_down << 2) | (b5_down << 3) | (b4_down << 4);
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <main+0xac>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <main+0xb0>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <main+0xb4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	b2da      	uxtb	r2, r3
		report.buttons = (left_down << 0) | (right_down << 1)
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <main+0xb8>)
 80016c8:	701a      	strb	r2, [r3, #0]

		// wheel
		report.wheel = get_wheel_change(TIM1->CNT);
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <main+0xbc>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff1c 	bl	800150c <get_wheel_change>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <main+0xb8>)
 80016da:	70da      	strb	r2, [r3, #3]

		// mouse x, y
		get_mouse_xy(&report.x, &report.y);
 80016dc:	490e      	ldr	r1, [pc, #56]	; (8001718 <main+0xc0>)
 80016de:	480f      	ldr	r0, [pc, #60]	; (800171c <main+0xc4>)
 80016e0:	f7ff fc1e 	bl	8000f20 <get_mouse_xy>

		USBD_HID_SendReport(&hUsbDeviceFS, &report, 4);
 80016e4:	2204      	movs	r2, #4
 80016e6:	490a      	ldr	r1, [pc, #40]	; (8001710 <main+0xb8>)
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <main+0xc8>)
 80016ea:	f007 fc17 	bl	8008f1c <USBD_HID_SendReport>
		HAL_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 fb6a 	bl	8001dc8 <HAL_Delay>
		update_buttons();
 80016f4:	e7c9      	b.n	800168a <main+0x32>
 80016f6:	bf00      	nop
 80016f8:	200002a4 	.word	0x200002a4
 80016fc:	200001a6 	.word	0x200001a6
 8001700:	200001a4 	.word	0x200001a4
 8001704:	200001a5 	.word	0x200001a5
 8001708:	200001a8 	.word	0x200001a8
 800170c:	200001a7 	.word	0x200001a7
 8001710:	2000023c 	.word	0x2000023c
 8001714:	40012c00 	.word	0x40012c00
 8001718:	2000023e 	.word	0x2000023e
 800171c:	2000023d 	.word	0x2000023d
 8001720:	200002f4 	.word	0x200002f4

08001724 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b09a      	sub	sp, #104	; 0x68
 8001728:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	2248      	movs	r2, #72	; 0x48
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f009 f9fe 	bl	800ab34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <SystemClock_Config+0xd4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001752:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <SystemClock_Config+0xd4>)
 8001754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <SystemClock_Config+0xd4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001766:	2326      	movs	r3, #38	; 0x26
 8001768:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800176e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001774:	2301      	movs	r3, #1
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001778:	2340      	movs	r3, #64	; 0x40
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800177c:	2300      	movs	r3, #0
 800177e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001784:	2302      	movs	r3, #2
 8001786:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001788:	2301      	movs	r3, #1
 800178a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 8001790:	2320      	movs	r3, #32
 8001792:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001798:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800179a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800179e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a4:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fe80 	bl	80044b0 <HAL_RCC_OscConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0x96>
		Error_Handler();
 80017b6:	f000 f83e 	bl	8001836 <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80017ba:	236f      	movs	r3, #111	; 0x6f
 80017bc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017be:	2303      	movs	r3, #3
 80017c0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2103      	movs	r1, #3
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 f9f4 	bl	8004bc8 <HAL_RCC_ClockConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xc6>
		Error_Handler();
 80017e6:	f000 f826 	bl	8001836 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80017ea:	f003 ff87 	bl	80056fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80017ee:	bf00      	nop
 80017f0:	3768      	adds	r7, #104	; 0x68
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	58000400 	.word	0x58000400

080017fc <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b094      	sub	sp, #80	; 0x50
 8001800:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001802:	463b      	mov	r3, r7
 8001804:	2250      	movs	r2, #80	; 0x50
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f009 f993 	bl	800ab34 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800180e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001812:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001814:	2300      	movs	r3, #0
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001818:	2310      	movs	r3, #16
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800181c:	463b      	mov	r3, r7
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fdf6 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <PeriphCommonClock_Config+0x32>
		Error_Handler();
 800182a:	f000 f804 	bl	8001836 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 800182e:	bf00      	nop
 8001830:	3750      	adds	r7, #80	; 0x50
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183a:	b672      	cpsid	i
}
 800183c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800183e:	e7fe      	b.n	800183e <Error_Handler+0x8>

08001840 <LL_AHB2_GRP1_EnableClock>:
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800184e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4313      	orrs	r3, r2
 8001888:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4013      	ands	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_SPI1_Init+0x74>)
 80018aa:	4a1c      	ldr	r2, [pc, #112]	; (800191c <MX_SPI1_Init+0x78>)
 80018ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_SPI1_Init+0x74>)
 80018b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <MX_SPI1_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_SPI1_Init+0x74>)
 80018be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_SPI1_Init+0x74>)
 80018c6:	2202      	movs	r2, #2
 80018c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_SPI1_Init+0x74>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_SPI1_Init+0x74>)
 80018d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_SPI1_Init+0x74>)
 80018da:	2210      	movs	r2, #16
 80018dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_SPI1_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_SPI1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_SPI1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_SPI1_Init+0x74>)
 80018f2:	2207      	movs	r2, #7
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_SPI1_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_SPI1_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_SPI1_Init+0x74>)
 8001904:	f004 f811 	bl	800592a <HAL_SPI_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800190e:	f7ff ff92 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000240 	.word	0x20000240
 800191c:	40013000 	.word	0x40013000

08001920 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_SPI_MspInit+0x5c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d117      	bne.n	8001972 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001942:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001946:	f7ff ff94 	bl	8001872 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2001      	movs	r0, #1
 800194c:	f7ff ff78 	bl	8001840 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001950:	23c2      	movs	r3, #194	; 0xc2
 8001952:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001960:	2305      	movs	r3, #5
 8001962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f000 fb5f 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40013000 	.word	0x40013000

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2101      	movs	r1, #1
 8001988:	f06f 000b 	mvn.w	r0, #11
 800198c:	f000 fb1b 	bl	8001fc6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2101      	movs	r1, #1
 8001994:	f06f 000a 	mvn.w	r0, #10
 8001998:	f000 fb15 	bl	8001fc6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2101      	movs	r1, #1
 80019a0:	f06f 0009 	mvn.w	r0, #9
 80019a4:	f000 fb0f 	bl	8001fc6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2101      	movs	r1, #1
 80019ac:	f06f 0004 	mvn.w	r0, #4
 80019b0:	f000 fb09 	bl	8001fc6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2101      	movs	r1, #1
 80019b8:	f06f 0003 	mvn.w	r0, #3
 80019bc:	f000 fb03 	bl	8001fc6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2101      	movs	r1, #1
 80019c4:	f06f 0001 	mvn.w	r0, #1
 80019c8:	f000 fafd 	bl	8001fc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 f9a8 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <USB_LP_IRQHandler+0x10>)
 8001a2a:	f000 fda0 	bl	800256e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200007c4 	.word	0x200007c4

08001a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <SystemInit+0x90>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <SystemInit+0x90>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001a64:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <SystemInit+0x94>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a82:	f023 0305 	bic.w	r3, r3, #5
 8001a86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <SystemInit+0x98>)
 8001aa4:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	faf6fefb 	.word	0xfaf6fefb
 8001ad0:	22041000 	.word	0x22041000

08001ad4 <LL_AHB2_GRP1_EnableClock>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001af8:	68fb      	ldr	r3, [r7, #12]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_APB2_GRP1_EnableClock>:
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2224      	movs	r2, #36	; 0x24
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f008 fff4 	bl	800ab34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001b58:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <MX_TIM1_Init+0xb0>)
 8001b5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001bae:	f004 fdcd 	bl	800674c <HAL_TIM_Encoder_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001bb8:	f7ff fe3d 	bl	8001836 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_TIM1_Init+0xac>)
 8001bce:	f004 ff7b 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001bd8:	f7ff fe2d 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3730      	adds	r7, #48	; 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200002a4 	.word	0x200002a4
 8001be8:	40012c00 	.word	0x40012c00

08001bec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_TIM_Encoder_MspInit+0x5c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d118      	bne.n	8001c40 <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c12:	f7ff ff78 	bl	8001b06 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff ff5c 	bl	8001ad4 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3c:	f000 f9f8 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40012c00 	.word	0x40012c00

08001c4c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001c4c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c50:	3304      	adds	r3, #4

08001c52 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c52:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c54:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001c56:	d3f9      	bcc.n	8001c4c <CopyDataInit>
  bx lr
 8001c58:	4770      	bx	lr

08001c5a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001c5a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001c5c:	3004      	adds	r0, #4

08001c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001c5e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001c60:	d3fb      	bcc.n	8001c5a <FillZerobss>
  bx lr
 8001c62:	4770      	bx	lr

08001c64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001c66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c68:	f7ff fee6 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <LoopForever+0x8>)
 8001c6e:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <LoopForever+0xc>)
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <LoopForever+0x10>)
 8001c72:	2300      	movs	r3, #0
 8001c74:	f7ff ffed 	bl	8001c52 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <LoopForever+0x14>)
 8001c7a:	490c      	ldr	r1, [pc, #48]	; (8001cac <LoopForever+0x18>)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f7ff ffee 	bl	8001c5e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c82:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <LoopForever+0x1c>)
 8001c84:	490b      	ldr	r1, [pc, #44]	; (8001cb4 <LoopForever+0x20>)
 8001c86:	2300      	movs	r3, #0
 8001c88:	f7ff ffe9 	bl	8001c5e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c8c:	f008 ff2e 	bl	800aaec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001c90:	f7ff fce2 	bl	8001658 <main>

08001c94 <LoopForever>:

LoopForever:
  b LoopForever
 8001c94:	e7fe      	b.n	8001c94 <LoopForever>
 8001c96:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001c98:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000184 	.word	0x20000184
 8001ca4:	0800ac58 	.word	0x0800ac58
  INIT_BSS _sbss, _ebss
 8001ca8:	20000188 	.word	0x20000188
 8001cac:	20000ab8 	.word	0x20000ab8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001cb0:	20030000 	.word	0x20030000
 8001cb4:	20030000 	.word	0x20030000

08001cb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_Init+0x3c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_Init+0x3c>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f000 f96c 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 f80f 	bl	8001cfc <HAL_InitTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	e001      	b.n	8001cee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cea:	f7ff fe49 	bl	8001980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cee:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	58004000 	.word	0x58004000

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_InitTick+0x6c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d024      	beq.n	8001d5a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d10:	f003 f906 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_InitTick+0x6c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d20:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f974 	bl	8002016 <HAL_SYSTICK_Config>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	d809      	bhi.n	8001d4e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d42:	f000 f940 	bl	8001fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_InitTick+0x70>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e007      	b.n	8001d5e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e004      	b.n	8001d5e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000024 	.word	0x20000024
 8001d6c:	20000020 	.word	0x20000020

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000024 	.word	0x20000024
 8001d94:	200002f0 	.word	0x200002f0

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	200002f0 	.word	0x200002f0

08001db0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetTickPrio+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000020 	.word	0x20000020

08001dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff ffe2 	bl	8001d98 <HAL_GetTick>
 8001dd4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d005      	beq.n	8001dee <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_Delay+0x44>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001dee:	bf00      	nop
 8001df0:	f7ff ffd2 	bl	8001d98 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d8f7      	bhi.n	8001df0 <HAL_Delay+0x28>
    {
    }
  }
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000024 	.word	0x20000024

08001e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e42:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	60d3      	str	r3, [r2, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <__NVIC_GetPriorityGrouping+0x18>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0307 	and.w	r3, r3, #7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	db0b      	blt.n	8001e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	4907      	ldr	r1, [pc, #28]	; (8001eac <__NVIC_EnableIRQ+0x38>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2001      	movs	r0, #1
 8001e96:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
         );
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f7c:	d301      	bcc.n	8001f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00f      	b.n	8001fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <SysTick_Config+0x40>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f7ff ff8e 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <SysTick_Config+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SysTick_Config+0x40>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff29 	bl	8001e10 <__NVIC_SetPriorityGrouping>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff40 	bl	8001e58 <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff90 	bl	8001f04 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5f 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff33 	bl	8001e74 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa4 	bl	8001f6c <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	e146      	b.n	80022ce <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8138 	beq.w	80022c8 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d005      	beq.n	8002070 <HAL_GPIO_Init+0x40>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d130      	bne.n	80020d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a6:	2201      	movs	r2, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 0201 	and.w	r2, r3, #1
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d017      	beq.n	800210e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d123      	bne.n	8002162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	6939      	ldr	r1, [r7, #16]
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0203 	and.w	r2, r3, #3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8092 	beq.w	80022c8 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021a4:	4a51      	ldr	r2, [pc, #324]	; (80022ec <HAL_GPIO_Init+0x2bc>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ce:	d013      	beq.n	80021f8 <HAL_GPIO_Init+0x1c8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_GPIO_Init+0x2c0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00d      	beq.n	80021f4 <HAL_GPIO_Init+0x1c4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a46      	ldr	r2, [pc, #280]	; (80022f4 <HAL_GPIO_Init+0x2c4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d007      	beq.n	80021f0 <HAL_GPIO_Init+0x1c0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <HAL_GPIO_Init+0x2c8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_GPIO_Init+0x1bc>
 80021e8:	2304      	movs	r3, #4
 80021ea:	e006      	b.n	80021fa <HAL_GPIO_Init+0x1ca>
 80021ec:	2307      	movs	r3, #7
 80021ee:	e004      	b.n	80021fa <HAL_GPIO_Init+0x1ca>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e002      	b.n	80021fa <HAL_GPIO_Init+0x1ca>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_GPIO_Init+0x1ca>
 80021f8:	2300      	movs	r3, #0
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	f002 0203 	and.w	r2, r2, #3
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	4093      	lsls	r3, r2
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800220a:	4938      	ldr	r1, [pc, #224]	; (80022ec <HAL_GPIO_Init+0x2bc>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002218:	4b38      	ldr	r3, [pc, #224]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800223c:	4a2f      	ldr	r2, [pc, #188]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002266:	4a25      	ldr	r2, [pc, #148]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 800226e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002292:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 800229c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f47f aeb1 	bne.w	8002040 <HAL_GPIO_Init+0x10>
  }
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40010000 	.word	0x40010000
 80022f0:	48000400 	.word	0x48000400
 80022f4:	48000800 	.word	0x48000800
 80022f8:	48001000 	.word	0x48001000
 80022fc:	58000800 	.word	0x58000800

08002300 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e001      	b.n	8002322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800234c:	e002      	b.n	8002354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af06      	add	r7, sp, #24
 8002366:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0d7      	b.n	8002522 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f008 f8ac 	bl	800a4e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f004 fc0c 	bl	8006bb6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e04c      	b.n	800243e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3301      	adds	r3, #1
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	b298      	uxth	r0, r3
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	3336      	adds	r3, #54	; 0x36
 80023e2:	4602      	mov	r2, r0
 80023e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	3303      	adds	r3, #3
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	3338      	adds	r3, #56	; 0x38
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	333c      	adds	r3, #60	; 0x3c
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	3340      	adds	r3, #64	; 0x40
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d3ad      	bcc.n	80023a4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e044      	b.n	80024d8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3b5      	bcc.n	800244e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	687e      	ldr	r6, [r7, #4]
 80024ea:	466d      	mov	r5, sp
 80024ec:	f106 0410 	add.w	r4, r6, #16
 80024f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	602b      	str	r3, [r5, #0]
 80024f8:	1d33      	adds	r3, r6, #4
 80024fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fc:	6838      	ldr	r0, [r7, #0]
 80024fe:	f004 fb75 	bl	8006bec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d102      	bne.n	8002520 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f001 fc11 	bl	8003d42 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800252a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_PCD_Start+0x16>
 800253c:	2302      	movs	r3, #2
 800253e:	e012      	b.n	8002566 <HAL_PCD_Start+0x3c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f004 fb1b 	bl	8006b88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f006 fad0 	bl	8008afc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f006 fad5 	bl	8008b2a <USB_ReadInterrupts>
 8002580:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fb0e 	bl	8002bae <PCD_EP_ISR_Handler>

    return;
 8002592:	e110      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b0:	b292      	uxth	r2, r2
 80025b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f008 f847 	bl	800a64a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025bc:	2100      	movs	r1, #0
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8fc 	bl	80027bc <HAL_PCD_SetAddress>

    return;
 80025c4:	e0f7      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00c      	beq.n	80025ea <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025e2:	b292      	uxth	r2, r2
 80025e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80025e8:	e0e5      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00c      	beq.n	800260e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002606:	b292      	uxth	r2, r2
 8002608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800260c:	e0d3      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d034      	beq.n	8002682 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	b292      	uxth	r2, r2
 800262c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002638:	b29a      	uxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0208 	bic.w	r2, r2, #8
 8002642:	b292      	uxth	r2, r2
 8002644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800265a:	2100      	movs	r1, #0
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f008 f9c5 	bl	800a9ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f008 f82a 	bl	800a6bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002670:	b29a      	uxth	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800267a:	b292      	uxth	r2, r2
 800267c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002680:	e099      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002688:	2b00      	cmp	r3, #0
 800268a:	d027      	beq.n	80026dc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0208 	orr.w	r2, r2, #8
 800269e:	b292      	uxth	r2, r2
 80026a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b6:	b292      	uxth	r2, r2
 80026b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0204 	orr.w	r2, r2, #4
 80026ce:	b292      	uxth	r2, r2
 80026d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f007 ffd7 	bl	800a688 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026da:	e06c      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d040      	beq.n	8002768 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f8:	b292      	uxth	r2, r2
 80026fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d12b      	bne.n	8002760 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002710:	b29a      	uxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0204 	orr.w	r2, r2, #4
 800271a:	b292      	uxth	r2, r2
 800271c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0208 	orr.w	r2, r2, #8
 8002732:	b292      	uxth	r2, r2
 8002734:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002748:	b29b      	uxth	r3, r3
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002756:	2101      	movs	r1, #1
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f008 f947 	bl	800a9ec <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800275e:	e02a      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f007 ff91 	bl	800a688 <HAL_PCD_SuspendCallback>
    return;
 8002766:	e026      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00f      	beq.n	8002792 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800277a:	b29a      	uxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002784:	b292      	uxth	r2, r2
 8002786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f007 ff4f 	bl	800a62e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002790:	e011      	b.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ae:	b292      	uxth	r2, r2
 80027b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80027b4:	bf00      	nop
  }
}
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_PCD_SetAddress+0x1a>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e013      	b.n	80027fe <HAL_PCD_SetAddress+0x42>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f006 f970 	bl	8008ad4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	4608      	mov	r0, r1
 8002810:	4611      	mov	r1, r2
 8002812:	461a      	mov	r2, r3
 8002814:	4603      	mov	r3, r0
 8002816:	70fb      	strb	r3, [r7, #3]
 8002818:	460b      	mov	r3, r1
 800281a:	803b      	strh	r3, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da0e      	bge.n	800284a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	705a      	strb	r2, [r3, #1]
 8002848:	e00e      	b.n	8002868 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 0207 	and.w	r2, r3, #7
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002874:	883a      	ldrh	r2, [r7, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	78ba      	ldrb	r2, [r7, #2]
 800287e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	785b      	ldrb	r3, [r3, #1]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002892:	78bb      	ldrb	r3, [r7, #2]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d102      	bne.n	800289e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_PCD_EP_Open+0xa6>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e00e      	b.n	80028ca <HAL_PCD_EP_Open+0xc4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 f9b8 	bl	8006c30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80028c8:	7afb      	ldrb	r3, [r7, #11]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	da0e      	bge.n	8002904 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	705a      	strb	r2, [r3, #1]
 8002902:	e00e      	b.n	8002922 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 0207 	and.w	r2, r3, #7
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_PCD_EP_Close+0x6a>
 8002938:	2302      	movs	r3, #2
 800293a:	e00e      	b.n	800295a <HAL_PCD_EP_Close+0x88>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68f9      	ldr	r1, [r7, #12]
 800294a:	4618      	mov	r0, r3
 800294c:	f004 fd04 	bl	8007358 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	460b      	mov	r3, r1
 8002970:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002972:	7afb      	ldrb	r3, [r7, #11]
 8002974:	f003 0207 	and.w	r2, r3, #7
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2200      	movs	r2, #0
 80029a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a2:	7afb      	ldrb	r3, [r7, #11]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ae:	7afb      	ldrb	r3, [r7, #11]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6979      	ldr	r1, [r7, #20]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 feb7 	bl	8007732 <USB_EPStartXfer>
 80029c4:	e005      	b.n	80029d2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 feb0 	bl	8007732 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	460b      	mov	r3, r1
 80029ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ec:	7afb      	ldrb	r3, [r7, #11]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2201      	movs	r2, #1
 8002a26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a28:	7afb      	ldrb	r3, [r7, #11]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6979      	ldr	r1, [r7, #20]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 fe74 	bl	8007732 <USB_EPStartXfer>
 8002a4a:	e005      	b.n	8002a58 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6979      	ldr	r1, [r7, #20]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fe6d 	bl	8007732 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 0207 	and.w	r2, r3, #7
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d901      	bls.n	8002a80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e03e      	b.n	8002afe <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da0e      	bge.n	8002aa6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	705a      	strb	r2, [r3, #1]
 8002aa4:	e00c      	b.n	8002ac0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_EP_SetStall+0x7e>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e00e      	b.n	8002afe <HAL_PCD_EP_SetStall+0x9c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f005 fef1 	bl	80088d6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d901      	bls.n	8002b24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e040      	b.n	8002ba6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da0e      	bge.n	8002b4a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	705a      	strb	r2, [r3, #1]
 8002b48:	e00e      	b.n	8002b68 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 0207 	and.w	r2, r3, #7
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_PCD_EP_ClrStall+0x82>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e00e      	b.n	8002ba6 <HAL_PCD_EP_ClrStall+0xa0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f005 feee 	bl	8008978 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b096      	sub	sp, #88	; 0x58
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bb6:	e39c      	b.n	80032f2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002bd2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 815e 	bne.w	8002e98 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bdc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d150      	bne.n	8002c8a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf8:	81fb      	strh	r3, [r7, #14]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3328      	adds	r3, #40	; 0x28
 8002c10:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	441a      	add	r2, r3
 8002c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c46:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c48:	2100      	movs	r1, #0
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f007 fcd5 	bl	800a5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 834a 	beq.w	80032f2 <PCD_EP_ISR_Handler+0x744>
 8002c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 8345 	bne.w	80032f2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c88:	e333      	b.n	80032f2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c90:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c9c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d032      	beq.n	8002d0e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cce:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cdc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f005 ff73 	bl	8008bce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	823b      	strh	r3, [r7, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	8a3a      	ldrh	r2, [r7, #16]
 8002cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d02:	b292      	uxth	r2, r2
 8002d04:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f007 fc4a 	bl	800a5a0 <HAL_PCD_SetupStageCallback>
 8002d0c:	e2f1      	b.n	80032f2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d0e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f280 82ed 	bge.w	80032f2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d24:	4013      	ands	r3, r2
 8002d26:	83fb      	strh	r3, [r7, #30]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	8bfa      	ldrh	r2, [r7, #30]
 8002d2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d32:	b292      	uxth	r2, r2
 8002d34:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d019      	beq.n	8002d9a <PCD_EP_ISR_Handler+0x1ec>
 8002d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d74:	6959      	ldr	r1, [r3, #20]
 8002d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d78:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d7c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f005 ff25 	bl	8008bce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d92:	2100      	movs	r1, #0
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f007 fc15 	bl	800a5c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 82a3 	bne.w	80032f2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8002dd2:	d918      	bls.n	8002e06 <PCD_EP_ISR_Handler+0x258>
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	647b      	str	r3, [r7, #68]	; 0x44
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <PCD_EP_ISR_Handler+0x240>
 8002de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dea:	3b01      	subs	r3, #1
 8002dec:	647b      	str	r3, [r7, #68]	; 0x44
 8002dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	029b      	lsls	r3, r3, #10
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	e029      	b.n	8002e5a <PCD_EP_ISR_Handler+0x2ac>
 8002e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d112      	bne.n	8002e34 <PCD_EP_ISR_Handler+0x286>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	e012      	b.n	8002e5a <PCD_EP_ISR_Handler+0x2ac>
 8002e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <PCD_EP_ISR_Handler+0x2a0>
 8002e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	029b      	lsls	r3, r3, #10
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	827b      	strh	r3, [r7, #18]
 8002e6c:	8a7b      	ldrh	r3, [r7, #18]
 8002e6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e72:	827b      	strh	r3, [r7, #18]
 8002e74:	8a7b      	ldrh	r3, [r7, #18]
 8002e76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e7a:	827b      	strh	r3, [r7, #18]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	8a7b      	ldrh	r3, [r7, #18]
 8002e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8013      	strh	r3, [r2, #0]
 8002e96:	e22c      	b.n	80032f2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002eac:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f280 80f6 	bge.w	80030a2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ecc:	4013      	ands	r3, r2
 8002ece:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002ee4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002eec:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f04:	7b1b      	ldrb	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d123      	bne.n	8002f52 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002f32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 808e 	beq.w	8003058 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f42:	6959      	ldr	r1, [r3, #20]
 8002f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f46:	88da      	ldrh	r2, [r3, #6]
 8002f48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f4c:	f005 fe3f 	bl	8008bce <USB_ReadPMA>
 8002f50:	e082      	b.n	8003058 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f54:	78db      	ldrb	r3, [r3, #3]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d10a      	bne.n	8002f70 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f5a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9d3 	bl	800330e <HAL_PCD_EP_DB_Receive>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002f6e:	e073      	b.n	8003058 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	441a      	add	r2, r3
 8002f9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d022      	beq.n	8003014 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002ff6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d02c      	beq.n	8003058 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003004:	6959      	ldr	r1, [r3, #20]
 8003006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003008:	891a      	ldrh	r2, [r3, #8]
 800300a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800300e:	f005 fdde 	bl	8008bce <USB_ReadPMA>
 8003012:	e021      	b.n	8003058 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4413      	add	r3, r2
 800302e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003038:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800303c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304a:	6959      	ldr	r1, [r3, #20]
 800304c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304e:	895a      	ldrh	r2, [r3, #10]
 8003050:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003054:	f005 fdbb 	bl	8008bce <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003060:	441a      	add	r2, r3
 8003062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003064:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800306e:	441a      	add	r2, r3
 8003070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003072:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <PCD_EP_ISR_Handler+0x4da>
 800307c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	429a      	cmp	r2, r3
 8003086:	d206      	bcs.n	8003096 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f007 fa98 	bl	800a5c4 <HAL_PCD_DataOutStageCallback>
 8003094:	e005      	b.n	80030a2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800309c:	4618      	mov	r0, r3
 800309e:	f004 fb48 	bl	8007732 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8121 	beq.w	80032f2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80030b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	441a      	add	r2, r3
 80030f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80030f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	2b02      	cmp	r3, #2
 8003106:	f000 80a2 	beq.w	800324e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003112:	7b1b      	ldrb	r3, [r3, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8093 	beq.w	8003240 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800311a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d046      	beq.n	80031b4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d126      	bne.n	800317c <PCD_EP_ISR_Handler+0x5ce>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313c:	b29b      	uxth	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	4413      	add	r3, r2
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	00da      	lsls	r2, r3, #3
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	4413      	add	r3, r2
 8003150:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003160:	b29a      	uxth	r2, r3
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003174:	b29a      	uxth	r2, r3
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	e061      	b.n	8003240 <PCD_EP_ISR_Handler+0x692>
 800317c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317e:	785b      	ldrb	r3, [r3, #1]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d15d      	bne.n	8003240 <PCD_EP_ISR_Handler+0x692>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	4413      	add	r3, r2
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	00da      	lsls	r2, r3, #3
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	4413      	add	r3, r2
 80031a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	2200      	movs	r2, #0
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	e045      	b.n	8003240 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031bc:	785b      	ldrb	r3, [r3, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d126      	bne.n	8003210 <PCD_EP_ISR_Handler+0x662>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d6:	4413      	add	r3, r2
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	00da      	lsls	r2, r3, #3
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	4413      	add	r3, r2
 80031e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003208:	b29a      	uxth	r2, r3
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	e017      	b.n	8003240 <PCD_EP_ISR_Handler+0x692>
 8003210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d113      	bne.n	8003240 <PCD_EP_ISR_Handler+0x692>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003226:	4413      	add	r3, r2
 8003228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800322a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	00da      	lsls	r2, r3, #3
 8003230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003232:	4413      	add	r3, r2
 8003234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38
 800323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323c:	2200      	movs	r2, #0
 800323e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f007 f9d7 	bl	800a5fa <HAL_PCD_DataInStageCallback>
 800324c:	e051      	b.n	80032f2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800324e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d144      	bne.n	80032e4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	4413      	add	r3, r2
 8003274:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800327e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800328a:	429a      	cmp	r2, r3
 800328c:	d907      	bls.n	800329e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800328e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329a:	619a      	str	r2, [r3, #24]
 800329c:	e002      	b.n	80032a4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800329e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80032a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f007 f9a1 	bl	800a5fa <HAL_PCD_DataInStageCallback>
 80032b8:	e01b      	b.n	80032f2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80032ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032c2:	441a      	add	r2, r3
 80032c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80032c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032d0:	441a      	add	r2, r3
 80032d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032dc:	4618      	mov	r0, r3
 80032de:	f004 fa28 	bl	8007732 <USB_EPStartXfer>
 80032e2:	e006      	b.n	80032f2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032e8:	461a      	mov	r2, r3
 80032ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f917 	bl	8003520 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f6ff ac5a 	blt.w	8002bb8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3758      	adds	r7, #88	; 0x58
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b088      	sub	sp, #32
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	4613      	mov	r3, r2
 800331a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d07c      	beq.n	8003420 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800332e:	b29b      	uxth	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	4413      	add	r3, r2
 8003340:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800334a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	8b7b      	ldrh	r3, [r7, #26]
 8003352:	429a      	cmp	r2, r3
 8003354:	d306      	bcc.n	8003364 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	8b7b      	ldrh	r3, [r7, #26]
 800335c:	1ad2      	subs	r2, r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	e002      	b.n	800336a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d123      	bne.n	80033ba <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338c:	833b      	strh	r3, [r7, #24]
 800338e:	8b3b      	ldrh	r3, [r7, #24]
 8003390:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003394:	833b      	strh	r3, [r7, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	8b3b      	ldrh	r3, [r7, #24]
 80033a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01f      	beq.n	8003404 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033de:	82fb      	strh	r3, [r7, #22]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	441a      	add	r2, r3
 80033ee:	8afb      	ldrh	r3, [r7, #22]
 80033f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003400:	b29b      	uxth	r3, r3
 8003402:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003404:	8b7b      	ldrh	r3, [r7, #26]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8085 	beq.w	8003516 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6959      	ldr	r1, [r3, #20]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	891a      	ldrh	r2, [r3, #8]
 8003418:	8b7b      	ldrh	r3, [r7, #26]
 800341a:	f005 fbd8 	bl	8008bce <USB_ReadPMA>
 800341e:	e07a      	b.n	8003516 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003428:	b29b      	uxth	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	4413      	add	r3, r2
 800343a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003444:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	8b7b      	ldrh	r3, [r7, #26]
 800344c:	429a      	cmp	r2, r3
 800344e:	d306      	bcc.n	800345e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	8b7b      	ldrh	r3, [r7, #26]
 8003456:	1ad2      	subs	r2, r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	619a      	str	r2, [r3, #24]
 800345c:	e002      	b.n	8003464 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d123      	bne.n	80034b4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003486:	83fb      	strh	r3, [r7, #30]
 8003488:	8bfb      	ldrh	r3, [r7, #30]
 800348a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800348e:	83fb      	strh	r3, [r7, #30]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	441a      	add	r2, r3
 800349e:	8bfb      	ldrh	r3, [r7, #30]
 80034a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11f      	bne.n	80034fe <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d8:	83bb      	strh	r3, [r7, #28]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	441a      	add	r2, r3
 80034e8:	8bbb      	ldrh	r3, [r7, #28]
 80034ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034fe:	8b7b      	ldrh	r3, [r7, #26]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	6959      	ldr	r1, [r3, #20]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	895a      	ldrh	r2, [r3, #10]
 8003510:	8b7b      	ldrh	r3, [r7, #26]
 8003512:	f005 fb5c 	bl	8008bce <USB_ReadPMA>
    }
  }

  return count;
 8003516:	8b7b      	ldrh	r3, [r7, #26]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0a2      	sub	sp, #136	; 0x88
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 81c5 	beq.w	80038c4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003542:	b29b      	uxth	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	4413      	add	r3, r2
 8003554:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800356a:	429a      	cmp	r2, r3
 800356c:	d907      	bls.n	800357e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003576:	1ad2      	subs	r2, r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	619a      	str	r2, [r3, #24]
 800357c:	e002      	b.n	8003584 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f040 80b9 	bne.w	8003700 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	785b      	ldrb	r3, [r3, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d126      	bne.n	80035e4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	4413      	add	r3, r2
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	00da      	lsls	r2, r3, #3
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	4413      	add	r3, r2
 80035b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	801a      	strh	r2, [r3, #0]
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035dc:	b29a      	uxth	r2, r3
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	e01a      	b.n	800361a <HAL_PCD_EP_DB_Transmit+0xfa>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	785b      	ldrb	r3, [r3, #1]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d116      	bne.n	800361a <HAL_PCD_EP_DB_Transmit+0xfa>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	4413      	add	r3, r2
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	00da      	lsls	r2, r3, #3
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	4413      	add	r3, r2
 800360e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	2200      	movs	r2, #0
 8003618:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d126      	bne.n	8003676 <HAL_PCD_EP_DB_Transmit+0x156>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4413      	add	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	00da      	lsls	r2, r3, #3
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4413      	add	r3, r2
 800364a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800365a:	b29a      	uxth	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800366a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366e:	b29a      	uxth	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e017      	b.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x186>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d113      	bne.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x186>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	4413      	add	r3, r2
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00da      	lsls	r2, r3, #3
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	4413      	add	r3, r2
 800369a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2200      	movs	r2, #0
 80036a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f006 ffa4 	bl	800a5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 82d2 	beq.w	8003c62 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d8:	827b      	strh	r3, [r7, #18]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	441a      	add	r2, r3
 80036e8:	8a7b      	ldrh	r3, [r7, #18]
 80036ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	8013      	strh	r3, [r2, #0]
 80036fe:	e2b0      	b.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d021      	beq.n	800374e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003724:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800373a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374a:	b29b      	uxth	r3, r3
 800374c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 8284 	bne.w	8003c62 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003762:	441a      	add	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003770:	441a      	add	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	429a      	cmp	r2, r3
 8003780:	d309      	bcc.n	8003796 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6a1a      	ldr	r2, [r3, #32]
 800378c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378e:	1ad2      	subs	r2, r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	621a      	str	r2, [r3, #32]
 8003794:	e015      	b.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800379e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037ac:	e009      	b.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d155      	bne.n	8003876 <HAL_PCD_EP_DB_Transmit+0x356>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d8:	b29b      	uxth	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	4413      	add	r3, r2
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	00da      	lsls	r2, r3, #3
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	4413      	add	r3, r2
 80037ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
 80037f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f4:	2b3e      	cmp	r3, #62	; 0x3e
 80037f6:	d916      	bls.n	8003826 <HAL_PCD_EP_DB_Transmit+0x306>
 80037f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80037fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380a:	3b01      	subs	r3, #1
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
 800380e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003810:	b29b      	uxth	r3, r3
 8003812:	029b      	lsls	r3, r3, #10
 8003814:	b29b      	uxth	r3, r3
 8003816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381e:	b29a      	uxth	r2, r3
 8003820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003822:	801a      	strh	r2, [r3, #0]
 8003824:	e043      	b.n	80038ae <HAL_PCD_EP_DB_Transmit+0x38e>
 8003826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003828:	2b00      	cmp	r3, #0
 800382a:	d112      	bne.n	8003852 <HAL_PCD_EP_DB_Transmit+0x332>
 800382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003836:	b29a      	uxth	r2, r3
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	b29b      	uxth	r3, r3
 8003842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384a:	b29a      	uxth	r2, r3
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	e02d      	b.n	80038ae <HAL_PCD_EP_DB_Transmit+0x38e>
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_PCD_EP_DB_Transmit+0x348>
 8003862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003864:	3301      	adds	r3, #1
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
 8003868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386a:	b29b      	uxth	r3, r3
 800386c:	029b      	lsls	r3, r3, #10
 800386e:	b29a      	uxth	r2, r3
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	e01b      	b.n	80038ae <HAL_PCD_EP_DB_Transmit+0x38e>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d117      	bne.n	80038ae <HAL_PCD_EP_DB_Transmit+0x38e>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	643b      	str	r3, [r7, #64]	; 0x40
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003892:	4413      	add	r3, r2
 8003894:	643b      	str	r3, [r7, #64]	; 0x40
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	00da      	lsls	r2, r3, #3
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	4413      	add	r3, r2
 80038a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6959      	ldr	r1, [r3, #20]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	891a      	ldrh	r2, [r3, #8]
 80038ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f005 f944 	bl	8008b4a <USB_WritePMA>
 80038c2:	e1ce      	b.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	4413      	add	r3, r2
 80038de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d307      	bcc.n	8003908 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	699a      	ldr	r2, [r3, #24]
 80038fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003900:	1ad2      	subs	r2, r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	619a      	str	r2, [r3, #24]
 8003906:	e002      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 80c4 	bne.w	8003aa0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	785b      	ldrb	r3, [r3, #1]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d126      	bne.n	800396e <HAL_PCD_EP_DB_Transmit+0x44e>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	66bb      	str	r3, [r7, #104]	; 0x68
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003934:	4413      	add	r3, r2
 8003936:	66bb      	str	r3, [r7, #104]	; 0x68
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	00da      	lsls	r2, r3, #3
 800393e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003940:	4413      	add	r3, r2
 8003942:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003946:	667b      	str	r3, [r7, #100]	; 0x64
 8003948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003952:	b29a      	uxth	r2, r3
 8003954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003956:	801a      	strh	r2, [r3, #0]
 8003958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003966:	b29a      	uxth	r2, r3
 8003968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	e01a      	b.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x484>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d116      	bne.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x484>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	673b      	str	r3, [r7, #112]	; 0x70
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003984:	b29b      	uxth	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800398a:	4413      	add	r3, r2
 800398c:	673b      	str	r3, [r7, #112]	; 0x70
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	00da      	lsls	r2, r3, #3
 8003994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003996:	4413      	add	r3, r2
 8003998:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800399c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800399e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a0:	2200      	movs	r2, #0
 80039a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	785b      	ldrb	r3, [r3, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d12f      	bne.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ca:	4413      	add	r3, r2
 80039cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	00da      	lsls	r2, r3, #3
 80039d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039da:	4413      	add	r3, r2
 80039dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039f6:	801a      	strh	r2, [r3, #0]
 80039f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	e017      	b.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d113      	bne.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a28:	4413      	add	r3, r2
 8003a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00da      	lsls	r2, r3, #3
 8003a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a34:	4413      	add	r3, r2
 8003a36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a3e:	2200      	movs	r2, #0
 8003a40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	4619      	mov	r1, r3
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f006 fdd6 	bl	800a5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 8104 	bne.w	8003c62 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	8013      	strh	r3, [r2, #0]
 8003a9e:	e0e0      	b.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d121      	bne.n	8003aee <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	441a      	add	r2, r3
 8003ad6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	f040 80b4 	bne.w	8003c62 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b02:	441a      	add	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b10:	441a      	add	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6a1a      	ldr	r2, [r3, #32]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d309      	bcc.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2e:	1ad2      	subs	r2, r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	621a      	str	r2, [r3, #32]
 8003b34:	e015      	b.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003b3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b4c:	e009      	b.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	663b      	str	r3, [r7, #96]	; 0x60
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d155      	bne.n	8003c1c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b84:	4413      	add	r3, r2
 8003b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	00da      	lsls	r2, r3, #3
 8003b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b96:	657b      	str	r3, [r7, #84]	; 0x54
 8003b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b9c:	d916      	bls.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_PCD_EP_DB_Transmit+0x694>
 8003bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	677b      	str	r3, [r7, #116]	; 0x74
 8003bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	029b      	lsls	r3, r3, #10
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e040      	b.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d112      	bne.n	8003bf8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	e02a      	b.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	677b      	str	r3, [r7, #116]	; 0x74
 8003bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	677b      	str	r3, [r7, #116]	; 0x74
 8003c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	029b      	lsls	r3, r3, #10
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e018      	b.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d114      	bne.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c32:	4413      	add	r3, r2
 8003c34:	663b      	str	r3, [r7, #96]	; 0x60
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	00da      	lsls	r2, r3, #3
 8003c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3e:	4413      	add	r3, r2
 8003c40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c4c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6959      	ldr	r1, [r3, #20]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	895a      	ldrh	r2, [r3, #10]
 8003c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f004 ff74 	bl	8008b4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7c:	823b      	strh	r3, [r7, #16]
 8003c7e:	8a3b      	ldrh	r3, [r7, #16]
 8003c80:	f083 0310 	eor.w	r3, r3, #16
 8003c84:	823b      	strh	r3, [r7, #16]
 8003c86:	8a3b      	ldrh	r3, [r7, #16]
 8003c88:	f083 0320 	eor.w	r3, r3, #32
 8003c8c:	823b      	strh	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	441a      	add	r2, r3
 8003c9c:	8a3b      	ldrh	r3, [r7, #16]
 8003c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3788      	adds	r7, #136	; 0x88
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	817b      	strh	r3, [r7, #10]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cce:	897b      	ldrh	r3, [r7, #10]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e009      	b.n	8003d06 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf2:	897a      	ldrh	r2, [r7, #10]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d06:	893b      	ldrh	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	80da      	strh	r2, [r3, #6]
 8003d1a:	e00b      	b.n	8003d34 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da6:	6013      	str	r3, [r2, #0]
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	58000400 	.word	0x58000400

08003db8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	58000400 	.word	0x58000400

08003dd4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de2:	6053      	str	r3, [r2, #4]
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	58000400 	.word	0x58000400

08003df4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e06:	d101      	bne.n	8003e0c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e66:	d101      	bne.n	8003e6c <LL_RCC_HSE_IsReady+0x18>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <LL_RCC_HSE_IsReady+0x1a>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d101      	bne.n	8003ecc <LL_RCC_HSI_IsReady+0x18>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <LL_RCC_HSI_IsReady+0x1a>
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d101      	bne.n	8003f5e <LL_RCC_HSI48_IsReady+0x18>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <LL_RCC_HSI48_IsReady+0x1a>
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fc6:	bf00      	nop
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d101      	bne.n	800400a <LL_RCC_LSE_IsReady+0x18>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <LL_RCC_LSE_IsReady+0x1a>
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d101      	bne.n	8004072 <LL_RCC_LSI1_IsReady+0x18>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <LL_RCC_LSI1_IsReady+0x1a>
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800408e:	f043 0304 	orr.w	r3, r3, #4
 8004092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80040c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d101      	bne.n	80040da <LL_RCC_LSI2_IsReady+0x18>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <LL_RCC_LSI2_IsReady+0x1a>
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6013      	str	r3, [r2, #0]
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6013      	str	r3, [r2, #0]
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	d101      	bne.n	8004166 <LL_RCC_MSI_IsReady+0x16>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <LL_RCC_MSI_IsReady+0x18>
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041aa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2bb0      	cmp	r3, #176	; 0xb0
 80041b0:	d901      	bls.n	80041b6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80041b2:	23b0      	movs	r3, #176	; 0xb0
 80041b4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80041b6:	687b      	ldr	r3, [r7, #4]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 0203 	bic.w	r2, r3, #3
 8004200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800428a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004292:	f023 020f 	bic.w	r2, r3, #15
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800430e:	4618      	mov	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800432a:	4618      	mov	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004364:	6013      	str	r3, [r2, #0]
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004382:	d101      	bne.n	8004388 <LL_RCC_PLL_IsReady+0x18>
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <LL_RCC_PLL_IsReady+0x1a>
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0303 	and.w	r3, r3, #3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80043fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d101      	bne.n	800440e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800442e:	d101      	bne.n	8004434 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004448:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d101      	bne.n	800445a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004478:	d101      	bne.n	800447e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004498:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800449c:	d101      	bne.n	80044a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b08d      	sub	sp, #52	; 0x34
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e37e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8092 	beq.w	80045f4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d0:	f7ff fea1 	bl	8004216 <LL_RCC_GetSysClkSource>
 80044d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d6:	f7ff ff82 	bl	80043de <LL_RCC_PLL_GetMainSource>
 80044da:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x3e>
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	d14c      	bne.n	8004582 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d149      	bne.n	8004582 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ee:	f7ff fe2f 	bl	8004150 <LL_RCC_MSI_IsReady>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_OscConfig+0x54>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e35d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004508:	f7ff fe47 	bl	800419a <LL_RCC_MSI_GetRange>
 800450c:	4603      	mov	r3, r0
 800450e:	429c      	cmp	r4, r3
 8004510:	d914      	bls.n	800453c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fd16 	bl	8004f48 <RCC_SetFlashLatencyFromMSIRange>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e34c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fe21 	bl	8004172 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fe45 	bl	80041c4 <LL_RCC_MSI_SetCalibTrimming>
 800453a:	e013      	b.n	8004564 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fe16 	bl	8004172 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fe3a 	bl	80041c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fcf7 	bl	8004f48 <RCC_SetFlashLatencyFromMSIRange>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e32d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004564:	f000 fcdc 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8004568:	4603      	mov	r3, r0
 800456a:	4ab3      	ldr	r2, [pc, #716]	; (8004838 <HAL_RCC_OscConfig+0x388>)
 800456c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800456e:	4bb3      	ldr	r3, [pc, #716]	; (800483c <HAL_RCC_OscConfig+0x38c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fbc2 	bl	8001cfc <HAL_InitTick>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d039      	beq.n	80045f2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e31e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01e      	beq.n	80045c8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800458a:	f7ff fdc3 	bl	8004114 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800458e:	f7fd fc03 	bl	8001d98 <HAL_GetTick>
 8004592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004596:	f7fd fbff 	bl	8001d98 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e30b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80045a8:	f7ff fdd2 	bl	8004150 <LL_RCC_MSI_IsReady>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f1      	beq.n	8004596 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fddb 	bl	8004172 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fdff 	bl	80041c4 <LL_RCC_MSI_SetCalibTrimming>
 80045c6:	e015      	b.n	80045f4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045c8:	f7ff fdb3 	bl	8004132 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045cc:	f7fd fbe4 	bl	8001d98 <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d4:	f7fd fbe0 	bl	8001d98 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e2ec      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80045e6:	f7ff fdb3 	bl	8004150 <LL_RCC_MSI_IsReady>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f1      	bne.n	80045d4 <HAL_RCC_OscConfig+0x124>
 80045f0:	e000      	b.n	80045f4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d04e      	beq.n	800469e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004600:	f7ff fe09 	bl	8004216 <LL_RCC_GetSysClkSource>
 8004604:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004606:	f7ff feea 	bl	80043de <LL_RCC_PLL_GetMainSource>
 800460a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b08      	cmp	r3, #8
 8004610:	d005      	beq.n	800461e <HAL_RCC_OscConfig+0x16e>
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d10d      	bne.n	8004634 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b03      	cmp	r3, #3
 800461c:	d10a      	bne.n	8004634 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461e:	f7ff fc19 	bl	8003e54 <LL_RCC_HSE_IsReady>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d039      	beq.n	800469c <HAL_RCC_OscConfig+0x1ec>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d135      	bne.n	800469c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e2c5      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463c:	d102      	bne.n	8004644 <HAL_RCC_OscConfig+0x194>
 800463e:	f7ff fbeb 	bl	8003e18 <LL_RCC_HSE_Enable>
 8004642:	e001      	b.n	8004648 <HAL_RCC_OscConfig+0x198>
 8004644:	f7ff fbf7 	bl	8003e36 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fba2 	bl	8001d98 <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd fb9e 	bl	8001d98 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e2aa      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800466a:	f7ff fbf3 	bl	8003e54 <LL_RCC_HSE_IsReady>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f1      	beq.n	8004658 <HAL_RCC_OscConfig+0x1a8>
 8004674:	e013      	b.n	800469e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd fb8f 	bl	8001d98 <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800467e:	f7fd fb8b 	bl	8001d98 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	; 0x64
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e297      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004690:	f7ff fbe0 	bl	8003e54 <LL_RCC_HSE_IsReady>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f1      	bne.n	800467e <HAL_RCC_OscConfig+0x1ce>
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d051      	beq.n	800474e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046aa:	f7ff fdb4 	bl	8004216 <LL_RCC_GetSysClkSource>
 80046ae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b0:	f7ff fe95 	bl	80043de <LL_RCC_PLL_GetMainSource>
 80046b4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_OscConfig+0x218>
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d113      	bne.n	80046ea <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d110      	bne.n	80046ea <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c8:	f7ff fbf4 	bl	8003eb4 <LL_RCC_HSI_IsReady>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_RCC_OscConfig+0x22e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e270      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fbf8 	bl	8003ed8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e8:	e031      	b.n	800474e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d019      	beq.n	8004726 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f2:	f7ff fbc1 	bl	8003e78 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fd fb4f 	bl	8001d98 <HAL_GetTick>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fe:	f7fd fb4b 	bl	8001d98 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e257      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004710:	f7ff fbd0 	bl	8003eb4 <LL_RCC_HSI_IsReady>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f1      	beq.n	80046fe <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fbda 	bl	8003ed8 <LL_RCC_HSI_SetCalibTrimming>
 8004724:	e013      	b.n	800474e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004726:	f7ff fbb6 	bl	8003e96 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fd fb35 	bl	8001d98 <HAL_GetTick>
 800472e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004732:	f7fd fb31 	bl	8001d98 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e23d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004744:	f7ff fbb6 	bl	8003eb4 <LL_RCC_HSI_IsReady>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f1      	bne.n	8004732 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80a3 	beq.w	80048ae <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d076      	beq.n	800485e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	d046      	beq.n	800480a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800477c:	f7ff fc6d 	bl	800405a <LL_RCC_LSI1_IsReady>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d113      	bne.n	80047ae <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004786:	f7ff fc46 	bl	8004016 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800478a:	f7fd fb05 	bl	8001d98 <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004792:	f7fd fb01 	bl	8001d98 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e20d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047a4:	f7ff fc59 	bl	800405a <LL_RCC_LSI1_IsReady>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f1      	beq.n	8004792 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80047ae:	f7ff fc66 	bl	800407e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fd faf1 	bl	8001d98 <HAL_GetTick>
 80047b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80047ba:	f7fd faed 	bl	8001d98 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e1f9      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80047cc:	f7ff fc79 	bl	80040c2 <LL_RCC_LSI2_IsReady>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f1      	beq.n	80047ba <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fc83 	bl	80040e6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80047e0:	f7ff fc2a 	bl	8004038 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd fad8 	bl	8001d98 <HAL_GetTick>
 80047e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047ec:	f7fd fad4 	bl	8001d98 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e1e0      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80047fe:	f7ff fc2c 	bl	800405a <LL_RCC_LSI1_IsReady>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f1      	bne.n	80047ec <HAL_RCC_OscConfig+0x33c>
 8004808:	e051      	b.n	80048ae <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800480a:	f7ff fc04 	bl	8004016 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fd fac3 	bl	8001d98 <HAL_GetTick>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004816:	f7fd fabf 	bl	8001d98 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1cb      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004828:	f7ff fc17 	bl	800405a <LL_RCC_LSI1_IsReady>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f1      	beq.n	8004816 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004832:	f7ff fc35 	bl	80040a0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004836:	e00c      	b.n	8004852 <HAL_RCC_OscConfig+0x3a2>
 8004838:	2000001c 	.word	0x2000001c
 800483c:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004840:	f7fd faaa 	bl	8001d98 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b03      	cmp	r3, #3
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e1b6      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004852:	f7ff fc36 	bl	80040c2 <LL_RCC_LSI2_IsReady>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f1      	bne.n	8004840 <HAL_RCC_OscConfig+0x390>
 800485c:	e027      	b.n	80048ae <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800485e:	f7ff fc1f 	bl	80040a0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004862:	f7fd fa99 	bl	8001d98 <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800486a:	f7fd fa95 	bl	8001d98 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b03      	cmp	r3, #3
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1a1      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800487c:	f7ff fc21 	bl	80040c2 <LL_RCC_LSI2_IsReady>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f1      	bne.n	800486a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004886:	f7ff fbd7 	bl	8004038 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488a:	f7fd fa85 	bl	8001d98 <HAL_GetTick>
 800488e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004892:	f7fd fa81 	bl	8001d98 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e18d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048a4:	f7ff fbd9 	bl	800405a <LL_RCC_LSI1_IsReady>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f1      	bne.n	8004892 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d05b      	beq.n	8004972 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ba:	4bb5      	ldr	r3, [pc, #724]	; (8004b90 <HAL_RCC_OscConfig+0x6e0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d114      	bne.n	80048f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80048c6:	f7ff fa67 	bl	8003d98 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ca:	f7fd fa65 	bl	8001d98 <HAL_GetTick>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d2:	f7fd fa61 	bl	8001d98 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e16d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e4:	4baa      	ldr	r3, [pc, #680]	; (8004b90 <HAL_RCC_OscConfig+0x6e0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d102      	bne.n	80048fe <HAL_RCC_OscConfig+0x44e>
 80048f8:	f7ff fb37 	bl	8003f6a <LL_RCC_LSE_Enable>
 80048fc:	e00c      	b.n	8004918 <HAL_RCC_OscConfig+0x468>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b05      	cmp	r3, #5
 8004904:	d104      	bne.n	8004910 <HAL_RCC_OscConfig+0x460>
 8004906:	f7ff fb52 	bl	8003fae <LL_RCC_LSE_EnableBypass>
 800490a:	f7ff fb2e 	bl	8003f6a <LL_RCC_LSE_Enable>
 800490e:	e003      	b.n	8004918 <HAL_RCC_OscConfig+0x468>
 8004910:	f7ff fb3c 	bl	8003f8c <LL_RCC_LSE_Disable>
 8004914:	f7ff fb5c 	bl	8003fd0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d014      	beq.n	800494a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fd fa3a 	bl	8001d98 <HAL_GetTick>
 8004924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004926:	e00a      	b.n	800493e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fd fa36 	bl	8001d98 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	; 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e140      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800493e:	f7ff fb58 	bl	8003ff2 <LL_RCC_LSE_IsReady>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ef      	beq.n	8004928 <HAL_RCC_OscConfig+0x478>
 8004948:	e013      	b.n	8004972 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fd fa25 	bl	8001d98 <HAL_GetTick>
 800494e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fd fa21 	bl	8001d98 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e12b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004968:	f7ff fb43 	bl	8003ff2 <LL_RCC_LSE_IsReady>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ef      	bne.n	8004952 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d02c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d014      	beq.n	80049b0 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004986:	f7ff fabc 	bl	8003f02 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fd fa05 	bl	8001d98 <HAL_GetTick>
 800498e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004992:	f7fd fa01 	bl	8001d98 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e10d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80049a4:	f7ff facf 	bl	8003f46 <LL_RCC_HSI48_IsReady>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f1      	beq.n	8004992 <HAL_RCC_OscConfig+0x4e2>
 80049ae:	e013      	b.n	80049d8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049b0:	f7ff fab8 	bl	8003f24 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fd f9f0 	bl	8001d98 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049bc:	f7fd f9ec 	bl	8001d98 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e0f8      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80049ce:	f7ff faba 	bl	8003f46 <LL_RCC_HSI48_IsReady>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f1      	bne.n	80049bc <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80ee 	beq.w	8004bbe <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e2:	f7ff fc18 	bl	8004216 <LL_RCC_GetSysClkSource>
 80049e6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80049e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	f040 80af 	bne.w	8004b58 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0203 	and.w	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d123      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d11c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d114      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d10d      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d106      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d05d      	beq.n	8004b0c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b0c      	cmp	r3, #12
 8004a54:	d058      	beq.n	8004b08 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0ab      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a68:	f7ff fc73 	bl	8004352 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a6c:	f7fd f994 	bl	8001d98 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fd f990 	bl	8001d98 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e09c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ef      	bne.n	8004a74 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	4b3e      	ldr	r3, [pc, #248]	; (8004b94 <HAL_RCC_OscConfig+0x6e4>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aac:	0212      	lsls	r2, r2, #8
 8004aae:	4311      	orrs	r1, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aba:	4311      	orrs	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004aca:	f7ff fc33 	bl	8004334 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004adc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ade:	f7fd f95b 	bl	8001d98 <HAL_GetTick>
 8004ae2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7fd f957 	bl	8001d98 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e063      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ef      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b06:	e05a      	b.n	8004bbe <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e059      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d151      	bne.n	8004bbe <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b1a:	f7ff fc0b 	bl	8004334 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b2e:	f7fd f933 	bl	8001d98 <HAL_GetTick>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fd f92f 	bl	8001d98 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e03b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ef      	beq.n	8004b36 <HAL_RCC_OscConfig+0x686>
 8004b56:	e032      	b.n	8004bbe <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b0c      	cmp	r3, #12
 8004b5c:	d02d      	beq.n	8004bba <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	f7ff fbf8 	bl	8004352 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6c:	f023 0303 	bic.w	r3, r3, #3
 8004b70:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fd f907 	bl	8001d98 <HAL_GetTick>
 8004b8a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8c:	e00d      	b.n	8004baa <HAL_RCC_OscConfig+0x6fa>
 8004b8e:	bf00      	nop
 8004b90:	58000400 	.word	0x58000400
 8004b94:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fd f8fe 	bl	8001d98 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ef      	bne.n	8004b98 <HAL_RCC_OscConfig+0x6e8>
 8004bb8:	e001      	b.n	8004bbe <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3734      	adds	r7, #52	; 0x34
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e12d      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b98      	ldr	r3, [pc, #608]	; (8004e40 <HAL_RCC_ClockConfig+0x278>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d91b      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b95      	ldr	r3, [pc, #596]	; (8004e40 <HAL_RCC_ClockConfig+0x278>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 0207 	bic.w	r2, r3, #7
 8004bf2:	4993      	ldr	r1, [pc, #588]	; (8004e40 <HAL_RCC_ClockConfig+0x278>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfa:	f7fd f8cd 	bl	8001d98 <HAL_GetTick>
 8004bfe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c02:	f7fd f8c9 	bl	8001d98 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e111      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c14:	4b8a      	ldr	r3, [pc, #552]	; (8004e40 <HAL_RCC_ClockConfig+0x278>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d1ef      	bne.n	8004c02 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d016      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff fafb 	bl	800422e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c38:	f7fd f8ae 	bl	8001d98 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c40:	f7fd f8aa 	bl	8001d98 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e0f2      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c52:	f7ff fbd0 	bl	80043f6 <LL_RCC_IsActiveFlag_HPRE>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f1      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d016      	beq.n	8004c96 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff faf2 	bl	8004256 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c72:	f7fd f891 	bl	8001d98 <HAL_GetTick>
 8004c76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c7a:	f7fd f88d 	bl	8001d98 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0d5      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c8c:	f7ff fbc5 	bl	800441a <LL_RCC_IsActiveFlag_C2HPRE>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f1      	beq.n	8004c7a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff faeb 	bl	8004282 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cac:	f7fd f874 	bl	8001d98 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cb4:	f7fd f870 	bl	8001d98 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e0b8      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004cc6:	f7ff fbbb 	bl	8004440 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f1      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d016      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fae5 	bl	80042b0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ce6:	f7fd f857 	bl	8001d98 <HAL_GetTick>
 8004cea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cee:	f7fd f853 	bl	8001d98 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e09b      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d00:	f7ff fbb1 	bl	8004466 <LL_RCC_IsActiveFlag_PPRE1>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f1      	beq.n	8004cee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d017      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fadb 	bl	80042d8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d22:	f7fd f839 	bl	8001d98 <HAL_GetTick>
 8004d26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d2a:	f7fd f835 	bl	8001d98 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e07d      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d3c:	f7ff fba5 	bl	800448a <LL_RCC_IsActiveFlag_PPRE2>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f1      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d043      	beq.n	8004dda <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d106      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004d5a:	f7ff f87b 	bl	8003e54 <LL_RCC_HSE_IsReady>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11e      	bne.n	8004da2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e067      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004d70:	f7ff fafe 	bl	8004370 <LL_RCC_PLL_IsReady>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d113      	bne.n	8004da2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e05c      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004d86:	f7ff f9e3 	bl	8004150 <LL_RCC_MSI_IsReady>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d108      	bne.n	8004da2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e051      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004d94:	f7ff f88e 	bl	8003eb4 <LL_RCC_HSI_IsReady>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e04a      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fa21 	bl	80041ee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fc fff4 	bl	8001d98 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db4:	f7fc fff0 	bl	8001d98 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e036      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	f7ff fa24 	bl	8004216 <LL_RCC_GetSysClkSource>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d1ec      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dda:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_ClockConfig+0x278>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d21b      	bcs.n	8004e20 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de8:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <HAL_RCC_ClockConfig+0x278>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f023 0207 	bic.w	r2, r3, #7
 8004df0:	4913      	ldr	r1, [pc, #76]	; (8004e40 <HAL_RCC_ClockConfig+0x278>)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df8:	f7fc ffce 	bl	8001d98 <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e00:	f7fc ffca 	bl	8001d98 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e012      	b.n	8004e38 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_ClockConfig+0x278>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1ef      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e20:	f000 f87e 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4a07      	ldr	r2, [pc, #28]	; (8004e44 <HAL_RCC_ClockConfig+0x27c>)
 8004e28:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004e2a:	f7fc ffc1 	bl	8001db0 <HAL_GetTickPrio>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fc ff63 	bl	8001cfc <HAL_InitTick>
 8004e36:	4603      	mov	r3, r0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	58004000 	.word	0x58004000
 8004e44:	2000001c 	.word	0x2000001c

08004e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e4e:	f7ff f9e2 	bl	8004216 <LL_RCC_GetSysClkSource>
 8004e52:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e5a:	f7ff f99e 	bl	800419a <LL_RCC_MSI_GetRange>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e04b      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d102      	bne.n	8004e7c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e76:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e045      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d10a      	bne.n	8004e98 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e82:	f7fe ffb7 	bl	8003df4 <LL_RCC_HSE_IsEnabledDiv2>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d102      	bne.n	8004e92 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004e8c:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e03a      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004e92:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e037      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004e98:	f7ff faa1 	bl	80043de <LL_RCC_PLL_GetMainSource>
 8004e9c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d003      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x64>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x6a>
 8004eaa:	e00d      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004eac:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004eae:	60bb      	str	r3, [r7, #8]
        break;
 8004eb0:	e015      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004eb2:	f7fe ff9f 	bl	8003df4 <LL_RCC_HSE_IsEnabledDiv2>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ebe:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ec0:	e00d      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ec4:	60bb      	str	r3, [r7, #8]
        break;
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ec8:	f7ff f967 	bl	800419a <LL_RCC_MSI_GetRange>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	4a0f      	ldr	r2, [pc, #60]	; (8004f14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eda:	60bb      	str	r3, [r7, #8]
        break;
 8004edc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004ede:	f7ff fa59 	bl	8004394 <LL_RCC_PLL_GetN>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	fb03 f402 	mul.w	r4, r3, r2
 8004eea:	f7ff fa6c 	bl	80043c6 <LL_RCC_PLL_GetDivider>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ef8:	f7ff fa59 	bl	80043ae <LL_RCC_PLL_GetR>
 8004efc:	4603      	mov	r3, r0
 8004efe:	0f5b      	lsrs	r3, r3, #29
 8004f00:	3301      	adds	r3, #1
 8004f02:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f06:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004f08:	68fb      	ldr	r3, [r7, #12]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}
 8004f12:	bf00      	nop
 8004f14:	0800ac10 	.word	0x0800ac10
 8004f18:	00f42400 	.word	0x00f42400
 8004f1c:	007a1200 	.word	0x007a1200

08004f20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f20:	b598      	push	{r3, r4, r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f24:	f7ff ff90 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8004f28:	4604      	mov	r4, r0
 8004f2a:	f7ff f9e9 	bl	8004300 <LL_RCC_GetAHBPrescaler>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	4a03      	ldr	r2, [pc, #12]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd98      	pop	{r3, r4, r7, pc}
 8004f44:	0800abd0 	.word	0x0800abd0

08004f48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2bb0      	cmp	r3, #176	; 0xb0
 8004f54:	d903      	bls.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004f56:	4b15      	ldr	r3, [pc, #84]	; (8004fac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e007      	b.n	8004f6e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	4a11      	ldr	r2, [pc, #68]	; (8004fac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004f6e:	f7ff f9d3 	bl	8004318 <LL_RCC_GetAHB4Prescaler>
 8004f72:	4603      	mov	r3, r0
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	0c9c      	lsrs	r4, r3, #18
 8004f92:	f7fe ff11 	bl	8003db8 <HAL_PWREx_GetVoltageRange>
 8004f96:	4603      	mov	r3, r0
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 f80c 	bl	8004fb8 <RCC_SetFlashLatency>
 8004fa0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd90      	pop	{r4, r7, pc}
 8004faa:	bf00      	nop
 8004fac:	0800ac10 	.word	0x0800ac10
 8004fb0:	0800abd0 	.word	0x0800abd0
 8004fb4:	431bde83 	.word	0x431bde83

08004fb8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b093      	sub	sp, #76	; 0x4c
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004fc2:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <RCC_SetFlashLatency+0xf0>)
 8004fc4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004fce:	4a37      	ldr	r2, [pc, #220]	; (80050ac <RCC_SetFlashLatency+0xf4>)
 8004fd0:	f107 031c 	add.w	r3, r7, #28
 8004fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004fda:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <RCC_SetFlashLatency+0xf8>)
 8004fdc:	f107 040c 	add.w	r4, r7, #12
 8004fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff0:	d11c      	bne.n	800502c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff6:	e015      	b.n	8005024 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005000:	4413      	add	r3, r2
 8005002:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d808      	bhi.n	800501e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005014:	4413      	add	r3, r2
 8005016:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800501a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800501c:	e022      	b.n	8005064 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800501e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005020:	3301      	adds	r3, #1
 8005022:	643b      	str	r3, [r7, #64]	; 0x40
 8005024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005026:	2b03      	cmp	r3, #3
 8005028:	d9e6      	bls.n	8004ff8 <RCC_SetFlashLatency+0x40>
 800502a:	e01b      	b.n	8005064 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800502c:	2300      	movs	r3, #0
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005030:	e015      	b.n	800505e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800503a:	4413      	add	r3, r2
 800503c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	429a      	cmp	r2, r3
 8005044:	d808      	bhi.n	8005058 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800504e:	4413      	add	r3, r2
 8005050:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005054:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005056:	e005      	b.n	8005064 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505a:	3301      	adds	r3, #1
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005060:	2b02      	cmp	r3, #2
 8005062:	d9e6      	bls.n	8005032 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <RCC_SetFlashLatency+0xfc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 0207 	bic.w	r2, r3, #7
 800506c:	4911      	ldr	r1, [pc, #68]	; (80050b4 <RCC_SetFlashLatency+0xfc>)
 800506e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005074:	f7fc fe90 	bl	8001d98 <HAL_GetTick>
 8005078:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800507a:	e008      	b.n	800508e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800507c:	f7fc fe8c 	bl	8001d98 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e007      	b.n	800509e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <RCC_SetFlashLatency+0xfc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005098:	429a      	cmp	r2, r3
 800509a:	d1ef      	bne.n	800507c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	374c      	adds	r7, #76	; 0x4c
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd90      	pop	{r4, r7, pc}
 80050a6:	bf00      	nop
 80050a8:	0800ab5c 	.word	0x0800ab5c
 80050ac:	0800ab6c 	.word	0x0800ab6c
 80050b0:	0800ab78 	.word	0x0800ab78
 80050b4:	58004000 	.word	0x58004000

080050b8 <LL_RCC_LSE_IsEnabled>:
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <LL_RCC_LSE_IsEnabled+0x18>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <LL_RCC_LSE_IsEnabled+0x1a>
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <LL_RCC_LSE_IsReady>:
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d101      	bne.n	80050f4 <LL_RCC_LSE_IsReady+0x18>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <LL_RCC_LSE_IsReady+0x1a>
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <LL_RCC_MSI_EnablePLLMode>:
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510e:	f043 0304 	orr.w	r3, r3, #4
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_RCC_SetRFWKPClockSource>:
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <LL_RCC_SetSMPSClockSource>:
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f023 0203 	bic.w	r2, r3, #3
 800515c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4313      	orrs	r3, r2
 8005164:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_RCC_SetSMPSPrescaler>:
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4313      	orrs	r3, r2
 800518c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <LL_RCC_SetUSARTClockSource>:
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80051a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <LL_RCC_SetLPUARTClockSource>:
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <LL_RCC_SetI2CClockSource>:
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800520a:	43db      	mvns	r3, r3
 800520c:	401a      	ands	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_RCC_SetLPTIMClockSource>:
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005238:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	43db      	mvns	r3, r3
 8005244:	401a      	ands	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <LL_RCC_SetSAIClockSource>:
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <LL_RCC_SetRNGClockSource>:
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <LL_RCC_SetCLK48ClockSource>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80052c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_SetUSBClockSource>:
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ffe3 	bl	80052b8 <LL_RCC_SetCLK48ClockSource>
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <LL_RCC_SetADCClockSource>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800530e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_RCC_SetRTCClockSource>:
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800533a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <LL_RCC_GetRTCClockSource>:
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005362:	4618      	mov	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <LL_RCC_ForceBackupDomainReset>:
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800537c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <LL_RCC_ReleaseBackupDomainReset>:
{
 800538e:	b480      	push	{r7}
 8005390:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053a6:	bf00      	nop
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <LL_RCC_PLLSAI1_Enable>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80053b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c2:	6013      	str	r3, [r2, #0]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <LL_RCC_PLLSAI1_Disable>:
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80053d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053e0:	6013      	str	r3, [r2, #0]
}
 80053e2:	bf00      	nop
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <LL_RCC_PLLSAI1_IsReady>:
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80053f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053fe:	d101      	bne.n	8005404 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005418:	2300      	movs	r3, #0
 800541a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800541c:	2300      	movs	r3, #0
 800541e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d034      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005434:	d021      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005436:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800543a:	d81b      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800543c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005440:	d01d      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005446:	d815      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00b      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800544c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005450:	d110      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005460:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005462:	e00d      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f94d 	bl	8005708 <RCCEx_PLLSAI1_ConfigNP>
 800546e:	4603      	mov	r3, r0
 8005470:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005472:	e005      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
        break;
 8005478:	e002      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800547e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005480:	7ffb      	ldrb	r3, [r7, #31]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d105      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fee8 	bl	8005260 <LL_RCC_SetSAIClockSource>
 8005490:	e001      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005492:	7ffb      	ldrb	r3, [r7, #31]
 8005494:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d046      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80054a2:	f7ff ff56 	bl	8005352 <LL_RCC_GetRTCClockSource>
 80054a6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d03c      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80054b2:	f7fe fc71 	bl	8003d98 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff ff30 	bl	8005326 <LL_RCC_SetRTCClockSource>
 80054c6:	e02e      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80054c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80054d2:	f7ff ff4b 	bl	800536c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80054d6:	f7ff ff5a 	bl	800538e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80054e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80054f2:	f7ff fde1 	bl	80050b8 <LL_RCC_LSE_IsEnabled>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d114      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054fc:	f7fc fc4c 	bl	8001d98 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005502:	e00b      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005504:	f7fc fc48 	bl	8001d98 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005512:	4293      	cmp	r3, r2
 8005514:	d902      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	77fb      	strb	r3, [r7, #31]
              break;
 800551a:	e004      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800551c:	f7ff fdde 	bl	80050dc <LL_RCC_LSE_IsReady>
 8005520:	4603      	mov	r3, r0
 8005522:	2b01      	cmp	r3, #1
 8005524:	d1ee      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005526:	7ffb      	ldrb	r3, [r7, #31]
 8005528:	77bb      	strb	r3, [r7, #30]
 800552a:	e001      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552c:	7ffb      	ldrb	r3, [r7, #31]
 800552e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fe2a 	bl	800519a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fe35 	bl	80051c6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fe5d 	bl	800522c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fe52 	bl	800522c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fe2a 	bl	80051f2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fe1f 	bl	80051f2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d022      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fe8d 	bl	80052e4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d2:	d107      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ec:	d10b      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f8e3 	bl	80057be <RCCEx_PLLSAI1_ConfigNQ>
 80055f8:	4603      	mov	r3, r0
 80055fa:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80055fc:	7ffb      	ldrb	r3, [r7, #31]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005602:	7ffb      	ldrb	r3, [r7, #31]
 8005604:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02b      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561a:	d008      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005624:	d003      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fe2a 	bl	800528c <LL_RCC_SetRNGClockSource>
 8005638:	e00a      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	2000      	movs	r0, #0
 8005646:	f7ff fe21 	bl	800528c <LL_RCC_SetRNGClockSource>
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fe34 	bl	80052b8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005658:	d107      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800565a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005668:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005672:	2b00      	cmp	r3, #0
 8005674:	d022      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fe3d 	bl	80052fa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005688:	d107      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005698:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a2:	d10b      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 f8e3 	bl	8005874 <RCCEx_PLLSAI1_ConfigNR>
 80056ae:	4603      	mov	r3, r0
 80056b0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80056b2:	7ffb      	ldrb	r3, [r7, #31]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80056b8:	7ffb      	ldrb	r3, [r7, #31]
 80056ba:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fd26 	bl	800511e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fd45 	bl	8005172 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fd2c 	bl	800514a <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80056f2:	7fbb      	ldrb	r3, [r7, #30]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005700:	f7ff fcfe 	bl	8005100 <LL_RCC_MSI_EnablePLLMode>
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}

08005708 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005714:	f7ff fe5b 	bl	80053ce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005718:	f7fc fb3e 	bl	8001d98 <HAL_GetTick>
 800571c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800571e:	e009      	b.n	8005734 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005720:	f7fc fb3a 	bl	8001d98 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d902      	bls.n	8005734 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e004      	b.n	800573e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005734:	f7ff fe5a 	bl	80053ec <LL_RCC_PLLSAI1_IsReady>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d137      	bne.n	80057b4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005758:	4313      	orrs	r3, r2
 800575a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800575c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800576e:	4313      	orrs	r3, r2
 8005770:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005772:	f7ff fe1d 	bl	80053b0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005776:	f7fc fb0f 	bl	8001d98 <HAL_GetTick>
 800577a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800577c:	e009      	b.n	8005792 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800577e:	f7fc fb0b 	bl	8001d98 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d902      	bls.n	8005792 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	73fb      	strb	r3, [r7, #15]
        break;
 8005790:	e004      	b.n	800579c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005792:	f7ff fe2b 	bl	80053ec <LL_RCC_PLLSAI1_IsReady>
 8005796:	4603      	mov	r3, r0
 8005798:	2b01      	cmp	r3, #1
 800579a:	d1f0      	bne.n	800577e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d108      	bne.n	80057b4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80057a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b0:	4313      	orrs	r3, r2
 80057b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057ca:	f7ff fe00 	bl	80053ce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057ce:	f7fc fae3 	bl	8001d98 <HAL_GetTick>
 80057d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057d4:	e009      	b.n	80057ea <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d6:	f7fc fadf 	bl	8001d98 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d902      	bls.n	80057ea <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	73fb      	strb	r3, [r7, #15]
      break;
 80057e8:	e004      	b.n	80057f4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057ea:	f7ff fdff 	bl	80053ec <LL_RCC_PLLSAI1_IsReady>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d137      	bne.n	800586a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800580e:	4313      	orrs	r3, r2
 8005810:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005824:	4313      	orrs	r3, r2
 8005826:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005828:	f7ff fdc2 	bl	80053b0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582c:	f7fc fab4 	bl	8001d98 <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005832:	e009      	b.n	8005848 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005834:	f7fc fab0 	bl	8001d98 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d902      	bls.n	8005848 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	73fb      	strb	r3, [r7, #15]
        break;
 8005846:	e004      	b.n	8005852 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005848:	f7ff fdd0 	bl	80053ec <LL_RCC_PLLSAI1_IsReady>
 800584c:	4603      	mov	r3, r0
 800584e:	2b01      	cmp	r3, #1
 8005850:	d1f0      	bne.n	8005834 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005866:	4313      	orrs	r3, r2
 8005868:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005880:	f7ff fda5 	bl	80053ce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005884:	f7fc fa88 	bl	8001d98 <HAL_GetTick>
 8005888:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800588a:	e009      	b.n	80058a0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800588c:	f7fc fa84 	bl	8001d98 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d902      	bls.n	80058a0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	73fb      	strb	r3, [r7, #15]
      break;
 800589e:	e004      	b.n	80058aa <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058a0:	f7ff fda4 	bl	80053ec <LL_RCC_PLLSAI1_IsReady>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d137      	bne.n	8005920 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c4:	4313      	orrs	r3, r2
 80058c6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058da:	4313      	orrs	r3, r2
 80058dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058de:	f7ff fd67 	bl	80053b0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e2:	f7fc fa59 	bl	8001d98 <HAL_GetTick>
 80058e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058e8:	e009      	b.n	80058fe <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ea:	f7fc fa55 	bl	8001d98 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d902      	bls.n	80058fe <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	73fb      	strb	r3, [r7, #15]
        break;
 80058fc:	e004      	b.n	8005908 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058fe:	f7ff fd75 	bl	80053ec <LL_RCC_PLLSAI1_IsReady>
 8005902:	4603      	mov	r3, r0
 8005904:	2b01      	cmp	r3, #1
 8005906:	d1f0      	bne.n	80058ea <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800590e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800591c:	4313      	orrs	r3, r2
 800591e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e095      	b.n	8005a68 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	d108      	bne.n	8005956 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594c:	d009      	beq.n	8005962 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	61da      	str	r2, [r3, #28]
 8005954:	e005      	b.n	8005962 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fb ffcf 	bl	8001920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005998:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059a2:	d902      	bls.n	80059aa <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e002      	b.n	80059b0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059b8:	d007      	beq.n	80059ca <HAL_SPI_Init+0xa0>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	ea42 0103 	orr.w	r1, r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	f003 0204 	and.w	r2, r3, #4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	f003 0310 	and.w	r3, r3, #16
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a46:	ea42 0103 	orr.w	r1, r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_SPI_Transmit+0x22>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e158      	b.n	8005d44 <HAL_SPI_Transmit+0x2d4>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a9a:	f7fc f97d 	bl	8001d98 <HAL_GetTick>
 8005a9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d002      	beq.n	8005ab6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ab4:	e13d      	b.n	8005d32 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_Transmit+0x52>
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ac6:	e134      	b.n	8005d32 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2203      	movs	r2, #3
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	88fa      	ldrh	r2, [r7, #6]
 8005ae6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	d10f      	bne.n	8005b34 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d007      	beq.n	8005b52 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b5a:	d94b      	bls.n	8005bf4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_SPI_Transmit+0xfa>
 8005b64:	8afb      	ldrh	r3, [r7, #22]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d13e      	bne.n	8005be8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	1c9a      	adds	r2, r3, #2
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b8e:	e02b      	b.n	8005be8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d112      	bne.n	8005bc4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	881a      	ldrh	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	1c9a      	adds	r2, r3, #2
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bc2:	e011      	b.n	8005be8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc4:	f7fc f8e8 	bl	8001d98 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d803      	bhi.n	8005bdc <HAL_SPI_Transmit+0x16c>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d102      	bne.n	8005be2 <HAL_SPI_Transmit+0x172>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005be6:	e0a4      	b.n	8005d32 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1ce      	bne.n	8005b90 <HAL_SPI_Transmit+0x120>
 8005bf2:	e07c      	b.n	8005cee <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <HAL_SPI_Transmit+0x192>
 8005bfc:	8afb      	ldrh	r3, [r7, #22]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d170      	bne.n	8005ce4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d912      	bls.n	8005c32 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	881a      	ldrh	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	1c9a      	adds	r2, r3, #2
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b02      	subs	r3, #2
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c30:	e058      	b.n	8005ce4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c58:	e044      	b.n	8005ce4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d12b      	bne.n	8005cc0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d912      	bls.n	8005c98 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	881a      	ldrh	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	1c9a      	adds	r2, r3, #2
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b02      	subs	r3, #2
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c96:	e025      	b.n	8005ce4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	7812      	ldrb	r2, [r2, #0]
 8005ca4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cbe:	e011      	b.n	8005ce4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cc0:	f7fc f86a 	bl	8001d98 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d803      	bhi.n	8005cd8 <HAL_SPI_Transmit+0x268>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d102      	bne.n	8005cde <HAL_SPI_Transmit+0x26e>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d102      	bne.n	8005ce4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ce2:	e026      	b.n	8005d32 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1b5      	bne.n	8005c5a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fce4 	bl	80066c0 <SPI_EndRxTxTransaction>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e000      	b.n	8005d32 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005d30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d68:	d112      	bne.n	8005d90 <HAL_SPI_Receive+0x44>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10e      	bne.n	8005d90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2204      	movs	r2, #4
 8005d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f910 	bl	8005fac <HAL_SPI_TransmitReceive>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	e109      	b.n	8005fa4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_SPI_Receive+0x52>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e102      	b.n	8005fa4 <HAL_SPI_Receive+0x258>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005da6:	f7fb fff7 	bl	8001d98 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d002      	beq.n	8005dbe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
 8005dba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dbc:	e0e9      	b.n	8005f92 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_SPI_Receive+0x7e>
 8005dc4:	88fb      	ldrh	r3, [r7, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dce:	e0e0      	b.n	8005f92 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2204      	movs	r2, #4
 8005dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e1a:	d908      	bls.n	8005e2e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	e007      	b.n	8005e3e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e46:	d10f      	bne.n	8005e68 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d007      	beq.n	8005e86 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e8e:	d867      	bhi.n	8005f60 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e90:	e030      	b.n	8005ef4 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d117      	bne.n	8005ed0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f103 020c 	add.w	r2, r3, #12
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	7812      	ldrb	r2, [r2, #0]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ece:	e011      	b.n	8005ef4 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed0:	f7fb ff62 	bl	8001d98 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d803      	bhi.n	8005ee8 <HAL_SPI_Receive+0x19c>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d102      	bne.n	8005eee <HAL_SPI_Receive+0x1a2>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ef2:	e04e      	b.n	8005f92 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1c8      	bne.n	8005e92 <HAL_SPI_Receive+0x146>
 8005f00:	e034      	b.n	8005f6c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d115      	bne.n	8005f3c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	b292      	uxth	r2, r2
 8005f1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	1c9a      	adds	r2, r3, #2
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f3a:	e011      	b.n	8005f60 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f3c:	f7fb ff2c 	bl	8001d98 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d803      	bhi.n	8005f54 <HAL_SPI_Receive+0x208>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f52:	d102      	bne.n	8005f5a <HAL_SPI_Receive+0x20e>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f5e:	e018      	b.n	8005f92 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1ca      	bne.n	8005f02 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 fb4d 	bl	8006610 <SPI_EndRxTransaction>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	75fb      	strb	r3, [r7, #23]
 8005f8e:	e000      	b.n	8005f92 <HAL_SPI_Receive+0x246>
  }

error :
 8005f90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x26>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e1fb      	b.n	80063ca <HAL_SPI_TransmitReceive+0x41e>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fda:	f7fb fedd 	bl	8001d98 <HAL_GetTick>
 8005fde:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fe6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fee:	887b      	ldrh	r3, [r7, #2]
 8005ff0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ff2:	887b      	ldrh	r3, [r7, #2]
 8005ff4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ff6:	7efb      	ldrb	r3, [r7, #27]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d00e      	beq.n	800601a <HAL_SPI_TransmitReceive+0x6e>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006002:	d106      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x66>
 800600c:	7efb      	ldrb	r3, [r7, #27]
 800600e:	2b04      	cmp	r3, #4
 8006010:	d003      	beq.n	800601a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006012:	2302      	movs	r3, #2
 8006014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006018:	e1cd      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <HAL_SPI_TransmitReceive+0x80>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_SPI_TransmitReceive+0x80>
 8006026:	887b      	ldrh	r3, [r7, #2]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006032:	e1c0      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b04      	cmp	r3, #4
 800603e:	d003      	beq.n	8006048 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2205      	movs	r2, #5
 8006044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	887a      	ldrh	r2, [r7, #2]
 8006060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	887a      	ldrh	r2, [r7, #2]
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	887a      	ldrh	r2, [r7, #2]
 8006074:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800608a:	d802      	bhi.n	8006092 <HAL_SPI_TransmitReceive+0xe6>
 800608c:	8a3b      	ldrh	r3, [r7, #16]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d908      	bls.n	80060a4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	e007      	b.n	80060b4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	d007      	beq.n	80060d2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060da:	d97c      	bls.n	80061d6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_TransmitReceive+0x13e>
 80060e4:	8a7b      	ldrh	r3, [r7, #18]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d169      	bne.n	80061be <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	1c9a      	adds	r2, r3, #2
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800610e:	e056      	b.n	80061be <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b02      	cmp	r3, #2
 800611c:	d11b      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x1aa>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d016      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x1aa>
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2b01      	cmp	r3, #1
 800612c:	d113      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	881a      	ldrh	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	d11c      	bne.n	800619e <HAL_SPI_TransmitReceive+0x1f2>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d016      	beq.n	800619e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	b292      	uxth	r2, r2
 800617c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	1c9a      	adds	r2, r3, #2
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800619a:	2301      	movs	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800619e:	f7fb fdfb 	bl	8001d98 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d807      	bhi.n	80061be <HAL_SPI_TransmitReceive+0x212>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d003      	beq.n	80061be <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061bc:	e0fb      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1a3      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x164>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d19d      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x164>
 80061d4:	e0df      	b.n	8006396 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x23a>
 80061de:	8a7b      	ldrh	r3, [r7, #18]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f040 80cb 	bne.w	800637c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d912      	bls.n	8006216 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	1c9a      	adds	r2, r3, #2
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b02      	subs	r3, #2
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006214:	e0b2      	b.n	800637c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	330c      	adds	r3, #12
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800623c:	e09e      	b.n	800637c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b02      	cmp	r3, #2
 800624a:	d134      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x30a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d02f      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x30a>
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2b01      	cmp	r3, #1
 800625a:	d12c      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d912      	bls.n	800628c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	881a      	ldrh	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	1c9a      	adds	r2, r3, #2
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b02      	subs	r3, #2
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	87da      	strh	r2, [r3, #62]	; 0x3e
 800628a:	e012      	b.n	80062b2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	7812      	ldrb	r2, [r2, #0]
 8006298:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d148      	bne.n	8006356 <HAL_SPI_TransmitReceive+0x3aa>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d042      	beq.n	8006356 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d923      	bls.n	8006324 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	b292      	uxth	r2, r2
 80062e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	1c9a      	adds	r2, r3, #2
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b02      	subs	r3, #2
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d81f      	bhi.n	8006352 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	e016      	b.n	8006352 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f103 020c 	add.w	r2, r3, #12
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	7812      	ldrb	r2, [r2, #0]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006352:	2301      	movs	r3, #1
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006356:	f7fb fd1f 	bl	8001d98 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006362:	429a      	cmp	r2, r3
 8006364:	d803      	bhi.n	800636e <HAL_SPI_TransmitReceive+0x3c2>
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d102      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x3c8>
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800637a:	e01c      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	f47f af5b 	bne.w	800623e <HAL_SPI_TransmitReceive+0x292>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	f47f af54 	bne.w	800623e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f990 	bl	80066c0 <SPI_EndRxTxTransaction>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d006      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	661a      	str	r2, [r3, #96]	; 0x60
 80063b2:	e000      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80063b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3728      	adds	r7, #40	; 0x28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	4613      	mov	r3, r2
 80063e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063e4:	f7fb fcd8 	bl	8001d98 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	1a9b      	subs	r3, r3, r2
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	4413      	add	r3, r2
 80063f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063f4:	f7fb fcd0 	bl	8001d98 <HAL_GetTick>
 80063f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063fa:	4b39      	ldr	r3, [pc, #228]	; (80064e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	015b      	lsls	r3, r3, #5
 8006400:	0d1b      	lsrs	r3, r3, #20
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	fb02 f303 	mul.w	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800640a:	e054      	b.n	80064b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006412:	d050      	beq.n	80064b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006414:	f7fb fcc0 	bl	8001d98 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	429a      	cmp	r2, r3
 8006422:	d902      	bls.n	800642a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d13d      	bne.n	80064a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006442:	d111      	bne.n	8006468 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800644c:	d004      	beq.n	8006458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006456:	d107      	bne.n	8006468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006470:	d10f      	bne.n	8006492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e017      	b.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d19b      	bne.n	800640c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2000001c 	.word	0x2000001c

080064e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064f6:	f7fb fc4f 	bl	8001d98 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	4413      	add	r3, r2
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006506:	f7fb fc47 	bl	8001d98 <HAL_GetTick>
 800650a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006514:	4b3d      	ldr	r3, [pc, #244]	; (800660c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	00da      	lsls	r2, r3, #3
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	0d1b      	lsrs	r3, r3, #20
 8006524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006526:	fb02 f303 	mul.w	r3, r2, r3
 800652a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800652c:	e060      	b.n	80065f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006534:	d107      	bne.n	8006546 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006544:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d050      	beq.n	80065f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800654e:	f7fb fc23 	bl	8001d98 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	429a      	cmp	r2, r3
 800655c:	d902      	bls.n	8006564 <SPI_WaitFifoStateUntilTimeout+0x80>
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d13d      	bne.n	80065e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006572:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800657c:	d111      	bne.n	80065a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006586:	d004      	beq.n	8006592 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006590:	d107      	bne.n	80065a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065aa:	d10f      	bne.n	80065cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e010      	b.n	8006602 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	4013      	ands	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d196      	bne.n	800652e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3728      	adds	r7, #40	; 0x28
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	2000001c 	.word	0x2000001c

08006610 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af02      	add	r7, sp, #8
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006624:	d111      	bne.n	800664a <SPI_EndRxTransaction+0x3a>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662e:	d004      	beq.n	800663a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006638:	d107      	bne.n	800664a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006648:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff febd 	bl	80063d4 <SPI_WaitFlagStateUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e023      	b.n	80066b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006678:	d11d      	bne.n	80066b6 <SPI_EndRxTransaction+0xa6>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006682:	d004      	beq.n	800668e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668c:	d113      	bne.n	80066b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2200      	movs	r2, #0
 8006696:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff ff22 	bl	80064e4 <SPI_WaitFifoStateUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066aa:	f043 0220 	orr.w	r2, r3, #32
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e000      	b.n	80066b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff ff03 	bl	80064e4 <SPI_WaitFifoStateUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e027      	b.n	8006744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2200      	movs	r2, #0
 80066fc:	2180      	movs	r1, #128	; 0x80
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff fe68 	bl	80063d4 <SPI_WaitFlagStateUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670e:	f043 0220 	orr.w	r2, r3, #32
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e014      	b.n	8006744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff fedc 	bl	80064e4 <SPI_WaitFifoStateUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d007      	beq.n	8006742 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e000      	b.n	8006744 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e097      	b.n	8006890 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d106      	bne.n	800677a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fb fa39 	bl	8001bec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006790:	f023 0307 	bic.w	r3, r3, #7
 8006794:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f000 f907 	bl	80069b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ce:	f023 0303 	bic.w	r3, r3, #3
 80067d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	4313      	orrs	r3, r2
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80067ec:	f023 030c 	bic.w	r3, r3, #12
 80067f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	4313      	orrs	r3, r2
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	011a      	lsls	r2, r3, #4
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	031b      	lsls	r3, r3, #12
 800681c:	4313      	orrs	r3, r2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006832:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	4313      	orrs	r3, r2
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d110      	bne.n	80068ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d102      	bne.n	80068d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068ce:	7b7b      	ldrb	r3, [r7, #13]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d001      	beq.n	80068d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e069      	b.n	80069ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e8:	e031      	b.n	800694e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d110      	bne.n	8006912 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d102      	bne.n	80068fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068f6:	7b3b      	ldrb	r3, [r7, #12]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d001      	beq.n	8006900 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e055      	b.n	80069ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006910:	e01d      	b.n	800694e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d108      	bne.n	800692a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d105      	bne.n	800692a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800691e:	7b7b      	ldrb	r3, [r7, #13]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d102      	bne.n	800692a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006924:	7b3b      	ldrb	r3, [r7, #12]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d001      	beq.n	800692e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e03e      	b.n	80069ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2202      	movs	r2, #2
 800693a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_TIM_Encoder_Start+0xc4>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b04      	cmp	r3, #4
 8006958:	d008      	beq.n	800696c <HAL_TIM_Encoder_Start+0xd4>
 800695a:	e00f      	b.n	800697c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2201      	movs	r2, #1
 8006962:	2100      	movs	r1, #0
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f889 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 800696a:	e016      	b.n	800699a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2201      	movs	r2, #1
 8006972:	2104      	movs	r1, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f000 f881 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 800697a:	e00e      	b.n	800699a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2201      	movs	r2, #1
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f000 f879 	bl	8006a7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2201      	movs	r2, #1
 8006990:	2104      	movs	r1, #4
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f872 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 8006998:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a2a      	ldr	r2, [pc, #168]	; (8006a70 <TIM_Base_SetConfig+0xbc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_Base_SetConfig+0x20>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d2:	d108      	bne.n	80069e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a21      	ldr	r2, [pc, #132]	; (8006a70 <TIM_Base_SetConfig+0xbc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <TIM_Base_SetConfig+0x52>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f4:	d007      	beq.n	8006a06 <TIM_Base_SetConfig+0x52>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1e      	ldr	r2, [pc, #120]	; (8006a74 <TIM_Base_SetConfig+0xc0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_Base_SetConfig+0x52>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1d      	ldr	r2, [pc, #116]	; (8006a78 <TIM_Base_SetConfig+0xc4>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d108      	bne.n	8006a18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <TIM_Base_SetConfig+0xbc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_Base_SetConfig+0xa0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a0b      	ldr	r2, [pc, #44]	; (8006a74 <TIM_Base_SetConfig+0xc0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_Base_SetConfig+0xa0>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <TIM_Base_SetConfig+0xc4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d103      	bne.n	8006a5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	615a      	str	r2, [r3, #20]
}
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800

08006a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2201      	movs	r2, #1
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e04a      	b.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d108      	bne.n	8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a12      	ldr	r2, [pc, #72]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b48:	d10c      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40012c00 	.word	0x40012c00

08006b88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b98:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bbe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006bc2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 0014 	add.w	r0, r7, #20
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	b004      	add	sp, #16
 8006c2c:	4770      	bx	lr
	...

08006c30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b09d      	sub	sp, #116	; 0x74
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	78db      	ldrb	r3, [r3, #3]
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d81f      	bhi.n	8006ca2 <USB_ActivateEndpoint+0x72>
 8006c62:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <USB_ActivateEndpoint+0x38>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c79 	.word	0x08006c79
 8006c6c:	08006c95 	.word	0x08006c95
 8006c70:	08006cab 	.word	0x08006cab
 8006c74:	08006c87 	.word	0x08006c87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006c84:	e012      	b.n	8006cac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c8a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006c8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006c92:	e00b      	b.n	8006cac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006ca0:	e004      	b.n	8006cac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006ca8:	e000      	b.n	8006cac <USB_ActivateEndpoint+0x7c>
      break;
 8006caa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	b21b      	sxth	r3, r3
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	b21a      	sxth	r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b21b      	sxth	r3, r3
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	b21b      	sxth	r3, r3
 8006cf2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	441a      	add	r2, r3
 8006d00:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	7b1b      	ldrb	r3, [r3, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f040 8149 	bne.w	8006fb4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 8084 	beq.w	8006e34 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	00da      	lsls	r2, r3, #3
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	88db      	ldrh	r3, [r3, #6]
 8006d54:	085b      	lsrs	r3, r3, #1
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	827b      	strh	r3, [r7, #18]
 8006d6e:	8a7b      	ldrh	r3, [r7, #18]
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01b      	beq.n	8006db0 <USB_ActivateEndpoint+0x180>
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	823b      	strh	r3, [r7, #16]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	8a3b      	ldrh	r3, [r7, #16]
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d020      	beq.n	8006dfa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dce:	81bb      	strh	r3, [r7, #12]
 8006dd0:	89bb      	ldrh	r3, [r7, #12]
 8006dd2:	f083 0320 	eor.w	r3, r3, #32
 8006dd6:	81bb      	strh	r3, [r7, #12]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	441a      	add	r2, r3
 8006de2:	89bb      	ldrh	r3, [r7, #12]
 8006de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	8013      	strh	r3, [r2, #0]
 8006df8:	e2a6      	b.n	8007348 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e10:	81fb      	strh	r3, [r7, #14]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	89fb      	ldrh	r3, [r7, #14]
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]
 8006e32:	e289      	b.n	8007348 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	4413      	add	r3, r2
 8006e46:	633b      	str	r3, [r7, #48]	; 0x30
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	00da      	lsls	r2, r3, #3
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	4413      	add	r3, r2
 8006e52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	88db      	ldrh	r3, [r3, #6]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	4413      	add	r3, r2
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	00da      	lsls	r2, r3, #3
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	4413      	add	r3, r2
 8006e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b3e      	cmp	r3, #62	; 0x3e
 8006e92:	d918      	bls.n	8006ec6 <USB_ActivateEndpoint+0x296>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 031f 	and.w	r3, r3, #31
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <USB_ActivateEndpoint+0x27e>
 8006ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	029b      	lsls	r3, r3, #10
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e029      	b.n	8006f1a <USB_ActivateEndpoint+0x2ea>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d112      	bne.n	8006ef4 <USB_ActivateEndpoint+0x2c4>
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e012      	b.n	8006f1a <USB_ActivateEndpoint+0x2ea>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <USB_ActivateEndpoint+0x2de>
 8006f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	029b      	lsls	r3, r3, #10
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01b      	beq.n	8006f6a <USB_ActivateEndpoint+0x33a>
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f48:	843b      	strh	r3, [r7, #32]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	8c3b      	ldrh	r3, [r7, #32]
 8006f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f80:	83fb      	strh	r3, [r7, #30]
 8006f82:	8bfb      	ldrh	r3, [r7, #30]
 8006f84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f88:	83fb      	strh	r3, [r7, #30]
 8006f8a:	8bfb      	ldrh	r3, [r7, #30]
 8006f8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f90:	83fb      	strh	r3, [r7, #30]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	441a      	add	r2, r3
 8006f9c:	8bfb      	ldrh	r3, [r7, #30]
 8006f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	8013      	strh	r3, [r2, #0]
 8006fb2:	e1c9      	b.n	8007348 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	78db      	ldrb	r3, [r3, #3]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d11e      	bne.n	8006ffa <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	8013      	strh	r3, [r2, #0]
 8006ff8:	e01d      	b.n	8007036 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800700c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007010:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800702a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007032:	b29b      	uxth	r3, r3
 8007034:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007040:	b29b      	uxth	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007046:	4413      	add	r3, r2
 8007048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	00da      	lsls	r2, r3, #3
 8007050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007052:	4413      	add	r3, r2
 8007054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007058:	65bb      	str	r3, [r7, #88]	; 0x58
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	891b      	ldrh	r3, [r3, #8]
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	b29b      	uxth	r3, r3
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007068:	801a      	strh	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	657b      	str	r3, [r7, #84]	; 0x54
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007074:	b29b      	uxth	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800707a:	4413      	add	r3, r2
 800707c:	657b      	str	r3, [r7, #84]	; 0x54
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	00da      	lsls	r2, r3, #3
 8007084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007086:	4413      	add	r3, r2
 8007088:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800708c:	653b      	str	r3, [r7, #80]	; 0x50
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	895b      	ldrh	r3, [r3, #10]
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	b29b      	uxth	r3, r3
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f040 8093 	bne.w	80071ce <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01b      	beq.n	80070fc <USB_ActivateEndpoint+0x4cc>
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80070e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800710a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01b      	beq.n	800714c <USB_ActivateEndpoint+0x51c>
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	441a      	add	r2, r3
 8007136:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007148:	b29b      	uxth	r3, r3
 800714a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800715e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007162:	873b      	strh	r3, [r7, #56]	; 0x38
 8007164:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007166:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800716a:	873b      	strh	r3, [r7, #56]	; 0x38
 800716c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800716e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007172:	873b      	strh	r3, [r7, #56]	; 0x38
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	441a      	add	r2, r3
 800717e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007190:	b29b      	uxth	r3, r3
 8007192:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071aa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]
 80071cc:	e0bc      	b.n	8007348 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01d      	beq.n	8007226 <USB_ActivateEndpoint+0x5f6>
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007200:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800721e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007222:	b29b      	uxth	r3, r3
 8007224:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007236:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01d      	beq.n	800727e <USB_ActivateEndpoint+0x64e>
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007258:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	441a      	add	r2, r3
 8007266:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007276:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	78db      	ldrb	r3, [r3, #3]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d024      	beq.n	80072d0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800729c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072a4:	f083 0320 	eor.w	r3, r3, #32
 80072a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	441a      	add	r2, r3
 80072b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	8013      	strh	r3, [r2, #0]
 80072ce:	e01d      	b.n	800730c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80072f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007308:	b29b      	uxth	r3, r3
 800730a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	441a      	add	r2, r3
 8007330:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007348:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800734c:	4618      	mov	r0, r3
 800734e:	3774      	adds	r7, #116	; 0x74
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007358:	b480      	push	{r7}
 800735a:	b08d      	sub	sp, #52	; 0x34
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	7b1b      	ldrb	r3, [r3, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f040 808e 	bne.w	8007488 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d044      	beq.n	80073fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	81bb      	strh	r3, [r7, #12]
 8007382:	89bb      	ldrh	r3, [r7, #12]
 8007384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01b      	beq.n	80073c4 <USB_DeactivateEndpoint+0x6c>
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	817b      	strh	r3, [r7, #10]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	897b      	ldrh	r3, [r7, #10]
 80073b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073da:	813b      	strh	r3, [r7, #8]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	441a      	add	r2, r3
 80073e6:	893b      	ldrh	r3, [r7, #8]
 80073e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	8013      	strh	r3, [r2, #0]
 80073fc:	e192      	b.n	8007724 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	827b      	strh	r3, [r7, #18]
 800740c:	8a7b      	ldrh	r3, [r7, #18]
 800740e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01b      	beq.n	800744e <USB_DeactivateEndpoint+0xf6>
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742c:	823b      	strh	r3, [r7, #16]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	441a      	add	r2, r3
 8007438:	8a3b      	ldrh	r3, [r7, #16]
 800743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007464:	81fb      	strh	r3, [r7, #14]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	441a      	add	r2, r3
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007482:	b29b      	uxth	r3, r3
 8007484:	8013      	strh	r3, [r2, #0]
 8007486:	e14d      	b.n	8007724 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 80a5 	bne.w	80075dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	843b      	strh	r3, [r7, #32]
 80074a0:	8c3b      	ldrh	r3, [r7, #32]
 80074a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01b      	beq.n	80074e2 <USB_DeactivateEndpoint+0x18a>
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c0:	83fb      	strh	r3, [r7, #30]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	441a      	add	r2, r3
 80074cc:	8bfb      	ldrh	r3, [r7, #30]
 80074ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074de:	b29b      	uxth	r3, r3
 80074e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	83bb      	strh	r3, [r7, #28]
 80074f0:	8bbb      	ldrh	r3, [r7, #28]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d01b      	beq.n	8007532 <USB_DeactivateEndpoint+0x1da>
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007510:	837b      	strh	r3, [r7, #26]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	441a      	add	r2, r3
 800751c:	8b7b      	ldrh	r3, [r7, #26]
 800751e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800752e:	b29b      	uxth	r3, r3
 8007530:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007548:	833b      	strh	r3, [r7, #24]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	441a      	add	r2, r3
 8007554:	8b3b      	ldrh	r3, [r7, #24]
 8007556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800755e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007562:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007566:	b29b      	uxth	r3, r3
 8007568:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800757c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007580:	82fb      	strh	r3, [r7, #22]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	441a      	add	r2, r3
 800758c:	8afb      	ldrh	r3, [r7, #22]
 800758e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759e:	b29b      	uxth	r3, r3
 80075a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b8:	82bb      	strh	r3, [r7, #20]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	441a      	add	r2, r3
 80075c4:	8abb      	ldrh	r3, [r7, #20]
 80075c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	8013      	strh	r3, [r2, #0]
 80075da:	e0a3      	b.n	8007724 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01b      	beq.n	800762c <USB_DeactivateEndpoint+0x2d4>
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	441a      	add	r2, r3
 8007616:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800761c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007628:	b29b      	uxth	r3, r3
 800762a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	857b      	strh	r3, [r7, #42]	; 0x2a
 800763a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800763c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	d01b      	beq.n	800767c <USB_DeactivateEndpoint+0x324>
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765a:	853b      	strh	r3, [r7, #40]	; 0x28
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	441a      	add	r2, r3
 8007666:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007674:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007678:	b29b      	uxth	r3, r3
 800767a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29b      	uxth	r3, r3
 800768a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007692:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	441a      	add	r2, r3
 800769e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007702:	847b      	strh	r3, [r7, #34]	; 0x22
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	b29b      	uxth	r3, r3
 8007722:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3734      	adds	r7, #52	; 0x34
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b0c2      	sub	sp, #264	; 0x108
 8007736:	af00      	add	r7, sp, #0
 8007738:	1d3b      	adds	r3, r7, #4
 800773a:	6018      	str	r0, [r3, #0]
 800773c:	463b      	mov	r3, r7
 800773e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007740:	463b      	mov	r3, r7
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b01      	cmp	r3, #1
 8007748:	f040 8509 	bne.w	800815e <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800774c:	463b      	mov	r3, r7
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	463b      	mov	r3, r7
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	429a      	cmp	r2, r3
 800775a:	d905      	bls.n	8007768 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800775c:	463b      	mov	r3, r7
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007766:	e004      	b.n	8007772 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007768:	463b      	mov	r3, r7
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007772:	463b      	mov	r3, r7
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	7b1b      	ldrb	r3, [r3, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d128      	bne.n	80077ce <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800777c:	463b      	mov	r3, r7
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6959      	ldr	r1, [r3, #20]
 8007782:	463b      	mov	r3, r7
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	88da      	ldrh	r2, [r3, #6]
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778c:	b29b      	uxth	r3, r3
 800778e:	1d38      	adds	r0, r7, #4
 8007790:	6800      	ldr	r0, [r0, #0]
 8007792:	f001 f9da 	bl	8008b4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007796:	1d3b      	adds	r3, r7, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	613b      	str	r3, [r7, #16]
 800779c:	1d3b      	adds	r3, r7, #4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	461a      	mov	r2, r3
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	4413      	add	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	463b      	mov	r3, r7
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	00da      	lsls	r2, r3, #3
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4413      	add	r3, r2
 80077ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	f000 bc9f 	b.w	800810c <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80077ce:	463b      	mov	r3, r7
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	78db      	ldrb	r3, [r3, #3]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	f040 8347 	bne.w	8007e68 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80077da:	463b      	mov	r3, r7
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6a1a      	ldr	r2, [r3, #32]
 80077e0:	463b      	mov	r3, r7
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	f240 82eb 	bls.w	8007dc2 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80077ec:	1d3b      	adds	r3, r7, #4
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	463b      	mov	r3, r7
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800780a:	1d3b      	adds	r3, r7, #4
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	463b      	mov	r3, r7
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	441a      	add	r2, r3
 8007818:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800781c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007824:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782c:	b29b      	uxth	r3, r3
 800782e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6a1a      	ldr	r2, [r3, #32]
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	1ad2      	subs	r2, r2, r3
 800783c:	463b      	mov	r3, r7
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007842:	1d3b      	adds	r3, r7, #4
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29b      	uxth	r3, r3
 8007854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 8159 	beq.w	8007b10 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800785e:	1d3b      	adds	r3, r7, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	633b      	str	r3, [r7, #48]	; 0x30
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d164      	bne.n	8007938 <USB_EPStartXfer+0x206>
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	62bb      	str	r3, [r7, #40]	; 0x28
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787c:	b29b      	uxth	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	4413      	add	r3, r2
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
 8007886:	463b      	mov	r3, r7
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	00da      	lsls	r2, r3, #3
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	4413      	add	r3, r2
 8007892:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800789c:	2b3e      	cmp	r3, #62	; 0x3e
 800789e:	d91c      	bls.n	80078da <USB_EPStartXfer+0x1a8>
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ae:	f003 031f 	and.w	r3, r3, #31
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <USB_EPStartXfer+0x18e>
 80078b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078ba:	3b01      	subs	r3, #1
 80078bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	029b      	lsls	r3, r3, #10
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	801a      	strh	r2, [r3, #0]
 80078d8:	e04a      	b.n	8007970 <USB_EPStartXfer+0x23e>
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d112      	bne.n	8007908 <USB_EPStartXfer+0x1d6>
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29a      	uxth	r2, r3
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	e033      	b.n	8007970 <USB_EPStartXfer+0x23e>
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <USB_EPStartXfer+0x1f6>
 800791e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007922:	3301      	adds	r3, #1
 8007924:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007928:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800792c:	b29b      	uxth	r3, r3
 800792e:	029b      	lsls	r3, r3, #10
 8007930:	b29a      	uxth	r2, r3
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	801a      	strh	r2, [r3, #0]
 8007936:	e01b      	b.n	8007970 <USB_EPStartXfer+0x23e>
 8007938:	463b      	mov	r3, r7
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d116      	bne.n	8007970 <USB_EPStartXfer+0x23e>
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	4413      	add	r3, r2
 8007952:	633b      	str	r3, [r7, #48]	; 0x30
 8007954:	463b      	mov	r3, r7
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	00da      	lsls	r2, r3, #3
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	4413      	add	r3, r2
 8007960:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796a:	b29a      	uxth	r2, r3
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007970:	463b      	mov	r3, r7
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	895b      	ldrh	r3, [r3, #10]
 8007976:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800797a:	463b      	mov	r3, r7
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6959      	ldr	r1, [r3, #20]
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007984:	b29b      	uxth	r3, r3
 8007986:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800798a:	1d38      	adds	r0, r7, #4
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	f001 f8dc 	bl	8008b4a <USB_WritePMA>
            ep->xfer_buff += len;
 8007992:	463b      	mov	r3, r7
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	695a      	ldr	r2, [r3, #20]
 8007998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800799c:	441a      	add	r2, r3
 800799e:	463b      	mov	r3, r7
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079a4:	463b      	mov	r3, r7
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a1a      	ldr	r2, [r3, #32]
 80079aa:	463b      	mov	r3, r7
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d909      	bls.n	80079c8 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 80079b4:	463b      	mov	r3, r7
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6a1a      	ldr	r2, [r3, #32]
 80079ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	463b      	mov	r3, r7
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	621a      	str	r2, [r3, #32]
 80079c6:	e008      	b.n	80079da <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 80079c8:	463b      	mov	r3, r7
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80079d2:	463b      	mov	r3, r7
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2200      	movs	r2, #0
 80079d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079da:	463b      	mov	r3, r7
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d164      	bne.n	8007aae <USB_EPStartXfer+0x37c>
 80079e4:	1d3b      	adds	r3, r7, #4
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	61bb      	str	r3, [r7, #24]
 80079ea:	1d3b      	adds	r3, r7, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	4413      	add	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	00da      	lsls	r2, r3, #3
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	4413      	add	r3, r2
 8007a08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a12:	2b3e      	cmp	r3, #62	; 0x3e
 8007a14:	d91c      	bls.n	8007a50 <USB_EPStartXfer+0x31e>
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <USB_EPStartXfer+0x304>
 8007a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a30:	3b01      	subs	r3, #1
 8007a32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	029b      	lsls	r3, r3, #10
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	e04d      	b.n	8007aec <USB_EPStartXfer+0x3ba>
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d112      	bne.n	8007a7e <USB_EPStartXfer+0x34c>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e036      	b.n	8007aec <USB_EPStartXfer+0x3ba>
 8007a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <USB_EPStartXfer+0x36c>
 8007a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a98:	3301      	adds	r3, #1
 8007a9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	029b      	lsls	r3, r3, #10
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e01e      	b.n	8007aec <USB_EPStartXfer+0x3ba>
 8007aae:	463b      	mov	r3, r7
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d119      	bne.n	8007aec <USB_EPStartXfer+0x3ba>
 8007ab8:	1d3b      	adds	r3, r7, #4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	623b      	str	r3, [r7, #32]
 8007abe:	1d3b      	adds	r3, r7, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	4413      	add	r3, r2
 8007ace:	623b      	str	r3, [r7, #32]
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	00da      	lsls	r2, r3, #3
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	4413      	add	r3, r2
 8007adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007aec:	463b      	mov	r3, r7
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	891b      	ldrh	r3, [r3, #8]
 8007af2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007af6:	463b      	mov	r3, r7
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6959      	ldr	r1, [r3, #20]
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b06:	1d38      	adds	r0, r7, #4
 8007b08:	6800      	ldr	r0, [r0, #0]
 8007b0a:	f001 f81e 	bl	8008b4a <USB_WritePMA>
 8007b0e:	e2fd      	b.n	800810c <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b10:	463b      	mov	r3, r7
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d164      	bne.n	8007be4 <USB_EPStartXfer+0x4b2>
 8007b1a:	1d3b      	adds	r3, r7, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b20:	1d3b      	adds	r3, r7, #4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b2e:	4413      	add	r3, r2
 8007b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b32:	463b      	mov	r3, r7
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	00da      	lsls	r2, r3, #3
 8007b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b42:	647b      	str	r3, [r7, #68]	; 0x44
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b48:	2b3e      	cmp	r3, #62	; 0x3e
 8007b4a:	d91c      	bls.n	8007b86 <USB_EPStartXfer+0x454>
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <USB_EPStartXfer+0x43a>
 8007b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b66:	3b01      	subs	r3, #1
 8007b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	029b      	lsls	r3, r3, #10
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b82:	801a      	strh	r2, [r3, #0]
 8007b84:	e04d      	b.n	8007c22 <USB_EPStartXfer+0x4f0>
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d112      	bne.n	8007bb4 <USB_EPStartXfer+0x482>
 8007b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	e036      	b.n	8007c22 <USB_EPStartXfer+0x4f0>
 8007bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d004      	beq.n	8007bd4 <USB_EPStartXfer+0x4a2>
 8007bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bce:	3301      	adds	r3, #1
 8007bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	029b      	lsls	r3, r3, #10
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	e01e      	b.n	8007c22 <USB_EPStartXfer+0x4f0>
 8007be4:	463b      	mov	r3, r7
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d119      	bne.n	8007c22 <USB_EPStartXfer+0x4f0>
 8007bee:	1d3b      	adds	r3, r7, #4
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8007bf4:	1d3b      	adds	r3, r7, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c02:	4413      	add	r3, r2
 8007c04:	653b      	str	r3, [r7, #80]	; 0x50
 8007c06:	463b      	mov	r3, r7
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	00da      	lsls	r2, r3, #3
 8007c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c10:	4413      	add	r3, r2
 8007c12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c22:	463b      	mov	r3, r7
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	891b      	ldrh	r3, [r3, #8]
 8007c28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6959      	ldr	r1, [r3, #20]
 8007c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c3c:	1d38      	adds	r0, r7, #4
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	f000 ff83 	bl	8008b4a <USB_WritePMA>
            ep->xfer_buff += len;
 8007c44:	463b      	mov	r3, r7
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695a      	ldr	r2, [r3, #20]
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4e:	441a      	add	r2, r3
 8007c50:	463b      	mov	r3, r7
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c56:	463b      	mov	r3, r7
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6a1a      	ldr	r2, [r3, #32]
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d909      	bls.n	8007c7a <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8007c66:	463b      	mov	r3, r7
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6a1a      	ldr	r2, [r3, #32]
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	1ad2      	subs	r2, r2, r3
 8007c72:	463b      	mov	r3, r7
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	621a      	str	r2, [r3, #32]
 8007c78:	e008      	b.n	8007c8c <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007c84:	463b      	mov	r3, r7
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c8c:	1d3b      	adds	r3, r7, #4
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	643b      	str	r3, [r7, #64]	; 0x40
 8007c92:	463b      	mov	r3, r7
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	785b      	ldrb	r3, [r3, #1]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d164      	bne.n	8007d66 <USB_EPStartXfer+0x634>
 8007c9c:	1d3b      	adds	r3, r7, #4
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ca2:	1d3b      	adds	r3, r7, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	4413      	add	r3, r2
 8007cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	00da      	lsls	r2, r3, #3
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cca:	2b3e      	cmp	r3, #62	; 0x3e
 8007ccc:	d91c      	bls.n	8007d08 <USB_EPStartXfer+0x5d6>
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <USB_EPStartXfer+0x5bc>
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	029b      	lsls	r3, r3, #10
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	e04a      	b.n	8007d9e <USB_EPStartXfer+0x66c>
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d112      	bne.n	8007d36 <USB_EPStartXfer+0x604>
 8007d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1e:	801a      	strh	r2, [r3, #0]
 8007d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	801a      	strh	r2, [r3, #0]
 8007d34:	e033      	b.n	8007d9e <USB_EPStartXfer+0x66c>
 8007d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <USB_EPStartXfer+0x624>
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d50:	3301      	adds	r3, #1
 8007d52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	029b      	lsls	r3, r3, #10
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e01b      	b.n	8007d9e <USB_EPStartXfer+0x66c>
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d116      	bne.n	8007d9e <USB_EPStartXfer+0x66c>
 8007d70:	1d3b      	adds	r3, r7, #4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7e:	4413      	add	r3, r2
 8007d80:	643b      	str	r3, [r7, #64]	; 0x40
 8007d82:	463b      	mov	r3, r7
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	00da      	lsls	r2, r3, #3
 8007d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d9e:	463b      	mov	r3, r7
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	895b      	ldrh	r3, [r3, #10]
 8007da4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007da8:	463b      	mov	r3, r7
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6959      	ldr	r1, [r3, #20]
 8007dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007db8:	1d38      	adds	r0, r7, #4
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	f000 fec5 	bl	8008b4a <USB_WritePMA>
 8007dc0:	e1a4      	b.n	800810c <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007dcc:	1d3b      	adds	r3, r7, #4
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007dea:	1d3b      	adds	r3, r7, #4
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	463b      	mov	r3, r7
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e10:	1d3b      	adds	r3, r7, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e24:	4413      	add	r3, r2
 8007e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e28:	463b      	mov	r3, r7
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	00da      	lsls	r2, r3, #3
 8007e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e32:	4413      	add	r3, r2
 8007e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e44:	463b      	mov	r3, r7
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	891b      	ldrh	r3, [r3, #8]
 8007e4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e4e:	463b      	mov	r3, r7
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6959      	ldr	r1, [r3, #20]
 8007e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e5e:	1d38      	adds	r0, r7, #4
 8007e60:	6800      	ldr	r0, [r0, #0]
 8007e62:	f000 fe72 	bl	8008b4a <USB_WritePMA>
 8007e66:	e151      	b.n	800810c <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e68:	463b      	mov	r3, r7
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6a1a      	ldr	r2, [r3, #32]
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e72:	1ad2      	subs	r2, r2, r3
 8007e74:	463b      	mov	r3, r7
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e7a:	1d3b      	adds	r3, r7, #4
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	463b      	mov	r3, r7
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 809b 	beq.w	8007fcc <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e96:	1d3b      	adds	r3, r7, #4
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e9c:	463b      	mov	r3, r7
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	785b      	ldrb	r3, [r3, #1]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d164      	bne.n	8007f70 <USB_EPStartXfer+0x83e>
 8007ea6:	1d3b      	adds	r3, r7, #4
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eba:	4413      	add	r3, r2
 8007ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	00da      	lsls	r2, r3, #3
 8007ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ec8:	4413      	add	r3, r2
 8007eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ece:	667b      	str	r3, [r7, #100]	; 0x64
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed6:	d91c      	bls.n	8007f12 <USB_EPStartXfer+0x7e0>
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007edc:	095b      	lsrs	r3, r3, #5
 8007ede:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee6:	f003 031f 	and.w	r3, r3, #31
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <USB_EPStartXfer+0x7c6>
 8007eee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ef8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	029b      	lsls	r3, r3, #10
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e04a      	b.n	8007fa8 <USB_EPStartXfer+0x876>
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d112      	bne.n	8007f40 <USB_EPStartXfer+0x80e>
 8007f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3c:	801a      	strh	r2, [r3, #0]
 8007f3e:	e033      	b.n	8007fa8 <USB_EPStartXfer+0x876>
 8007f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f44:	085b      	lsrs	r3, r3, #1
 8007f46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <USB_EPStartXfer+0x82e>
 8007f56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	029b      	lsls	r3, r3, #10
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f6c:	801a      	strh	r2, [r3, #0]
 8007f6e:	e01b      	b.n	8007fa8 <USB_EPStartXfer+0x876>
 8007f70:	463b      	mov	r3, r7
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d116      	bne.n	8007fa8 <USB_EPStartXfer+0x876>
 8007f7a:	1d3b      	adds	r3, r7, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f88:	4413      	add	r3, r2
 8007f8a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	00da      	lsls	r2, r3, #3
 8007f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f96:	4413      	add	r3, r2
 8007f98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007fa8:	463b      	mov	r3, r7
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	895b      	ldrh	r3, [r3, #10]
 8007fae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6959      	ldr	r1, [r3, #20]
 8007fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fc2:	1d38      	adds	r0, r7, #4
 8007fc4:	6800      	ldr	r0, [r0, #0]
 8007fc6:	f000 fdc0 	bl	8008b4a <USB_WritePMA>
 8007fca:	e09f      	b.n	800810c <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fcc:	463b      	mov	r3, r7
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d164      	bne.n	80080a0 <USB_EPStartXfer+0x96e>
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fdc:	1d3b      	adds	r3, r7, #4
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fea:	4413      	add	r3, r2
 8007fec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fee:	463b      	mov	r3, r7
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	00da      	lsls	r2, r3, #3
 8007ff6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ffe:	67bb      	str	r3, [r7, #120]	; 0x78
 8008000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008004:	2b3e      	cmp	r3, #62	; 0x3e
 8008006:	d91c      	bls.n	8008042 <USB_EPStartXfer+0x910>
 8008008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800c:	095b      	lsrs	r3, r3, #5
 800800e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008016:	f003 031f 	and.w	r3, r3, #31
 800801a:	2b00      	cmp	r3, #0
 800801c:	d104      	bne.n	8008028 <USB_EPStartXfer+0x8f6>
 800801e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008022:	3b01      	subs	r3, #1
 8008024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008028:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800802c:	b29b      	uxth	r3, r3
 800802e:	029b      	lsls	r3, r3, #10
 8008030:	b29b      	uxth	r3, r3
 8008032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803a:	b29a      	uxth	r2, r3
 800803c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e053      	b.n	80080ea <USB_EPStartXfer+0x9b8>
 8008042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008046:	2b00      	cmp	r3, #0
 8008048:	d112      	bne.n	8008070 <USB_EPStartXfer+0x93e>
 800804a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008054:	b29a      	uxth	r2, r3
 8008056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008058:	801a      	strh	r2, [r3, #0]
 800805a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008068:	b29a      	uxth	r2, r3
 800806a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e03c      	b.n	80080ea <USB_EPStartXfer+0x9b8>
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008074:	085b      	lsrs	r3, r3, #1
 8008076:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <USB_EPStartXfer+0x95e>
 8008086:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800808a:	3301      	adds	r3, #1
 800808c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008090:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008094:	b29b      	uxth	r3, r3
 8008096:	029b      	lsls	r3, r3, #10
 8008098:	b29a      	uxth	r2, r3
 800809a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	e024      	b.n	80080ea <USB_EPStartXfer+0x9b8>
 80080a0:	463b      	mov	r3, r7
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d11f      	bne.n	80080ea <USB_EPStartXfer+0x9b8>
 80080aa:	1d3b      	adds	r3, r7, #4
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080b2:	1d3b      	adds	r3, r7, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c2:	4413      	add	r3, r2
 80080c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080c8:	463b      	mov	r3, r7
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	00da      	lsls	r2, r3, #3
 80080d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d4:	4413      	add	r3, r2
 80080d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080ea:	463b      	mov	r3, r7
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	891b      	ldrh	r3, [r3, #8]
 80080f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080f4:	463b      	mov	r3, r7
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6959      	ldr	r1, [r3, #20]
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008104:	1d38      	adds	r0, r7, #4
 8008106:	6800      	ldr	r0, [r0, #0]
 8008108:	f000 fd1f 	bl	8008b4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800810c:	1d3b      	adds	r3, r7, #4
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	463b      	mov	r3, r7
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008126:	817b      	strh	r3, [r7, #10]
 8008128:	897b      	ldrh	r3, [r7, #10]
 800812a:	f083 0310 	eor.w	r3, r3, #16
 800812e:	817b      	strh	r3, [r7, #10]
 8008130:	897b      	ldrh	r3, [r7, #10]
 8008132:	f083 0320 	eor.w	r3, r3, #32
 8008136:	817b      	strh	r3, [r7, #10]
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	463b      	mov	r3, r7
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	441a      	add	r2, r3
 8008146:	897b      	ldrh	r3, [r7, #10]
 8008148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800814c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008158:	b29b      	uxth	r3, r3
 800815a:	8013      	strh	r3, [r2, #0]
 800815c:	e3b5      	b.n	80088ca <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800815e:	463b      	mov	r3, r7
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	7b1b      	ldrb	r3, [r3, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f040 8090 	bne.w	800828a <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800816a:	463b      	mov	r3, r7
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	463b      	mov	r3, r7
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	429a      	cmp	r2, r3
 8008178:	d90e      	bls.n	8008198 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800817a:	463b      	mov	r3, r7
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008184:	463b      	mov	r3, r7
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	463b      	mov	r3, r7
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	619a      	str	r2, [r3, #24]
 8008196:	e008      	b.n	80081aa <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8008198:	463b      	mov	r3, r7
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80081a2:	463b      	mov	r3, r7
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081aa:	1d3b      	adds	r3, r7, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081b2:	1d3b      	adds	r3, r7, #4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081c2:	4413      	add	r3, r2
 80081c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081c8:	463b      	mov	r3, r7
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	00da      	lsls	r2, r3, #3
 80081d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081d4:	4413      	add	r3, r2
 80081d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e2:	2b3e      	cmp	r3, #62	; 0x3e
 80081e4:	d91d      	bls.n	8008222 <USB_EPStartXfer+0xaf0>
 80081e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f4:	f003 031f 	and.w	r3, r3, #31
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <USB_EPStartXfer+0xad4>
 80081fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008200:	3b01      	subs	r3, #1
 8008202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800820a:	b29b      	uxth	r3, r3
 800820c:	029b      	lsls	r3, r3, #10
 800820e:	b29b      	uxth	r3, r3
 8008210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008218:	b29a      	uxth	r2, r3
 800821a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	e325      	b.n	800886e <USB_EPStartXfer+0x113c>
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008226:	2b00      	cmp	r3, #0
 8008228:	d116      	bne.n	8008258 <USB_EPStartXfer+0xb26>
 800822a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008236:	b29a      	uxth	r2, r3
 8008238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800823c:	801a      	strh	r2, [r3, #0]
 800823e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824e:	b29a      	uxth	r2, r3
 8008250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008254:	801a      	strh	r2, [r3, #0]
 8008256:	e30a      	b.n	800886e <USB_EPStartXfer+0x113c>
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825c:	085b      	lsrs	r3, r3, #1
 800825e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <USB_EPStartXfer+0xb46>
 800826e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008272:	3301      	adds	r3, #1
 8008274:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800827c:	b29b      	uxth	r3, r3
 800827e:	029b      	lsls	r3, r3, #10
 8008280:	b29a      	uxth	r2, r3
 8008282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008286:	801a      	strh	r2, [r3, #0]
 8008288:	e2f1      	b.n	800886e <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800828a:	463b      	mov	r3, r7
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	2b02      	cmp	r3, #2
 8008292:	f040 818f 	bne.w	80085b4 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008296:	463b      	mov	r3, r7
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d175      	bne.n	800838c <USB_EPStartXfer+0xc5a>
 80082a0:	1d3b      	adds	r3, r7, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082a8:	1d3b      	adds	r3, r7, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b8:	4413      	add	r3, r2
 80082ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082be:	463b      	mov	r3, r7
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	00da      	lsls	r2, r3, #3
 80082c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082ca:	4413      	add	r3, r2
 80082cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082d4:	463b      	mov	r3, r7
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	2b3e      	cmp	r3, #62	; 0x3e
 80082dc:	d91f      	bls.n	800831e <USB_EPStartXfer+0xbec>
 80082de:	463b      	mov	r3, r7
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	095b      	lsrs	r3, r3, #5
 80082e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082ea:	463b      	mov	r3, r7
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f003 031f 	and.w	r3, r3, #31
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d104      	bne.n	8008302 <USB_EPStartXfer+0xbd0>
 80082f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fc:	3b01      	subs	r3, #1
 80082fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008306:	b29b      	uxth	r3, r3
 8008308:	029b      	lsls	r3, r3, #10
 800830a:	b29b      	uxth	r3, r3
 800830c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008314:	b29a      	uxth	r2, r3
 8008316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800831a:	801a      	strh	r2, [r3, #0]
 800831c:	e05c      	b.n	80083d8 <USB_EPStartXfer+0xca6>
 800831e:	463b      	mov	r3, r7
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d116      	bne.n	8008356 <USB_EPStartXfer+0xc24>
 8008328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834c:	b29a      	uxth	r2, r3
 800834e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	e040      	b.n	80083d8 <USB_EPStartXfer+0xca6>
 8008356:	463b      	mov	r3, r7
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	085b      	lsrs	r3, r3, #1
 800835e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008362:	463b      	mov	r3, r7
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <USB_EPStartXfer+0xc48>
 8008370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008374:	3301      	adds	r3, #1
 8008376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837e:	b29b      	uxth	r3, r3
 8008380:	029b      	lsls	r3, r3, #10
 8008382:	b29a      	uxth	r2, r3
 8008384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008388:	801a      	strh	r2, [r3, #0]
 800838a:	e025      	b.n	80083d8 <USB_EPStartXfer+0xca6>
 800838c:	463b      	mov	r3, r7
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d120      	bne.n	80083d8 <USB_EPStartXfer+0xca6>
 8008396:	1d3b      	adds	r3, r7, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800839e:	1d3b      	adds	r3, r7, #4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083ae:	4413      	add	r3, r2
 80083b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083b4:	463b      	mov	r3, r7
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	00da      	lsls	r2, r3, #3
 80083bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083c0:	4413      	add	r3, r2
 80083c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083ca:	463b      	mov	r3, r7
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	1d3b      	adds	r3, r7, #4
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083e0:	463b      	mov	r3, r7
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d175      	bne.n	80084d6 <USB_EPStartXfer+0xda4>
 80083ea:	1d3b      	adds	r3, r7, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008402:	4413      	add	r3, r2
 8008404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008408:	463b      	mov	r3, r7
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	00da      	lsls	r2, r3, #3
 8008410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008414:	4413      	add	r3, r2
 8008416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800841a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800841e:	463b      	mov	r3, r7
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b3e      	cmp	r3, #62	; 0x3e
 8008426:	d91f      	bls.n	8008468 <USB_EPStartXfer+0xd36>
 8008428:	463b      	mov	r3, r7
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008434:	463b      	mov	r3, r7
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 031f 	and.w	r3, r3, #31
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <USB_EPStartXfer+0xd1a>
 8008442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008446:	3b01      	subs	r3, #1
 8008448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800844c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008450:	b29b      	uxth	r3, r3
 8008452:	029b      	lsls	r3, r3, #10
 8008454:	b29b      	uxth	r3, r3
 8008456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845e:	b29a      	uxth	r2, r3
 8008460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008464:	801a      	strh	r2, [r3, #0]
 8008466:	e058      	b.n	800851a <USB_EPStartXfer+0xde8>
 8008468:	463b      	mov	r3, r7
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d116      	bne.n	80084a0 <USB_EPStartXfer+0xd6e>
 8008472:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800847e:	b29a      	uxth	r2, r3
 8008480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	b29b      	uxth	r3, r3
 800848e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008496:	b29a      	uxth	r2, r3
 8008498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800849c:	801a      	strh	r2, [r3, #0]
 800849e:	e03c      	b.n	800851a <USB_EPStartXfer+0xde8>
 80084a0:	463b      	mov	r3, r7
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084ac:	463b      	mov	r3, r7
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <USB_EPStartXfer+0xd92>
 80084ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084be:	3301      	adds	r3, #1
 80084c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	029b      	lsls	r3, r3, #10
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084d2:	801a      	strh	r2, [r3, #0]
 80084d4:	e021      	b.n	800851a <USB_EPStartXfer+0xde8>
 80084d6:	463b      	mov	r3, r7
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d11c      	bne.n	800851a <USB_EPStartXfer+0xde8>
 80084e0:	1d3b      	adds	r3, r7, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084f0:	4413      	add	r3, r2
 80084f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80084f6:	463b      	mov	r3, r7
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	00da      	lsls	r2, r3, #3
 80084fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008502:	4413      	add	r3, r2
 8008504:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008508:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800850c:	463b      	mov	r3, r7
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	b29a      	uxth	r2, r3
 8008514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008518:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800851a:	463b      	mov	r3, r7
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 81a4 	beq.w	800886e <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008526:	1d3b      	adds	r3, r7, #4
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	463b      	mov	r3, r7
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800853a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800853e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <USB_EPStartXfer+0xe20>
 8008546:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10d      	bne.n	800856e <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008552:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800855a:	2b00      	cmp	r3, #0
 800855c:	f040 8187 	bne.w	800886e <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008560:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 8180 	bne.w	800886e <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800856e:	1d3b      	adds	r3, r7, #4
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	463b      	mov	r3, r7
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008588:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800858c:	1d3b      	adds	r3, r7, #4
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	463b      	mov	r3, r7
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	441a      	add	r2, r3
 800859a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800859e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	8013      	strh	r3, [r2, #0]
 80085b2:	e15c      	b.n	800886e <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80085b4:	463b      	mov	r3, r7
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	78db      	ldrb	r3, [r3, #3]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	f040 8155 	bne.w	800886a <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	463b      	mov	r3, r7
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d90e      	bls.n	80085ee <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 80085d0:	463b      	mov	r3, r7
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80085da:	463b      	mov	r3, r7
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	699a      	ldr	r2, [r3, #24]
 80085e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e4:	1ad2      	subs	r2, r2, r3
 80085e6:	463b      	mov	r3, r7
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	619a      	str	r2, [r3, #24]
 80085ec:	e008      	b.n	8008600 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 80085ee:	463b      	mov	r3, r7
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80085f8:	463b      	mov	r3, r7
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2200      	movs	r2, #0
 80085fe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008600:	463b      	mov	r3, r7
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d16f      	bne.n	80086ea <USB_EPStartXfer+0xfb8>
 800860a:	1d3b      	adds	r3, r7, #4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861a:	b29b      	uxth	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008622:	4413      	add	r3, r2
 8008624:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008628:	463b      	mov	r3, r7
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	00da      	lsls	r2, r3, #3
 8008630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008634:	4413      	add	r3, r2
 8008636:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800863a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008642:	2b3e      	cmp	r3, #62	; 0x3e
 8008644:	d91d      	bls.n	8008682 <USB_EPStartXfer+0xf50>
 8008646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <USB_EPStartXfer+0xf34>
 800865c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008660:	3b01      	subs	r3, #1
 8008662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800866a:	b29b      	uxth	r3, r3
 800866c:	029b      	lsls	r3, r3, #10
 800866e:	b29b      	uxth	r3, r3
 8008670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008678:	b29a      	uxth	r2, r3
 800867a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800867e:	801a      	strh	r2, [r3, #0]
 8008680:	e058      	b.n	8008734 <USB_EPStartXfer+0x1002>
 8008682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008686:	2b00      	cmp	r3, #0
 8008688:	d116      	bne.n	80086b8 <USB_EPStartXfer+0xf86>
 800868a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008696:	b29a      	uxth	r2, r3
 8008698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800869c:	801a      	strh	r2, [r3, #0]
 800869e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086b4:	801a      	strh	r2, [r3, #0]
 80086b6:	e03d      	b.n	8008734 <USB_EPStartXfer+0x1002>
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086bc:	085b      	lsrs	r3, r3, #1
 80086be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <USB_EPStartXfer+0xfa6>
 80086ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d2:	3301      	adds	r3, #1
 80086d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086dc:	b29b      	uxth	r3, r3
 80086de:	029b      	lsls	r3, r3, #10
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086e6:	801a      	strh	r2, [r3, #0]
 80086e8:	e024      	b.n	8008734 <USB_EPStartXfer+0x1002>
 80086ea:	463b      	mov	r3, r7
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d11f      	bne.n	8008734 <USB_EPStartXfer+0x1002>
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008704:	b29b      	uxth	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800870c:	4413      	add	r3, r2
 800870e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008712:	463b      	mov	r3, r7
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	00da      	lsls	r2, r3, #3
 800871a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800871e:	4413      	add	r3, r2
 8008720:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800872c:	b29a      	uxth	r2, r3
 800872e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800873c:	463b      	mov	r3, r7
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d16f      	bne.n	8008826 <USB_EPStartXfer+0x10f4>
 8008746:	1d3b      	adds	r3, r7, #4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008756:	b29b      	uxth	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800875e:	4413      	add	r3, r2
 8008760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008764:	463b      	mov	r3, r7
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	00da      	lsls	r2, r3, #3
 800876c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008770:	4413      	add	r3, r2
 8008772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008776:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800877a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800877e:	2b3e      	cmp	r3, #62	; 0x3e
 8008780:	d91d      	bls.n	80087be <USB_EPStartXfer+0x108c>
 8008782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008786:	095b      	lsrs	r3, r3, #5
 8008788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800878c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	2b00      	cmp	r3, #0
 8008796:	d104      	bne.n	80087a2 <USB_EPStartXfer+0x1070>
 8008798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800879c:	3b01      	subs	r3, #1
 800879e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	029b      	lsls	r3, r3, #10
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	e057      	b.n	800886e <USB_EPStartXfer+0x113c>
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d116      	bne.n	80087f4 <USB_EPStartXfer+0x10c2>
 80087c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	e03c      	b.n	800886e <USB_EPStartXfer+0x113c>
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <USB_EPStartXfer+0x10e2>
 800880a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800880e:	3301      	adds	r3, #1
 8008810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008818:	b29b      	uxth	r3, r3
 800881a:	029b      	lsls	r3, r3, #10
 800881c:	b29a      	uxth	r2, r3
 800881e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008822:	801a      	strh	r2, [r3, #0]
 8008824:	e023      	b.n	800886e <USB_EPStartXfer+0x113c>
 8008826:	463b      	mov	r3, r7
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d11e      	bne.n	800886e <USB_EPStartXfer+0x113c>
 8008830:	1d3b      	adds	r3, r7, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008838:	b29b      	uxth	r3, r3
 800883a:	461a      	mov	r2, r3
 800883c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008840:	4413      	add	r3, r2
 8008842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008846:	463b      	mov	r3, r7
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	00da      	lsls	r2, r3, #3
 800884e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008852:	4413      	add	r3, r2
 8008854:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800885c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008860:	b29a      	uxth	r2, r3
 8008862:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008866:	801a      	strh	r2, [r3, #0]
 8008868:	e001      	b.n	800886e <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e02e      	b.n	80088cc <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800886e:	1d3b      	adds	r3, r7, #4
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	463b      	mov	r3, r7
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	b29b      	uxth	r3, r3
 8008880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008888:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800888c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008890:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008894:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008898:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800889c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088a4:	1d3b      	adds	r3, r7, #4
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	463b      	mov	r3, r7
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	441a      	add	r2, r3
 80088b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	785b      	ldrb	r3, [r3, #1]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d020      	beq.n	800892a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fe:	81bb      	strh	r3, [r7, #12]
 8008900:	89bb      	ldrh	r3, [r7, #12]
 8008902:	f083 0310 	eor.w	r3, r3, #16
 8008906:	81bb      	strh	r3, [r7, #12]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	441a      	add	r2, r3
 8008912:	89bb      	ldrh	r3, [r7, #12]
 8008914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800891c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008924:	b29b      	uxth	r3, r3
 8008926:	8013      	strh	r3, [r2, #0]
 8008928:	e01f      	b.n	800896a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800893c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008940:	81fb      	strh	r3, [r7, #14]
 8008942:	89fb      	ldrh	r3, [r7, #14]
 8008944:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008948:	81fb      	strh	r3, [r7, #14]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	89fb      	ldrh	r3, [r7, #14]
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	7b1b      	ldrb	r3, [r3, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 809d 	bne.w	8008ac6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d04c      	beq.n	8008a2e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	823b      	strh	r3, [r7, #16]
 80089a2:	8a3b      	ldrh	r3, [r7, #16]
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01b      	beq.n	80089e4 <USB_EPClearStall+0x6c>
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c2:	81fb      	strh	r3, [r7, #14]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	441a      	add	r2, r3
 80089ce:	89fb      	ldrh	r3, [r7, #14]
 80089d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	78db      	ldrb	r3, [r3, #3]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d06c      	beq.n	8008ac6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a02:	81bb      	strh	r3, [r7, #12]
 8008a04:	89bb      	ldrh	r3, [r7, #12]
 8008a06:	f083 0320 	eor.w	r3, r3, #32
 8008a0a:	81bb      	strh	r3, [r7, #12]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	89bb      	ldrh	r3, [r7, #12]
 8008a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	8013      	strh	r3, [r2, #0]
 8008a2c:	e04b      	b.n	8008ac6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	82fb      	strh	r3, [r7, #22]
 8008a3c:	8afb      	ldrh	r3, [r7, #22]
 8008a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01b      	beq.n	8008a7e <USB_EPClearStall+0x106>
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5c:	82bb      	strh	r3, [r7, #20]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	8abb      	ldrh	r3, [r7, #20]
 8008a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a94:	827b      	strh	r3, [r7, #18]
 8008a96:	8a7b      	ldrh	r3, [r7, #18]
 8008a98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a9c:	827b      	strh	r3, [r7, #18]
 8008a9e:	8a7b      	ldrh	r3, [r7, #18]
 8008aa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008aa4:	827b      	strh	r3, [r7, #18]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	441a      	add	r2, r3
 8008ab0:	8a7b      	ldrh	r3, [r7, #18]
 8008ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d103      	bne.n	8008aee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2280      	movs	r2, #128	; 0x80
 8008aea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b08d      	sub	sp, #52	; 0x34
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	4611      	mov	r1, r2
 8008b56:	461a      	mov	r2, r3
 8008b58:	460b      	mov	r3, r1
 8008b5a:	80fb      	strh	r3, [r7, #6]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b60:	88bb      	ldrh	r3, [r7, #4]
 8008b62:	3301      	adds	r3, #1
 8008b64:	085b      	lsrs	r3, r3, #1
 8008b66:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b70:	88fa      	ldrh	r2, [r7, #6]
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b80:	e01b      	b.n	8008bba <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	3302      	adds	r3, #2
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e0      	bne.n	8008b82 <USB_WritePMA+0x38>
  }
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	3734      	adds	r7, #52	; 0x34
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b08b      	sub	sp, #44	; 0x2c
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	461a      	mov	r2, r3
 8008bdc:	460b      	mov	r3, r1
 8008bde:	80fb      	strh	r3, [r7, #6]
 8008be0:	4613      	mov	r3, r2
 8008be2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008be4:	88bb      	ldrh	r3, [r7, #4]
 8008be6:	085b      	lsrs	r3, r3, #1
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bf4:	88fa      	ldrh	r2, [r7, #6]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bfe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
 8008c04:	e018      	b.n	8008c38 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	3302      	adds	r3, #2
 8008c12:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	0a1b      	lsrs	r3, r3, #8
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	3b01      	subs	r3, #1
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e3      	bne.n	8008c06 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c3e:	88bb      	ldrh	r3, [r7, #4]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	701a      	strb	r2, [r3, #0]
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	372c      	adds	r7, #44	; 0x2c
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008c72:	2010      	movs	r0, #16
 8008c74:	f001 fef0 	bl	800aa58 <USBD_static_malloc>
 8008c78:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d105      	bne.n	8008c8c <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e01b      	b.n	8008cc4 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d103      	bne.n	8008ca4 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2207      	movs	r2, #7
 8008ca0:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008ca2:	e002      	b.n	8008caa <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008caa:	2304      	movs	r3, #4
 8008cac:	2203      	movs	r2, #3
 8008cae:	2181      	movs	r1, #129	; 0x81
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 fd8a 	bl	800a7ca <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008cd8:	2181      	movs	r1, #129	; 0x81
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fd9b 	bl	800a816 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d009      	beq.n	8008d0a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 feb9 	bl	800aa74 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d24:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e0e8      	b.n	8008f0a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d046      	beq.n	8008dd2 <USBD_HID_Setup+0xbe>
 8008d44:	2b20      	cmp	r3, #32
 8008d46:	f040 80d8 	bne.w	8008efa <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	3b02      	subs	r3, #2
 8008d50:	2b09      	cmp	r3, #9
 8008d52:	d836      	bhi.n	8008dc2 <USBD_HID_Setup+0xae>
 8008d54:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <USBD_HID_Setup+0x48>)
 8008d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5a:	bf00      	nop
 8008d5c:	08008db3 	.word	0x08008db3
 8008d60:	08008d93 	.word	0x08008d93
 8008d64:	08008dc3 	.word	0x08008dc3
 8008d68:	08008dc3 	.word	0x08008dc3
 8008d6c:	08008dc3 	.word	0x08008dc3
 8008d70:	08008dc3 	.word	0x08008dc3
 8008d74:	08008dc3 	.word	0x08008dc3
 8008d78:	08008dc3 	.word	0x08008dc3
 8008d7c:	08008da1 	.word	0x08008da1
 8008d80:	08008d85 	.word	0x08008d85
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	885b      	ldrh	r3, [r3, #2]
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	601a      	str	r2, [r3, #0]
          break;
 8008d90:	e01e      	b.n	8008dd0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f9d8 	bl	800a14e <USBD_CtlSendData>
          break;
 8008d9e:	e017      	b.n	8008dd0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	885b      	ldrh	r3, [r3, #2]
 8008da4:	0a1b      	lsrs	r3, r3, #8
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	461a      	mov	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	605a      	str	r2, [r3, #4]
          break;
 8008db0:	e00e      	b.n	8008dd0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3304      	adds	r3, #4
 8008db6:	2201      	movs	r2, #1
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 f9c7 	bl	800a14e <USBD_CtlSendData>
          break;
 8008dc0:	e006      	b.n	8008dd0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 f951 	bl	800a06c <USBD_CtlError>
          ret = USBD_FAIL;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8008dce:	bf00      	nop
      }
      break;
 8008dd0:	e09a      	b.n	8008f08 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	2b0b      	cmp	r3, #11
 8008dd8:	f200 8086 	bhi.w	8008ee8 <USBD_HID_Setup+0x1d4>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USBD_HID_Setup+0xd0>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008ef7 	.word	0x08008ef7
 8008dec:	08008ee9 	.word	0x08008ee9
 8008df0:	08008ee9 	.word	0x08008ee9
 8008df4:	08008ee9 	.word	0x08008ee9
 8008df8:	08008ee9 	.word	0x08008ee9
 8008dfc:	08008e3f 	.word	0x08008e3f
 8008e00:	08008ee9 	.word	0x08008ee9
 8008e04:	08008ee9 	.word	0x08008ee9
 8008e08:	08008ee9 	.word	0x08008ee9
 8008e0c:	08008e97 	.word	0x08008e97
 8008e10:	08008ec1 	.word	0x08008ec1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d107      	bne.n	8008e30 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e20:	f107 030a 	add.w	r3, r7, #10
 8008e24:	2202      	movs	r2, #2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 f990 	bl	800a14e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e2e:	e063      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 f91a 	bl	800a06c <USBD_CtlError>
            ret = USBD_FAIL;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e3c:	e05c      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	0a1b      	lsrs	r3, r3, #8
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2b22      	cmp	r3, #34	; 0x22
 8008e48:	d108      	bne.n	8008e5c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	88db      	ldrh	r3, [r3, #6]
 8008e4e:	2b4a      	cmp	r3, #74	; 0x4a
 8008e50:	bf28      	it	cs
 8008e52:	234a      	movcs	r3, #74	; 0x4a
 8008e54:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008e56:	4b2f      	ldr	r3, [pc, #188]	; (8008f14 <USBD_HID_Setup+0x200>)
 8008e58:	613b      	str	r3, [r7, #16]
 8008e5a:	e015      	b.n	8008e88 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	885b      	ldrh	r3, [r3, #2]
 8008e60:	0a1b      	lsrs	r3, r3, #8
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	2b21      	cmp	r3, #33	; 0x21
 8008e66:	d108      	bne.n	8008e7a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008e68:	4b2b      	ldr	r3, [pc, #172]	; (8008f18 <USBD_HID_Setup+0x204>)
 8008e6a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	88db      	ldrh	r3, [r3, #6]
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	bf28      	it	cs
 8008e74:	2309      	movcs	r3, #9
 8008e76:	82bb      	strh	r3, [r7, #20]
 8008e78:	e006      	b.n	8008e88 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 f8f5 	bl	800a06c <USBD_CtlError>
            ret = USBD_FAIL;
 8008e82:	2303      	movs	r3, #3
 8008e84:	75fb      	strb	r3, [r7, #23]
            break;
 8008e86:	e037      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e88:	8abb      	ldrh	r3, [r7, #20]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6939      	ldr	r1, [r7, #16]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 f95d 	bl	800a14e <USBD_CtlSendData>
          break;
 8008e94:	e030      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d107      	bne.n	8008eb2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f001 f94f 	bl	800a14e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eb0:	e022      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 f8d9 	bl	800a06c <USBD_CtlError>
            ret = USBD_FAIL;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ebe:	e01b      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d106      	bne.n	8008eda <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	885b      	ldrh	r3, [r3, #2]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ed8:	e00e      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 f8c5 	bl	800a06c <USBD_CtlError>
            ret = USBD_FAIL;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ee6:	e007      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 f8be 	bl	800a06c <USBD_CtlError>
          ret = USBD_FAIL;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef4:	e000      	b.n	8008ef8 <USBD_HID_Setup+0x1e4>
          break;
 8008ef6:	bf00      	nop
      }
      break;
 8008ef8:	e006      	b.n	8008f08 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 f8b5 	bl	800a06c <USBD_CtlError>
      ret = USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	75fb      	strb	r3, [r7, #23]
      break;
 8008f06:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200000e4 	.word	0x200000e4
 8008f18:	200000cc 	.word	0x200000cc

08008f1c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4613      	mov	r3, r2
 8008f28:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f30:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e013      	b.n	8008f64 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d10c      	bne.n	8008f62 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	7b1b      	ldrb	r3, [r3, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d108      	bne.n	8008f62 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2201      	movs	r2, #1
 8008f54:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008f56:	88fb      	ldrh	r3, [r7, #6]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	2181      	movs	r1, #129	; 0x81
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f001 fd03 	bl	800a968 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2222      	movs	r2, #34	; 0x22
 8008f78:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008f7a:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000060 	.word	0x20000060

08008f8c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2222      	movs	r2, #34	; 0x22
 8008f98:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008f9a:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	20000084 	.word	0x20000084

08008fac <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2222      	movs	r2, #34	; 0x22
 8008fb8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008fba:	4b03      	ldr	r3, [pc, #12]	; (8008fc8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	200000a8 	.word	0x200000a8

08008fcc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fde:	2200      	movs	r2, #0
 8008fe0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	220a      	movs	r2, #10
 8008ffc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008ffe:	4b03      	ldr	r3, [pc, #12]	; (800900c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	200000d8 	.word	0x200000d8

08009010 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	4613      	mov	r3, r2
 800901c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009024:	2303      	movs	r3, #3
 8009026:	e01f      	b.n	8009068 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	79fa      	ldrb	r2, [r7, #7]
 800905a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f001 fb49 	bl	800a6f4 <USBD_LL_Init>
 8009062:	4603      	mov	r3, r0
 8009064:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009084:	2303      	movs	r3, #3
 8009086:	e016      	b.n	80090b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	f107 020e 	add.w	r2, r7, #14
 80090a8:	4610      	mov	r0, r2
 80090aa:	4798      	blx	r3
 80090ac:	4602      	mov	r2, r0
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fb64 	bl	800a794 <USBD_LL_Start>
 80090cc:	4603      	mov	r3, r0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80090f8:	2303      	movs	r3, #3
 80090fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	78fa      	ldrb	r2, [r7, #3]
 8009110:	4611      	mov	r1, r2
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	4798      	blx	r3
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800911a:	7bfb      	ldrb	r3, [r7, #15]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d007      	beq.n	800914a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	4611      	mov	r1, r2
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	4798      	blx	r3
  }

  return USBD_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 ff46 	bl	8009ff8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800917a:	461a      	mov	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009188:	f003 031f 	and.w	r3, r3, #31
 800918c:	2b02      	cmp	r3, #2
 800918e:	d01a      	beq.n	80091c6 <USBD_LL_SetupStage+0x72>
 8009190:	2b02      	cmp	r3, #2
 8009192:	d822      	bhi.n	80091da <USBD_LL_SetupStage+0x86>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <USBD_LL_SetupStage+0x4a>
 8009198:	2b01      	cmp	r3, #1
 800919a:	d00a      	beq.n	80091b2 <USBD_LL_SetupStage+0x5e>
 800919c:	e01d      	b.n	80091da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f9ee 	bl	8009588 <USBD_StdDevReq>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
      break;
 80091b0:	e020      	b.n	80091f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa52 	bl	8009664 <USBD_StdItfReq>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]
      break;
 80091c4:	e016      	b.n	80091f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa91 	bl	80096f6 <USBD_StdEPReq>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]
      break;
 80091d8:	e00c      	b.n	80091f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f001 fb33 	bl	800a854 <USBD_LL_StallEP>
 80091ee:	4603      	mov	r3, r0
 80091f0:	73fb      	strb	r3, [r7, #15]
      break;
 80091f2:	bf00      	nop
  }

  return ret;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b086      	sub	sp, #24
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	460b      	mov	r3, r1
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800920c:	7afb      	ldrb	r3, [r7, #11]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d138      	bne.n	8009284 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009218:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009220:	2b03      	cmp	r3, #3
 8009222:	d14a      	bne.n	80092ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	429a      	cmp	r2, r3
 800922e:	d913      	bls.n	8009258 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	1ad2      	subs	r2, r2, r3
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	4293      	cmp	r3, r2
 8009248:	bf28      	it	cs
 800924a:	4613      	movcs	r3, r2
 800924c:	461a      	mov	r2, r3
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 ffa8 	bl	800a1a6 <USBD_CtlContinueRx>
 8009256:	e030      	b.n	80092ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b03      	cmp	r3, #3
 8009262:	d10b      	bne.n	800927c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 ffa3 	bl	800a1c8 <USBD_CtlSendStatus>
 8009282:	e01a      	b.n	80092ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b03      	cmp	r3, #3
 800928e:	d114      	bne.n	80092ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00e      	beq.n	80092ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	7afa      	ldrb	r2, [r7, #11]
 80092a6:	4611      	mov	r1, r2
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	4798      	blx	r3
 80092ac:	4603      	mov	r3, r0
 80092ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	e000      	b.n	80092bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	460b      	mov	r3, r1
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d16b      	bne.n	80093b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3314      	adds	r3, #20
 80092dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d156      	bne.n	8009396 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d914      	bls.n	800931e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	1ad2      	subs	r2, r2, r3
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	461a      	mov	r2, r3
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 ff3a 	bl	800a184 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009310:	2300      	movs	r3, #0
 8009312:	2200      	movs	r2, #0
 8009314:	2100      	movs	r1, #0
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f001 fb47 	bl	800a9aa <USBD_LL_PrepareReceive>
 800931c:	e03b      	b.n	8009396 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	429a      	cmp	r2, r3
 8009328:	d11c      	bne.n	8009364 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009332:	429a      	cmp	r2, r3
 8009334:	d316      	bcc.n	8009364 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009340:	429a      	cmp	r2, r3
 8009342:	d20f      	bcs.n	8009364 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009344:	2200      	movs	r2, #0
 8009346:	2100      	movs	r1, #0
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 ff1b 	bl	800a184 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009356:	2300      	movs	r3, #0
 8009358:	2200      	movs	r2, #0
 800935a:	2100      	movs	r1, #0
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f001 fb24 	bl	800a9aa <USBD_LL_PrepareReceive>
 8009362:	e018      	b.n	8009396 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b03      	cmp	r3, #3
 800936e:	d10b      	bne.n	8009388 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009388:	2180      	movs	r1, #128	; 0x80
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f001 fa62 	bl	800a854 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 ff2c 	bl	800a1ee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800939c:	2b01      	cmp	r3, #1
 800939e:	d122      	bne.n	80093e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff fe98 	bl	80090d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80093ae:	e01a      	b.n	80093e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d114      	bne.n	80093e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00e      	beq.n	80093e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	7afa      	ldrb	r2, [r7, #11]
 80093d2:	4611      	mov	r1, r2
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	4798      	blx	r3
 80093d8:	4603      	mov	r3, r0
 80093da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	e000      	b.n	80093e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009420:	2303      	movs	r3, #3
 8009422:	e02f      	b.n	8009484 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00f      	beq.n	800944e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d009      	beq.n	800944e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6852      	ldr	r2, [r2, #4]
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	4611      	mov	r1, r2
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800944e:	2340      	movs	r3, #64	; 0x40
 8009450:	2200      	movs	r2, #0
 8009452:	2100      	movs	r1, #0
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 f9b8 	bl	800a7ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2240      	movs	r2, #64	; 0x40
 8009466:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	2200      	movs	r2, #0
 800946e:	2180      	movs	r1, #128	; 0x80
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 f9aa 	bl	800a7ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2240      	movs	r2, #64	; 0x40
 8009480:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	78fa      	ldrb	r2, [r7, #3]
 800949c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2204      	movs	r2, #4
 80094c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d106      	bne.n	80094fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800951a:	2303      	movs	r3, #3
 800951c:	e012      	b.n	8009544 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b03      	cmp	r3, #3
 8009528:	d10b      	bne.n	8009542 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d005      	beq.n	8009542 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800954c:	b480      	push	{r7}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	3301      	adds	r3, #1
 8009562:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800956a:	8a3b      	ldrh	r3, [r7, #16]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	b21a      	sxth	r2, r3
 8009570:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009574:	4313      	orrs	r3, r2
 8009576:	b21b      	sxth	r3, r3
 8009578:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800957a:	89fb      	ldrh	r3, [r7, #14]
}
 800957c:	4618      	mov	r0, r3
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d005      	beq.n	80095ae <USBD_StdDevReq+0x26>
 80095a2:	2b40      	cmp	r3, #64	; 0x40
 80095a4:	d853      	bhi.n	800964e <USBD_StdDevReq+0xc6>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <USBD_StdDevReq+0x3a>
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d14f      	bne.n	800964e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]
      break;
 80095c0:	e04a      	b.n	8009658 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	785b      	ldrb	r3, [r3, #1]
 80095c6:	2b09      	cmp	r3, #9
 80095c8:	d83b      	bhi.n	8009642 <USBD_StdDevReq+0xba>
 80095ca:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <USBD_StdDevReq+0x48>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	08009625 	.word	0x08009625
 80095d4:	08009639 	.word	0x08009639
 80095d8:	08009643 	.word	0x08009643
 80095dc:	0800962f 	.word	0x0800962f
 80095e0:	08009643 	.word	0x08009643
 80095e4:	08009603 	.word	0x08009603
 80095e8:	080095f9 	.word	0x080095f9
 80095ec:	08009643 	.word	0x08009643
 80095f0:	0800961b 	.word	0x0800961b
 80095f4:	0800960d 	.word	0x0800960d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f9de 	bl	80099bc <USBD_GetDescriptor>
          break;
 8009600:	e024      	b.n	800964c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fb6d 	bl	8009ce4 <USBD_SetAddress>
          break;
 800960a:	e01f      	b.n	800964c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fbac 	bl	8009d6c <USBD_SetConfig>
 8009614:	4603      	mov	r3, r0
 8009616:	73fb      	strb	r3, [r7, #15]
          break;
 8009618:	e018      	b.n	800964c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fc4b 	bl	8009eb8 <USBD_GetConfig>
          break;
 8009622:	e013      	b.n	800964c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fc7c 	bl	8009f24 <USBD_GetStatus>
          break;
 800962c:	e00e      	b.n	800964c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fcab 	bl	8009f8c <USBD_SetFeature>
          break;
 8009636:	e009      	b.n	800964c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fcba 	bl	8009fb4 <USBD_ClrFeature>
          break;
 8009640:	e004      	b.n	800964c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fd11 	bl	800a06c <USBD_CtlError>
          break;
 800964a:	bf00      	nop
      }
      break;
 800964c:	e004      	b.n	8009658 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fd0b 	bl	800a06c <USBD_CtlError>
      break;
 8009656:	bf00      	nop
  }

  return ret;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop

08009664 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800967a:	2b40      	cmp	r3, #64	; 0x40
 800967c:	d005      	beq.n	800968a <USBD_StdItfReq+0x26>
 800967e:	2b40      	cmp	r3, #64	; 0x40
 8009680:	d82f      	bhi.n	80096e2 <USBD_StdItfReq+0x7e>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <USBD_StdItfReq+0x26>
 8009686:	2b20      	cmp	r3, #32
 8009688:	d12b      	bne.n	80096e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009690:	b2db      	uxtb	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	2b02      	cmp	r3, #2
 8009696:	d81d      	bhi.n	80096d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	889b      	ldrh	r3, [r3, #4]
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d813      	bhi.n	80096ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	88db      	ldrh	r3, [r3, #6]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d110      	bne.n	80096de <USBD_StdItfReq+0x7a>
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10d      	bne.n	80096de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fd80 	bl	800a1c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80096c8:	e009      	b.n	80096de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fccd 	bl	800a06c <USBD_CtlError>
          break;
 80096d2:	e004      	b.n	80096de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fcc8 	bl	800a06c <USBD_CtlError>
          break;
 80096dc:	e000      	b.n	80096e0 <USBD_StdItfReq+0x7c>
          break;
 80096de:	bf00      	nop
      }
      break;
 80096e0:	e004      	b.n	80096ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fcc1 	bl	800a06c <USBD_CtlError>
      break;
 80096ea:	bf00      	nop
  }

  return ret;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	889b      	ldrh	r3, [r3, #4]
 8009708:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009712:	2b40      	cmp	r3, #64	; 0x40
 8009714:	d007      	beq.n	8009726 <USBD_StdEPReq+0x30>
 8009716:	2b40      	cmp	r3, #64	; 0x40
 8009718:	f200 8145 	bhi.w	80099a6 <USBD_StdEPReq+0x2b0>
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00c      	beq.n	800973a <USBD_StdEPReq+0x44>
 8009720:	2b20      	cmp	r3, #32
 8009722:	f040 8140 	bne.w	80099a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	4798      	blx	r3
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
      break;
 8009738:	e13a      	b.n	80099b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	2b03      	cmp	r3, #3
 8009740:	d007      	beq.n	8009752 <USBD_StdEPReq+0x5c>
 8009742:	2b03      	cmp	r3, #3
 8009744:	f300 8129 	bgt.w	800999a <USBD_StdEPReq+0x2a4>
 8009748:	2b00      	cmp	r3, #0
 800974a:	d07f      	beq.n	800984c <USBD_StdEPReq+0x156>
 800974c:	2b01      	cmp	r3, #1
 800974e:	d03c      	beq.n	80097ca <USBD_StdEPReq+0xd4>
 8009750:	e123      	b.n	800999a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b02      	cmp	r3, #2
 800975c:	d002      	beq.n	8009764 <USBD_StdEPReq+0x6e>
 800975e:	2b03      	cmp	r3, #3
 8009760:	d016      	beq.n	8009790 <USBD_StdEPReq+0x9a>
 8009762:	e02c      	b.n	80097be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00d      	beq.n	8009786 <USBD_StdEPReq+0x90>
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	2b80      	cmp	r3, #128	; 0x80
 800976e:	d00a      	beq.n	8009786 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 f86d 	bl	800a854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800977a:	2180      	movs	r1, #128	; 0x80
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 f869 	bl	800a854 <USBD_LL_StallEP>
 8009782:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009784:	e020      	b.n	80097c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fc6f 	bl	800a06c <USBD_CtlError>
              break;
 800978e:	e01b      	b.n	80097c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	885b      	ldrh	r3, [r3, #2]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10e      	bne.n	80097b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00b      	beq.n	80097b6 <USBD_StdEPReq+0xc0>
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	2b80      	cmp	r3, #128	; 0x80
 80097a2:	d008      	beq.n	80097b6 <USBD_StdEPReq+0xc0>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	88db      	ldrh	r3, [r3, #6]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d104      	bne.n	80097b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 f84f 	bl	800a854 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fd06 	bl	800a1c8 <USBD_CtlSendStatus>

              break;
 80097bc:	e004      	b.n	80097c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fc53 	bl	800a06c <USBD_CtlError>
              break;
 80097c6:	bf00      	nop
          }
          break;
 80097c8:	e0ec      	b.n	80099a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d002      	beq.n	80097dc <USBD_StdEPReq+0xe6>
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d016      	beq.n	8009808 <USBD_StdEPReq+0x112>
 80097da:	e030      	b.n	800983e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00d      	beq.n	80097fe <USBD_StdEPReq+0x108>
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
 80097e4:	2b80      	cmp	r3, #128	; 0x80
 80097e6:	d00a      	beq.n	80097fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 f831 	bl	800a854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097f2:	2180      	movs	r1, #128	; 0x80
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 f82d 	bl	800a854 <USBD_LL_StallEP>
 80097fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097fc:	e025      	b.n	800984a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fc33 	bl	800a06c <USBD_CtlError>
              break;
 8009806:	e020      	b.n	800984a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	885b      	ldrh	r3, [r3, #2]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d11b      	bne.n	8009848 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009816:	2b00      	cmp	r3, #0
 8009818:	d004      	beq.n	8009824 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 f837 	bl	800a892 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fccf 	bl	800a1c8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	4798      	blx	r3
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800983c:	e004      	b.n	8009848 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fc13 	bl	800a06c <USBD_CtlError>
              break;
 8009846:	e000      	b.n	800984a <USBD_StdEPReq+0x154>
              break;
 8009848:	bf00      	nop
          }
          break;
 800984a:	e0ab      	b.n	80099a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b02      	cmp	r3, #2
 8009856:	d002      	beq.n	800985e <USBD_StdEPReq+0x168>
 8009858:	2b03      	cmp	r3, #3
 800985a:	d032      	beq.n	80098c2 <USBD_StdEPReq+0x1cc>
 800985c:	e097      	b.n	800998e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d007      	beq.n	8009874 <USBD_StdEPReq+0x17e>
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	2b80      	cmp	r3, #128	; 0x80
 8009868:	d004      	beq.n	8009874 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fbfd 	bl	800a06c <USBD_CtlError>
                break;
 8009872:	e091      	b.n	8009998 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009878:	2b00      	cmp	r3, #0
 800987a:	da0b      	bge.n	8009894 <USBD_StdEPReq+0x19e>
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	3310      	adds	r3, #16
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4413      	add	r3, r2
 8009890:	3304      	adds	r3, #4
 8009892:	e00b      	b.n	80098ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	3304      	adds	r3, #4
 80098ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2202      	movs	r2, #2
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fc47 	bl	800a14e <USBD_CtlSendData>
              break;
 80098c0:	e06a      	b.n	8009998 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	da11      	bge.n	80098ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	f003 020f 	and.w	r2, r3, #15
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	3324      	adds	r3, #36	; 0x24
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d117      	bne.n	8009914 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fbc0 	bl	800a06c <USBD_CtlError>
                  break;
 80098ec:	e054      	b.n	8009998 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
 80098f0:	f003 020f 	and.w	r2, r3, #15
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	440b      	add	r3, r1
 8009900:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d104      	bne.n	8009914 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fbad 	bl	800a06c <USBD_CtlError>
                  break;
 8009912:	e041      	b.n	8009998 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009918:	2b00      	cmp	r3, #0
 800991a:	da0b      	bge.n	8009934 <USBD_StdEPReq+0x23e>
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009922:	4613      	mov	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	3310      	adds	r3, #16
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	4413      	add	r3, r2
 8009930:	3304      	adds	r3, #4
 8009932:	e00b      	b.n	800994c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	4413      	add	r3, r2
 800994a:	3304      	adds	r3, #4
 800994c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <USBD_StdEPReq+0x264>
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	2b80      	cmp	r3, #128	; 0x80
 8009958:	d103      	bne.n	8009962 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	e00e      	b.n	8009980 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 ffb2 	bl	800a8d0 <USBD_LL_IsStallEP>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2201      	movs	r2, #1
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	e002      	b.n	8009980 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2202      	movs	r2, #2
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fbe1 	bl	800a14e <USBD_CtlSendData>
              break;
 800998c:	e004      	b.n	8009998 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fb6b 	bl	800a06c <USBD_CtlError>
              break;
 8009996:	bf00      	nop
          }
          break;
 8009998:	e004      	b.n	80099a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fb65 	bl	800a06c <USBD_CtlError>
          break;
 80099a2:	bf00      	nop
      }
      break;
 80099a4:	e004      	b.n	80099b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fb5f 	bl	800a06c <USBD_CtlError>
      break;
 80099ae:	bf00      	nop
  }

  return ret;
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	0a1b      	lsrs	r3, r3, #8
 80099d8:	b29b      	uxth	r3, r3
 80099da:	3b01      	subs	r3, #1
 80099dc:	2b0e      	cmp	r3, #14
 80099de:	f200 8152 	bhi.w	8009c86 <USBD_GetDescriptor+0x2ca>
 80099e2:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <USBD_GetDescriptor+0x2c>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	08009a59 	.word	0x08009a59
 80099ec:	08009a71 	.word	0x08009a71
 80099f0:	08009ab1 	.word	0x08009ab1
 80099f4:	08009c87 	.word	0x08009c87
 80099f8:	08009c87 	.word	0x08009c87
 80099fc:	08009c27 	.word	0x08009c27
 8009a00:	08009c53 	.word	0x08009c53
 8009a04:	08009c87 	.word	0x08009c87
 8009a08:	08009c87 	.word	0x08009c87
 8009a0c:	08009c87 	.word	0x08009c87
 8009a10:	08009c87 	.word	0x08009c87
 8009a14:	08009c87 	.word	0x08009c87
 8009a18:	08009c87 	.word	0x08009c87
 8009a1c:	08009c87 	.word	0x08009c87
 8009a20:	08009a25 	.word	0x08009a25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2a:	69db      	ldr	r3, [r3, #28]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a46:	e126      	b.n	8009c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fb0e 	bl	800a06c <USBD_CtlError>
        err++;
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	3301      	adds	r3, #1
 8009a54:	72fb      	strb	r3, [r7, #11]
      break;
 8009a56:	e11e      	b.n	8009c96 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	7c12      	ldrb	r2, [r2, #16]
 8009a64:	f107 0108 	add.w	r1, r7, #8
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4798      	blx	r3
 8009a6c:	60f8      	str	r0, [r7, #12]
      break;
 8009a6e:	e112      	b.n	8009c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	7c1b      	ldrb	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10d      	bne.n	8009a94 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a80:	f107 0208 	add.w	r2, r7, #8
 8009a84:	4610      	mov	r0, r2
 8009a86:	4798      	blx	r3
 8009a88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	2202      	movs	r2, #2
 8009a90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a92:	e100      	b.n	8009c96 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	f107 0208 	add.w	r2, r7, #8
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	4798      	blx	r3
 8009aa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	2202      	movs	r2, #2
 8009aac:	701a      	strb	r2, [r3, #0]
      break;
 8009aae:	e0f2      	b.n	8009c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	885b      	ldrh	r3, [r3, #2]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	f200 80ac 	bhi.w	8009c14 <USBD_GetDescriptor+0x258>
 8009abc:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBD_GetDescriptor+0x108>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009add 	.word	0x08009add
 8009ac8:	08009b11 	.word	0x08009b11
 8009acc:	08009b45 	.word	0x08009b45
 8009ad0:	08009b79 	.word	0x08009b79
 8009ad4:	08009bad 	.word	0x08009bad
 8009ad8:	08009be1 	.word	0x08009be1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	7c12      	ldrb	r2, [r2, #16]
 8009af4:	f107 0108 	add.w	r1, r7, #8
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
 8009afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afe:	e091      	b.n	8009c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fab2 	bl	800a06c <USBD_CtlError>
            err++;
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0e:	e089      	b.n	8009c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00b      	beq.n	8009b34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	7c12      	ldrb	r2, [r2, #16]
 8009b28:	f107 0108 	add.w	r1, r7, #8
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	4798      	blx	r3
 8009b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b32:	e077      	b.n	8009c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa98 	bl	800a06c <USBD_CtlError>
            err++;
 8009b3c:	7afb      	ldrb	r3, [r7, #11]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	72fb      	strb	r3, [r7, #11]
          break;
 8009b42:	e06f      	b.n	8009c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00b      	beq.n	8009b68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	7c12      	ldrb	r2, [r2, #16]
 8009b5c:	f107 0108 	add.w	r1, r7, #8
 8009b60:	4610      	mov	r0, r2
 8009b62:	4798      	blx	r3
 8009b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b66:	e05d      	b.n	8009c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fa7e 	bl	800a06c <USBD_CtlError>
            err++;
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	3301      	adds	r3, #1
 8009b74:	72fb      	strb	r3, [r7, #11]
          break;
 8009b76:	e055      	b.n	8009c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	7c12      	ldrb	r2, [r2, #16]
 8009b90:	f107 0108 	add.w	r1, r7, #8
 8009b94:	4610      	mov	r0, r2
 8009b96:	4798      	blx	r3
 8009b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b9a:	e043      	b.n	8009c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fa64 	bl	800a06c <USBD_CtlError>
            err++;
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8009baa:	e03b      	b.n	8009c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00b      	beq.n	8009bd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	7c12      	ldrb	r2, [r2, #16]
 8009bc4:	f107 0108 	add.w	r1, r7, #8
 8009bc8:	4610      	mov	r0, r2
 8009bca:	4798      	blx	r3
 8009bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bce:	e029      	b.n	8009c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fa4a 	bl	800a06c <USBD_CtlError>
            err++;
 8009bd8:	7afb      	ldrb	r3, [r7, #11]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bde:	e021      	b.n	8009c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	7c12      	ldrb	r2, [r2, #16]
 8009bf8:	f107 0108 	add.w	r1, r7, #8
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4798      	blx	r3
 8009c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c02:	e00f      	b.n	8009c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa30 	bl	800a06c <USBD_CtlError>
            err++;
 8009c0c:	7afb      	ldrb	r3, [r7, #11]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	72fb      	strb	r3, [r7, #11]
          break;
 8009c12:	e007      	b.n	8009c24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa28 	bl	800a06c <USBD_CtlError>
          err++;
 8009c1c:	7afb      	ldrb	r3, [r7, #11]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009c22:	bf00      	nop
      }
      break;
 8009c24:	e037      	b.n	8009c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	7c1b      	ldrb	r3, [r3, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c36:	f107 0208 	add.w	r2, r7, #8
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	4798      	blx	r3
 8009c3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c40:	e029      	b.n	8009c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fa11 	bl	800a06c <USBD_CtlError>
        err++;
 8009c4a:	7afb      	ldrb	r3, [r7, #11]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c50:	e021      	b.n	8009c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	7c1b      	ldrb	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10d      	bne.n	8009c76 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	f107 0208 	add.w	r2, r7, #8
 8009c66:	4610      	mov	r0, r2
 8009c68:	4798      	blx	r3
 8009c6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	2207      	movs	r2, #7
 8009c72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c74:	e00f      	b.n	8009c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f9f7 	bl	800a06c <USBD_CtlError>
        err++;
 8009c7e:	7afb      	ldrb	r3, [r7, #11]
 8009c80:	3301      	adds	r3, #1
 8009c82:	72fb      	strb	r3, [r7, #11]
      break;
 8009c84:	e007      	b.n	8009c96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f9ef 	bl	800a06c <USBD_CtlError>
      err++;
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	3301      	adds	r3, #1
 8009c92:	72fb      	strb	r3, [r7, #11]
      break;
 8009c94:	bf00      	nop
  }

  if (err != 0U)
 8009c96:	7afb      	ldrb	r3, [r7, #11]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d11e      	bne.n	8009cda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	88db      	ldrh	r3, [r3, #6]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d016      	beq.n	8009cd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009ca4:	893b      	ldrh	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00e      	beq.n	8009cc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	88da      	ldrh	r2, [r3, #6]
 8009cae:	893b      	ldrh	r3, [r7, #8]
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	bf28      	it	cs
 8009cb4:	4613      	movcs	r3, r2
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cba:	893b      	ldrh	r3, [r7, #8]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fa44 	bl	800a14e <USBD_CtlSendData>
 8009cc6:	e009      	b.n	8009cdc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f9ce 	bl	800a06c <USBD_CtlError>
 8009cd0:	e004      	b.n	8009cdc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa78 	bl	800a1c8 <USBD_CtlSendStatus>
 8009cd8:	e000      	b.n	8009cdc <USBD_GetDescriptor+0x320>
    return;
 8009cda:	bf00      	nop
  }
}
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop

08009ce4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	889b      	ldrh	r3, [r3, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d131      	bne.n	8009d5a <USBD_SetAddress+0x76>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	88db      	ldrh	r3, [r3, #6]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d12d      	bne.n	8009d5a <USBD_SetAddress+0x76>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	2b7f      	cmp	r3, #127	; 0x7f
 8009d04:	d829      	bhi.n	8009d5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	885b      	ldrh	r3, [r3, #2]
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d104      	bne.n	8009d28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f9a3 	bl	800a06c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d26:	e01d      	b.n	8009d64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	7bfa      	ldrb	r2, [r7, #15]
 8009d2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fdf8 	bl	800a92a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa44 	bl	800a1c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d004      	beq.n	8009d50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2202      	movs	r2, #2
 8009d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4e:	e009      	b.n	8009d64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d58:	e004      	b.n	8009d64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f985 	bl	800a06c <USBD_CtlError>
  }
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	885b      	ldrh	r3, [r3, #2]
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	4b4c      	ldr	r3, [pc, #304]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009d82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d84:	4b4b      	ldr	r3, [pc, #300]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d905      	bls.n	8009d98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f96c 	bl	800a06c <USBD_CtlError>
    return USBD_FAIL;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e088      	b.n	8009eaa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d002      	beq.n	8009daa <USBD_SetConfig+0x3e>
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d025      	beq.n	8009df4 <USBD_SetConfig+0x88>
 8009da8:	e071      	b.n	8009e8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009daa:	4b42      	ldr	r3, [pc, #264]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d01c      	beq.n	8009dec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009db2:	4b40      	ldr	r3, [pc, #256]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009dbc:	4b3d      	ldr	r3, [pc, #244]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff f992 	bl	80090ec <USBD_SetClassConfig>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f949 	bl	800a06c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dda:	e065      	b.n	8009ea8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f9f3 	bl	800a1c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2203      	movs	r2, #3
 8009de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dea:	e05d      	b.n	8009ea8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9eb 	bl	800a1c8 <USBD_CtlSendStatus>
      break;
 8009df2:	e059      	b.n	8009ea8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009df4:	4b2f      	ldr	r3, [pc, #188]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d112      	bne.n	8009e22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e04:	4b2b      	ldr	r3, [pc, #172]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e0e:	4b29      	ldr	r3, [pc, #164]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff f985 	bl	8009124 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f9d4 	bl	800a1c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e20:	e042      	b.n	8009ea8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009e22:	4b24      	ldr	r3, [pc, #144]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d02a      	beq.n	8009e86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff f973 	bl	8009124 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e3e:	4b1d      	ldr	r3, [pc, #116]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e48:	4b1a      	ldr	r3, [pc, #104]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff f94c 	bl	80090ec <USBD_SetClassConfig>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00f      	beq.n	8009e7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f903 	bl	800a06c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff f958 	bl	8009124 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e7c:	e014      	b.n	8009ea8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f9a2 	bl	800a1c8 <USBD_CtlSendStatus>
      break;
 8009e84:	e010      	b.n	8009ea8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f99e 	bl	800a1c8 <USBD_CtlSendStatus>
      break;
 8009e8c:	e00c      	b.n	8009ea8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f8eb 	bl	800a06c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e96:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <USBD_SetConfig+0x148>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff f941 	bl	8009124 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea6:	bf00      	nop
  }

  return ret;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	2000021c 	.word	0x2000021c

08009eb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	88db      	ldrh	r3, [r3, #6]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d004      	beq.n	8009ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f8cd 	bl	800a06c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ed2:	e023      	b.n	8009f1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	dc02      	bgt.n	8009ee6 <USBD_GetConfig+0x2e>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dc03      	bgt.n	8009eec <USBD_GetConfig+0x34>
 8009ee4:	e015      	b.n	8009f12 <USBD_GetConfig+0x5a>
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d00b      	beq.n	8009f02 <USBD_GetConfig+0x4a>
 8009eea:	e012      	b.n	8009f12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3308      	adds	r3, #8
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f927 	bl	800a14e <USBD_CtlSendData>
        break;
 8009f00:	e00c      	b.n	8009f1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3304      	adds	r3, #4
 8009f06:	2201      	movs	r2, #1
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f91f 	bl	800a14e <USBD_CtlSendData>
        break;
 8009f10:	e004      	b.n	8009f1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f8a9 	bl	800a06c <USBD_CtlError>
        break;
 8009f1a:	bf00      	nop
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	3b01      	subs	r3, #1
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d81e      	bhi.n	8009f7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	88db      	ldrh	r3, [r3, #6]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d004      	beq.n	8009f4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f890 	bl	800a06c <USBD_CtlError>
        break;
 8009f4c:	e01a      	b.n	8009f84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f043 0202 	orr.w	r2, r3, #2
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	2202      	movs	r2, #2
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f8eb 	bl	800a14e <USBD_CtlSendData>
      break;
 8009f78:	e004      	b.n	8009f84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f875 	bl	800a06c <USBD_CtlError>
      break;
 8009f82:	bf00      	nop
  }
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	885b      	ldrh	r3, [r3, #2]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d106      	bne.n	8009fac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f90e 	bl	800a1c8 <USBD_CtlSendStatus>
  }
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d80b      	bhi.n	8009fe4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	885b      	ldrh	r3, [r3, #2]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d10c      	bne.n	8009fee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f8f3 	bl	800a1c8 <USBD_CtlSendStatus>
      }
      break;
 8009fe2:	e004      	b.n	8009fee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f840 	bl	800a06c <USBD_CtlError>
      break;
 8009fec:	e000      	b.n	8009ff0 <USBD_ClrFeature+0x3c>
      break;
 8009fee:	bf00      	nop
  }
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3301      	adds	r3, #1
 800a012:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	781a      	ldrb	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff fa92 	bl	800954c <SWAPBYTE>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3301      	adds	r3, #1
 800a034:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f7ff fa85 	bl	800954c <SWAPBYTE>
 800a042:	4603      	mov	r3, r0
 800a044:	461a      	mov	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3301      	adds	r3, #1
 800a04e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3301      	adds	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f7ff fa78 	bl	800954c <SWAPBYTE>
 800a05c:	4603      	mov	r3, r0
 800a05e:	461a      	mov	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	80da      	strh	r2, [r3, #6]
}
 800a064:	bf00      	nop
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a076:	2180      	movs	r1, #128	; 0x80
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fbeb 	bl	800a854 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a07e:	2100      	movs	r1, #0
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fbe7 	bl	800a854 <USBD_LL_StallEP>
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b086      	sub	sp, #24
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d036      	beq.n	800a112 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0a8:	6938      	ldr	r0, [r7, #16]
 800a0aa:	f000 f836 	bl	800a11a <USBD_GetLen>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	7812      	ldrb	r2, [r2, #0]
 800a0c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	2203      	movs	r2, #3
 800a0d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0de:	e013      	b.n	800a108 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	7812      	ldrb	r2, [r2, #0]
 800a0ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	613b      	str	r3, [r7, #16]
    idx++;
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	701a      	strb	r2, [r3, #0]
    idx++;
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	3301      	adds	r3, #1
 800a106:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e7      	bne.n	800a0e0 <USBD_GetString+0x52>
 800a110:	e000      	b.n	800a114 <USBD_GetString+0x86>
    return;
 800a112:	bf00      	nop
  }
}
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b085      	sub	sp, #20
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a12a:	e005      	b.n	800a138 <USBD_GetLen+0x1e>
  {
    len++;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	3301      	adds	r3, #1
 800a130:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	3301      	adds	r3, #1
 800a136:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f5      	bne.n	800a12c <USBD_GetLen+0x12>
  }

  return len;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2202      	movs	r2, #2
 800a15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	2100      	movs	r1, #0
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 fbf7 	bl	800a968 <USBD_LL_Transmit>

  return USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	2100      	movs	r1, #0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fbe6 	bl	800a968 <USBD_LL_Transmit>

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 fbf6 	bl	800a9aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2204      	movs	r2, #4
 800a1d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1d8:	2300      	movs	r3, #0
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fbc2 	bl	800a968 <USBD_LL_Transmit>

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2205      	movs	r2, #5
 800a1fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1fe:	2300      	movs	r3, #0
 800a200:	2200      	movs	r2, #0
 800a202:	2100      	movs	r1, #0
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fbd0 	bl	800a9aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800a218:	2200      	movs	r2, #0
 800a21a:	490e      	ldr	r1, [pc, #56]	; (800a254 <MX_USB_Device_Init+0x40>)
 800a21c:	480e      	ldr	r0, [pc, #56]	; (800a258 <MX_USB_Device_Init+0x44>)
 800a21e:	f7fe fef7 	bl	8009010 <USBD_Init>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a228:	f7f7 fb05 	bl	8001836 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800a22c:	490b      	ldr	r1, [pc, #44]	; (800a25c <MX_USB_Device_Init+0x48>)
 800a22e:	480a      	ldr	r0, [pc, #40]	; (800a258 <MX_USB_Device_Init+0x44>)
 800a230:	f7fe ff1e 	bl	8009070 <USBD_RegisterClass>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a23a:	f7f7 fafc 	bl	8001836 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a23e:	4806      	ldr	r0, [pc, #24]	; (800a258 <MX_USB_Device_Init+0x44>)
 800a240:	f7fe ff3d 	bl	80090be <USBD_Start>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800a24a:	f7f7 faf4 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a24e:	bf00      	nop
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000130 	.word	0x20000130
 800a258:	200002f4 	.word	0x200002f4
 800a25c:	20000028 	.word	0x20000028

0800a260 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2212      	movs	r2, #18
 800a270:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800a272:	4b03      	ldr	r3, [pc, #12]	; (800a280 <USBD_HID_DeviceDescriptor+0x20>)
}
 800a274:	4618      	mov	r0, r3
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	20000150 	.word	0x20000150

0800a284 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2204      	movs	r2, #4
 800a294:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a296:	4b03      	ldr	r3, [pc, #12]	; (800a2a4 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	20000164 	.word	0x20000164

0800a2a8 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	6039      	str	r1, [r7, #0]
 800a2b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2b4:	79fb      	ldrb	r3, [r7, #7]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d105      	bne.n	800a2c6 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	4907      	ldr	r1, [pc, #28]	; (800a2dc <USBD_HID_ProductStrDescriptor+0x34>)
 800a2be:	4808      	ldr	r0, [pc, #32]	; (800a2e0 <USBD_HID_ProductStrDescriptor+0x38>)
 800a2c0:	f7ff fee5 	bl	800a08e <USBD_GetString>
 800a2c4:	e004      	b.n	800a2d0 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	4904      	ldr	r1, [pc, #16]	; (800a2dc <USBD_HID_ProductStrDescriptor+0x34>)
 800a2ca:	4805      	ldr	r0, [pc, #20]	; (800a2e0 <USBD_HID_ProductStrDescriptor+0x38>)
 800a2cc:	f7ff fedf 	bl	800a08e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2d0:	4b02      	ldr	r3, [pc, #8]	; (800a2dc <USBD_HID_ProductStrDescriptor+0x34>)
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200005c4 	.word	0x200005c4
 800a2e0:	0800ab88 	.word	0x0800ab88

0800a2e4 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	6039      	str	r1, [r7, #0]
 800a2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	4904      	ldr	r1, [pc, #16]	; (800a304 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800a2f4:	4804      	ldr	r0, [pc, #16]	; (800a308 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800a2f6:	f7ff feca 	bl	800a08e <USBD_GetString>
  return USBD_StrDesc;
 800a2fa:	4b02      	ldr	r3, [pc, #8]	; (800a304 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200005c4 	.word	0x200005c4
 800a308:	0800aba0 	.word	0x0800aba0

0800a30c <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	221a      	movs	r2, #26
 800a31c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a31e:	f000 f843 	bl	800a3a8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a322:	4b02      	ldr	r3, [pc, #8]	; (800a32c <USBD_HID_SerialStrDescriptor+0x20>)
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20000168 	.word	0x20000168

0800a330 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d105      	bne.n	800a34e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	4907      	ldr	r1, [pc, #28]	; (800a364 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a346:	4808      	ldr	r0, [pc, #32]	; (800a368 <USBD_HID_ConfigStrDescriptor+0x38>)
 800a348:	f7ff fea1 	bl	800a08e <USBD_GetString>
 800a34c:	e004      	b.n	800a358 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	4904      	ldr	r1, [pc, #16]	; (800a364 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a352:	4805      	ldr	r0, [pc, #20]	; (800a368 <USBD_HID_ConfigStrDescriptor+0x38>)
 800a354:	f7ff fe9b 	bl	800a08e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a358:	4b02      	ldr	r3, [pc, #8]	; (800a364 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	200005c4 	.word	0x200005c4
 800a368:	0800abb4 	.word	0x0800abb4

0800a36c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	6039      	str	r1, [r7, #0]
 800a376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d105      	bne.n	800a38a <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	4907      	ldr	r1, [pc, #28]	; (800a3a0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a382:	4808      	ldr	r0, [pc, #32]	; (800a3a4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a384:	f7ff fe83 	bl	800a08e <USBD_GetString>
 800a388:	e004      	b.n	800a394 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	4904      	ldr	r1, [pc, #16]	; (800a3a0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a38e:	4805      	ldr	r0, [pc, #20]	; (800a3a4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a390:	f7ff fe7d 	bl	800a08e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a394:	4b02      	ldr	r3, [pc, #8]	; (800a3a0 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	200005c4 	.word	0x200005c4
 800a3a4:	0800abc0 	.word	0x0800abc0

0800a3a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <Get_SerialNum+0x44>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <Get_SerialNum+0x48>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3ba:	4b0e      	ldr	r3, [pc, #56]	; (800a3f4 <Get_SerialNum+0x4c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d009      	beq.n	800a3e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3ce:	2208      	movs	r2, #8
 800a3d0:	4909      	ldr	r1, [pc, #36]	; (800a3f8 <Get_SerialNum+0x50>)
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 f814 	bl	800a400 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3d8:	2204      	movs	r2, #4
 800a3da:	4908      	ldr	r1, [pc, #32]	; (800a3fc <Get_SerialNum+0x54>)
 800a3dc:	68b8      	ldr	r0, [r7, #8]
 800a3de:	f000 f80f 	bl	800a400 <IntToUnicode>
  }
}
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	1fff7590 	.word	0x1fff7590
 800a3f0:	1fff7594 	.word	0x1fff7594
 800a3f4:	1fff7598 	.word	0x1fff7598
 800a3f8:	2000016a 	.word	0x2000016a
 800a3fc:	2000017a 	.word	0x2000017a

0800a400 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a412:	2300      	movs	r3, #0
 800a414:	75fb      	strb	r3, [r7, #23]
 800a416:	e027      	b.n	800a468 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	0f1b      	lsrs	r3, r3, #28
 800a41c:	2b09      	cmp	r3, #9
 800a41e:	d80b      	bhi.n	800a438 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	0f1b      	lsrs	r3, r3, #28
 800a424:	b2da      	uxtb	r2, r3
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	4619      	mov	r1, r3
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	440b      	add	r3, r1
 800a430:	3230      	adds	r2, #48	; 0x30
 800a432:	b2d2      	uxtb	r2, r2
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	e00a      	b.n	800a44e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0f1b      	lsrs	r3, r3, #28
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	4619      	mov	r1, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	440b      	add	r3, r1
 800a448:	3237      	adds	r2, #55	; 0x37
 800a44a:	b2d2      	uxtb	r2, r2
 800a44c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	011b      	lsls	r3, r3, #4
 800a452:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	3301      	adds	r3, #1
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	4413      	add	r3, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	3301      	adds	r3, #1
 800a466:	75fb      	strb	r3, [r7, #23]
 800a468:	7dfa      	ldrb	r2, [r7, #23]
 800a46a:	79fb      	ldrb	r3, [r7, #7]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d3d3      	bcc.n	800a418 <IntToUnicode+0x18>
  }
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	371c      	adds	r7, #28
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <LL_AHB2_GRP1_EnableClock>:
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a48a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a48c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4313      	orrs	r3, r2
 800a494:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a49a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
}
 800a4a4:	bf00      	nop
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <LL_APB1_GRP1_EnableClock>:
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a4b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a4c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
}
 800a4d6:	bf00      	nop
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
	...

0800a4e4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b09c      	sub	sp, #112	; 0x70
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	605a      	str	r2, [r3, #4]
 800a4f6:	609a      	str	r2, [r3, #8]
 800a4f8:	60da      	str	r2, [r3, #12]
 800a4fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a4fc:	f107 030c 	add.w	r3, r7, #12
 800a500:	2250      	movs	r2, #80	; 0x50
 800a502:	2100      	movs	r1, #0
 800a504:	4618      	mov	r0, r3
 800a506:	f000 fb15 	bl	800ab34 <memset>
  if(pcdHandle->Instance==USB)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a23      	ldr	r2, [pc, #140]	; (800a59c <HAL_PCD_MspInit+0xb8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d13e      	bne.n	800a592 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a514:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a518:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800a51a:	2318      	movs	r3, #24
 800a51c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800a51e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a522:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800a524:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a528:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800a52a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a52e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800a530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a534:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a536:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a53a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a53c:	f107 030c 	add.w	r3, r7, #12
 800a540:	4618      	mov	r0, r3
 800a542:	f7fa ff65 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800a54c:	f7f7 f973 	bl	8001836 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a550:	2001      	movs	r0, #1
 800a552:	f7ff ff94 	bl	800a47e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a556:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a55a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a55c:	2302      	movs	r3, #2
 800a55e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a560:	2300      	movs	r3, #0
 800a562:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a564:	2300      	movs	r3, #0
 800a566:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a568:	230a      	movs	r3, #10
 800a56a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a56c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a570:	4619      	mov	r1, r3
 800a572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a576:	f7f7 fd5b 	bl	8002030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a57a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a57e:	f7ff ff97 	bl	800a4b0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a582:	2200      	movs	r2, #0
 800a584:	2100      	movs	r1, #0
 800a586:	2014      	movs	r0, #20
 800a588:	f7f7 fd1d 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a58c:	2014      	movs	r0, #20
 800a58e:	f7f7 fd34 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a592:	bf00      	nop
 800a594:	3770      	adds	r7, #112	; 0x70
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	40006800 	.word	0x40006800

0800a5a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f7fe fdcc 	bl	8009154 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a5d6:	78fa      	ldrb	r2, [r7, #3]
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	440b      	add	r3, r1
 800a5e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f7fe fe06 	bl	80091fe <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	460b      	mov	r3, r1
 800a604:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a60c:	78fa      	ldrb	r2, [r7, #3]
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	4613      	mov	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	440b      	add	r3, r1
 800a61a:	333c      	adds	r3, #60	; 0x3c
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	4619      	mov	r1, r3
 800a622:	f7fe fe4f 	bl	80092c4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a626:	bf00      	nop
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe ff63 	bl	8009508 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a652:	2301      	movs	r3, #1
 800a654:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d001      	beq.n	800a662 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a65e:	f7f7 f8ea 	bl	8001836 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a668:	7bfa      	ldrb	r2, [r7, #15]
 800a66a:	4611      	mov	r1, r2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fe ff0d 	bl	800948c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fe feb9 	bl	80093f0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
	...

0800a688 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe ff08 	bl	80094ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6a4:	4b04      	ldr	r3, [pc, #16]	; (800a6b8 <HAL_PCD_SuspendCallback+0x30>)
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	4a03      	ldr	r2, [pc, #12]	; (800a6b8 <HAL_PCD_SuspendCallback+0x30>)
 800a6aa:	f043 0306 	orr.w	r3, r3, #6
 800a6ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	e000ed00 	.word	0xe000ed00

0800a6bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d007      	beq.n	800a6dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6cc:	4b08      	ldr	r3, [pc, #32]	; (800a6f0 <HAL_PCD_ResumeCallback+0x34>)
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	4a07      	ldr	r2, [pc, #28]	; (800a6f0 <HAL_PCD_ResumeCallback+0x34>)
 800a6d2:	f023 0306 	bic.w	r3, r3, #6
 800a6d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a6d8:	f000 f9d6 	bl	800aa88 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fef8 	bl	80094d8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	e000ed00 	.word	0xe000ed00

0800a6f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a6fc:	4a23      	ldr	r2, [pc, #140]	; (800a78c <USBD_LL_Init+0x98>)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a21      	ldr	r2, [pc, #132]	; (800a78c <USBD_LL_Init+0x98>)
 800a708:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a70c:	f7f9 fb62 	bl	8003dd4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800a710:	4b1e      	ldr	r3, [pc, #120]	; (800a78c <USBD_LL_Init+0x98>)
 800a712:	4a1f      	ldr	r2, [pc, #124]	; (800a790 <USBD_LL_Init+0x9c>)
 800a714:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a716:	4b1d      	ldr	r3, [pc, #116]	; (800a78c <USBD_LL_Init+0x98>)
 800a718:	2208      	movs	r2, #8
 800a71a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a71c:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <USBD_LL_Init+0x98>)
 800a71e:	2202      	movs	r2, #2
 800a720:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a722:	4b1a      	ldr	r3, [pc, #104]	; (800a78c <USBD_LL_Init+0x98>)
 800a724:	2202      	movs	r2, #2
 800a726:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a728:	4b18      	ldr	r3, [pc, #96]	; (800a78c <USBD_LL_Init+0x98>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a72e:	4b17      	ldr	r3, [pc, #92]	; (800a78c <USBD_LL_Init+0x98>)
 800a730:	2200      	movs	r2, #0
 800a732:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a734:	4b15      	ldr	r3, [pc, #84]	; (800a78c <USBD_LL_Init+0x98>)
 800a736:	2200      	movs	r2, #0
 800a738:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a73a:	4b14      	ldr	r3, [pc, #80]	; (800a78c <USBD_LL_Init+0x98>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a740:	4812      	ldr	r0, [pc, #72]	; (800a78c <USBD_LL_Init+0x98>)
 800a742:	f7f7 fe0d 	bl	8002360 <HAL_PCD_Init>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a74c:	f7f7 f873 	bl	8001836 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a756:	2318      	movs	r3, #24
 800a758:	2200      	movs	r2, #0
 800a75a:	2100      	movs	r1, #0
 800a75c:	f7f9 faae 	bl	8003cbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a766:	2358      	movs	r3, #88	; 0x58
 800a768:	2200      	movs	r2, #0
 800a76a:	2180      	movs	r1, #128	; 0x80
 800a76c:	f7f9 faa6 	bl	8003cbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a77a:	2200      	movs	r2, #0
 800a77c:	2181      	movs	r1, #129	; 0x81
 800a77e:	f7f9 fa9d 	bl	8003cbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	200007c4 	.word	0x200007c4
 800a790:	40006800 	.word	0x40006800

0800a794 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7f7 febd 	bl	800252a <HAL_PCD_Start>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 f96c 	bl	800aa94 <USBD_Get_USB_Status>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	4608      	mov	r0, r1
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4603      	mov	r3, r0
 800a7da:	70fb      	strb	r3, [r7, #3]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70bb      	strb	r3, [r7, #2]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7f2:	78bb      	ldrb	r3, [r7, #2]
 800a7f4:	883a      	ldrh	r2, [r7, #0]
 800a7f6:	78f9      	ldrb	r1, [r7, #3]
 800a7f8:	f7f8 f805 	bl	8002806 <HAL_PCD_EP_Open>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f946 	bl	800aa94 <USBD_Get_USB_Status>
 800a808:	4603      	mov	r3, r0
 800a80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	4611      	mov	r1, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f7f8 f84c 	bl	80028d2 <HAL_PCD_EP_Close>
 800a83a:	4603      	mov	r3, r0
 800a83c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	4618      	mov	r0, r3
 800a842:	f000 f927 	bl	800aa94 <USBD_Get_USB_Status>
 800a846:	4603      	mov	r3, r0
 800a848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a86e:	78fa      	ldrb	r2, [r7, #3]
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f7f8 f8f5 	bl	8002a62 <HAL_PCD_EP_SetStall>
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f908 	bl	800aa94 <USBD_Get_USB_Status>
 800a884:	4603      	mov	r3, r0
 800a886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a888:	7bbb      	ldrb	r3, [r7, #14]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	460b      	mov	r3, r1
 800a89c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8ac:	78fa      	ldrb	r2, [r7, #3]
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7f8 f928 	bl	8002b06 <HAL_PCD_EP_ClrStall>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 f8e9 	bl	800aa94 <USBD_Get_USB_Status>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da0c      	bge.n	800a906 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8ec:	78fb      	ldrb	r3, [r7, #3]
 800a8ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8f2:	68f9      	ldr	r1, [r7, #12]
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	440b      	add	r3, r1
 800a900:	3302      	adds	r3, #2
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	e00b      	b.n	800a91e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a906:	78fb      	ldrb	r3, [r7, #3]
 800a908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a90c:	68f9      	ldr	r1, [r7, #12]
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	00db      	lsls	r3, r3, #3
 800a916:	440b      	add	r3, r1
 800a918:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a91c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a944:	78fa      	ldrb	r2, [r7, #3]
 800a946:	4611      	mov	r1, r2
 800a948:	4618      	mov	r0, r3
 800a94a:	f7f7 ff37 	bl	80027bc <HAL_PCD_SetAddress>
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f89d 	bl	800aa94 <USBD_Get_USB_Status>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	607a      	str	r2, [r7, #4]
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	460b      	mov	r3, r1
 800a976:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a986:	7af9      	ldrb	r1, [r7, #11]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	f7f8 f826 	bl	80029dc <HAL_PCD_EP_Transmit>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a994:	7dfb      	ldrb	r3, [r7, #23]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f87c 	bl	800aa94 <USBD_Get_USB_Status>
 800a99c:	4603      	mov	r3, r0
 800a99e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b086      	sub	sp, #24
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9c8:	7af9      	ldrb	r1, [r7, #11]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	f7f7 ffc8 	bl	8002962 <HAL_PCD_EP_Receive>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 f85b 	bl	800aa94 <USBD_Get_USB_Status>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a9f8:	78fb      	ldrb	r3, [r7, #3]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <HAL_PCDEx_LPM_Callback+0x18>
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d013      	beq.n	800aa2a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aa02:	e023      	b.n	800aa4c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d007      	beq.n	800aa1c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aa0c:	f000 f83c 	bl	800aa88 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa10:	4b10      	ldr	r3, [pc, #64]	; (800aa54 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	4a0f      	ldr	r2, [pc, #60]	; (800aa54 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa16:	f023 0306 	bic.w	r3, r3, #6
 800aa1a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fd58 	bl	80094d8 <USBD_LL_Resume>
    break;
 800aa28:	e010      	b.n	800aa4c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fd3b 	bl	80094ac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d005      	beq.n	800aa4a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	4a04      	ldr	r2, [pc, #16]	; (800aa54 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa44:	f043 0306 	orr.w	r3, r3, #6
 800aa48:	6113      	str	r3, [r2, #16]
    break;
 800aa4a:	bf00      	nop
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	e000ed00 	.word	0xe000ed00

0800aa58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa60:	4b03      	ldr	r3, [pc, #12]	; (800aa70 <USBD_static_malloc+0x18>)
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	20000220 	.word	0x20000220

0800aa74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]

}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aa8c:	f7f6 fe4a 	bl	8001724 <SystemClock_Config>
}
 800aa90:	bf00      	nop
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d817      	bhi.n	800aad8 <USBD_Get_USB_Status+0x44>
 800aaa8:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <USBD_Get_USB_Status+0x1c>)
 800aaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaae:	bf00      	nop
 800aab0:	0800aac1 	.word	0x0800aac1
 800aab4:	0800aac7 	.word	0x0800aac7
 800aab8:	0800aacd 	.word	0x0800aacd
 800aabc:	0800aad3 	.word	0x0800aad3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
    break;
 800aac4:	e00b      	b.n	800aade <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aac6:	2303      	movs	r3, #3
 800aac8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaca:	e008      	b.n	800aade <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aacc:	2301      	movs	r3, #1
 800aace:	73fb      	strb	r3, [r7, #15]
    break;
 800aad0:	e005      	b.n	800aade <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aad2:	2303      	movs	r3, #3
 800aad4:	73fb      	strb	r3, [r7, #15]
    break;
 800aad6:	e002      	b.n	800aade <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aad8:	2303      	movs	r3, #3
 800aada:	73fb      	strb	r3, [r7, #15]
    break;
 800aadc:	bf00      	nop
  }
  return usb_status;
 800aade:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3714      	adds	r7, #20
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <__libc_init_array>:
 800aaec:	b570      	push	{r4, r5, r6, lr}
 800aaee:	4d0d      	ldr	r5, [pc, #52]	; (800ab24 <__libc_init_array+0x38>)
 800aaf0:	4c0d      	ldr	r4, [pc, #52]	; (800ab28 <__libc_init_array+0x3c>)
 800aaf2:	1b64      	subs	r4, r4, r5
 800aaf4:	10a4      	asrs	r4, r4, #2
 800aaf6:	2600      	movs	r6, #0
 800aaf8:	42a6      	cmp	r6, r4
 800aafa:	d109      	bne.n	800ab10 <__libc_init_array+0x24>
 800aafc:	4d0b      	ldr	r5, [pc, #44]	; (800ab2c <__libc_init_array+0x40>)
 800aafe:	4c0c      	ldr	r4, [pc, #48]	; (800ab30 <__libc_init_array+0x44>)
 800ab00:	f000 f820 	bl	800ab44 <_init>
 800ab04:	1b64      	subs	r4, r4, r5
 800ab06:	10a4      	asrs	r4, r4, #2
 800ab08:	2600      	movs	r6, #0
 800ab0a:	42a6      	cmp	r6, r4
 800ab0c:	d105      	bne.n	800ab1a <__libc_init_array+0x2e>
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab14:	4798      	blx	r3
 800ab16:	3601      	adds	r6, #1
 800ab18:	e7ee      	b.n	800aaf8 <__libc_init_array+0xc>
 800ab1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab1e:	4798      	blx	r3
 800ab20:	3601      	adds	r6, #1
 800ab22:	e7f2      	b.n	800ab0a <__libc_init_array+0x1e>
 800ab24:	0800ac50 	.word	0x0800ac50
 800ab28:	0800ac50 	.word	0x0800ac50
 800ab2c:	0800ac50 	.word	0x0800ac50
 800ab30:	0800ac54 	.word	0x0800ac54

0800ab34 <memset>:
 800ab34:	4402      	add	r2, r0
 800ab36:	4603      	mov	r3, r0
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d100      	bne.n	800ab3e <memset+0xa>
 800ab3c:	4770      	bx	lr
 800ab3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab42:	e7f9      	b.n	800ab38 <memset+0x4>

0800ab44 <_init>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	bf00      	nop
 800ab48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab4a:	bc08      	pop	{r3}
 800ab4c:	469e      	mov	lr, r3
 800ab4e:	4770      	bx	lr

0800ab50 <_fini>:
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab52:	bf00      	nop
 800ab54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab56:	bc08      	pop	{r3}
 800ab58:	469e      	mov	lr, r3
 800ab5a:	4770      	bx	lr

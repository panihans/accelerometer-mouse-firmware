
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800811c  0800811c  0001811c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  20000004  08008218  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007fc  2000016c  08008380  0002016c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000968  08008380  00020968  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000176e2  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000034b3  00000000  00000000  0003787e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001488  00000000  00000000  0003ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001320  00000000  00000000  0003c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00021e2f  00000000  00000000  0003d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012bd6  00000000  00000000  0005f30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cadf9  00000000  00000000  00071ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0013ccde  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000052e8  00000000  00000000  0013cd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000016c 	.word	0x2000016c
 8000158:	00000000 	.word	0x00000000
 800015c:	08008104 	.word	0x08008104

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000170 	.word	0x20000170
 8000178:	08008104 	.word	0x08008104

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001c4:	2002      	movs	r0, #2
 80001c6:	f7ff ffd9 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ca:	2001      	movs	r0, #1
 80001cc:	f7ff ffd6 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d6:	480a      	ldr	r0, [pc, #40]	; (8000200 <MX_GPIO_Init+0x50>)
 80001d8:	f000 fcc8 	bl	8000b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e2:	2301      	movs	r3, #1
 80001e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <MX_GPIO_Init+0x50>)
 80001f4:	f000 fb52 	bl	800089c <HAL_GPIO_Init>

}
 80001f8:	bf00      	nop
 80001fa:	3718      	adds	r7, #24
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	48000400 	.word	0x48000400

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 f98e 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f81c 	bl	8000248 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000210:	f000 f886 	bl	8000320 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000214:	f7ff ffcc 	bl	80001b0 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000218:	f007 fadc 	bl	80077d4 <MX_USB_Device_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 TOGGLE_LED();
 800021c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000220:	4808      	ldr	r0, [pc, #32]	; (8000244 <main+0x40>)
 8000222:	f000 fcbb 	bl	8000b9c <HAL_GPIO_TogglePin>
	 HAL_Delay(500);
 8000226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022a:	f000 fa03 	bl	8000634 <HAL_Delay>
	 TOGGLE_LED();
 800022e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000232:	4804      	ldr	r0, [pc, #16]	; (8000244 <main+0x40>)
 8000234:	f000 fcb2 	bl	8000b9c <HAL_GPIO_TogglePin>
	 HAL_Delay(500);
 8000238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800023c:	f000 f9fa 	bl	8000634 <HAL_Delay>
	 TOGGLE_LED();
 8000240:	e7ec      	b.n	800021c <main+0x18>
 8000242:	bf00      	nop
 8000244:	48000400 	.word	0x48000400

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b09a      	sub	sp, #104	; 0x68
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0320 	add.w	r3, r7, #32
 8000252:	2248      	movs	r2, #72	; 0x48
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f007 ff4c 	bl	80080f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]
 800026a:	615a      	str	r2, [r3, #20]
 800026c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026e:	4b2b      	ldr	r3, [pc, #172]	; (800031c <SystemClock_Config+0xd4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000276:	4a29      	ldr	r2, [pc, #164]	; (800031c <SystemClock_Config+0xd4>)
 8000278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027c:	6013      	str	r3, [r2, #0]
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <SystemClock_Config+0xd4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800028a:	2326      	movs	r3, #38	; 0x26
 800028c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800028e:	2300      	movs	r3, #0
 8000290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	2340      	movs	r3, #64	; 0x40
 800029e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002a0:	2300      	movs	r3, #0
 80002a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a4:	2360      	movs	r3, #96	; 0x60
 80002a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	2302      	movs	r3, #2
 80002aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002ac:	2301      	movs	r3, #1
 80002ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002b4:	2320      	movs	r3, #32
 80002b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80002c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0320 	add.w	r3, r7, #32
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fd26 	bl	8002d20 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002da:	f000 f83e 	bl	800035a <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002de:	236f      	movs	r3, #111	; 0x6f
 80002e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2303      	movs	r3, #3
 80002e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80002f2:	2380      	movs	r3, #128	; 0x80
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2103      	movs	r1, #3
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 f89a 	bl	8003438 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800030a:	f000 f826 	bl	800035a <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800030e:	f003 fe2d 	bl	8003f6c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000312:	bf00      	nop
 8000314:	3768      	adds	r7, #104	; 0x68
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	58000400 	.word	0x58000400

08000320 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b094      	sub	sp, #80	; 0x50
 8000324:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000326:	463b      	mov	r3, r7
 8000328:	2250      	movs	r2, #80	; 0x50
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f007 fee1 	bl	80080f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000336:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000338:	2300      	movs	r3, #0
 800033a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800033c:	2310      	movs	r3, #16
 800033e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	4618      	mov	r0, r3
 8000344:	f003 fc9c 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800034e:	f000 f804 	bl	800035a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000352:	bf00      	nop
 8000354:	3750      	adds	r7, #80	; 0x50
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035e:	b672      	cpsid	i
}
 8000360:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000362:	e7fe      	b.n	8000362 <Error_Handler+0x8>

08000364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2101      	movs	r1, #1
 800036c:	f06f 000b 	mvn.w	r0, #11
 8000370:	f000 fa5f 	bl	8000832 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	2101      	movs	r1, #1
 8000378:	f06f 000a 	mvn.w	r0, #10
 800037c:	f000 fa59 	bl	8000832 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	f06f 0009 	mvn.w	r0, #9
 8000388:	f000 fa53 	bl	8000832 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2101      	movs	r1, #1
 8000390:	f06f 0004 	mvn.w	r0, #4
 8000394:	f000 fa4d 	bl	8000832 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2101      	movs	r1, #1
 800039c:	f06f 0003 	mvn.w	r0, #3
 80003a0:	f000 fa47 	bl	8000832 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	f06f 0001 	mvn.w	r0, #1
 80003ac:	f000 fa41 	bl	8000832 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <NMI_Handler+0x4>

080003ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <HardFault_Handler+0x4>

080003c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <MemManage_Handler+0x4>

080003c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000400:	f000 f8ec 	bl	80005dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}

08000408 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <USB_LP_IRQHandler+0x10>)
 800040e:	f000 fce6 	bl	8000dde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000674 	.word	0x20000674

0800041c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000420:	4b22      	ldr	r3, [pc, #136]	; (80004ac <SystemInit+0x90>)
 8000422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <SystemInit+0x90>)
 8000428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800042c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000444:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000448:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800044a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <SystemInit+0x94>)
 8000456:	4013      	ands	r3, r2
 8000458:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800045a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800045e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000466:	f023 0305 	bic.w	r3, r3, #5
 800046a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800046e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800047a:	f023 0301 	bic.w	r3, r3, #1
 800047e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <SystemInit+0x98>)
 8000488:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800048a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000498:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800049a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	faf6fefb 	.word	0xfaf6fefb
 80004b4:	22041000 	.word	0x22041000

080004b8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80004b8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004bc:	3304      	adds	r3, #4

080004be <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004be:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80004c2:	d3f9      	bcc.n	80004b8 <CopyDataInit>
  bx lr
 80004c4:	4770      	bx	lr

080004c6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80004c6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80004c8:	3004      	adds	r0, #4

080004ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80004ca:	4288      	cmp	r0, r1
  bcc FillZerobss
 80004cc:	d3fb      	bcc.n	80004c6 <FillZerobss>
  bx lr
 80004ce:	4770      	bx	lr

080004d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80004d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d4:	f7ff ffa2 	bl	800041c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <LoopForever+0x8>)
 80004da:	490c      	ldr	r1, [pc, #48]	; (800050c <LoopForever+0xc>)
 80004dc:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <LoopForever+0x10>)
 80004de:	2300      	movs	r3, #0
 80004e0:	f7ff ffed 	bl	80004be <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <LoopForever+0x14>)
 80004e6:	490c      	ldr	r1, [pc, #48]	; (8000518 <LoopForever+0x18>)
 80004e8:	2300      	movs	r3, #0
 80004ea:	f7ff ffee 	bl	80004ca <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004ee:	480b      	ldr	r0, [pc, #44]	; (800051c <LoopForever+0x1c>)
 80004f0:	490b      	ldr	r1, [pc, #44]	; (8000520 <LoopForever+0x20>)
 80004f2:	2300      	movs	r3, #0
 80004f4:	f7ff ffe9 	bl	80004ca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f8:	f007 fdd8 	bl	80080ac <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80004fc:	f7ff fe82 	bl	8000204 <main>

08000500 <LoopForever>:

LoopForever:
  b LoopForever
 8000500:	e7fe      	b.n	8000500 <LoopForever>
 8000502:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000504:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8000508:	20000004 	.word	0x20000004
 800050c:	2000016c 	.word	0x2000016c
 8000510:	08008218 	.word	0x08008218
  INIT_BSS _sbss, _ebss
 8000514:	2000016c 	.word	0x2000016c
 8000518:	20000968 	.word	0x20000968
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800051c:	20030000 	.word	0x20030000
 8000520:	20030000 	.word	0x20030000

08000524 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC1_IRQHandler>
	...

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800052e:	2300      	movs	r3, #0
 8000530:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_Init+0x3c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_Init+0x3c>)
 8000538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053e:	2003      	movs	r0, #3
 8000540:	f000 f96c 	bl	800081c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000544:	2000      	movs	r0, #0
 8000546:	f000 f80f 	bl	8000568 <HAL_InitTick>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	e001      	b.n	800055a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000556:	f7ff ff05 	bl	8000364 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800055a:	79fb      	ldrb	r3, [r7, #7]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	58004000 	.word	0x58004000

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_InitTick+0x6c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d024      	beq.n	80005c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800057c:	f003 f908 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 8000580:	4602      	mov	r2, r0
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_InitTick+0x6c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000590:	fbb2 f3f3 	udiv	r3, r2, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f974 	bl	8000882 <HAL_SYSTICK_Config>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d10f      	bne.n	80005c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d809      	bhi.n	80005ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a6:	2200      	movs	r2, #0
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	f04f 30ff 	mov.w	r0, #4294967295
 80005ae:	f000 f940 	bl	8000832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005b2:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <HAL_InitTick+0x70>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	e007      	b.n	80005ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e004      	b.n	80005ca <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e001      	b.n	80005ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000000c 	.word	0x2000000c
 80005d8:	20000008 	.word	0x20000008

080005dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x20>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_IncTick+0x24>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_IncTick+0x24>)
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	2000000c 	.word	0x2000000c
 8000600:	200001a0 	.word	0x200001a0

08000604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return uwTick;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_GetTick+0x14>)
 800060a:	681b      	ldr	r3, [r3, #0]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200001a0 	.word	0x200001a0

0800061c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_GetTickPrio+0x14>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000008 	.word	0x20000008

08000634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800063c:	f7ff ffe2 	bl	8000604 <HAL_GetTick>
 8000640:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800064c:	d005      	beq.n	800065a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_Delay+0x44>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4413      	add	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800065a:	bf00      	nop
 800065c:	f7ff ffd2 	bl	8000604 <HAL_GetTick>
 8000660:	4602      	mov	r2, r0
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	429a      	cmp	r2, r3
 800066a:	d8f7      	bhi.n	800065c <HAL_Delay+0x28>
    {
    }
  }
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000000c 	.word	0x2000000c

0800067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__NVIC_GetPriorityGrouping+0x18>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	f003 0307 	and.w	r3, r3, #7
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db0b      	blt.n	800070a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f003 021f 	and.w	r2, r3, #31
 80006f8:	4907      	ldr	r1, [pc, #28]	; (8000718 <__NVIC_EnableIRQ+0x38>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	095b      	lsrs	r3, r3, #5
 8000700:	2001      	movs	r0, #1
 8000702:	fa00 f202 	lsl.w	r2, r0, r2
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	; (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e8:	d301      	bcc.n	80007ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00f      	b.n	800080e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <SysTick_Config+0x40>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f6:	210f      	movs	r1, #15
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f7ff ff8e 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <SysTick_Config+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <SysTick_Config+0x40>)
 8000808:	2207      	movs	r2, #7
 800080a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	e000e010 	.word	0xe000e010

0800081c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff29 	bl	800067c <__NVIC_SetPriorityGrouping>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b086      	sub	sp, #24
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff40 	bl	80006c4 <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff90 	bl	8000770 <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5f 	bl	800071c <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff33 	bl	80006e0 <__NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffa4 	bl	80007d8 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800089c:	b480      	push	{r7}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008aa:	e146      	b.n	8000b3a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f000 8138 	beq.w	8000b34 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d005      	beq.n	80008dc <HAL_GPIO_Init+0x40>
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d130      	bne.n	800093e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000912:	2201      	movs	r2, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	f003 0201 	and.w	r2, r3, #1
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 0303 	and.w	r3, r3, #3
 8000946:	2b03      	cmp	r3, #3
 8000948:	d017      	beq.n	800097a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b02      	cmp	r3, #2
 8000984:	d123      	bne.n	80009ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	08da      	lsrs	r2, r3, #3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3208      	adds	r2, #8
 800098e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	220f      	movs	r2, #15
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	691a      	ldr	r2, [r3, #16]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	08da      	lsrs	r2, r3, #3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3208      	adds	r2, #8
 80009c8:	6939      	ldr	r1, [r7, #16]
 80009ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 0203 	and.w	r2, r3, #3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 8092 	beq.w	8000b34 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a10:	4a51      	ldr	r2, [pc, #324]	; (8000b58 <HAL_GPIO_Init+0x2bc>)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	220f      	movs	r2, #15
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a3a:	d013      	beq.n	8000a64 <HAL_GPIO_Init+0x1c8>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a47      	ldr	r2, [pc, #284]	; (8000b5c <HAL_GPIO_Init+0x2c0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d00d      	beq.n	8000a60 <HAL_GPIO_Init+0x1c4>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a46      	ldr	r2, [pc, #280]	; (8000b60 <HAL_GPIO_Init+0x2c4>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d007      	beq.n	8000a5c <HAL_GPIO_Init+0x1c0>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a45      	ldr	r2, [pc, #276]	; (8000b64 <HAL_GPIO_Init+0x2c8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d101      	bne.n	8000a58 <HAL_GPIO_Init+0x1bc>
 8000a54:	2304      	movs	r3, #4
 8000a56:	e006      	b.n	8000a66 <HAL_GPIO_Init+0x1ca>
 8000a58:	2307      	movs	r3, #7
 8000a5a:	e004      	b.n	8000a66 <HAL_GPIO_Init+0x1ca>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x1ca>
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <HAL_GPIO_Init+0x1ca>
 8000a64:	2300      	movs	r3, #0
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	f002 0203 	and.w	r2, r2, #3
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a76:	4938      	ldr	r1, [pc, #224]	; (8000b58 <HAL_GPIO_Init+0x2bc>)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a84:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <HAL_GPIO_Init+0x2cc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aa8:	4a2f      	ldr	r2, [pc, #188]	; (8000b68 <HAL_GPIO_Init+0x2cc>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <HAL_GPIO_Init+0x2cc>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad2:	4a25      	ldr	r2, [pc, #148]	; (8000b68 <HAL_GPIO_Init+0x2cc>)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ad8:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <HAL_GPIO_Init+0x2cc>)
 8000ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000afe:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <HAL_GPIO_Init+0x2cc>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_GPIO_Init+0x2cc>)
 8000b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_GPIO_Init+0x2cc>)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	3301      	adds	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f47f aeb1 	bne.w	80008ac <HAL_GPIO_Init+0x10>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	48001000 	.word	0x48001000
 8000b68:	58000800 	.word	0x58000800

08000b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b7c:	787b      	ldrb	r3, [r7, #1]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b82:	887a      	ldrh	r2, [r7, #2]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	041a      	lsls	r2, r3, #16
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43d9      	mvns	r1, r3
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	619a      	str	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
 8000bd4:	af06      	add	r7, sp, #24
 8000bd6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e0d7      	b.n	8000d92 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d106      	bne.n	8000bfc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f006 ff54 	bl	8007aa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2203      	movs	r2, #3
 8000c00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 fadd 	bl	80041c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e04c      	b.n	8000cae <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	3301      	adds	r3, #1
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	440b      	add	r3, r1
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c3e:	7bfa      	ldrb	r2, [r7, #15]
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	b298      	uxth	r0, r3
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	440b      	add	r3, r1
 8000c50:	3336      	adds	r3, #54	; 0x36
 8000c52:	4602      	mov	r2, r0
 8000c54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3303      	adds	r3, #3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c6c:	7bfa      	ldrb	r2, [r7, #15]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3338      	adds	r3, #56	; 0x38
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	333c      	adds	r3, #60	; 0x3c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3340      	adds	r3, #64	; 0x40
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	3301      	adds	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d3ad      	bcc.n	8000c14 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e044      	b.n	8000d48 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	440b      	add	r3, r1
 8000d3a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	3301      	adds	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3b5      	bcc.n	8000cbe <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	687e      	ldr	r6, [r7, #4]
 8000d5a:	466d      	mov	r5, sp
 8000d5c:	f106 0410 	add.w	r4, r6, #16
 8000d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	602b      	str	r3, [r5, #0]
 8000d68:	1d33      	adds	r3, r6, #4
 8000d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d6c:	6838      	ldr	r0, [r7, #0]
 8000d6e:	f003 fa46 	bl	80041fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d102      	bne.n	8000d90 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f001 fc11 	bl	80025b2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_PCD_Start+0x16>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e012      	b.n	8000dd6 <HAL_PCD_Start+0x3c>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 f9ec 	bl	800419a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f005 f9a0 	bl	800610c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 f9a5 	bl	800613a <USB_ReadInterrupts>
 8000df0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 fb0e 	bl	800141e <PCD_EP_ISR_Handler>

    return;
 8000e02:	e110      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d013      	beq.n	8000e36 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e20:	b292      	uxth	r2, r2
 8000e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f006 feef 	bl	8007c0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 f8fc 	bl	800102c <HAL_PCD_SetAddress>

    return;
 8000e34:	e0f7      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00c      	beq.n	8000e5a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e52:	b292      	uxth	r2, r2
 8000e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000e58:	e0e5      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00c      	beq.n	8000e7e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e76:	b292      	uxth	r2, r2
 8000e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000e7c:	e0d3      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d034      	beq.n	8000ef2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0204 	bic.w	r2, r2, #4
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0208 	bic.w	r2, r2, #8
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d107      	bne.n	8000ed2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f007 f86d 	bl	8007fac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f006 fed2 	bl	8007c7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eea:	b292      	uxth	r2, r2
 8000eec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000ef0:	e099      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d027      	beq.n	8000f4c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0208 	orr.w	r2, r2, #8
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f26:	b292      	uxth	r2, r2
 8000f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0204 	orr.w	r2, r2, #4
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f006 fe7f 	bl	8007c48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f4a:	e06c      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d040      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f68:	b292      	uxth	r2, r2
 8000f6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d12b      	bne.n	8000fd0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0204 	orr.w	r2, r2, #4
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0208 	orr.w	r2, r2, #8
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f006 ffef 	bl	8007fac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000fce:	e02a      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f006 fe39 	bl	8007c48 <HAL_PCD_SuspendCallback>
    return;
 8000fd6:	e026      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00f      	beq.n	8001002 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f006 fdf7 	bl	8007bee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001000:	e011      	b.n	8001026 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00c      	beq.n	8001026 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001014:	b29a      	uxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800101e:	b292      	uxth	r2, r2
 8001020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001024:	bf00      	nop
  }
}
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_PCD_SetAddress+0x1a>
 8001042:	2302      	movs	r3, #2
 8001044:	e013      	b.n	800106e <HAL_PCD_SetAddress+0x42>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	78fa      	ldrb	r2, [r7, #3]
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	78fa      	ldrb	r2, [r7, #3]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f005 f840 	bl	80060e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	4608      	mov	r0, r1
 8001080:	4611      	mov	r1, r2
 8001082:	461a      	mov	r2, r3
 8001084:	4603      	mov	r3, r0
 8001086:	70fb      	strb	r3, [r7, #3]
 8001088:	460b      	mov	r3, r1
 800108a:	803b      	strh	r3, [r7, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001098:	2b00      	cmp	r3, #0
 800109a:	da0e      	bge.n	80010ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2201      	movs	r2, #1
 80010b6:	705a      	strb	r2, [r3, #1]
 80010b8:	e00e      	b.n	80010d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	f003 0207 	and.w	r2, r3, #7
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010e4:	883a      	ldrh	r2, [r7, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	78ba      	ldrb	r2, [r7, #2]
 80010ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001102:	78bb      	ldrb	r3, [r7, #2]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d102      	bne.n	800110e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_PCD_EP_Open+0xa6>
 8001118:	2302      	movs	r3, #2
 800111a:	e00e      	b.n	800113a <HAL_PCD_EP_Open+0xc4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f003 f888 	bl	8004240 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001138:	7afb      	ldrb	r3, [r7, #11]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800114e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	da0e      	bge.n	8001174 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2201      	movs	r2, #1
 8001170:	705a      	strb	r2, [r3, #1]
 8001172:	e00e      	b.n	8001192 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	f003 0207 	and.w	r2, r3, #7
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	b2da      	uxtb	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_PCD_EP_Close+0x6a>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e00e      	b.n	80011ca <HAL_PCD_EP_Close+0x88>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68f9      	ldr	r1, [r7, #12]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fbd4 	bl	8004968 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	460b      	mov	r3, r1
 80011e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	f003 0207 	and.w	r2, r3, #7
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2200      	movs	r2, #0
 8001210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001212:	7afb      	ldrb	r3, [r7, #11]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	b2da      	uxtb	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6979      	ldr	r1, [r7, #20]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fd87 	bl	8004d42 <USB_EPStartXfer>
 8001234:	e005      	b.n	8001242 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6979      	ldr	r1, [r7, #20]
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fd80 	bl	8004d42 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	460b      	mov	r3, r1
 800125a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2201      	movs	r2, #1
 8001296:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6979      	ldr	r1, [r7, #20]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fd44 	bl	8004d42 <USB_EPStartXfer>
 80012ba:	e005      	b.n	80012c8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6979      	ldr	r1, [r7, #20]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fd3d 	bl	8004d42 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	f003 0207 	and.w	r2, r3, #7
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d901      	bls.n	80012f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e03e      	b.n	800136e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da0e      	bge.n	8001316 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	705a      	strb	r2, [r3, #1]
 8001314:	e00c      	b.n	8001330 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	b2da      	uxtb	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_PCD_EP_SetStall+0x7e>
 800134c:	2302      	movs	r3, #2
 800134e:	e00e      	b.n	800136e <HAL_PCD_EP_SetStall+0x9c>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fdc1 	bl	8005ee6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	f003 020f 	and.w	r2, r3, #15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	d901      	bls.n	8001394 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e040      	b.n	8001416 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001398:	2b00      	cmp	r3, #0
 800139a:	da0e      	bge.n	80013ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2201      	movs	r2, #1
 80013b6:	705a      	strb	r2, [r3, #1]
 80013b8:	e00e      	b.n	80013d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	f003 0207 	and.w	r2, r3, #7
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_PCD_EP_ClrStall+0x82>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e00e      	b.n	8001416 <HAL_PCD_EP_ClrStall+0xa0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68f9      	ldr	r1, [r7, #12]
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fdbe 	bl	8005f88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b096      	sub	sp, #88	; 0x58
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001426:	e39c      	b.n	8001b62 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001430:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001434:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001442:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 815e 	bne.w	8001708 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800144c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	d150      	bne.n	80014fa <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001468:	81fb      	strh	r3, [r7, #14]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001478:	b29b      	uxth	r3, r3
 800147a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3328      	adds	r3, #40	; 0x28
 8001480:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	4413      	add	r3, r2
 800149c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	441a      	add	r2, r3
 80014b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014b8:	2100      	movs	r1, #0
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f006 fb7d 	bl	8007bba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 834a 	beq.w	8001b62 <PCD_EP_ISR_Handler+0x744>
 80014ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 8345 	bne.w	8001b62 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b292      	uxth	r2, r2
 80014ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014f8:	e333      	b.n	8001b62 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001500:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800150c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001514:	2b00      	cmp	r3, #0
 8001516:	d032      	beq.n	800157e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001520:	b29b      	uxth	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	4413      	add	r3, r2
 8001532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800153c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800153e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800154a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800154e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001550:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001552:	b29b      	uxth	r3, r3
 8001554:	f004 fe43 	bl	80061de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29a      	uxth	r2, r3
 8001560:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001564:	4013      	ands	r3, r2
 8001566:	823b      	strh	r3, [r7, #16]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	8a3a      	ldrh	r2, [r7, #16]
 800156e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001572:	b292      	uxth	r2, r2
 8001574:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f006 faf2 	bl	8007b60 <HAL_PCD_SetupStageCallback>
 800157c:	e2f1      	b.n	8001b62 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800157e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001582:	2b00      	cmp	r3, #0
 8001584:	f280 82ed 	bge.w	8001b62 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	b29a      	uxth	r2, r3
 8001590:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001594:	4013      	ands	r3, r2
 8001596:	83fb      	strh	r3, [r7, #30]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	8bfa      	ldrh	r2, [r7, #30]
 800159e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a2:	b292      	uxth	r2, r2
 80015a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d019      	beq.n	800160a <PCD_EP_ISR_Handler+0x1ec>
 80015d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d015      	beq.n	800160a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015e4:	6959      	ldr	r1, [r3, #20]
 80015e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80015ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f004 fdf5 	bl	80061de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	441a      	add	r2, r3
 80015fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001600:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001602:	2100      	movs	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f006 fabd 	bl	8007b84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 82a3 	bne.w	8001b62 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4413      	add	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	2b3e      	cmp	r3, #62	; 0x3e
 8001642:	d918      	bls.n	8001676 <PCD_EP_ISR_Handler+0x258>
 8001644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
 800164c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <PCD_EP_ISR_Handler+0x240>
 8001658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800165a:	3b01      	subs	r3, #1
 800165c:	647b      	str	r3, [r7, #68]	; 0x44
 800165e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001660:	b29b      	uxth	r3, r3
 8001662:	029b      	lsls	r3, r3, #10
 8001664:	b29b      	uxth	r3, r3
 8001666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800166a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800166e:	b29a      	uxth	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	e029      	b.n	80016ca <PCD_EP_ISR_Handler+0x2ac>
 8001676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d112      	bne.n	80016a4 <PCD_EP_ISR_Handler+0x286>
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001688:	b29a      	uxth	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800169c:	b29a      	uxth	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	e012      	b.n	80016ca <PCD_EP_ISR_Handler+0x2ac>
 80016a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
 80016ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <PCD_EP_ISR_Handler+0x2a0>
 80016b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ba:	3301      	adds	r3, #1
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
 80016be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	029b      	lsls	r3, r3, #10
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016da:	827b      	strh	r3, [r7, #18]
 80016dc:	8a7b      	ldrh	r3, [r7, #18]
 80016de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80016e2:	827b      	strh	r3, [r7, #18]
 80016e4:	8a7b      	ldrh	r3, [r7, #18]
 80016e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016ea:	827b      	strh	r3, [r7, #18]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	8a7b      	ldrh	r3, [r7, #18]
 80016f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001702:	b29b      	uxth	r3, r3
 8001704:	8013      	strh	r3, [r2, #0]
 8001706:	e22c      	b.n	8001b62 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800171c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001720:	2b00      	cmp	r3, #0
 8001722:	f280 80f6 	bge.w	8001912 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	f640 738f 	movw	r3, #3983	; 0xf8f
 800173c:	4013      	ands	r3, r2
 800173e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001758:	b292      	uxth	r2, r2
 800175a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800175c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001774:	7b1b      	ldrb	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d123      	bne.n	80017c2 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001782:	b29b      	uxth	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	4413      	add	r3, r2
 8001794:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800179e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80017a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 808e 	beq.w	80018c8 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b2:	6959      	ldr	r1, [r3, #20]
 80017b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b6:	88da      	ldrh	r2, [r3, #6]
 80017b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80017bc:	f004 fd0f 	bl	80061de <USB_ReadPMA>
 80017c0:	e082      	b.n	80018c8 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017c4:	78db      	ldrb	r3, [r3, #3]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d10a      	bne.n	80017e0 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80017ce:	461a      	mov	r2, r3
 80017d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f9d3 	bl	8001b7e <HAL_PCD_EP_DB_Receive>
 80017d8:	4603      	mov	r3, r0
 80017da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80017de:	e073      	b.n	80018c8 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	441a      	add	r2, r3
 800180c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001820:	b29b      	uxth	r3, r3
 8001822:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d022      	beq.n	8001884 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001846:	b29b      	uxth	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4413      	add	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	4413      	add	r3, r2
 8001858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001862:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001866:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186a:	2b00      	cmp	r3, #0
 800186c:	d02c      	beq.n	80018c8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001874:	6959      	ldr	r1, [r3, #20]
 8001876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001878:	891a      	ldrh	r2, [r3, #8]
 800187a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800187e:	f004 fcae 	bl	80061de <USB_ReadPMA>
 8001882:	e021      	b.n	80018c8 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800188c:	b29b      	uxth	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	4413      	add	r3, r2
 800189e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80018ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d009      	beq.n	80018c8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ba:	6959      	ldr	r1, [r3, #20]
 80018bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018be:	895a      	ldrh	r2, [r3, #10]
 80018c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80018c4:	f004 fc8b 	bl	80061de <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80018d0:	441a      	add	r2, r3
 80018d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80018de:	441a      	add	r2, r3
 80018e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <PCD_EP_ISR_Handler+0x4da>
 80018ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80018f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d206      	bcs.n	8001906 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f006 f940 	bl	8007b84 <HAL_PCD_DataOutStageCallback>
 8001904:	e005      	b.n	8001912 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fa18 	bl	8004d42 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001912:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8121 	beq.w	8001b62 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001920:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800194a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	441a      	add	r2, r3
 8001960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800196c:	b29b      	uxth	r3, r3
 800196e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001972:	78db      	ldrb	r3, [r3, #3]
 8001974:	2b02      	cmp	r3, #2
 8001976:	f000 80a2 	beq.w	8001abe <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800197a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001982:	7b1b      	ldrb	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8093 	beq.w	8001ab0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800198a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800198e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d046      	beq.n	8001a24 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d126      	bne.n	80019ec <PCD_EP_ISR_Handler+0x5ce>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	4413      	add	r3, r2
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
 80019b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	00da      	lsls	r2, r3, #3
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	4413      	add	r3, r2
 80019c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	e061      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x692>
 80019ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d15d      	bne.n	8001ab0 <PCD_EP_ISR_Handler+0x692>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	4413      	add	r3, r2
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	00da      	lsls	r2, r3, #3
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	4413      	add	r3, r2
 8001a16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	e045      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d126      	bne.n	8001a80 <PCD_EP_ISR_Handler+0x662>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	4413      	add	r3, r2
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	00da      	lsls	r2, r3, #3
 8001a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a52:	4413      	add	r3, r2
 8001a54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	801a      	strh	r2, [r3, #0]
 8001a7e:	e017      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x692>
 8001a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a82:	785b      	ldrb	r3, [r3, #1]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d113      	bne.n	8001ab0 <PCD_EP_ISR_Handler+0x692>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a96:	4413      	add	r3, r2
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	00da      	lsls	r2, r3, #3
 8001aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aac:	2200      	movs	r2, #0
 8001aae:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f006 f87f 	bl	8007bba <HAL_PCD_DataInStageCallback>
 8001abc:	e051      	b.n	8001b62 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001abe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d144      	bne.n	8001b54 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d907      	bls.n	8001b0e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8001afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b0a:	619a      	str	r2, [r3, #24]
 8001b0c:	e002      	b.n	8001b14 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8001b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d106      	bne.n	8001b2a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f006 f849 	bl	8007bba <HAL_PCD_DataInStageCallback>
 8001b28:	e01b      	b.n	8001b62 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b32:	441a      	add	r2, r3
 8001b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b36:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b3a:	69da      	ldr	r2, [r3, #28]
 8001b3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b40:	441a      	add	r2, r3
 8001b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b44:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 f8f8 	bl	8004d42 <USB_EPStartXfer>
 8001b52:	e006      	b.n	8001b62 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b54:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f917 	bl	8001d90 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f6ff ac5a 	blt.w	8001428 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3758      	adds	r7, #88	; 0x58
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b088      	sub	sp, #32
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d07c      	beq.n	8001c90 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	8b7b      	ldrh	r3, [r7, #26]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d306      	bcc.n	8001bd4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	8b7b      	ldrh	r3, [r7, #26]
 8001bcc:	1ad2      	subs	r2, r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	619a      	str	r2, [r3, #24]
 8001bd2:	e002      	b.n	8001bda <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d123      	bne.n	8001c2a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfc:	833b      	strh	r3, [r7, #24]
 8001bfe:	8b3b      	ldrh	r3, [r7, #24]
 8001c00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c04:	833b      	strh	r3, [r7, #24]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	441a      	add	r2, r3
 8001c14:	8b3b      	ldrh	r3, [r7, #24]
 8001c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01f      	beq.n	8001c74 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4e:	82fb      	strh	r3, [r7, #22]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	441a      	add	r2, r3
 8001c5e:	8afb      	ldrh	r3, [r7, #22]
 8001c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c74:	8b7b      	ldrh	r3, [r7, #26]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8085 	beq.w	8001d86 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	6959      	ldr	r1, [r3, #20]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	891a      	ldrh	r2, [r3, #8]
 8001c88:	8b7b      	ldrh	r3, [r7, #26]
 8001c8a:	f004 faa8 	bl	80061de <USB_ReadPMA>
 8001c8e:	e07a      	b.n	8001d86 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	8b7b      	ldrh	r3, [r7, #26]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d306      	bcc.n	8001cce <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	8b7b      	ldrh	r3, [r7, #26]
 8001cc6:	1ad2      	subs	r2, r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	619a      	str	r2, [r3, #24]
 8001ccc:	e002      	b.n	8001cd4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d123      	bne.n	8001d24 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf6:	83fb      	strh	r3, [r7, #30]
 8001cf8:	8bfb      	ldrh	r3, [r7, #30]
 8001cfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cfe:	83fb      	strh	r3, [r7, #30]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	441a      	add	r2, r3
 8001d0e:	8bfb      	ldrh	r3, [r7, #30]
 8001d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d11f      	bne.n	8001d6e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d48:	83bb      	strh	r3, [r7, #28]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	441a      	add	r2, r3
 8001d58:	8bbb      	ldrh	r3, [r7, #28]
 8001d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d6e:	8b7b      	ldrh	r3, [r7, #26]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	6959      	ldr	r1, [r3, #20]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	895a      	ldrh	r2, [r3, #10]
 8001d80:	8b7b      	ldrh	r3, [r7, #26]
 8001d82:	f004 fa2c 	bl	80061de <USB_ReadPMA>
    }
  }

  return count;
 8001d86:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0a2      	sub	sp, #136	; 0x88
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 81c5 	beq.w	8002134 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d907      	bls.n	8001dee <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001de6:	1ad2      	subs	r2, r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	619a      	str	r2, [r3, #24]
 8001dec:	e002      	b.n	8001df4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 80b9 	bne.w	8001f70 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	785b      	ldrb	r3, [r3, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d126      	bne.n	8001e54 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	4413      	add	r3, r2
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	00da      	lsls	r2, r3, #3
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	4413      	add	r3, r2
 8001e28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	801a      	strh	r2, [r3, #0]
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	801a      	strh	r2, [r3, #0]
 8001e52:	e01a      	b.n	8001e8a <HAL_PCD_EP_DB_Transmit+0xfa>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d116      	bne.n	8001e8a <HAL_PCD_EP_DB_Transmit+0xfa>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e70:	4413      	add	r3, r2
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	00da      	lsls	r2, r3, #3
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e86:	2200      	movs	r2, #0
 8001e88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	785b      	ldrb	r3, [r3, #1]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d126      	bne.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x156>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	4413      	add	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	00da      	lsls	r2, r3, #3
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	801a      	strh	r2, [r3, #0]
 8001ee4:	e017      	b.n	8001f16 <HAL_PCD_EP_DB_Transmit+0x186>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d113      	bne.n	8001f16 <HAL_PCD_EP_DB_Transmit+0x186>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	4413      	add	r3, r2
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	00da      	lsls	r2, r3, #3
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2200      	movs	r2, #0
 8001f14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f005 fe4c 	bl	8007bba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 82d2 	beq.w	80024d2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f48:	827b      	strh	r3, [r7, #18]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	441a      	add	r2, r3
 8001f58:	8a7b      	ldrh	r3, [r7, #18]
 8001f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	8013      	strh	r3, [r2, #0]
 8001f6e:	e2b0      	b.n	80024d2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d021      	beq.n	8001fbe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	441a      	add	r2, r3
 8001fa6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	f040 8284 	bne.w	80024d2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fd2:	441a      	add	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fe0:	441a      	add	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d309      	bcc.n	8002006 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffe:	1ad2      	subs	r2, r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	621a      	str	r2, [r3, #32]
 8002004:	e015      	b.n	8002032 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d107      	bne.n	800201e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800200e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002012:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800201c:	e009      	b.n	8002032 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	785b      	ldrb	r3, [r3, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d155      	bne.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x356>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	4413      	add	r3, r2
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00da      	lsls	r2, r3, #3
 8002058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205a:	4413      	add	r3, r2
 800205c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
 8002062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002064:	2b3e      	cmp	r3, #62	; 0x3e
 8002066:	d916      	bls.n	8002096 <HAL_PCD_EP_DB_Transmit+0x306>
 8002068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	64bb      	str	r3, [r7, #72]	; 0x48
 800206e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207a:	3b01      	subs	r3, #1
 800207c:	64bb      	str	r3, [r7, #72]	; 0x48
 800207e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002080:	b29b      	uxth	r3, r3
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	b29b      	uxth	r3, r3
 8002086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800208a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800208e:	b29a      	uxth	r2, r3
 8002090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	e043      	b.n	800211e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002098:	2b00      	cmp	r3, #0
 800209a:	d112      	bne.n	80020c2 <HAL_PCD_EP_DB_Transmit+0x332>
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020aa:	801a      	strh	r2, [r3, #0]
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	801a      	strh	r2, [r3, #0]
 80020c0:	e02d      	b.n	800211e <HAL_PCD_EP_DB_Transmit+0x38e>
 80020c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_PCD_EP_DB_Transmit+0x348>
 80020d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d4:	3301      	adds	r3, #1
 80020d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020da:	b29b      	uxth	r3, r3
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	b29a      	uxth	r2, r3
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	801a      	strh	r2, [r3, #0]
 80020e4:	e01b      	b.n	800211e <HAL_PCD_EP_DB_Transmit+0x38e>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d117      	bne.n	800211e <HAL_PCD_EP_DB_Transmit+0x38e>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002102:	4413      	add	r3, r2
 8002104:	643b      	str	r3, [r7, #64]	; 0x40
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	00da      	lsls	r2, r3, #3
 800210c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210e:	4413      	add	r3, r2
 8002110:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002118:	b29a      	uxth	r2, r3
 800211a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	6959      	ldr	r1, [r3, #20]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	891a      	ldrh	r2, [r3, #8]
 800212a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212c:	b29b      	uxth	r3, r3
 800212e:	f004 f814 	bl	800615a <USB_WritePMA>
 8002132:	e1ce      	b.n	80024d2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213c:	b29b      	uxth	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	4413      	add	r3, r2
 800214e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002158:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002164:	429a      	cmp	r2, r3
 8002166:	d307      	bcc.n	8002178 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002170:	1ad2      	subs	r2, r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	619a      	str	r2, [r3, #24]
 8002176:	e002      	b.n	800217e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80c4 	bne.w	8002310 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d126      	bne.n	80021de <HAL_PCD_EP_DB_Transmit+0x44e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	66bb      	str	r3, [r7, #104]	; 0x68
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a4:	4413      	add	r3, r2
 80021a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	00da      	lsls	r2, r3, #3
 80021ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b0:	4413      	add	r3, r2
 80021b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021b6:	667b      	str	r3, [r7, #100]	; 0x64
 80021b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c6:	801a      	strh	r2, [r3, #0]
 80021c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	e01a      	b.n	8002214 <HAL_PCD_EP_DB_Transmit+0x484>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d116      	bne.n	8002214 <HAL_PCD_EP_DB_Transmit+0x484>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	673b      	str	r3, [r7, #112]	; 0x70
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fa:	4413      	add	r3, r2
 80021fc:	673b      	str	r3, [r7, #112]	; 0x70
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	00da      	lsls	r2, r3, #3
 8002204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002206:	4413      	add	r3, r2
 8002208:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800220c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800220e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002210:	2200      	movs	r2, #0
 8002212:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	67fb      	str	r3, [r7, #124]	; 0x7c
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d12f      	bne.n	8002282 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800223a:	4413      	add	r3, r2
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	00da      	lsls	r2, r3, #3
 8002246:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800224a:	4413      	add	r3, r2
 800224c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002254:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002260:	b29a      	uxth	r2, r3
 8002262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002266:	801a      	strh	r2, [r3, #0]
 8002268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002278:	b29a      	uxth	r2, r3
 800227a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800227e:	801a      	strh	r2, [r3, #0]
 8002280:	e017      	b.n	80022b2 <HAL_PCD_EP_DB_Transmit+0x522>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d113      	bne.n	80022b2 <HAL_PCD_EP_DB_Transmit+0x522>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002292:	b29b      	uxth	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002298:	4413      	add	r3, r2
 800229a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	00da      	lsls	r2, r3, #3
 80022a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022a4:	4413      	add	r3, r2
 80022a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ae:	2200      	movs	r2, #0
 80022b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4619      	mov	r1, r3
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f005 fc7e 	bl	8007bba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 8104 	bne.w	80024d2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	441a      	add	r2, r3
 80022f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80022fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230a:	b29b      	uxth	r3, r3
 800230c:	8013      	strh	r3, [r2, #0]
 800230e:	e0e0      	b.n	80024d2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d121      	bne.n	800235e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002334:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800234a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235a:	b29b      	uxth	r3, r3
 800235c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002364:	2b01      	cmp	r3, #1
 8002366:	f040 80b4 	bne.w	80024d2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002372:	441a      	add	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002380:	441a      	add	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	429a      	cmp	r2, r3
 8002390:	d309      	bcc.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239e:	1ad2      	subs	r2, r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	621a      	str	r2, [r3, #32]
 80023a4:	e015      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80023ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023bc:	e009      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	663b      	str	r3, [r7, #96]	; 0x60
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d155      	bne.n	800248c <HAL_PCD_EP_DB_Transmit+0x6fc>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f4:	4413      	add	r3, r2
 80023f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	00da      	lsls	r2, r3, #3
 80023fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002400:	4413      	add	r3, r2
 8002402:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002406:	657b      	str	r3, [r7, #84]	; 0x54
 8002408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800240a:	2b3e      	cmp	r3, #62	; 0x3e
 800240c:	d916      	bls.n	800243c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800240e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	677b      	str	r3, [r7, #116]	; 0x74
 8002414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <HAL_PCD_EP_DB_Transmit+0x694>
 800241e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002420:	3b01      	subs	r3, #1
 8002422:	677b      	str	r3, [r7, #116]	; 0x74
 8002424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002426:	b29b      	uxth	r3, r3
 8002428:	029b      	lsls	r3, r3, #10
 800242a:	b29b      	uxth	r3, r3
 800242c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002434:	b29a      	uxth	r2, r3
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	801a      	strh	r2, [r3, #0]
 800243a:	e040      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x72e>
 800243c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243e:	2b00      	cmp	r3, #0
 8002440:	d112      	bne.n	8002468 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800244c:	b29a      	uxth	r2, r3
 800244e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002460:	b29a      	uxth	r2, r3
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	e02a      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x72e>
 8002468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	677b      	str	r3, [r7, #116]	; 0x74
 800246e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247a:	3301      	adds	r3, #1
 800247c:	677b      	str	r3, [r7, #116]	; 0x74
 800247e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002480:	b29b      	uxth	r3, r3
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	b29a      	uxth	r2, r3
 8002486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	e018      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x72e>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d114      	bne.n	80024be <HAL_PCD_EP_DB_Transmit+0x72e>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249c:	b29b      	uxth	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a2:	4413      	add	r3, r2
 80024a4:	663b      	str	r3, [r7, #96]	; 0x60
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	00da      	lsls	r2, r3, #3
 80024ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ae:	4413      	add	r3, r2
 80024b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	6959      	ldr	r1, [r3, #20]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	895a      	ldrh	r2, [r3, #10]
 80024ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f003 fe44 	bl	800615a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ec:	823b      	strh	r3, [r7, #16]
 80024ee:	8a3b      	ldrh	r3, [r7, #16]
 80024f0:	f083 0310 	eor.w	r3, r3, #16
 80024f4:	823b      	strh	r3, [r7, #16]
 80024f6:	8a3b      	ldrh	r3, [r7, #16]
 80024f8:	f083 0320 	eor.w	r3, r3, #32
 80024fc:	823b      	strh	r3, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	441a      	add	r2, r3
 800250c:	8a3b      	ldrh	r3, [r7, #16]
 800250e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251e:	b29b      	uxth	r3, r3
 8002520:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3788      	adds	r7, #136	; 0x88
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	817b      	strh	r3, [r7, #10]
 800253a:	4613      	mov	r3, r2
 800253c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800253e:	897b      	ldrh	r3, [r7, #10]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254a:	897b      	ldrh	r3, [r7, #10]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4413      	add	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e009      	b.n	8002576 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002562:	897a      	ldrh	r2, [r7, #10]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002576:	893b      	ldrh	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2200      	movs	r2, #0
 8002580:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	b29a      	uxth	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	80da      	strh	r2, [r3, #6]
 800258a:	e00b      	b.n	80025a4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2201      	movs	r2, #1
 8002590:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	b29a      	uxth	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	b29a      	uxth	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	58000400 	.word	0x58000400

08002628 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_PWREx_GetVoltageRange+0x18>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	58000400 	.word	0x58000400

08002644 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_PWREx_EnableVddUSB+0x1c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_PWREx_EnableVddUSB+0x1c>)
 800264e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002652:	6053      	str	r3, [r2, #4]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	58000400 	.word	0x58000400

08002664 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002676:	d101      	bne.n	800267c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026d6:	d101      	bne.n	80026dc <LL_RCC_HSE_IsReady+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_RCC_HSE_IsReady+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002736:	d101      	bne.n	800273c <LL_RCC_HSI_IsReady+0x18>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <LL_RCC_HSI_IsReady+0x1a>
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d101      	bne.n	80027ce <LL_RCC_HSI48_IsReady+0x18>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_RCC_HSI48_IsReady+0x1a>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d101      	bne.n	800287a <LL_RCC_LSE_IsReady+0x18>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <LL_RCC_LSE_IsReady+0x1a>
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d101      	bne.n	80028e2 <LL_RCC_LSI1_IsReady+0x18>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_RCC_LSI1_IsReady+0x1a>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b08      	cmp	r3, #8
 8002944:	d101      	bne.n	800294a <LL_RCC_LSI2_IsReady+0x18>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_RCC_LSI2_IsReady+0x1a>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002966:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d101      	bne.n	80029d6 <LL_RCC_MSI_IsReady+0x16>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <LL_RCC_MSI_IsReady+0x18>
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2bb0      	cmp	r3, #176	; 0xb0
 8002a20:	d901      	bls.n	8002a26 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002a22:	23b0      	movs	r3, #176	; 0xb0
 8002a24:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002a26:	687b      	ldr	r3, [r7, #4]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 0203 	bic.w	r2, r3, #3
 8002a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b02:	f023 020f 	bic.w	r2, r3, #15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	6013      	str	r3, [r2, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bf2:	d101      	bne.n	8002bf8 <LL_RCC_PLL_IsReady+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_RCC_PLL_IsReady+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0303 	and.w	r3, r3, #3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d101      	bne.n	8002c7e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c9e:	d101      	bne.n	8002ca4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d101      	bne.n	8002cca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ce8:	d101      	bne.n	8002cee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d0c:	d101      	bne.n	8002d12 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b08d      	sub	sp, #52	; 0x34
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e37e      	b.n	8003430 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8092 	beq.w	8002e64 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d40:	f7ff fea1 	bl	8002a86 <LL_RCC_GetSysClkSource>
 8002d44:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d46:	f7ff ff82 	bl	8002c4e <LL_RCC_PLL_GetMainSource>
 8002d4a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x3e>
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d14c      	bne.n	8002df2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d149      	bne.n	8002df2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d5e:	f7ff fe2f 	bl	80029c0 <LL_RCC_MSI_IsReady>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_OscConfig+0x54>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e35d      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d78:	f7ff fe47 	bl	8002a0a <LL_RCC_MSI_GetRange>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	429c      	cmp	r4, r3
 8002d80:	d914      	bls.n	8002dac <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fd16 	bl	80037b8 <RCC_SetFlashLatencyFromMSIRange>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e34c      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fe21 	bl	80029e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe45 	bl	8002a34 <LL_RCC_MSI_SetCalibTrimming>
 8002daa:	e013      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fe16 	bl	80029e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fe3a 	bl	8002a34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fcf7 	bl	80037b8 <RCC_SetFlashLatencyFromMSIRange>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e32d      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dd4:	f000 fcdc 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4ab3      	ldr	r2, [pc, #716]	; (80030a8 <HAL_RCC_OscConfig+0x388>)
 8002ddc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dde:	4bb3      	ldr	r3, [pc, #716]	; (80030ac <HAL_RCC_OscConfig+0x38c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fbc0 	bl	8000568 <HAL_InitTick>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d039      	beq.n	8002e62 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e31e      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01e      	beq.n	8002e38 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dfa:	f7ff fdc3 	bl	8002984 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dfe:	f7fd fc01 	bl	8000604 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e06:	f7fd fbfd 	bl	8000604 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e30b      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e18:	f7ff fdd2 	bl	80029c0 <LL_RCC_MSI_IsReady>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f1      	beq.n	8002e06 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fddb 	bl	80029e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fdff 	bl	8002a34 <LL_RCC_MSI_SetCalibTrimming>
 8002e36:	e015      	b.n	8002e64 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e38:	f7ff fdb3 	bl	80029a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd fbe2 	bl	8000604 <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e44:	f7fd fbde 	bl	8000604 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e2ec      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e56:	f7ff fdb3 	bl	80029c0 <LL_RCC_MSI_IsReady>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f1      	bne.n	8002e44 <HAL_RCC_OscConfig+0x124>
 8002e60:	e000      	b.n	8002e64 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e62:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d04e      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e70:	f7ff fe09 	bl	8002a86 <LL_RCC_GetSysClkSource>
 8002e74:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e76:	f7ff feea 	bl	8002c4e <LL_RCC_PLL_GetMainSource>
 8002e7a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x16e>
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d10d      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8e:	f7ff fc19 	bl	80026c4 <LL_RCC_HSE_IsReady>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d039      	beq.n	8002f0c <HAL_RCC_OscConfig+0x1ec>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d135      	bne.n	8002f0c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e2c5      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d102      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x194>
 8002eae:	f7ff fbeb 	bl	8002688 <LL_RCC_HSE_Enable>
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCC_OscConfig+0x198>
 8002eb4:	f7ff fbf7 	bl	80026a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fba0 	bl	8000604 <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fd fb9c 	bl	8000604 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e2aa      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002eda:	f7ff fbf3 	bl	80026c4 <LL_RCC_HSE_IsReady>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f1      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x1a8>
 8002ee4:	e013      	b.n	8002f0e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fd fb8d 	bl	8000604 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eee:	f7fd fb89 	bl	8000604 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	; 0x64
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e297      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f00:	f7ff fbe0 	bl	80026c4 <LL_RCC_HSE_IsReady>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f1      	bne.n	8002eee <HAL_RCC_OscConfig+0x1ce>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d051      	beq.n	8002fbe <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1a:	f7ff fdb4 	bl	8002a86 <LL_RCC_GetSysClkSource>
 8002f1e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f20:	f7ff fe95 	bl	8002c4e <LL_RCC_PLL_GetMainSource>
 8002f24:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_OscConfig+0x218>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d113      	bne.n	8002f5a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d110      	bne.n	8002f5a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f38:	f7ff fbf4 	bl	8002724 <LL_RCC_HSI_IsReady>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_RCC_OscConfig+0x22e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e270      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fbf8 	bl	8002748 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f58:	e031      	b.n	8002fbe <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f62:	f7ff fbc1 	bl	80026e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fd fb4d 	bl	8000604 <HAL_GetTick>
 8002f6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6e:	f7fd fb49 	bl	8000604 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e257      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f80:	f7ff fbd0 	bl	8002724 <LL_RCC_HSI_IsReady>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f1      	beq.n	8002f6e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fbda 	bl	8002748 <LL_RCC_HSI_SetCalibTrimming>
 8002f94:	e013      	b.n	8002fbe <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	f7ff fbb6 	bl	8002706 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fd fb33 	bl	8000604 <HAL_GetTick>
 8002f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fd fb2f 	bl	8000604 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e23d      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fb4:	f7ff fbb6 	bl	8002724 <LL_RCC_HSI_IsReady>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f1      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80a3 	beq.w	800311e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d076      	beq.n	80030ce <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d046      	beq.n	800307a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002fec:	f7ff fc6d 	bl	80028ca <LL_RCC_LSI1_IsReady>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d113      	bne.n	800301e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002ff6:	f7ff fc46 	bl	8002886 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ffa:	f7fd fb03 	bl	8000604 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003002:	f7fd faff 	bl	8000604 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e20d      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003014:	f7ff fc59 	bl	80028ca <LL_RCC_LSI1_IsReady>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f1      	beq.n	8003002 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800301e:	f7ff fc66 	bl	80028ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fd faef 	bl	8000604 <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800302a:	f7fd faeb 	bl	8000604 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b03      	cmp	r3, #3
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1f9      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800303c:	f7ff fc79 	bl	8002932 <LL_RCC_LSI2_IsReady>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f1      	beq.n	800302a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fc83 	bl	8002956 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003050:	f7ff fc2a 	bl	80028a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fd fad6 	bl	8000604 <HAL_GetTick>
 8003058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800305c:	f7fd fad2 	bl	8000604 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1e0      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800306e:	f7ff fc2c 	bl	80028ca <LL_RCC_LSI1_IsReady>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f1      	bne.n	800305c <HAL_RCC_OscConfig+0x33c>
 8003078:	e051      	b.n	800311e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800307a:	f7ff fc04 	bl	8002886 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fd fac1 	bl	8000604 <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003086:	f7fd fabd 	bl	8000604 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1cb      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003098:	f7ff fc17 	bl	80028ca <LL_RCC_LSI1_IsReady>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f1      	beq.n	8003086 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80030a2:	f7ff fc35 	bl	8002910 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030a6:	e00c      	b.n	80030c2 <HAL_RCC_OscConfig+0x3a2>
 80030a8:	20000004 	.word	0x20000004
 80030ac:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030b0:	f7fd faa8 	bl	8000604 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1b6      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030c2:	f7ff fc36 	bl	8002932 <LL_RCC_LSI2_IsReady>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f1      	bne.n	80030b0 <HAL_RCC_OscConfig+0x390>
 80030cc:	e027      	b.n	800311e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80030ce:	f7ff fc1f 	bl	8002910 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fd fa97 	bl	8000604 <HAL_GetTick>
 80030d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030da:	f7fd fa93 	bl	8000604 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e1a1      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030ec:	f7ff fc21 	bl	8002932 <LL_RCC_LSI2_IsReady>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f1      	bne.n	80030da <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80030f6:	f7ff fbd7 	bl	80028a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fd fa83 	bl	8000604 <HAL_GetTick>
 80030fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003102:	f7fd fa7f 	bl	8000604 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e18d      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003114:	f7ff fbd9 	bl	80028ca <LL_RCC_LSI1_IsReady>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f1      	bne.n	8003102 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d05b      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312a:	4bb5      	ldr	r3, [pc, #724]	; (8003400 <HAL_RCC_OscConfig+0x6e0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d114      	bne.n	8003160 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003136:	f7ff fa67 	bl	8002608 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313a:	f7fd fa63 	bl	8000604 <HAL_GetTick>
 800313e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7fd fa5f 	bl	8000604 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e16d      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003154:	4baa      	ldr	r3, [pc, #680]	; (8003400 <HAL_RCC_OscConfig+0x6e0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d102      	bne.n	800316e <HAL_RCC_OscConfig+0x44e>
 8003168:	f7ff fb37 	bl	80027da <LL_RCC_LSE_Enable>
 800316c:	e00c      	b.n	8003188 <HAL_RCC_OscConfig+0x468>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d104      	bne.n	8003180 <HAL_RCC_OscConfig+0x460>
 8003176:	f7ff fb52 	bl	800281e <LL_RCC_LSE_EnableBypass>
 800317a:	f7ff fb2e 	bl	80027da <LL_RCC_LSE_Enable>
 800317e:	e003      	b.n	8003188 <HAL_RCC_OscConfig+0x468>
 8003180:	f7ff fb3c 	bl	80027fc <LL_RCC_LSE_Disable>
 8003184:	f7ff fb5c 	bl	8002840 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d014      	beq.n	80031ba <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fd fa38 	bl	8000604 <HAL_GetTick>
 8003194:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7fd fa34 	bl	8000604 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e140      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031ae:	f7ff fb58 	bl	8002862 <LL_RCC_LSE_IsReady>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ef      	beq.n	8003198 <HAL_RCC_OscConfig+0x478>
 80031b8:	e013      	b.n	80031e2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fd fa23 	bl	8000604 <HAL_GetTick>
 80031be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fd fa1f 	bl	8000604 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e12b      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80031d8:	f7ff fb43 	bl	8002862 <LL_RCC_LSE_IsReady>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ef      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02c      	beq.n	8003248 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d014      	beq.n	8003220 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031f6:	f7ff fabc 	bl	8002772 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fd fa03 	bl	8000604 <HAL_GetTick>
 80031fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003202:	f7fd f9ff 	bl	8000604 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e10d      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003214:	f7ff facf 	bl	80027b6 <LL_RCC_HSI48_IsReady>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f1      	beq.n	8003202 <HAL_RCC_OscConfig+0x4e2>
 800321e:	e013      	b.n	8003248 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003220:	f7ff fab8 	bl	8002794 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fd f9ee 	bl	8000604 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800322c:	f7fd f9ea 	bl	8000604 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0f8      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800323e:	f7ff faba 	bl	80027b6 <LL_RCC_HSI48_IsReady>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f1      	bne.n	800322c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80ee 	beq.w	800342e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003252:	f7ff fc18 	bl	8002a86 <LL_RCC_GetSysClkSource>
 8003256:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	2b02      	cmp	r3, #2
 8003266:	f040 80af 	bne.w	80033c8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	429a      	cmp	r2, r3
 8003276:	d123      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d114      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d10d      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d106      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d05d      	beq.n	800337c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d058      	beq.n	8003378 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0ab      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032d8:	f7ff fc73 	bl	8002bc2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032dc:	f7fd f992 	bl	8000604 <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fd f98e 	bl	8000604 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e09c      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ef      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <HAL_RCC_OscConfig+0x6e4>)
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800331c:	0212      	lsls	r2, r2, #8
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003324:	4311      	orrs	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003330:	430a      	orrs	r2, r1
 8003332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003336:	4313      	orrs	r3, r2
 8003338:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800333a:	f7ff fc33 	bl	8002ba4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800334e:	f7fd f959 	bl	8000604 <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fd f955 	bl	8000604 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e063      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ef      	beq.n	8003356 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003376:	e05a      	b.n	800342e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e059      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d151      	bne.n	800342e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800338a:	f7ff fc0b 	bl	8002ba4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800339e:	f7fd f931 	bl	8000604 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fd f92d 	bl	8000604 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e03b      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ef      	beq.n	80033a6 <HAL_RCC_OscConfig+0x686>
 80033c6:	e032      	b.n	800342e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d02d      	beq.n	800342a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	f7ff fbf8 	bl	8002bc2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033dc:	f023 0303 	bic.w	r3, r3, #3
 80033e0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ec:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80033f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7fd f905 	bl	8000604 <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fc:	e00d      	b.n	800341a <HAL_RCC_OscConfig+0x6fa>
 80033fe:	bf00      	nop
 8003400:	58000400 	.word	0x58000400
 8003404:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fd f8fc 	bl	8000604 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ef      	bne.n	8003408 <HAL_RCC_OscConfig+0x6e8>
 8003428:	e001      	b.n	800342e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3734      	adds	r7, #52	; 0x34
 8003434:	46bd      	mov	sp, r7
 8003436:	bd90      	pop	{r4, r7, pc}

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e12d      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b98      	ldr	r3, [pc, #608]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d91b      	bls.n	8003492 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b95      	ldr	r3, [pc, #596]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 0207 	bic.w	r2, r3, #7
 8003462:	4993      	ldr	r1, [pc, #588]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346a:	f7fd f8cb 	bl	8000604 <HAL_GetTick>
 800346e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003470:	e008      	b.n	8003484 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003472:	f7fd f8c7 	bl	8000604 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e111      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003484:	4b8a      	ldr	r3, [pc, #552]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d1ef      	bne.n	8003472 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fafb 	bl	8002a9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034a8:	f7fd f8ac 	bl	8000604 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034b0:	f7fd f8a8 	bl	8000604 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0f2      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034c2:	f7ff fbd0 	bl	8002c66 <LL_RCC_IsActiveFlag_HPRE>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f1      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d016      	beq.n	8003506 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff faf2 	bl	8002ac6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034e2:	f7fd f88f 	bl	8000604 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ea:	f7fd f88b 	bl	8000604 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0d5      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034fc:	f7ff fbc5 	bl	8002c8a <LL_RCC_IsActiveFlag_C2HPRE>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f1      	beq.n	80034ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff faeb 	bl	8002af2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800351c:	f7fd f872 	bl	8000604 <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003524:	f7fd f86e 	bl	8000604 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0b8      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003536:	f7ff fbbb 	bl	8002cb0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f1      	beq.n	8003524 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d016      	beq.n	800357a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fae5 	bl	8002b20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003556:	f7fd f855 	bl	8000604 <HAL_GetTick>
 800355a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800355e:	f7fd f851 	bl	8000604 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e09b      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003570:	f7ff fbb1 	bl	8002cd6 <LL_RCC_IsActiveFlag_PPRE1>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f1      	beq.n	800355e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d017      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fadb 	bl	8002b48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003592:	f7fd f837 	bl	8000604 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800359a:	f7fd f833 	bl	8000604 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e07d      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035ac:	f7ff fba5 	bl	8002cfa <LL_RCC_IsActiveFlag_PPRE2>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f1      	beq.n	800359a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d043      	beq.n	800364a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d106      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035ca:	f7ff f87b 	bl	80026c4 <LL_RCC_HSE_IsReady>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11e      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e067      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d106      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035e0:	f7ff fafe 	bl	8002be0 <LL_RCC_PLL_IsReady>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d113      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e05c      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035f6:	f7ff f9e3 	bl	80029c0 <LL_RCC_MSI_IsReady>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e051      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003604:	f7ff f88e 	bl	8002724 <LL_RCC_HSI_IsReady>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e04a      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fa21 	bl	8002a5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fc fff2 	bl	8000604 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fc ffee 	bl	8000604 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e036      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	f7ff fa24 	bl	8002a86 <LL_RCC_GetSysClkSource>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	429a      	cmp	r2, r3
 8003648:	d1ec      	bne.n	8003624 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d21b      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 0207 	bic.w	r2, r3, #7
 8003660:	4913      	ldr	r1, [pc, #76]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003668:	f7fc ffcc 	bl	8000604 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	e008      	b.n	8003682 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003670:	f7fc ffc8 	bl	8000604 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e012      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d1ef      	bne.n	8003670 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003690:	f000 f87e 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 8003694:	4603      	mov	r3, r0
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <HAL_RCC_ClockConfig+0x27c>)
 8003698:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800369a:	f7fc ffbf 	bl	800061c <HAL_GetTickPrio>
 800369e:	4603      	mov	r3, r0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fc ff61 	bl	8000568 <HAL_InitTick>
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	58004000 	.word	0x58004000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036be:	f7ff f9e2 	bl	8002a86 <LL_RCC_GetSysClkSource>
 80036c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036ca:	f7ff f99e 	bl	8002a0a <LL_RCC_MSI_GetRange>
 80036ce:	4603      	mov	r3, r0
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	4a2b      	ldr	r2, [pc, #172]	; (8003784 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e04b      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e045      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d10a      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036f2:	f7fe ffb7 	bl	8002664 <LL_RCC_HSE_IsEnabledDiv2>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_RCC_GetSysClockFreq+0xd4>)
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e03a      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b21      	ldr	r3, [pc, #132]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e037      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003708:	f7ff faa1 	bl	8002c4e <LL_RCC_PLL_GetMainSource>
 800370c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d003      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x64>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d003      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x6a>
 800371a:	e00d      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd0>)
 800371e:	60bb      	str	r3, [r7, #8]
        break;
 8003720:	e015      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003722:	f7fe ff9f 	bl	8002664 <LL_RCC_HSE_IsEnabledDiv2>
 8003726:	4603      	mov	r3, r0
 8003728:	2b01      	cmp	r3, #1
 800372a:	d102      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800372c:	4b17      	ldr	r3, [pc, #92]	; (800378c <HAL_RCC_GetSysClockFreq+0xd4>)
 800372e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003730:	e00d      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003734:	60bb      	str	r3, [r7, #8]
        break;
 8003736:	e00a      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003738:	f7ff f967 	bl	8002a0a <LL_RCC_MSI_GetRange>
 800373c:	4603      	mov	r3, r0
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	60bb      	str	r3, [r7, #8]
        break;
 800374c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800374e:	f7ff fa59 	bl	8002c04 <LL_RCC_PLL_GetN>
 8003752:	4602      	mov	r2, r0
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	fb03 f402 	mul.w	r4, r3, r2
 800375a:	f7ff fa6c 	bl	8002c36 <LL_RCC_PLL_GetDivider>
 800375e:	4603      	mov	r3, r0
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	3301      	adds	r3, #1
 8003764:	fbb4 f4f3 	udiv	r4, r4, r3
 8003768:	f7ff fa59 	bl	8002c1e <LL_RCC_PLL_GetR>
 800376c:	4603      	mov	r3, r0
 800376e:	0f5b      	lsrs	r3, r3, #29
 8003770:	3301      	adds	r3, #1
 8003772:	fbb4 f3f3 	udiv	r3, r4, r3
 8003776:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bd90      	pop	{r4, r7, pc}
 8003782:	bf00      	nop
 8003784:	080081d0 	.word	0x080081d0
 8003788:	00f42400 	.word	0x00f42400
 800378c:	007a1200 	.word	0x007a1200

08003790 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b598      	push	{r3, r4, r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003794:	f7ff ff90 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003798:	4604      	mov	r4, r0
 800379a:	f7ff f9e9 	bl	8002b70 <LL_RCC_GetAHBPrescaler>
 800379e:	4603      	mov	r3, r0
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd98      	pop	{r3, r4, r7, pc}
 80037b4:	08008190 	.word	0x08008190

080037b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2bb0      	cmp	r3, #176	; 0xb0
 80037c4:	d903      	bls.n	80037ce <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e007      	b.n	80037de <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	4a11      	ldr	r2, [pc, #68]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80037d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037dc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80037de:	f7ff f9d3 	bl	8002b88 <LL_RCC_GetAHB4Prescaler>
 80037e2:	4603      	mov	r3, r0
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	0c9c      	lsrs	r4, r3, #18
 8003802:	f7fe ff11 	bl	8002628 <HAL_PWREx_GetVoltageRange>
 8003806:	4603      	mov	r3, r0
 8003808:	4619      	mov	r1, r3
 800380a:	4620      	mov	r0, r4
 800380c:	f000 f80c 	bl	8003828 <RCC_SetFlashLatency>
 8003810:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bd90      	pop	{r4, r7, pc}
 800381a:	bf00      	nop
 800381c:	080081d0 	.word	0x080081d0
 8003820:	08008190 	.word	0x08008190
 8003824:	431bde83 	.word	0x431bde83

08003828 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b093      	sub	sp, #76	; 0x4c
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003832:	4b39      	ldr	r3, [pc, #228]	; (8003918 <RCC_SetFlashLatency+0xf0>)
 8003834:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800383a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800383e:	4a37      	ldr	r2, [pc, #220]	; (800391c <RCC_SetFlashLatency+0xf4>)
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	ca07      	ldmia	r2, {r0, r1, r2}
 8003846:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <RCC_SetFlashLatency+0xf8>)
 800384c:	f107 040c 	add.w	r4, r7, #12
 8003850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003856:	2300      	movs	r3, #0
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d11c      	bne.n	800389c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003862:	2300      	movs	r3, #0
 8003864:	643b      	str	r3, [r7, #64]	; 0x40
 8003866:	e015      	b.n	8003894 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003870:	4413      	add	r3, r2
 8003872:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d808      	bhi.n	800388e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800387c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003884:	4413      	add	r3, r2
 8003886:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800388a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800388c:	e022      	b.n	80038d4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800388e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003890:	3301      	adds	r3, #1
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
 8003894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003896:	2b03      	cmp	r3, #3
 8003898:	d9e6      	bls.n	8003868 <RCC_SetFlashLatency+0x40>
 800389a:	e01b      	b.n	80038d4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800389c:	2300      	movs	r3, #0
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	e015      	b.n	80038ce <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038aa:	4413      	add	r3, r2
 80038ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d808      	bhi.n	80038c8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038be:	4413      	add	r3, r2
 80038c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80038c6:	e005      	b.n	80038d4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	3301      	adds	r3, #1
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d9e6      	bls.n	80038a2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <RCC_SetFlashLatency+0xfc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 0207 	bic.w	r2, r3, #7
 80038dc:	4911      	ldr	r1, [pc, #68]	; (8003924 <RCC_SetFlashLatency+0xfc>)
 80038de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038e4:	f7fc fe8e 	bl	8000604 <HAL_GetTick>
 80038e8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038ea:	e008      	b.n	80038fe <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038ec:	f7fc fe8a 	bl	8000604 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e007      	b.n	800390e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <RCC_SetFlashLatency+0xfc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003908:	429a      	cmp	r2, r3
 800390a:	d1ef      	bne.n	80038ec <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	374c      	adds	r7, #76	; 0x4c
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}
 8003916:	bf00      	nop
 8003918:	0800811c 	.word	0x0800811c
 800391c:	0800812c 	.word	0x0800812c
 8003920:	08008138 	.word	0x08008138
 8003924:	58004000 	.word	0x58004000

08003928 <LL_RCC_LSE_IsEnabled>:
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <LL_RCC_LSE_IsEnabled+0x18>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <LL_RCC_LSE_IsEnabled+0x1a>
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_RCC_LSE_IsReady>:
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d101      	bne.n	8003964 <LL_RCC_LSE_IsReady+0x18>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <LL_RCC_LSE_IsReady+0x1a>
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_RCC_MSI_EnablePLLMode>:
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_RCC_SetRFWKPClockSource>:
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_SetSMPSClockSource>:
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f023 0203 	bic.w	r2, r3, #3
 80039cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_RCC_SetSMPSPrescaler>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_RCC_SetUSARTClockSource>:
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_RCC_SetLPUARTClockSource>:
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_SetI2CClockSource>:
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_RCC_SetLPTIMClockSource>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	401a      	ands	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_RCC_SetSAIClockSource>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_RCC_SetRNGClockSource>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_RCC_SetCLK48ClockSource>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_RCC_SetUSBClockSource>:
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ffe3 	bl	8003b28 <LL_RCC_SetCLK48ClockSource>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <LL_RCC_SetADCClockSource>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_RCC_SetRTCClockSource>:
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_RCC_GetRTCClockSource>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_ForceBackupDomainReset>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_RCC_ReleaseBackupDomainReset>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_RCC_PLLSAI1_Enable>:
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c32:	6013      	str	r3, [r2, #0]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <LL_RCC_PLLSAI1_Disable>:
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c50:	6013      	str	r3, [r2, #0]
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_RCC_PLLSAI1_IsReady>:
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c6e:	d101      	bne.n	8003c74 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003c88:	2300      	movs	r3, #0
 8003c8a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d034      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ca4:	d021      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003ca6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003caa:	d81b      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cb0:	d01d      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cb6:	d815      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc0:	d110      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cd2:	e00d      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 f94d 	bl	8003f78 <RCCEx_PLLSAI1_ConfigNP>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
        break;
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf0:	7ffb      	ldrb	r3, [r7, #31]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fee8 	bl	8003ad0 <LL_RCC_SetSAIClockSource>
 8003d00:	e001      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	7ffb      	ldrb	r3, [r7, #31]
 8003d04:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d046      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003d12:	f7ff ff56 	bl	8003bc2 <LL_RCC_GetRTCClockSource>
 8003d16:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d03c      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d22:	f7fe fc71 	bl	8002608 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff30 	bl	8003b96 <LL_RCC_SetRTCClockSource>
 8003d36:	e02e      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003d42:	f7ff ff4b 	bl	8003bdc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d46:	f7ff ff5a 	bl	8003bfe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003d62:	f7ff fde1 	bl	8003928 <LL_RCC_LSE_IsEnabled>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d114      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d6c:	f7fc fc4a 	bl	8000604 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003d72:	e00b      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f7fc fc46 	bl	8000604 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d902      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	77fb      	strb	r3, [r7, #31]
              break;
 8003d8a:	e004      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003d8c:	f7ff fdde 	bl	800394c <LL_RCC_LSE_IsReady>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d1ee      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003d96:	7ffb      	ldrb	r3, [r7, #31]
 8003d98:	77bb      	strb	r3, [r7, #30]
 8003d9a:	e001      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	7ffb      	ldrb	r3, [r7, #31]
 8003d9e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fe2a 	bl	8003a0a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fe35 	bl	8003a36 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fe5d 	bl	8003a9c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fe52 	bl	8003a9c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fe2a 	bl	8003a62 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fe1f 	bl	8003a62 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d022      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fe8d 	bl	8003b54 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e42:	d107      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f8e3 	bl	800402e <RCCEx_PLLSAI1_ConfigNQ>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003e72:	7ffb      	ldrb	r3, [r7, #31]
 8003e74:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d02b      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e94:	d003      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fe2a 	bl	8003afc <LL_RCC_SetRNGClockSource>
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f7ff fe21 	bl	8003afc <LL_RCC_SetRNGClockSource>
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff fe34 	bl	8003b28 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003ec8:	d107      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d022      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fe3d 	bl	8003b6a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f8e3 	bl	80040e4 <RCCEx_PLLSAI1_ConfigNR>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003f28:	7ffb      	ldrb	r3, [r7, #31]
 8003f2a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fd26 	bl	800398e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fd45 	bl	80039e2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fd2c 	bl	80039ba <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003f62:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003f70:	f7ff fcfe 	bl	8003970 <LL_RCC_MSI_EnablePLLMode>
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003f84:	f7ff fe5b 	bl	8003c3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f88:	f7fc fb3c 	bl	8000604 <HAL_GetTick>
 8003f8c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f8e:	e009      	b.n	8003fa4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f90:	f7fc fb38 	bl	8000604 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d902      	bls.n	8003fa4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa2:	e004      	b.n	8003fae <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fa4:	f7ff fe5a 	bl	8003c5c <LL_RCC_PLLSAI1_IsReady>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d137      	bne.n	8004024 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003fe2:	f7ff fe1d 	bl	8003c20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe6:	f7fc fb0d 	bl	8000604 <HAL_GetTick>
 8003fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fec:	e009      	b.n	8004002 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fee:	f7fc fb09 	bl	8000604 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d902      	bls.n	8004002 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	73fb      	strb	r3, [r7, #15]
        break;
 8004000:	e004      	b.n	800400c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004002:	f7ff fe2b 	bl	8003c5c <LL_RCC_PLLSAI1_IsReady>
 8004006:	4603      	mov	r3, r0
 8004008:	2b01      	cmp	r3, #1
 800400a:	d1f0      	bne.n	8003fee <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004020:	4313      	orrs	r3, r2
 8004022:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800403a:	f7ff fe00 	bl	8003c3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800403e:	f7fc fae1 	bl	8000604 <HAL_GetTick>
 8004042:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004044:	e009      	b.n	800405a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004046:	f7fc fadd 	bl	8000604 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d902      	bls.n	800405a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e004      	b.n	8004064 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800405a:	f7ff fdff 	bl	8003c5c <LL_RCC_PLLSAI1_IsReady>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d137      	bne.n	80040da <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800407e:	4313      	orrs	r3, r2
 8004080:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004094:	4313      	orrs	r3, r2
 8004096:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004098:	f7ff fdc2 	bl	8003c20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409c:	f7fc fab2 	bl	8000604 <HAL_GetTick>
 80040a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040a2:	e009      	b.n	80040b8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040a4:	f7fc faae 	bl	8000604 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d902      	bls.n	80040b8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	73fb      	strb	r3, [r7, #15]
        break;
 80040b6:	e004      	b.n	80040c2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040b8:	f7ff fdd0 	bl	8003c5c <LL_RCC_PLLSAI1_IsReady>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d1f0      	bne.n	80040a4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d108      	bne.n	80040da <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d6:	4313      	orrs	r3, r2
 80040d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80040f0:	f7ff fda5 	bl	8003c3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80040f4:	f7fc fa86 	bl	8000604 <HAL_GetTick>
 80040f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040fa:	e009      	b.n	8004110 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040fc:	f7fc fa82 	bl	8000604 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d902      	bls.n	8004110 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	73fb      	strb	r3, [r7, #15]
      break;
 800410e:	e004      	b.n	800411a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004110:	f7ff fda4 	bl	8003c5c <LL_RCC_PLLSAI1_IsReady>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d137      	bne.n	8004190 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800414a:	4313      	orrs	r3, r2
 800414c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800414e:	f7ff fd67 	bl	8003c20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004152:	f7fc fa57 	bl	8000604 <HAL_GetTick>
 8004156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004158:	e009      	b.n	800416e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800415a:	f7fc fa53 	bl	8000604 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d902      	bls.n	800416e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	73fb      	strb	r3, [r7, #15]
        break;
 800416c:	e004      	b.n	8004178 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800416e:	f7ff fd75 	bl	8003c5c <LL_RCC_PLLSAI1_IsReady>
 8004172:	4603      	mov	r3, r0
 8004174:	2b01      	cmp	r3, #1
 8004176:	d1f0      	bne.n	800415a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d108      	bne.n	8004190 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800418c:	4313      	orrs	r3, r2
 800418e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041aa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80041ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80041d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041fe:	b084      	sub	sp, #16
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	f107 0014 	add.w	r0, r7, #20
 800420c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	b004      	add	sp, #16
 800423e:	4770      	bx	lr

08004240 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004240:	b480      	push	{r7}
 8004242:	b09d      	sub	sp, #116	; 0x74
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b29b      	uxth	r3, r3
 800425e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	78db      	ldrb	r3, [r3, #3]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d81f      	bhi.n	80042b2 <USB_ActivateEndpoint+0x72>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <USB_ActivateEndpoint+0x38>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	08004289 	.word	0x08004289
 800427c:	080042a5 	.word	0x080042a5
 8004280:	080042bb 	.word	0x080042bb
 8004284:	08004297 	.word	0x08004297
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004288:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800428c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004290:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004294:	e012      	b.n	80042bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004296:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800429a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800429e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80042a2:	e00b      	b.n	80042bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80042b0:	e004      	b.n	80042bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80042b8:	e000      	b.n	80042bc <USB_ActivateEndpoint+0x7c>
      break;
 80042ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	441a      	add	r2, r3
 80042c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042da:	b29b      	uxth	r3, r3
 80042dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	b21b      	sxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	b21a      	sxth	r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	4313      	orrs	r3, r2
 8004300:	b21b      	sxth	r3, r3
 8004302:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	441a      	add	r2, r3
 8004310:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004324:	b29b      	uxth	r3, r3
 8004326:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	7b1b      	ldrb	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f040 8149 	bne.w	80045c4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8084 	beq.w	8004444 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4413      	add	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	00da      	lsls	r2, r3, #3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	88db      	ldrh	r3, [r3, #6]
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	827b      	strh	r3, [r7, #18]
 800437e:	8a7b      	ldrh	r3, [r7, #18]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01b      	beq.n	80043c0 <USB_ActivateEndpoint+0x180>
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	823b      	strh	r3, [r7, #16]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	8a3b      	ldrh	r3, [r7, #16]
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	78db      	ldrb	r3, [r3, #3]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d020      	beq.n	800440a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043de:	81bb      	strh	r3, [r7, #12]
 80043e0:	89bb      	ldrh	r3, [r7, #12]
 80043e2:	f083 0320 	eor.w	r3, r3, #32
 80043e6:	81bb      	strh	r3, [r7, #12]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	89bb      	ldrh	r3, [r7, #12]
 80043f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004404:	b29b      	uxth	r3, r3
 8004406:	8013      	strh	r3, [r2, #0]
 8004408:	e2a6      	b.n	8004958 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004420:	81fb      	strh	r3, [r7, #14]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	441a      	add	r2, r3
 800442c:	89fb      	ldrh	r3, [r7, #14]
 800442e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443e:	b29b      	uxth	r3, r3
 8004440:	8013      	strh	r3, [r2, #0]
 8004442:	e289      	b.n	8004958 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	4413      	add	r3, r2
 8004456:	633b      	str	r3, [r7, #48]	; 0x30
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	00da      	lsls	r2, r3, #3
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	4413      	add	r3, r2
 8004462:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	88db      	ldrh	r3, [r3, #6]
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	b29b      	uxth	r3, r3
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004482:	b29b      	uxth	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	4413      	add	r3, r2
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	00da      	lsls	r2, r3, #3
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	4413      	add	r3, r2
 8004496:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b3e      	cmp	r3, #62	; 0x3e
 80044a2:	d918      	bls.n	80044d6 <USB_ActivateEndpoint+0x296>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <USB_ActivateEndpoint+0x27e>
 80044b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ba:	3b01      	subs	r3, #1
 80044bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80044be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	029b      	lsls	r3, r3, #10
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e029      	b.n	800452a <USB_ActivateEndpoint+0x2ea>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d112      	bne.n	8004504 <USB_ActivateEndpoint+0x2c4>
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	e012      	b.n	800452a <USB_ActivateEndpoint+0x2ea>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	66bb      	str	r3, [r7, #104]	; 0x68
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <USB_ActivateEndpoint+0x2de>
 8004518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800451a:	3301      	adds	r3, #1
 800451c:	66bb      	str	r3, [r7, #104]	; 0x68
 800451e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004520:	b29b      	uxth	r3, r3
 8004522:	029b      	lsls	r3, r3, #10
 8004524:	b29a      	uxth	r2, r3
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	847b      	strh	r3, [r7, #34]	; 0x22
 8004538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800453a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01b      	beq.n	800457a <USB_ActivateEndpoint+0x33a>
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004558:	843b      	strh	r3, [r7, #32]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	441a      	add	r2, r3
 8004564:	8c3b      	ldrh	r3, [r7, #32]
 8004566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004576:	b29b      	uxth	r3, r3
 8004578:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	83fb      	strh	r3, [r7, #30]
 8004592:	8bfb      	ldrh	r3, [r7, #30]
 8004594:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004598:	83fb      	strh	r3, [r7, #30]
 800459a:	8bfb      	ldrh	r3, [r7, #30]
 800459c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045a0:	83fb      	strh	r3, [r7, #30]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	441a      	add	r2, r3
 80045ac:	8bfb      	ldrh	r3, [r7, #30]
 80045ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]
 80045c2:	e1c9      	b.n	8004958 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	78db      	ldrb	r3, [r3, #3]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d11e      	bne.n	800460a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80045f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004604:	b29b      	uxth	r3, r3
 8004606:	8013      	strh	r3, [r2, #0]
 8004608:	e01d      	b.n	8004646 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800461c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004620:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	65fb      	str	r3, [r7, #92]	; 0x5c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004650:	b29b      	uxth	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004656:	4413      	add	r3, r2
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	00da      	lsls	r2, r3, #3
 8004660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004662:	4413      	add	r3, r2
 8004664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004668:	65bb      	str	r3, [r7, #88]	; 0x58
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	891b      	ldrh	r3, [r3, #8]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	b29b      	uxth	r3, r3
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	657b      	str	r3, [r7, #84]	; 0x54
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004684:	b29b      	uxth	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468a:	4413      	add	r3, r2
 800468c:	657b      	str	r3, [r7, #84]	; 0x54
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	00da      	lsls	r2, r3, #3
 8004694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004696:	4413      	add	r3, r2
 8004698:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800469c:	653b      	str	r3, [r7, #80]	; 0x50
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	895b      	ldrh	r3, [r3, #10]
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 8093 	bne.w	80047de <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80046c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <USB_ActivateEndpoint+0x4cc>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800471a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01b      	beq.n	800475c <USB_ActivateEndpoint+0x51c>
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004758:	b29b      	uxth	r3, r3
 800475a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	873b      	strh	r3, [r7, #56]	; 0x38
 8004774:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004776:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800477a:	873b      	strh	r3, [r7, #56]	; 0x38
 800477c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800477e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004782:	873b      	strh	r3, [r7, #56]	; 0x38
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	441a      	add	r2, r3
 80047c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d8:	b29b      	uxth	r3, r3
 80047da:	8013      	strh	r3, [r2, #0]
 80047dc:	e0bc      	b.n	8004958 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80047ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01d      	beq.n	8004836 <USB_ActivateEndpoint+0x5f6>
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004846:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01d      	beq.n	800488e <USB_ActivateEndpoint+0x64e>
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004868:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004886:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	78db      	ldrb	r3, [r3, #3]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d024      	beq.n	80048e0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80048b4:	f083 0320 	eor.w	r3, r3, #32
 80048b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80048ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]
 80048de:	e01d      	b.n	800491c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	441a      	add	r2, r3
 8004904:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004918:	b29b      	uxth	r3, r3
 800491a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004954:	b29b      	uxth	r3, r3
 8004956:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004958:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800495c:	4618      	mov	r0, r3
 800495e:	3774      	adds	r7, #116	; 0x74
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004968:	b480      	push	{r7}
 800496a:	b08d      	sub	sp, #52	; 0x34
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	7b1b      	ldrb	r3, [r3, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 808e 	bne.w	8004a98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d044      	beq.n	8004a0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	81bb      	strh	r3, [r7, #12]
 8004992:	89bb      	ldrh	r3, [r7, #12]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <USB_DeactivateEndpoint+0x6c>
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	817b      	strh	r3, [r7, #10]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ea:	813b      	strh	r3, [r7, #8]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	441a      	add	r2, r3
 80049f6:	893b      	ldrh	r3, [r7, #8]
 80049f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	8013      	strh	r3, [r2, #0]
 8004a0c:	e192      	b.n	8004d34 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	827b      	strh	r3, [r7, #18]
 8004a1c:	8a7b      	ldrh	r3, [r7, #18]
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01b      	beq.n	8004a5e <USB_DeactivateEndpoint+0xf6>
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3c:	823b      	strh	r3, [r7, #16]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	441a      	add	r2, r3
 8004a48:	8a3b      	ldrh	r3, [r7, #16]
 8004a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a74:	81fb      	strh	r3, [r7, #14]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	89fb      	ldrh	r3, [r7, #14]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
 8004a96:	e14d      	b.n	8004d34 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 80a5 	bne.w	8004bec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	843b      	strh	r3, [r7, #32]
 8004ab0:	8c3b      	ldrh	r3, [r7, #32]
 8004ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01b      	beq.n	8004af2 <USB_DeactivateEndpoint+0x18a>
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad0:	83fb      	strh	r3, [r7, #30]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8bfb      	ldrh	r3, [r7, #30]
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	83bb      	strh	r3, [r7, #28]
 8004b00:	8bbb      	ldrh	r3, [r7, #28]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01b      	beq.n	8004b42 <USB_DeactivateEndpoint+0x1da>
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	837b      	strh	r3, [r7, #26]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8b7b      	ldrh	r3, [r7, #26]
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	833b      	strh	r3, [r7, #24]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	8b3b      	ldrh	r3, [r7, #24]
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b90:	82fb      	strh	r3, [r7, #22]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	8afb      	ldrh	r3, [r7, #22]
 8004b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc8:	82bb      	strh	r3, [r7, #20]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	441a      	add	r2, r3
 8004bd4:	8abb      	ldrh	r3, [r7, #20]
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]
 8004bea:	e0a3      	b.n	8004d34 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <USB_DeactivateEndpoint+0x2d4>
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <USB_DeactivateEndpoint+0x324>
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3734      	adds	r7, #52	; 0x34
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b0c2      	sub	sp, #264	; 0x108
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	6018      	str	r0, [r3, #0]
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d50:	463b      	mov	r3, r7
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	f040 8509 	bne.w	800576e <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	463b      	mov	r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d905      	bls.n	8004d78 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004d6c:	463b      	mov	r3, r7
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d76:	e004      	b.n	8004d82 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004d78:	463b      	mov	r3, r7
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d82:	463b      	mov	r3, r7
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	7b1b      	ldrb	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d128      	bne.n	8004dde <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6959      	ldr	r1, [r3, #20]
 8004d92:	463b      	mov	r3, r7
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	88da      	ldrh	r2, [r3, #6]
 8004d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	1d38      	adds	r0, r7, #4
 8004da0:	6800      	ldr	r0, [r0, #0]
 8004da2:	f001 f9da 	bl	800615a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	00da      	lsls	r2, r3, #3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	f000 bc9f 	b.w	800571c <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004dde:	463b      	mov	r3, r7
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	78db      	ldrb	r3, [r3, #3]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	f040 8347 	bne.w	8005478 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004dea:	463b      	mov	r3, r7
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	463b      	mov	r3, r7
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	f240 82eb 	bls.w	80053d2 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	463b      	mov	r3, r7
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	463b      	mov	r3, r7
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e34:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e40:	463b      	mov	r3, r7
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a1a      	ldr	r2, [r3, #32]
 8004e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e52:	1d3b      	adds	r3, r7, #4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	463b      	mov	r3, r7
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8159 	beq.w	8005120 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e6e:	1d3b      	adds	r3, r7, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
 8004e74:	463b      	mov	r3, r7
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d164      	bne.n	8004f48 <USB_EPStartXfer+0x206>
 8004e7e:	1d3b      	adds	r3, r7, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	4413      	add	r3, r2
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e96:	463b      	mov	r3, r7
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	00da      	lsls	r2, r3, #3
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eac:	2b3e      	cmp	r3, #62	; 0x3e
 8004eae:	d91c      	bls.n	8004eea <USB_EPStartXfer+0x1a8>
 8004eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <USB_EPStartXfer+0x18e>
 8004ec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	029b      	lsls	r3, r3, #10
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	e04a      	b.n	8004f80 <USB_EPStartXfer+0x23e>
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d112      	bne.n	8004f18 <USB_EPStartXfer+0x1d6>
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e033      	b.n	8004f80 <USB_EPStartXfer+0x23e>
 8004f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <USB_EPStartXfer+0x1f6>
 8004f2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f32:	3301      	adds	r3, #1
 8004f34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	e01b      	b.n	8004f80 <USB_EPStartXfer+0x23e>
 8004f48:	463b      	mov	r3, r7
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d116      	bne.n	8004f80 <USB_EPStartXfer+0x23e>
 8004f52:	1d3b      	adds	r3, r7, #4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	4413      	add	r3, r2
 8004f62:	633b      	str	r3, [r7, #48]	; 0x30
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	00da      	lsls	r2, r3, #3
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	4413      	add	r3, r2
 8004f70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f80:	463b      	mov	r3, r7
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	895b      	ldrh	r3, [r3, #10]
 8004f86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6959      	ldr	r1, [r3, #20]
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f9a:	1d38      	adds	r0, r7, #4
 8004f9c:	6800      	ldr	r0, [r0, #0]
 8004f9e:	f001 f8dc 	bl	800615a <USB_WritePMA>
            ep->xfer_buff += len;
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fac:	441a      	add	r2, r3
 8004fae:	463b      	mov	r3, r7
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	463b      	mov	r3, r7
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d909      	bls.n	8004fd8 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a1a      	ldr	r2, [r3, #32]
 8004fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	621a      	str	r2, [r3, #32]
 8004fd6:	e008      	b.n	8004fea <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fd8:	463b      	mov	r3, r7
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d164      	bne.n	80050be <USB_EPStartXfer+0x37c>
 8004ff4:	1d3b      	adds	r3, r7, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005002:	b29b      	uxth	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	463b      	mov	r3, r7
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	00da      	lsls	r2, r3, #3
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	4413      	add	r3, r2
 8005018:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005022:	2b3e      	cmp	r3, #62	; 0x3e
 8005024:	d91c      	bls.n	8005060 <USB_EPStartXfer+0x31e>
 8005026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <USB_EPStartXfer+0x304>
 800503c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005040:	3b01      	subs	r3, #1
 8005042:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504a:	b29b      	uxth	r3, r3
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005058:	b29a      	uxth	r2, r3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	e04d      	b.n	80050fc <USB_EPStartXfer+0x3ba>
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005064:	2b00      	cmp	r3, #0
 8005066:	d112      	bne.n	800508e <USB_EPStartXfer+0x34c>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005072:	b29a      	uxth	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005086:	b29a      	uxth	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	e036      	b.n	80050fc <USB_EPStartXfer+0x3ba>
 800508e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <USB_EPStartXfer+0x36c>
 80050a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a8:	3301      	adds	r3, #1
 80050aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	029b      	lsls	r3, r3, #10
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	e01e      	b.n	80050fc <USB_EPStartXfer+0x3ba>
 80050be:	463b      	mov	r3, r7
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d119      	bne.n	80050fc <USB_EPStartXfer+0x3ba>
 80050c8:	1d3b      	adds	r3, r7, #4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	1d3b      	adds	r3, r7, #4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	4413      	add	r3, r2
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	463b      	mov	r3, r7
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	00da      	lsls	r2, r3, #3
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	4413      	add	r3, r2
 80050ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050fc:	463b      	mov	r3, r7
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	891b      	ldrh	r3, [r3, #8]
 8005102:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6959      	ldr	r1, [r3, #20]
 800510c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005110:	b29b      	uxth	r3, r3
 8005112:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005116:	1d38      	adds	r0, r7, #4
 8005118:	6800      	ldr	r0, [r0, #0]
 800511a:	f001 f81e 	bl	800615a <USB_WritePMA>
 800511e:	e2fd      	b.n	800571c <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d164      	bne.n	80051f4 <USB_EPStartXfer+0x4b2>
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005138:	b29b      	uxth	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513e:	4413      	add	r3, r2
 8005140:	64bb      	str	r3, [r7, #72]	; 0x48
 8005142:	463b      	mov	r3, r7
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	00da      	lsls	r2, r3, #3
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514c:	4413      	add	r3, r2
 800514e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005158:	2b3e      	cmp	r3, #62	; 0x3e
 800515a:	d91c      	bls.n	8005196 <USB_EPStartXfer+0x454>
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <USB_EPStartXfer+0x43a>
 8005172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005176:	3b01      	subs	r3, #1
 8005178:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800517c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005180:	b29b      	uxth	r3, r3
 8005182:	029b      	lsls	r3, r3, #10
 8005184:	b29b      	uxth	r3, r3
 8005186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518e:	b29a      	uxth	r2, r3
 8005190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e04d      	b.n	8005232 <USB_EPStartXfer+0x4f0>
 8005196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519a:	2b00      	cmp	r3, #0
 800519c:	d112      	bne.n	80051c4 <USB_EPStartXfer+0x482>
 800519e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051bc:	b29a      	uxth	r2, r3
 80051be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c0:	801a      	strh	r2, [r3, #0]
 80051c2:	e036      	b.n	8005232 <USB_EPStartXfer+0x4f0>
 80051c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <USB_EPStartXfer+0x4a2>
 80051da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051de:	3301      	adds	r3, #1
 80051e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	029b      	lsls	r3, r3, #10
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e01e      	b.n	8005232 <USB_EPStartXfer+0x4f0>
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d119      	bne.n	8005232 <USB_EPStartXfer+0x4f0>
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	653b      	str	r3, [r7, #80]	; 0x50
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520c:	b29b      	uxth	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005212:	4413      	add	r3, r2
 8005214:	653b      	str	r3, [r7, #80]	; 0x50
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	00da      	lsls	r2, r3, #3
 800521e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005220:	4413      	add	r3, r2
 8005222:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522c:	b29a      	uxth	r2, r3
 800522e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005230:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005232:	463b      	mov	r3, r7
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	891b      	ldrh	r3, [r3, #8]
 8005238:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800523c:	463b      	mov	r3, r7
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6959      	ldr	r1, [r3, #20]
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005246:	b29b      	uxth	r3, r3
 8005248:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800524c:	1d38      	adds	r0, r7, #4
 800524e:	6800      	ldr	r0, [r0, #0]
 8005250:	f000 ff83 	bl	800615a <USB_WritePMA>
            ep->xfer_buff += len;
 8005254:	463b      	mov	r3, r7
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525e:	441a      	add	r2, r3
 8005260:	463b      	mov	r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005266:	463b      	mov	r3, r7
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	429a      	cmp	r2, r3
 8005274:	d909      	bls.n	800528a <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8005276:	463b      	mov	r3, r7
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005280:	1ad2      	subs	r2, r2, r3
 8005282:	463b      	mov	r3, r7
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	621a      	str	r2, [r3, #32]
 8005288:	e008      	b.n	800529c <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005294:	463b      	mov	r3, r7
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800529c:	1d3b      	adds	r3, r7, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	643b      	str	r3, [r7, #64]	; 0x40
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d164      	bne.n	8005376 <USB_EPStartXfer+0x634>
 80052ac:	1d3b      	adds	r3, r7, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b2:	1d3b      	adds	r3, r7, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	4413      	add	r3, r2
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	00da      	lsls	r2, r3, #3
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	4413      	add	r3, r2
 80052d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052da:	2b3e      	cmp	r3, #62	; 0x3e
 80052dc:	d91c      	bls.n	8005318 <USB_EPStartXfer+0x5d6>
 80052de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <USB_EPStartXfer+0x5bc>
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	3b01      	subs	r3, #1
 80052fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	b29b      	uxth	r3, r3
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	b29b      	uxth	r3, r3
 8005308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005310:	b29a      	uxth	r2, r3
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	e04a      	b.n	80053ae <USB_EPStartXfer+0x66c>
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531c:	2b00      	cmp	r3, #0
 800531e:	d112      	bne.n	8005346 <USB_EPStartXfer+0x604>
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800532a:	b29a      	uxth	r2, r3
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533e:	b29a      	uxth	r2, r3
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	e033      	b.n	80053ae <USB_EPStartXfer+0x66c>
 8005346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d004      	beq.n	8005366 <USB_EPStartXfer+0x624>
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	3301      	adds	r3, #1
 8005362:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536a:	b29b      	uxth	r3, r3
 800536c:	029b      	lsls	r3, r3, #10
 800536e:	b29a      	uxth	r2, r3
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	e01b      	b.n	80053ae <USB_EPStartXfer+0x66c>
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d116      	bne.n	80053ae <USB_EPStartXfer+0x66c>
 8005380:	1d3b      	adds	r3, r7, #4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538e:	4413      	add	r3, r2
 8005390:	643b      	str	r3, [r7, #64]	; 0x40
 8005392:	463b      	mov	r3, r7
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	00da      	lsls	r2, r3, #3
 800539a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539c:	4413      	add	r3, r2
 800539e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053ae:	463b      	mov	r3, r7
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	895b      	ldrh	r3, [r3, #10]
 80053b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6959      	ldr	r1, [r3, #20]
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053c8:	1d38      	adds	r0, r7, #4
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	f000 fec5 	bl	800615a <USB_WritePMA>
 80053d0:	e1a4      	b.n	800571c <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80053d2:	463b      	mov	r3, r7
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80053dc:	1d3b      	adds	r3, r7, #4
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	463b      	mov	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	441a      	add	r2, r3
 8005408:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542e:	b29b      	uxth	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005434:	4413      	add	r3, r2
 8005436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	00da      	lsls	r2, r3, #3
 8005440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005442:	4413      	add	r3, r2
 8005444:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005448:	65bb      	str	r3, [r7, #88]	; 0x58
 800544a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544e:	b29a      	uxth	r2, r3
 8005450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005452:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005454:	463b      	mov	r3, r7
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	891b      	ldrh	r3, [r3, #8]
 800545a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6959      	ldr	r1, [r3, #20]
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	b29b      	uxth	r3, r3
 800546a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800546e:	1d38      	adds	r0, r7, #4
 8005470:	6800      	ldr	r0, [r0, #0]
 8005472:	f000 fe72 	bl	800615a <USB_WritePMA>
 8005476:	e151      	b.n	800571c <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005478:	463b      	mov	r3, r7
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005482:	1ad2      	subs	r2, r2, r3
 8005484:	463b      	mov	r3, r7
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	463b      	mov	r3, r7
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 809b 	beq.w	80055dc <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	673b      	str	r3, [r7, #112]	; 0x70
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d164      	bne.n	8005580 <USB_EPStartXfer+0x83e>
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ca:	4413      	add	r3, r2
 80054cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ce:	463b      	mov	r3, r7
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	00da      	lsls	r2, r3, #3
 80054d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054d8:	4413      	add	r3, r2
 80054da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054de:	667b      	str	r3, [r7, #100]	; 0x64
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e4:	2b3e      	cmp	r3, #62	; 0x3e
 80054e6:	d91c      	bls.n	8005522 <USB_EPStartXfer+0x7e0>
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <USB_EPStartXfer+0x7c6>
 80054fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005502:	3b01      	subs	r3, #1
 8005504:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005508:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800550c:	b29b      	uxth	r3, r3
 800550e:	029b      	lsls	r3, r3, #10
 8005510:	b29b      	uxth	r3, r3
 8005512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551a:	b29a      	uxth	r2, r3
 800551c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e04a      	b.n	80055b8 <USB_EPStartXfer+0x876>
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005526:	2b00      	cmp	r3, #0
 8005528:	d112      	bne.n	8005550 <USB_EPStartXfer+0x80e>
 800552a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005534:	b29a      	uxth	r2, r3
 8005536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005548:	b29a      	uxth	r2, r3
 800554a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	e033      	b.n	80055b8 <USB_EPStartXfer+0x876>
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800555a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <USB_EPStartXfer+0x82e>
 8005566:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800556a:	3301      	adds	r3, #1
 800556c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005570:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005574:	b29b      	uxth	r3, r3
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	b29a      	uxth	r2, r3
 800557a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e01b      	b.n	80055b8 <USB_EPStartXfer+0x876>
 8005580:	463b      	mov	r3, r7
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d116      	bne.n	80055b8 <USB_EPStartXfer+0x876>
 800558a:	1d3b      	adds	r3, r7, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005592:	b29b      	uxth	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005598:	4413      	add	r3, r2
 800559a:	673b      	str	r3, [r7, #112]	; 0x70
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	00da      	lsls	r2, r3, #3
 80055a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a6:	4413      	add	r3, r2
 80055a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80055b8:	463b      	mov	r3, r7
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	895b      	ldrh	r3, [r3, #10]
 80055be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6959      	ldr	r1, [r3, #20]
 80055c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055d2:	1d38      	adds	r0, r7, #4
 80055d4:	6800      	ldr	r0, [r0, #0]
 80055d6:	f000 fdc0 	bl	800615a <USB_WritePMA>
 80055da:	e09f      	b.n	800571c <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	785b      	ldrb	r3, [r3, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d164      	bne.n	80056b0 <USB_EPStartXfer+0x96e>
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055fa:	4413      	add	r3, r2
 80055fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	00da      	lsls	r2, r3, #3
 8005606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005608:	4413      	add	r3, r2
 800560a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800560e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005614:	2b3e      	cmp	r3, #62	; 0x3e
 8005616:	d91c      	bls.n	8005652 <USB_EPStartXfer+0x910>
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <USB_EPStartXfer+0x8f6>
 800562e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005632:	3b01      	subs	r3, #1
 8005634:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800563c:	b29b      	uxth	r3, r3
 800563e:	029b      	lsls	r3, r3, #10
 8005640:	b29b      	uxth	r3, r3
 8005642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564a:	b29a      	uxth	r2, r3
 800564c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	e053      	b.n	80056fa <USB_EPStartXfer+0x9b8>
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005656:	2b00      	cmp	r3, #0
 8005658:	d112      	bne.n	8005680 <USB_EPStartXfer+0x93e>
 800565a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005664:	b29a      	uxth	r2, r3
 8005666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005678:	b29a      	uxth	r2, r3
 800567a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	e03c      	b.n	80056fa <USB_EPStartXfer+0x9b8>
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <USB_EPStartXfer+0x95e>
 8005696:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800569a:	3301      	adds	r3, #1
 800569c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	e024      	b.n	80056fa <USB_EPStartXfer+0x9b8>
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d11f      	bne.n	80056fa <USB_EPStartXfer+0x9b8>
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056d2:	4413      	add	r3, r2
 80056d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056d8:	463b      	mov	r3, r7
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	00da      	lsls	r2, r3, #3
 80056e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056e4:	4413      	add	r3, r2
 80056e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	891b      	ldrh	r3, [r3, #8]
 8005700:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6959      	ldr	r1, [r3, #20]
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570e:	b29b      	uxth	r3, r3
 8005710:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005714:	1d38      	adds	r0, r7, #4
 8005716:	6800      	ldr	r0, [r0, #0]
 8005718:	f000 fd1f 	bl	800615a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005736:	817b      	strh	r3, [r7, #10]
 8005738:	897b      	ldrh	r3, [r7, #10]
 800573a:	f083 0310 	eor.w	r3, r3, #16
 800573e:	817b      	strh	r3, [r7, #10]
 8005740:	897b      	ldrh	r3, [r7, #10]
 8005742:	f083 0320 	eor.w	r3, r3, #32
 8005746:	817b      	strh	r3, [r7, #10]
 8005748:	1d3b      	adds	r3, r7, #4
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	463b      	mov	r3, r7
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	441a      	add	r2, r3
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]
 800576c:	e3b5      	b.n	8005eda <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800576e:	463b      	mov	r3, r7
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	7b1b      	ldrb	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f040 8090 	bne.w	800589a <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800577a:	463b      	mov	r3, r7
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	463b      	mov	r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	429a      	cmp	r2, r3
 8005788:	d90e      	bls.n	80057a8 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800578a:	463b      	mov	r3, r7
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	619a      	str	r2, [r3, #24]
 80057a6:	e008      	b.n	80057ba <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057d2:	4413      	add	r3, r2
 80057d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	00da      	lsls	r2, r3, #3
 80057e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057e4:	4413      	add	r3, r2
 80057e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f2:	2b3e      	cmp	r3, #62	; 0x3e
 80057f4:	d91d      	bls.n	8005832 <USB_EPStartXfer+0xaf0>
 80057f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <USB_EPStartXfer+0xad4>
 800580c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005810:	3b01      	subs	r3, #1
 8005812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005816:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800581a:	b29b      	uxth	r3, r3
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	b29b      	uxth	r3, r3
 8005820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005828:	b29a      	uxth	r2, r3
 800582a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	e325      	b.n	8005e7e <USB_EPStartXfer+0x113c>
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <USB_EPStartXfer+0xb26>
 800583a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29b      	uxth	r3, r3
 8005842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005846:	b29a      	uxth	r2, r3
 8005848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585e:	b29a      	uxth	r2, r3
 8005860:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e30a      	b.n	8005e7e <USB_EPStartXfer+0x113c>
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <USB_EPStartXfer+0xb46>
 800587e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005882:	3301      	adds	r3, #1
 8005884:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800588c:	b29b      	uxth	r3, r3
 800588e:	029b      	lsls	r3, r3, #10
 8005890:	b29a      	uxth	r2, r3
 8005892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	e2f1      	b.n	8005e7e <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	78db      	ldrb	r3, [r3, #3]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	f040 818f 	bne.w	8005bc4 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058a6:	463b      	mov	r3, r7
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d175      	bne.n	800599c <USB_EPStartXfer+0xc5a>
 80058b0:	1d3b      	adds	r3, r7, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058b8:	1d3b      	adds	r3, r7, #4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058c8:	4413      	add	r3, r2
 80058ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ce:	463b      	mov	r3, r7
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	00da      	lsls	r2, r3, #3
 80058d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058da:	4413      	add	r3, r2
 80058dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058e4:	463b      	mov	r3, r7
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b3e      	cmp	r3, #62	; 0x3e
 80058ec:	d91f      	bls.n	800592e <USB_EPStartXfer+0xbec>
 80058ee:	463b      	mov	r3, r7
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <USB_EPStartXfer+0xbd0>
 8005908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590c:	3b01      	subs	r3, #1
 800590e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	b29b      	uxth	r3, r3
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	b29b      	uxth	r3, r3
 800591c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005924:	b29a      	uxth	r2, r3
 8005926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800592a:	801a      	strh	r2, [r3, #0]
 800592c:	e05c      	b.n	80059e8 <USB_EPStartXfer+0xca6>
 800592e:	463b      	mov	r3, r7
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d116      	bne.n	8005966 <USB_EPStartXfer+0xc24>
 8005938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005944:	b29a      	uxth	r2, r3
 8005946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595c:	b29a      	uxth	r2, r3
 800595e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005962:	801a      	strh	r2, [r3, #0]
 8005964:	e040      	b.n	80059e8 <USB_EPStartXfer+0xca6>
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <USB_EPStartXfer+0xc48>
 8005980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005984:	3301      	adds	r3, #1
 8005986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29a      	uxth	r2, r3
 8005994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	e025      	b.n	80059e8 <USB_EPStartXfer+0xca6>
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d120      	bne.n	80059e8 <USB_EPStartXfer+0xca6>
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059ae:	1d3b      	adds	r3, r7, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059be:	4413      	add	r3, r2
 80059c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059c4:	463b      	mov	r3, r7
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00da      	lsls	r2, r3, #3
 80059cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059d0:	4413      	add	r3, r2
 80059d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059da:	463b      	mov	r3, r7
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059f0:	463b      	mov	r3, r7
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d175      	bne.n	8005ae6 <USB_EPStartXfer+0xda4>
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a12:	4413      	add	r3, r2
 8005a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	00da      	lsls	r2, r3, #3
 8005a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b3e      	cmp	r3, #62	; 0x3e
 8005a36:	d91f      	bls.n	8005a78 <USB_EPStartXfer+0xd36>
 8005a38:	463b      	mov	r3, r7
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a44:	463b      	mov	r3, r7
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <USB_EPStartXfer+0xd1a>
 8005a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a56:	3b01      	subs	r3, #1
 8005a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	029b      	lsls	r3, r3, #10
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	e058      	b.n	8005b2a <USB_EPStartXfer+0xde8>
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d116      	bne.n	8005ab0 <USB_EPStartXfer+0xd6e>
 8005a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e03c      	b.n	8005b2a <USB_EPStartXfer+0xde8>
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <USB_EPStartXfer+0xd92>
 8005aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e021      	b.n	8005b2a <USB_EPStartXfer+0xde8>
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d11c      	bne.n	8005b2a <USB_EPStartXfer+0xde8>
 8005af0:	1d3b      	adds	r3, r7, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b00:	4413      	add	r3, r2
 8005b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b06:	463b      	mov	r3, r7
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	00da      	lsls	r2, r3, #3
 8005b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b12:	4413      	add	r3, r2
 8005b14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b28:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 81a4 	beq.w	8005e7e <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b36:	1d3b      	adds	r3, r7, #4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <USB_EPStartXfer+0xe20>
 8005b56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10d      	bne.n	8005b7e <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f040 8187 	bne.w	8005e7e <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 8180 	bne.w	8005e7e <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b98:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	8013      	strh	r3, [r2, #0]
 8005bc2:	e15c      	b.n	8005e7e <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	f040 8155 	bne.w	8005e7a <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d90e      	bls.n	8005bfe <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005bea:	463b      	mov	r3, r7
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699a      	ldr	r2, [r3, #24]
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf4:	1ad2      	subs	r2, r2, r3
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	619a      	str	r2, [r3, #24]
 8005bfc:	e008      	b.n	8005c10 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005c08:	463b      	mov	r3, r7
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d16f      	bne.n	8005cfa <USB_EPStartXfer+0xfb8>
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c32:	4413      	add	r3, r2
 8005c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	00da      	lsls	r2, r3, #3
 8005c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c44:	4413      	add	r3, r2
 8005c46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c52:	2b3e      	cmp	r3, #62	; 0x3e
 8005c54:	d91d      	bls.n	8005c92 <USB_EPStartXfer+0xf50>
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <USB_EPStartXfer+0xf34>
 8005c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c70:	3b01      	subs	r3, #1
 8005c72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e058      	b.n	8005d44 <USB_EPStartXfer+0x1002>
 8005c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d116      	bne.n	8005cc8 <USB_EPStartXfer+0xf86>
 8005c9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cc4:	801a      	strh	r2, [r3, #0]
 8005cc6:	e03d      	b.n	8005d44 <USB_EPStartXfer+0x1002>
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <USB_EPStartXfer+0xfa6>
 8005cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	029b      	lsls	r3, r3, #10
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e024      	b.n	8005d44 <USB_EPStartXfer+0x1002>
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d11f      	bne.n	8005d44 <USB_EPStartXfer+0x1002>
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d0c:	1d3b      	adds	r3, r7, #4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	00da      	lsls	r2, r3, #3
 8005d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d2e:	4413      	add	r3, r2
 8005d30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d16f      	bne.n	8005e36 <USB_EPStartXfer+0x10f4>
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d6e:	4413      	add	r3, r2
 8005d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d74:	463b      	mov	r3, r7
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	00da      	lsls	r2, r3, #3
 8005d7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d80:	4413      	add	r3, r2
 8005d82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d90:	d91d      	bls.n	8005dce <USB_EPStartXfer+0x108c>
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <USB_EPStartXfer+0x1070>
 8005da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dac:	3b01      	subs	r3, #1
 8005dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	029b      	lsls	r3, r3, #10
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e057      	b.n	8005e7e <USB_EPStartXfer+0x113c>
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d116      	bne.n	8005e04 <USB_EPStartXfer+0x10c2>
 8005dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	e03c      	b.n	8005e7e <USB_EPStartXfer+0x113c>
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <USB_EPStartXfer+0x10e2>
 8005e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e1e:	3301      	adds	r3, #1
 8005e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	029b      	lsls	r3, r3, #10
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	e023      	b.n	8005e7e <USB_EPStartXfer+0x113c>
 8005e36:	463b      	mov	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d11e      	bne.n	8005e7e <USB_EPStartXfer+0x113c>
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e50:	4413      	add	r3, r2
 8005e52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e56:	463b      	mov	r3, r7
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	00da      	lsls	r2, r3, #3
 8005e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e62:	4413      	add	r3, r2
 8005e64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	e001      	b.n	8005e7e <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e02e      	b.n	8005edc <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	463b      	mov	r3, r7
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005e9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ea4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005ea8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005eac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005eb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005eb4:	1d3b      	adds	r3, r7, #4
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	463b      	mov	r3, r7
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d020      	beq.n	8005f3a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0e:	81bb      	strh	r3, [r7, #12]
 8005f10:	89bb      	ldrh	r3, [r7, #12]
 8005f12:	f083 0310 	eor.w	r3, r3, #16
 8005f16:	81bb      	strh	r3, [r7, #12]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	89bb      	ldrh	r3, [r7, #12]
 8005f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8013      	strh	r3, [r2, #0]
 8005f38:	e01f      	b.n	8005f7a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	81fb      	strh	r3, [r7, #14]
 8005f52:	89fb      	ldrh	r3, [r7, #14]
 8005f54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f58:	81fb      	strh	r3, [r7, #14]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	441a      	add	r2, r3
 8005f64:	89fb      	ldrh	r3, [r7, #14]
 8005f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	7b1b      	ldrb	r3, [r3, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 809d 	bne.w	80060d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d04c      	beq.n	800603e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	823b      	strh	r3, [r7, #16]
 8005fb2:	8a3b      	ldrh	r3, [r7, #16]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <USB_EPClearStall+0x6c>
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd2:	81fb      	strh	r3, [r7, #14]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	89fb      	ldrh	r3, [r7, #14]
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	78db      	ldrb	r3, [r3, #3]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d06c      	beq.n	80060d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006012:	81bb      	strh	r3, [r7, #12]
 8006014:	89bb      	ldrh	r3, [r7, #12]
 8006016:	f083 0320 	eor.w	r3, r3, #32
 800601a:	81bb      	strh	r3, [r7, #12]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	89bb      	ldrh	r3, [r7, #12]
 8006028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006038:	b29b      	uxth	r3, r3
 800603a:	8013      	strh	r3, [r2, #0]
 800603c:	e04b      	b.n	80060d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	82fb      	strh	r3, [r7, #22]
 800604c:	8afb      	ldrh	r3, [r7, #22]
 800604e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01b      	beq.n	800608e <USB_EPClearStall+0x106>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606c:	82bb      	strh	r3, [r7, #20]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	441a      	add	r2, r3
 8006078:	8abb      	ldrh	r3, [r7, #20]
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a4:	827b      	strh	r3, [r7, #18]
 80060a6:	8a7b      	ldrh	r3, [r7, #18]
 80060a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060ac:	827b      	strh	r3, [r7, #18]
 80060ae:	8a7b      	ldrh	r3, [r7, #18]
 80060b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060b4:	827b      	strh	r3, [r7, #18]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	8a7b      	ldrh	r3, [r7, #18]
 80060c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2280      	movs	r2, #128	; 0x80
 80060fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800611a:	b29b      	uxth	r3, r3
 800611c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006124:	b29a      	uxth	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006148:	b29b      	uxth	r3, r3
 800614a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800614c:	68fb      	ldr	r3, [r7, #12]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800615a:	b480      	push	{r7}
 800615c:	b08d      	sub	sp, #52	; 0x34
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	4611      	mov	r1, r2
 8006166:	461a      	mov	r2, r3
 8006168:	460b      	mov	r3, r1
 800616a:	80fb      	strh	r3, [r7, #6]
 800616c:	4613      	mov	r3, r2
 800616e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006170:	88bb      	ldrh	r3, [r7, #4]
 8006172:	3301      	adds	r3, #1
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006190:	e01b      	b.n	80061ca <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	3301      	adds	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	3302      	adds	r3, #2
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	3301      	adds	r3, #1
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	3b01      	subs	r3, #1
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e0      	bne.n	8006192 <USB_WritePMA+0x38>
  }
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	3734      	adds	r7, #52	; 0x34
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061de:	b480      	push	{r7}
 80061e0:	b08b      	sub	sp, #44	; 0x2c
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	4611      	mov	r1, r2
 80061ea:	461a      	mov	r2, r3
 80061ec:	460b      	mov	r3, r1
 80061ee:	80fb      	strh	r3, [r7, #6]
 80061f0:	4613      	mov	r3, r2
 80061f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061f4:	88bb      	ldrh	r3, [r7, #4]
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
 8006214:	e018      	b.n	8006248 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	3302      	adds	r3, #2
 8006222:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	b2da      	uxtb	r2, r3
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	b2da      	uxtb	r2, r3
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	3301      	adds	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	3b01      	subs	r3, #1
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800624e:	88bb      	ldrh	r3, [r7, #4]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	701a      	strb	r2, [r3, #0]
  }
}
 800626a:	bf00      	nop
 800626c:	372c      	adds	r7, #44	; 0x2c
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006282:	2010      	movs	r0, #16
 8006284:	f001 fec8 	bl	8008018 <USBD_static_malloc>
 8006288:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006298:	2302      	movs	r3, #2
 800629a:	e01b      	b.n	80062d4 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7c1b      	ldrb	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d103      	bne.n	80062b4 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2207      	movs	r2, #7
 80062b0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80062b2:	e002      	b.n	80062ba <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	220a      	movs	r2, #10
 80062b8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80062ba:	2304      	movs	r3, #4
 80062bc:	2203      	movs	r2, #3
 80062be:	2181      	movs	r1, #129	; 0x81
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 fd62 	bl	8007d8a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80062e8:	2181      	movs	r1, #129	; 0x81
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fd73 	bl	8007dd6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630c:	4618      	mov	r0, r3
 800630e:	f001 fe91 	bl	8008034 <USBD_static_free>
    pdev->pClassData = NULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006334:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	e0e8      	b.n	800651a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006350:	2b00      	cmp	r3, #0
 8006352:	d046      	beq.n	80063e2 <USBD_HID_Setup+0xbe>
 8006354:	2b20      	cmp	r3, #32
 8006356:	f040 80d8 	bne.w	800650a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	3b02      	subs	r3, #2
 8006360:	2b09      	cmp	r3, #9
 8006362:	d836      	bhi.n	80063d2 <USBD_HID_Setup+0xae>
 8006364:	a201      	add	r2, pc, #4	; (adr r2, 800636c <USBD_HID_Setup+0x48>)
 8006366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636a:	bf00      	nop
 800636c:	080063c3 	.word	0x080063c3
 8006370:	080063a3 	.word	0x080063a3
 8006374:	080063d3 	.word	0x080063d3
 8006378:	080063d3 	.word	0x080063d3
 800637c:	080063d3 	.word	0x080063d3
 8006380:	080063d3 	.word	0x080063d3
 8006384:	080063d3 	.word	0x080063d3
 8006388:	080063d3 	.word	0x080063d3
 800638c:	080063b1 	.word	0x080063b1
 8006390:	08006395 	.word	0x08006395
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	885b      	ldrh	r3, [r3, #2]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	601a      	str	r2, [r3, #0]
          break;
 80063a0:	e01e      	b.n	80063e0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 f9b0 	bl	800770e <USBD_CtlSendData>
          break;
 80063ae:	e017      	b.n	80063e0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	885b      	ldrh	r3, [r3, #2]
 80063b4:	0a1b      	lsrs	r3, r3, #8
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	605a      	str	r2, [r3, #4]
          break;
 80063c0:	e00e      	b.n	80063e0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3304      	adds	r3, #4
 80063c6:	2201      	movs	r2, #1
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 f99f 	bl	800770e <USBD_CtlSendData>
          break;
 80063d0:	e006      	b.n	80063e0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f929 	bl	800762c <USBD_CtlError>
          ret = USBD_FAIL;
 80063da:	2303      	movs	r3, #3
 80063dc:	75fb      	strb	r3, [r7, #23]
          break;
 80063de:	bf00      	nop
      }
      break;
 80063e0:	e09a      	b.n	8006518 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b0b      	cmp	r3, #11
 80063e8:	f200 8086 	bhi.w	80064f8 <USBD_HID_Setup+0x1d4>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <USBD_HID_Setup+0xd0>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006425 	.word	0x08006425
 80063f8:	08006507 	.word	0x08006507
 80063fc:	080064f9 	.word	0x080064f9
 8006400:	080064f9 	.word	0x080064f9
 8006404:	080064f9 	.word	0x080064f9
 8006408:	080064f9 	.word	0x080064f9
 800640c:	0800644f 	.word	0x0800644f
 8006410:	080064f9 	.word	0x080064f9
 8006414:	080064f9 	.word	0x080064f9
 8006418:	080064f9 	.word	0x080064f9
 800641c:	080064a7 	.word	0x080064a7
 8006420:	080064d1 	.word	0x080064d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b03      	cmp	r3, #3
 800642e:	d107      	bne.n	8006440 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006430:	f107 030a 	add.w	r3, r7, #10
 8006434:	2202      	movs	r2, #2
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f968 	bl	800770e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800643e:	e063      	b.n	8006508 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 f8f2 	bl	800762c <USBD_CtlError>
            ret = USBD_FAIL;
 8006448:	2303      	movs	r3, #3
 800644a:	75fb      	strb	r3, [r7, #23]
          break;
 800644c:	e05c      	b.n	8006508 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	885b      	ldrh	r3, [r3, #2]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b22      	cmp	r3, #34	; 0x22
 8006458:	d108      	bne.n	800646c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	88db      	ldrh	r3, [r3, #6]
 800645e:	2b4a      	cmp	r3, #74	; 0x4a
 8006460:	bf28      	it	cs
 8006462:	234a      	movcs	r3, #74	; 0x4a
 8006464:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006466:	4b2f      	ldr	r3, [pc, #188]	; (8006524 <USBD_HID_Setup+0x200>)
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	e015      	b.n	8006498 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	885b      	ldrh	r3, [r3, #2]
 8006470:	0a1b      	lsrs	r3, r3, #8
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b21      	cmp	r3, #33	; 0x21
 8006476:	d108      	bne.n	800648a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006478:	4b2b      	ldr	r3, [pc, #172]	; (8006528 <USBD_HID_Setup+0x204>)
 800647a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	88db      	ldrh	r3, [r3, #6]
 8006480:	2b09      	cmp	r3, #9
 8006482:	bf28      	it	cs
 8006484:	2309      	movcs	r3, #9
 8006486:	82bb      	strh	r3, [r7, #20]
 8006488:	e006      	b.n	8006498 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f8cd 	bl	800762c <USBD_CtlError>
            ret = USBD_FAIL;
 8006492:	2303      	movs	r3, #3
 8006494:	75fb      	strb	r3, [r7, #23]
            break;
 8006496:	e037      	b.n	8006508 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006498:	8abb      	ldrh	r3, [r7, #20]
 800649a:	461a      	mov	r2, r3
 800649c:	6939      	ldr	r1, [r7, #16]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 f935 	bl	800770e <USBD_CtlSendData>
          break;
 80064a4:	e030      	b.n	8006508 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d107      	bne.n	80064c2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3308      	adds	r3, #8
 80064b6:	2201      	movs	r2, #1
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 f927 	bl	800770e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064c0:	e022      	b.n	8006508 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 f8b1 	bl	800762c <USBD_CtlError>
            ret = USBD_FAIL;
 80064ca:	2303      	movs	r3, #3
 80064cc:	75fb      	strb	r3, [r7, #23]
          break;
 80064ce:	e01b      	b.n	8006508 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d106      	bne.n	80064ea <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	885b      	ldrh	r3, [r3, #2]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064e8:	e00e      	b.n	8006508 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f89d 	bl	800762c <USBD_CtlError>
            ret = USBD_FAIL;
 80064f2:	2303      	movs	r3, #3
 80064f4:	75fb      	strb	r3, [r7, #23]
          break;
 80064f6:	e007      	b.n	8006508 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 f896 	bl	800762c <USBD_CtlError>
          ret = USBD_FAIL;
 8006500:	2303      	movs	r3, #3
 8006502:	75fb      	strb	r3, [r7, #23]
          break;
 8006504:	e000      	b.n	8006508 <USBD_HID_Setup+0x1e4>
          break;
 8006506:	bf00      	nop
      }
      break;
 8006508:	e006      	b.n	8006518 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 f88d 	bl	800762c <USBD_CtlError>
      ret = USBD_FAIL;
 8006512:	2303      	movs	r3, #3
 8006514:	75fb      	strb	r3, [r7, #23]
      break;
 8006516:	bf00      	nop
  }

  return (uint8_t)ret;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200000cc 	.word	0x200000cc
 8006528:	200000b4 	.word	0x200000b4

0800652c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2222      	movs	r2, #34	; 0x22
 8006538:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800653a:	4b03      	ldr	r3, [pc, #12]	; (8006548 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	20000048 	.word	0x20000048

0800654c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2222      	movs	r2, #34	; 0x22
 8006558:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800655a:	4b03      	ldr	r3, [pc, #12]	; (8006568 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	2000006c 	.word	0x2000006c

0800656c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2222      	movs	r2, #34	; 0x22
 8006578:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800657a:	4b03      	ldr	r3, [pc, #12]	; (8006588 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	20000090 	.word	0x20000090

0800658c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800659e:	2200      	movs	r2, #0
 80065a0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	220a      	movs	r2, #10
 80065bc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80065be:	4b03      	ldr	r3, [pc, #12]	; (80065cc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	200000c0 	.word	0x200000c0

080065d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e01f      	b.n	8006628 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	79fa      	ldrb	r2, [r7, #7]
 800661a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f001 fb49 	bl	8007cb4 <USBD_LL_Init>
 8006622:	4603      	mov	r3, r0
 8006624:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006626:	7dfb      	ldrb	r3, [r7, #23]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	e016      	b.n	8006676 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	f107 020e 	add.w	r2, r7, #14
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	4602      	mov	r2, r0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fb64 	bl	8007d54 <USBD_LL_Start>
 800668c:	4603      	mov	r3, r0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	4611      	mov	r1, r2
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	4611      	mov	r1, r2
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	4798      	blx	r3
  }

  return USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 ff46 	bl	80075b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2b02      	cmp	r3, #2
 800674e:	d01a      	beq.n	8006786 <USBD_LL_SetupStage+0x72>
 8006750:	2b02      	cmp	r3, #2
 8006752:	d822      	bhi.n	800679a <USBD_LL_SetupStage+0x86>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <USBD_LL_SetupStage+0x4a>
 8006758:	2b01      	cmp	r3, #1
 800675a:	d00a      	beq.n	8006772 <USBD_LL_SetupStage+0x5e>
 800675c:	e01d      	b.n	800679a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9ee 	bl	8006b48 <USBD_StdDevReq>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
      break;
 8006770:	e020      	b.n	80067b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa52 	bl	8006c24 <USBD_StdItfReq>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]
      break;
 8006784:	e016      	b.n	80067b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa91 	bl	8006cb6 <USBD_StdEPReq>
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
      break;
 8006798:	e00c      	b.n	80067b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 fb33 	bl	8007e14 <USBD_LL_StallEP>
 80067ae:	4603      	mov	r3, r0
 80067b0:	73fb      	strb	r3, [r7, #15]
      break;
 80067b2:	bf00      	nop
  }

  return ret;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b086      	sub	sp, #24
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	460b      	mov	r3, r1
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80067cc:	7afb      	ldrb	r3, [r7, #11]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d138      	bne.n	8006844 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d14a      	bne.n	800687a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d913      	bls.n	8006818 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	4293      	cmp	r3, r2
 8006808:	bf28      	it	cs
 800680a:	4613      	movcs	r3, r2
 800680c:	461a      	mov	r2, r3
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 ffa8 	bl	8007766 <USBD_CtlContinueRx>
 8006816:	e030      	b.n	800687a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b03      	cmp	r3, #3
 8006822:	d10b      	bne.n	800683c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 ffa3 	bl	8007788 <USBD_CtlSendStatus>
 8006842:	e01a      	b.n	800687a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b03      	cmp	r3, #3
 800684e:	d114      	bne.n	800687a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00e      	beq.n	800687a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	7afa      	ldrb	r2, [r7, #11]
 8006866:	4611      	mov	r1, r2
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	4798      	blx	r3
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	e000      	b.n	800687c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	460b      	mov	r3, r1
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d16b      	bne.n	8006970 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3314      	adds	r3, #20
 800689c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d156      	bne.n	8006956 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d914      	bls.n	80068de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	1ad2      	subs	r2, r2, r3
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 ff3a 	bl	8007744 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068d0:	2300      	movs	r3, #0
 80068d2:	2200      	movs	r2, #0
 80068d4:	2100      	movs	r1, #0
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f001 fb47 	bl	8007f6a <USBD_LL_PrepareReceive>
 80068dc:	e03b      	b.n	8006956 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d11c      	bne.n	8006924 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d316      	bcc.n	8006924 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006900:	429a      	cmp	r2, r3
 8006902:	d20f      	bcs.n	8006924 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 ff1b 	bl	8007744 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006916:	2300      	movs	r3, #0
 8006918:	2200      	movs	r2, #0
 800691a:	2100      	movs	r1, #0
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f001 fb24 	bl	8007f6a <USBD_LL_PrepareReceive>
 8006922:	e018      	b.n	8006956 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b03      	cmp	r3, #3
 800692e:	d10b      	bne.n	8006948 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006948:	2180      	movs	r1, #128	; 0x80
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f001 fa62 	bl	8007e14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 ff2c 	bl	80077ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800695c:	2b01      	cmp	r3, #1
 800695e:	d122      	bne.n	80069a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff fe98 	bl	8006696 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800696e:	e01a      	b.n	80069a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b03      	cmp	r3, #3
 800697a:	d114      	bne.n	80069a6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00e      	beq.n	80069a6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	7afa      	ldrb	r2, [r7, #11]
 8006992:	4611      	mov	r1, r2
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	4798      	blx	r3
 8006998:	4603      	mov	r3, r0
 800699a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
 80069a4:	e000      	b.n	80069a8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e02f      	b.n	8006a44 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00f      	beq.n	8006a0e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6852      	ldr	r2, [r2, #4]
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	4611      	mov	r1, r2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	2200      	movs	r2, #0
 8006a12:	2100      	movs	r1, #0
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 f9b8 	bl	8007d8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2240      	movs	r2, #64	; 0x40
 8006a26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a2a:	2340      	movs	r3, #64	; 0x40
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2180      	movs	r1, #128	; 0x80
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 f9aa 	bl	8007d8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2240      	movs	r2, #64	; 0x40
 8006a40:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2204      	movs	r2, #4
 8006a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d106      	bne.n	8006aba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e012      	b.n	8006b04 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d10b      	bne.n	8006b02 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	3301      	adds	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b2a:	8a3b      	ldrh	r3, [r7, #16]
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	b21a      	sxth	r2, r3
 8006b30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b21b      	sxth	r3, r3
 8006b38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d005      	beq.n	8006b6e <USBD_StdDevReq+0x26>
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d853      	bhi.n	8006c0e <USBD_StdDevReq+0xc6>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <USBD_StdDevReq+0x3a>
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d14f      	bne.n	8006c0e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b80:	e04a      	b.n	8006c18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b09      	cmp	r3, #9
 8006b88:	d83b      	bhi.n	8006c02 <USBD_StdDevReq+0xba>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <USBD_StdDevReq+0x48>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006be5 	.word	0x08006be5
 8006b94:	08006bf9 	.word	0x08006bf9
 8006b98:	08006c03 	.word	0x08006c03
 8006b9c:	08006bef 	.word	0x08006bef
 8006ba0:	08006c03 	.word	0x08006c03
 8006ba4:	08006bc3 	.word	0x08006bc3
 8006ba8:	08006bb9 	.word	0x08006bb9
 8006bac:	08006c03 	.word	0x08006c03
 8006bb0:	08006bdb 	.word	0x08006bdb
 8006bb4:	08006bcd 	.word	0x08006bcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9de 	bl	8006f7c <USBD_GetDescriptor>
          break;
 8006bc0:	e024      	b.n	8006c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fb6d 	bl	80072a4 <USBD_SetAddress>
          break;
 8006bca:	e01f      	b.n	8006c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fbac 	bl	800732c <USBD_SetConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8006bd8:	e018      	b.n	8006c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fc4b 	bl	8007478 <USBD_GetConfig>
          break;
 8006be2:	e013      	b.n	8006c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fc7c 	bl	80074e4 <USBD_GetStatus>
          break;
 8006bec:	e00e      	b.n	8006c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fcab 	bl	800754c <USBD_SetFeature>
          break;
 8006bf6:	e009      	b.n	8006c0c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fcba 	bl	8007574 <USBD_ClrFeature>
          break;
 8006c00:	e004      	b.n	8006c0c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fd11 	bl	800762c <USBD_CtlError>
          break;
 8006c0a:	bf00      	nop
      }
      break;
 8006c0c:	e004      	b.n	8006c18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fd0b 	bl	800762c <USBD_CtlError>
      break;
 8006c16:	bf00      	nop
  }

  return ret;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop

08006c24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d005      	beq.n	8006c4a <USBD_StdItfReq+0x26>
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d82f      	bhi.n	8006ca2 <USBD_StdItfReq+0x7e>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <USBD_StdItfReq+0x26>
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d12b      	bne.n	8006ca2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d81d      	bhi.n	8006c94 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	889b      	ldrh	r3, [r3, #4]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d813      	bhi.n	8006c8a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	88db      	ldrh	r3, [r3, #6]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d110      	bne.n	8006c9e <USBD_StdItfReq+0x7a>
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10d      	bne.n	8006c9e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fd80 	bl	8007788 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c88:	e009      	b.n	8006c9e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fccd 	bl	800762c <USBD_CtlError>
          break;
 8006c92:	e004      	b.n	8006c9e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fcc8 	bl	800762c <USBD_CtlError>
          break;
 8006c9c:	e000      	b.n	8006ca0 <USBD_StdItfReq+0x7c>
          break;
 8006c9e:	bf00      	nop
      }
      break;
 8006ca0:	e004      	b.n	8006cac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fcc1 	bl	800762c <USBD_CtlError>
      break;
 8006caa:	bf00      	nop
  }

  return ret;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	889b      	ldrh	r3, [r3, #4]
 8006cc8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	d007      	beq.n	8006ce6 <USBD_StdEPReq+0x30>
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	f200 8145 	bhi.w	8006f66 <USBD_StdEPReq+0x2b0>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00c      	beq.n	8006cfa <USBD_StdEPReq+0x44>
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	f040 8140 	bne.w	8006f66 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf8:	e13a      	b.n	8006f70 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d007      	beq.n	8006d12 <USBD_StdEPReq+0x5c>
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	f300 8129 	bgt.w	8006f5a <USBD_StdEPReq+0x2a4>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d07f      	beq.n	8006e0c <USBD_StdEPReq+0x156>
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d03c      	beq.n	8006d8a <USBD_StdEPReq+0xd4>
 8006d10:	e123      	b.n	8006f5a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d002      	beq.n	8006d24 <USBD_StdEPReq+0x6e>
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d016      	beq.n	8006d50 <USBD_StdEPReq+0x9a>
 8006d22:	e02c      	b.n	8006d7e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00d      	beq.n	8006d46 <USBD_StdEPReq+0x90>
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d00a      	beq.n	8006d46 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 f86d 	bl	8007e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d3a:	2180      	movs	r1, #128	; 0x80
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 f869 	bl	8007e14 <USBD_LL_StallEP>
 8006d42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d44:	e020      	b.n	8006d88 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fc6f 	bl	800762c <USBD_CtlError>
              break;
 8006d4e:	e01b      	b.n	8006d88 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	885b      	ldrh	r3, [r3, #2]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10e      	bne.n	8006d76 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <USBD_StdEPReq+0xc0>
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b80      	cmp	r3, #128	; 0x80
 8006d62:	d008      	beq.n	8006d76 <USBD_StdEPReq+0xc0>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	88db      	ldrh	r3, [r3, #6]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f84f 	bl	8007e14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fd06 	bl	8007788 <USBD_CtlSendStatus>

              break;
 8006d7c:	e004      	b.n	8006d88 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fc53 	bl	800762c <USBD_CtlError>
              break;
 8006d86:	bf00      	nop
          }
          break;
 8006d88:	e0ec      	b.n	8006f64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d002      	beq.n	8006d9c <USBD_StdEPReq+0xe6>
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d016      	beq.n	8006dc8 <USBD_StdEPReq+0x112>
 8006d9a:	e030      	b.n	8006dfe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00d      	beq.n	8006dbe <USBD_StdEPReq+0x108>
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b80      	cmp	r3, #128	; 0x80
 8006da6:	d00a      	beq.n	8006dbe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f831 	bl	8007e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006db2:	2180      	movs	r1, #128	; 0x80
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 f82d 	bl	8007e14 <USBD_LL_StallEP>
 8006dba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dbc:	e025      	b.n	8006e0a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fc33 	bl	800762c <USBD_CtlError>
              break;
 8006dc6:	e020      	b.n	8006e0a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	885b      	ldrh	r3, [r3, #2]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d11b      	bne.n	8006e08 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 f837 	bl	8007e52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fccf 	bl	8007788 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
 8006df8:	4603      	mov	r3, r0
 8006dfa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006dfc:	e004      	b.n	8006e08 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fc13 	bl	800762c <USBD_CtlError>
              break;
 8006e06:	e000      	b.n	8006e0a <USBD_StdEPReq+0x154>
              break;
 8006e08:	bf00      	nop
          }
          break;
 8006e0a:	e0ab      	b.n	8006f64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d002      	beq.n	8006e1e <USBD_StdEPReq+0x168>
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d032      	beq.n	8006e82 <USBD_StdEPReq+0x1cc>
 8006e1c:	e097      	b.n	8006f4e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <USBD_StdEPReq+0x17e>
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
 8006e26:	2b80      	cmp	r3, #128	; 0x80
 8006e28:	d004      	beq.n	8006e34 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fbfd 	bl	800762c <USBD_CtlError>
                break;
 8006e32:	e091      	b.n	8006f58 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	da0b      	bge.n	8006e54 <USBD_StdEPReq+0x19e>
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	3310      	adds	r3, #16
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	4413      	add	r3, r2
 8006e50:	3304      	adds	r3, #4
 8006e52:	e00b      	b.n	8006e6c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4413      	add	r3, r2
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2202      	movs	r2, #2
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fc47 	bl	800770e <USBD_CtlSendData>
              break;
 8006e80:	e06a      	b.n	8006f58 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da11      	bge.n	8006eae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	f003 020f 	and.w	r2, r3, #15
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3324      	adds	r3, #36	; 0x24
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d117      	bne.n	8006ed4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fbc0 	bl	800762c <USBD_CtlError>
                  break;
 8006eac:	e054      	b.n	8006f58 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fbad 	bl	800762c <USBD_CtlError>
                  break;
 8006ed2:	e041      	b.n	8006f58 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	da0b      	bge.n	8006ef4 <USBD_StdEPReq+0x23e>
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	3310      	adds	r3, #16
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	e00b      	b.n	8006f0c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <USBD_StdEPReq+0x264>
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b80      	cmp	r3, #128	; 0x80
 8006f18:	d103      	bne.n	8006f22 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	e00e      	b.n	8006f40 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 ffb2 	bl	8007e90 <USBD_LL_IsStallEP>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2201      	movs	r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e002      	b.n	8006f40 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2202      	movs	r2, #2
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fbe1 	bl	800770e <USBD_CtlSendData>
              break;
 8006f4c:	e004      	b.n	8006f58 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fb6b 	bl	800762c <USBD_CtlError>
              break;
 8006f56:	bf00      	nop
          }
          break;
 8006f58:	e004      	b.n	8006f64 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fb65 	bl	800762c <USBD_CtlError>
          break;
 8006f62:	bf00      	nop
      }
      break;
 8006f64:	e004      	b.n	8006f70 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb5f 	bl	800762c <USBD_CtlError>
      break;
 8006f6e:	bf00      	nop
  }

  return ret;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	885b      	ldrh	r3, [r3, #2]
 8006f96:	0a1b      	lsrs	r3, r3, #8
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	2b0e      	cmp	r3, #14
 8006f9e:	f200 8152 	bhi.w	8007246 <USBD_GetDescriptor+0x2ca>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <USBD_GetDescriptor+0x2c>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08007019 	.word	0x08007019
 8006fac:	08007031 	.word	0x08007031
 8006fb0:	08007071 	.word	0x08007071
 8006fb4:	08007247 	.word	0x08007247
 8006fb8:	08007247 	.word	0x08007247
 8006fbc:	080071e7 	.word	0x080071e7
 8006fc0:	08007213 	.word	0x08007213
 8006fc4:	08007247 	.word	0x08007247
 8006fc8:	08007247 	.word	0x08007247
 8006fcc:	08007247 	.word	0x08007247
 8006fd0:	08007247 	.word	0x08007247
 8006fd4:	08007247 	.word	0x08007247
 8006fd8:	08007247 	.word	0x08007247
 8006fdc:	08007247 	.word	0x08007247
 8006fe0:	08006fe5 	.word	0x08006fe5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7c12      	ldrb	r2, [r2, #16]
 8006ffc:	f107 0108 	add.w	r1, r7, #8
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007006:	e126      	b.n	8007256 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fb0e 	bl	800762c <USBD_CtlError>
        err++;
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	3301      	adds	r3, #1
 8007014:	72fb      	strb	r3, [r7, #11]
      break;
 8007016:	e11e      	b.n	8007256 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	7c12      	ldrb	r2, [r2, #16]
 8007024:	f107 0108 	add.w	r1, r7, #8
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
 800702c:	60f8      	str	r0, [r7, #12]
      break;
 800702e:	e112      	b.n	8007256 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7c1b      	ldrb	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10d      	bne.n	8007054 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	f107 0208 	add.w	r2, r7, #8
 8007044:	4610      	mov	r0, r2
 8007046:	4798      	blx	r3
 8007048:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	2202      	movs	r2, #2
 8007050:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007052:	e100      	b.n	8007256 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	f107 0208 	add.w	r2, r7, #8
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	2202      	movs	r2, #2
 800706c:	701a      	strb	r2, [r3, #0]
      break;
 800706e:	e0f2      	b.n	8007256 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	885b      	ldrh	r3, [r3, #2]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b05      	cmp	r3, #5
 8007078:	f200 80ac 	bhi.w	80071d4 <USBD_GetDescriptor+0x258>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <USBD_GetDescriptor+0x108>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	0800709d 	.word	0x0800709d
 8007088:	080070d1 	.word	0x080070d1
 800708c:	08007105 	.word	0x08007105
 8007090:	08007139 	.word	0x08007139
 8007094:	0800716d 	.word	0x0800716d
 8007098:	080071a1 	.word	0x080071a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	7c12      	ldrb	r2, [r2, #16]
 80070b4:	f107 0108 	add.w	r1, r7, #8
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
 80070bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070be:	e091      	b.n	80071e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fab2 	bl	800762c <USBD_CtlError>
            err++;
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	3301      	adds	r3, #1
 80070cc:	72fb      	strb	r3, [r7, #11]
          break;
 80070ce:	e089      	b.n	80071e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7c12      	ldrb	r2, [r2, #16]
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f2:	e077      	b.n	80071e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa98 	bl	800762c <USBD_CtlError>
            err++;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	3301      	adds	r3, #1
 8007100:	72fb      	strb	r3, [r7, #11]
          break;
 8007102:	e06f      	b.n	80071e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	7c12      	ldrb	r2, [r2, #16]
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007126:	e05d      	b.n	80071e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fa7e 	bl	800762c <USBD_CtlError>
            err++;
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	3301      	adds	r3, #1
 8007134:	72fb      	strb	r3, [r7, #11]
          break;
 8007136:	e055      	b.n	80071e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7c12      	ldrb	r2, [r2, #16]
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	4610      	mov	r0, r2
 8007156:	4798      	blx	r3
 8007158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715a:	e043      	b.n	80071e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa64 	bl	800762c <USBD_CtlError>
            err++;
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	3301      	adds	r3, #1
 8007168:	72fb      	strb	r3, [r7, #11]
          break;
 800716a:	e03b      	b.n	80071e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	7c12      	ldrb	r2, [r2, #16]
 8007184:	f107 0108 	add.w	r1, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800718e:	e029      	b.n	80071e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa4a 	bl	800762c <USBD_CtlError>
            err++;
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	3301      	adds	r3, #1
 800719c:	72fb      	strb	r3, [r7, #11]
          break;
 800719e:	e021      	b.n	80071e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	7c12      	ldrb	r2, [r2, #16]
 80071b8:	f107 0108 	add.w	r1, r7, #8
 80071bc:	4610      	mov	r0, r2
 80071be:	4798      	blx	r3
 80071c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c2:	e00f      	b.n	80071e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa30 	bl	800762c <USBD_CtlError>
            err++;
 80071cc:	7afb      	ldrb	r3, [r7, #11]
 80071ce:	3301      	adds	r3, #1
 80071d0:	72fb      	strb	r3, [r7, #11]
          break;
 80071d2:	e007      	b.n	80071e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa28 	bl	800762c <USBD_CtlError>
          err++;
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	3301      	adds	r3, #1
 80071e0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80071e2:	bf00      	nop
      }
      break;
 80071e4:	e037      	b.n	8007256 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7c1b      	ldrb	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f6:	f107 0208 	add.w	r2, r7, #8
 80071fa:	4610      	mov	r0, r2
 80071fc:	4798      	blx	r3
 80071fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007200:	e029      	b.n	8007256 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fa11 	bl	800762c <USBD_CtlError>
        err++;
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	3301      	adds	r3, #1
 800720e:	72fb      	strb	r3, [r7, #11]
      break;
 8007210:	e021      	b.n	8007256 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7c1b      	ldrb	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10d      	bne.n	8007236 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	f107 0208 	add.w	r2, r7, #8
 8007226:	4610      	mov	r0, r2
 8007228:	4798      	blx	r3
 800722a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	2207      	movs	r2, #7
 8007232:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007234:	e00f      	b.n	8007256 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9f7 	bl	800762c <USBD_CtlError>
        err++;
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	3301      	adds	r3, #1
 8007242:	72fb      	strb	r3, [r7, #11]
      break;
 8007244:	e007      	b.n	8007256 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f9ef 	bl	800762c <USBD_CtlError>
      err++;
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	3301      	adds	r3, #1
 8007252:	72fb      	strb	r3, [r7, #11]
      break;
 8007254:	bf00      	nop
  }

  if (err != 0U)
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d11e      	bne.n	800729a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	88db      	ldrh	r3, [r3, #6]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d016      	beq.n	8007292 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007264:	893b      	ldrh	r3, [r7, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00e      	beq.n	8007288 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	88da      	ldrh	r2, [r3, #6]
 800726e:	893b      	ldrh	r3, [r7, #8]
 8007270:	4293      	cmp	r3, r2
 8007272:	bf28      	it	cs
 8007274:	4613      	movcs	r3, r2
 8007276:	b29b      	uxth	r3, r3
 8007278:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800727a:	893b      	ldrh	r3, [r7, #8]
 800727c:	461a      	mov	r2, r3
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa44 	bl	800770e <USBD_CtlSendData>
 8007286:	e009      	b.n	800729c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f9ce 	bl	800762c <USBD_CtlError>
 8007290:	e004      	b.n	800729c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fa78 	bl	8007788 <USBD_CtlSendStatus>
 8007298:	e000      	b.n	800729c <USBD_GetDescriptor+0x320>
    return;
 800729a:	bf00      	nop
  }
}
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop

080072a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	889b      	ldrh	r3, [r3, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d131      	bne.n	800731a <USBD_SetAddress+0x76>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	88db      	ldrh	r3, [r3, #6]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d12d      	bne.n	800731a <USBD_SetAddress+0x76>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	885b      	ldrh	r3, [r3, #2]
 80072c2:	2b7f      	cmp	r3, #127	; 0x7f
 80072c4:	d829      	bhi.n	800731a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	885b      	ldrh	r3, [r3, #2]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d104      	bne.n	80072e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9a3 	bl	800762c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e6:	e01d      	b.n	8007324 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7bfa      	ldrb	r2, [r7, #15]
 80072ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fdf8 	bl	8007eea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa44 	bl	8007788 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730e:	e009      	b.n	8007324 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007318:	e004      	b.n	8007324 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f985 	bl	800762c <USBD_CtlError>
  }
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	885b      	ldrh	r3, [r3, #2]
 800733e:	b2da      	uxtb	r2, r3
 8007340:	4b4c      	ldr	r3, [pc, #304]	; (8007474 <USBD_SetConfig+0x148>)
 8007342:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007344:	4b4b      	ldr	r3, [pc, #300]	; (8007474 <USBD_SetConfig+0x148>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d905      	bls.n	8007358 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f96c 	bl	800762c <USBD_CtlError>
    return USBD_FAIL;
 8007354:	2303      	movs	r3, #3
 8007356:	e088      	b.n	800746a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d002      	beq.n	800736a <USBD_SetConfig+0x3e>
 8007364:	2b03      	cmp	r3, #3
 8007366:	d025      	beq.n	80073b4 <USBD_SetConfig+0x88>
 8007368:	e071      	b.n	800744e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800736a:	4b42      	ldr	r3, [pc, #264]	; (8007474 <USBD_SetConfig+0x148>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01c      	beq.n	80073ac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007372:	4b40      	ldr	r3, [pc, #256]	; (8007474 <USBD_SetConfig+0x148>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800737c:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <USBD_SetConfig+0x148>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff f992 	bl	80066ac <USBD_SetClassConfig>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f949 	bl	800762c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800739a:	e065      	b.n	8007468 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f9f3 	bl	8007788 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2203      	movs	r2, #3
 80073a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073aa:	e05d      	b.n	8007468 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9eb 	bl	8007788 <USBD_CtlSendStatus>
      break;
 80073b2:	e059      	b.n	8007468 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073b4:	4b2f      	ldr	r3, [pc, #188]	; (8007474 <USBD_SetConfig+0x148>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d112      	bne.n	80073e2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073c4:	4b2b      	ldr	r3, [pc, #172]	; (8007474 <USBD_SetConfig+0x148>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073ce:	4b29      	ldr	r3, [pc, #164]	; (8007474 <USBD_SetConfig+0x148>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff f985 	bl	80066e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f9d4 	bl	8007788 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073e0:	e042      	b.n	8007468 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <USBD_SetConfig+0x148>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d02a      	beq.n	8007446 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff f973 	bl	80066e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073fe:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <USBD_SetConfig+0x148>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007408:	4b1a      	ldr	r3, [pc, #104]	; (8007474 <USBD_SetConfig+0x148>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff f94c 	bl	80066ac <USBD_SetClassConfig>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00f      	beq.n	800743e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f903 	bl	800762c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff f958 	bl	80066e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800743c:	e014      	b.n	8007468 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f9a2 	bl	8007788 <USBD_CtlSendStatus>
      break;
 8007444:	e010      	b.n	8007468 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f99e 	bl	8007788 <USBD_CtlSendStatus>
      break;
 800744c:	e00c      	b.n	8007468 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f8eb 	bl	800762c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007456:	4b07      	ldr	r3, [pc, #28]	; (8007474 <USBD_SetConfig+0x148>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff f941 	bl	80066e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007462:	2303      	movs	r3, #3
 8007464:	73fb      	strb	r3, [r7, #15]
      break;
 8007466:	bf00      	nop
  }

  return ret;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000188 	.word	0x20000188

08007478 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	88db      	ldrh	r3, [r3, #6]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d004      	beq.n	8007494 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f8cd 	bl	800762c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007492:	e023      	b.n	80074dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	dc02      	bgt.n	80074a6 <USBD_GetConfig+0x2e>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dc03      	bgt.n	80074ac <USBD_GetConfig+0x34>
 80074a4:	e015      	b.n	80074d2 <USBD_GetConfig+0x5a>
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d00b      	beq.n	80074c2 <USBD_GetConfig+0x4a>
 80074aa:	e012      	b.n	80074d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3308      	adds	r3, #8
 80074b6:	2201      	movs	r2, #1
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f927 	bl	800770e <USBD_CtlSendData>
        break;
 80074c0:	e00c      	b.n	80074dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2201      	movs	r2, #1
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f91f 	bl	800770e <USBD_CtlSendData>
        break;
 80074d0:	e004      	b.n	80074dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f8a9 	bl	800762c <USBD_CtlError>
        break;
 80074da:	bf00      	nop
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d81e      	bhi.n	800753a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	88db      	ldrh	r3, [r3, #6]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d004      	beq.n	800750e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f890 	bl	800762c <USBD_CtlError>
        break;
 800750c:	e01a      	b.n	8007544 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f043 0202 	orr.w	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	330c      	adds	r3, #12
 800752e:	2202      	movs	r2, #2
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f8eb 	bl	800770e <USBD_CtlSendData>
      break;
 8007538:	e004      	b.n	8007544 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f875 	bl	800762c <USBD_CtlError>
      break;
 8007542:	bf00      	nop
  }
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	885b      	ldrh	r3, [r3, #2]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d106      	bne.n	800756c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f90e 	bl	8007788 <USBD_CtlSendStatus>
  }
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	b2db      	uxtb	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	2b02      	cmp	r3, #2
 800758a:	d80b      	bhi.n	80075a4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	885b      	ldrh	r3, [r3, #2]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d10c      	bne.n	80075ae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f8f3 	bl	8007788 <USBD_CtlSendStatus>
      }
      break;
 80075a2:	e004      	b.n	80075ae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f840 	bl	800762c <USBD_CtlError>
      break;
 80075ac:	e000      	b.n	80075b0 <USBD_ClrFeature+0x3c>
      break;
 80075ae:	bf00      	nop
  }
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fa92 	bl	8006b0c <SWAPBYTE>
 80075e8:	4603      	mov	r3, r0
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3301      	adds	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fa85 	bl	8006b0c <SWAPBYTE>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3301      	adds	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff fa78 	bl	8006b0c <SWAPBYTE>
 800761c:	4603      	mov	r3, r0
 800761e:	461a      	mov	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	80da      	strh	r2, [r3, #6]
}
 8007624:	bf00      	nop
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007636:	2180      	movs	r1, #128	; 0x80
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fbeb 	bl	8007e14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800763e:	2100      	movs	r1, #0
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fbe7 	bl	8007e14 <USBD_LL_StallEP>
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d036      	beq.n	80076d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007668:	6938      	ldr	r0, [r7, #16]
 800766a:	f000 f836 	bl	80076da <USBD_GetLen>
 800766e:	4603      	mov	r3, r0
 8007670:	3301      	adds	r3, #1
 8007672:	b29b      	uxth	r3, r3
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	4413      	add	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	7812      	ldrb	r2, [r2, #0]
 8007686:	701a      	strb	r2, [r3, #0]
  idx++;
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	3301      	adds	r3, #1
 800768c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	4413      	add	r3, r2
 8007694:	2203      	movs	r2, #3
 8007696:	701a      	strb	r2, [r3, #0]
  idx++;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	3301      	adds	r3, #1
 800769c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800769e:	e013      	b.n	80076c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	4413      	add	r3, r2
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	7812      	ldrb	r2, [r2, #0]
 80076aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	3301      	adds	r3, #1
 80076b0:	613b      	str	r3, [r7, #16]
    idx++;
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	3301      	adds	r3, #1
 80076b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
    idx++;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	3301      	adds	r3, #1
 80076c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e7      	bne.n	80076a0 <USBD_GetString+0x52>
 80076d0:	e000      	b.n	80076d4 <USBD_GetString+0x86>
    return;
 80076d2:	bf00      	nop
  }
}
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076ea:	e005      	b.n	80076f8 <USBD_GetLen+0x1e>
  {
    len++;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	3301      	adds	r3, #1
 80076f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	3301      	adds	r3, #1
 80076f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f5      	bne.n	80076ec <USBD_GetLen+0x12>
  }

  return len;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2202      	movs	r2, #2
 800771e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	2100      	movs	r1, #0
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fbf7 	bl	8007f28 <USBD_LL_Transmit>

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	2100      	movs	r1, #0
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 fbe6 	bl	8007f28 <USBD_LL_Transmit>

  return USBD_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	2100      	movs	r1, #0
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fbf6 	bl	8007f6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2204      	movs	r2, #4
 8007794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007798:	2300      	movs	r3, #0
 800779a:	2200      	movs	r2, #0
 800779c:	2100      	movs	r1, #0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fbc2 	bl	8007f28 <USBD_LL_Transmit>

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2205      	movs	r2, #5
 80077ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077be:	2300      	movs	r3, #0
 80077c0:	2200      	movs	r2, #0
 80077c2:	2100      	movs	r1, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fbd0 	bl	8007f6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 80077d8:	2200      	movs	r2, #0
 80077da:	490e      	ldr	r1, [pc, #56]	; (8007814 <MX_USB_Device_Init+0x40>)
 80077dc:	480e      	ldr	r0, [pc, #56]	; (8007818 <MX_USB_Device_Init+0x44>)
 80077de:	f7fe fef7 	bl	80065d0 <USBD_Init>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 80077e8:	f7f8 fdb7 	bl	800035a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 80077ec:	490b      	ldr	r1, [pc, #44]	; (800781c <MX_USB_Device_Init+0x48>)
 80077ee:	480a      	ldr	r0, [pc, #40]	; (8007818 <MX_USB_Device_Init+0x44>)
 80077f0:	f7fe ff1e 	bl	8006630 <USBD_RegisterClass>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80077fa:	f7f8 fdae 	bl	800035a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80077fe:	4806      	ldr	r0, [pc, #24]	; (8007818 <MX_USB_Device_Init+0x44>)
 8007800:	f7fe ff3d 	bl	800667e <USBD_Start>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800780a:	f7f8 fda6 	bl	800035a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800780e:	bf00      	nop
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000118 	.word	0x20000118
 8007818:	200001a4 	.word	0x200001a4
 800781c:	20000010 	.word	0x20000010

08007820 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2212      	movs	r2, #18
 8007830:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 8007832:	4b03      	ldr	r3, [pc, #12]	; (8007840 <USBD_HID_DeviceDescriptor+0x20>)
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000138 	.word	0x20000138

08007844 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	6039      	str	r1, [r7, #0]
 800784e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2204      	movs	r2, #4
 8007854:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007856:	4b03      	ldr	r3, [pc, #12]	; (8007864 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	2000014c 	.word	0x2000014c

08007868 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	4907      	ldr	r1, [pc, #28]	; (800789c <USBD_HID_ProductStrDescriptor+0x34>)
 800787e:	4808      	ldr	r0, [pc, #32]	; (80078a0 <USBD_HID_ProductStrDescriptor+0x38>)
 8007880:	f7ff fee5 	bl	800764e <USBD_GetString>
 8007884:	e004      	b.n	8007890 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	4904      	ldr	r1, [pc, #16]	; (800789c <USBD_HID_ProductStrDescriptor+0x34>)
 800788a:	4805      	ldr	r0, [pc, #20]	; (80078a0 <USBD_HID_ProductStrDescriptor+0x38>)
 800788c:	f7ff fedf 	bl	800764e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007890:	4b02      	ldr	r3, [pc, #8]	; (800789c <USBD_HID_ProductStrDescriptor+0x34>)
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000474 	.word	0x20000474
 80078a0:	08008148 	.word	0x08008148

080078a4 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	6039      	str	r1, [r7, #0]
 80078ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	4904      	ldr	r1, [pc, #16]	; (80078c4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 80078b4:	4804      	ldr	r0, [pc, #16]	; (80078c8 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 80078b6:	f7ff feca 	bl	800764e <USBD_GetString>
  return USBD_StrDesc;
 80078ba:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20000474 	.word	0x20000474
 80078c8:	08008160 	.word	0x08008160

080078cc <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	221a      	movs	r2, #26
 80078dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078de:	f000 f843 	bl	8007968 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80078e2:	4b02      	ldr	r3, [pc, #8]	; (80078ec <USBD_HID_SerialStrDescriptor+0x20>)
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000150 	.word	0x20000150

080078f0 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	6039      	str	r1, [r7, #0]
 80078fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4907      	ldr	r1, [pc, #28]	; (8007924 <USBD_HID_ConfigStrDescriptor+0x34>)
 8007906:	4808      	ldr	r0, [pc, #32]	; (8007928 <USBD_HID_ConfigStrDescriptor+0x38>)
 8007908:	f7ff fea1 	bl	800764e <USBD_GetString>
 800790c:	e004      	b.n	8007918 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4904      	ldr	r1, [pc, #16]	; (8007924 <USBD_HID_ConfigStrDescriptor+0x34>)
 8007912:	4805      	ldr	r0, [pc, #20]	; (8007928 <USBD_HID_ConfigStrDescriptor+0x38>)
 8007914:	f7ff fe9b 	bl	800764e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007918:	4b02      	ldr	r3, [pc, #8]	; (8007924 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000474 	.word	0x20000474
 8007928:	08008174 	.word	0x08008174

0800792c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	6039      	str	r1, [r7, #0]
 8007936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007938:	79fb      	ldrb	r3, [r7, #7]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d105      	bne.n	800794a <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	4907      	ldr	r1, [pc, #28]	; (8007960 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8007942:	4808      	ldr	r0, [pc, #32]	; (8007964 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8007944:	f7ff fe83 	bl	800764e <USBD_GetString>
 8007948:	e004      	b.n	8007954 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	4904      	ldr	r1, [pc, #16]	; (8007960 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800794e:	4805      	ldr	r0, [pc, #20]	; (8007964 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8007950:	f7ff fe7d 	bl	800764e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007954:	4b02      	ldr	r3, [pc, #8]	; (8007960 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000474 	.word	0x20000474
 8007964:	08008180 	.word	0x08008180

08007968 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800796e:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <Get_SerialNum+0x44>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007974:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <Get_SerialNum+0x48>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800797a:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <Get_SerialNum+0x4c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800798e:	2208      	movs	r2, #8
 8007990:	4909      	ldr	r1, [pc, #36]	; (80079b8 <Get_SerialNum+0x50>)
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f814 	bl	80079c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007998:	2204      	movs	r2, #4
 800799a:	4908      	ldr	r1, [pc, #32]	; (80079bc <Get_SerialNum+0x54>)
 800799c:	68b8      	ldr	r0, [r7, #8]
 800799e:	f000 f80f 	bl	80079c0 <IntToUnicode>
  }
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	1fff7590 	.word	0x1fff7590
 80079b0:	1fff7594 	.word	0x1fff7594
 80079b4:	1fff7598 	.word	0x1fff7598
 80079b8:	20000152 	.word	0x20000152
 80079bc:	20000162 	.word	0x20000162

080079c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079d2:	2300      	movs	r3, #0
 80079d4:	75fb      	strb	r3, [r7, #23]
 80079d6:	e027      	b.n	8007a28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	0f1b      	lsrs	r3, r3, #28
 80079dc:	2b09      	cmp	r3, #9
 80079de:	d80b      	bhi.n	80079f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	0f1b      	lsrs	r3, r3, #28
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	4619      	mov	r1, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	440b      	add	r3, r1
 80079f0:	3230      	adds	r2, #48	; 0x30
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	e00a      	b.n	8007a0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	0f1b      	lsrs	r3, r3, #28
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	4619      	mov	r1, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	440b      	add	r3, r1
 8007a08:	3237      	adds	r2, #55	; 0x37
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	3301      	adds	r3, #1
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	3301      	adds	r3, #1
 8007a26:	75fb      	strb	r3, [r7, #23]
 8007a28:	7dfa      	ldrb	r2, [r7, #23]
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d3d3      	bcc.n	80079d8 <IntToUnicode+0x18>
  }
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <LL_AHB2_GRP1_EnableClock>:
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b085      	sub	sp, #20
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4013      	ands	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a62:	68fb      	ldr	r3, [r7, #12]
}
 8007a64:	bf00      	nop
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4013      	ands	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a94:	68fb      	ldr	r3, [r7, #12]
}
 8007a96:	bf00      	nop
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b09c      	sub	sp, #112	; 0x70
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	609a      	str	r2, [r3, #8]
 8007ab8:	60da      	str	r2, [r3, #12]
 8007aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007abc:	f107 030c 	add.w	r3, r7, #12
 8007ac0:	2250      	movs	r2, #80	; 0x50
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fb15 	bl	80080f4 <memset>
  if(pcdHandle->Instance==USB)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a23      	ldr	r2, [pc, #140]	; (8007b5c <HAL_PCD_MspInit+0xb8>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d13e      	bne.n	8007b52 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ad8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8007ada:	2318      	movs	r3, #24
 8007adc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8007ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ae2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8007ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ae8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8007aea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007aee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8007af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007af4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007af6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007afa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007afc:	f107 030c 	add.w	r3, r7, #12
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fc f8bd 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8007b0c:	f7f8 fc25 	bl	800035a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b10:	2001      	movs	r0, #1
 8007b12:	f7ff ff94 	bl	8007a3e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b24:	2300      	movs	r3, #0
 8007b26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8007b28:	230a      	movs	r3, #10
 8007b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007b30:	4619      	mov	r1, r3
 8007b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b36:	f7f8 feb1 	bl	800089c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b3a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007b3e:	f7ff ff97 	bl	8007a70 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007b42:	2200      	movs	r2, #0
 8007b44:	2100      	movs	r1, #0
 8007b46:	2014      	movs	r0, #20
 8007b48:	f7f8 fe73 	bl	8000832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007b4c:	2014      	movs	r0, #20
 8007b4e:	f7f8 fe8a 	bl	8000866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b52:	bf00      	nop
 8007b54:	3770      	adds	r7, #112	; 0x70
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40006800 	.word	0x40006800

08007b60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f7fe fdcc 	bl	8006714 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	440b      	add	r3, r1
 8007ba4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	4619      	mov	r1, r3
 8007bae:	f7fe fe06 	bl	80067be <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	440b      	add	r3, r1
 8007bda:	333c      	adds	r3, #60	; 0x3c
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	4619      	mov	r1, r3
 8007be2:	f7fe fe4f 	bl	8006884 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe ff63 	bl	8006ac8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c12:	2301      	movs	r3, #1
 8007c14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d001      	beq.n	8007c22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c1e:	f7f8 fb9c 	bl	800035a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007c28:	7bfa      	ldrb	r2, [r7, #15]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe ff0d 	bl	8006a4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe feb9 	bl	80069b0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe ff08 	bl	8006a6c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <HAL_PCD_SuspendCallback+0x30>)
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	4a03      	ldr	r2, [pc, #12]	; (8007c78 <HAL_PCD_SuspendCallback+0x30>)
 8007c6a:	f043 0306 	orr.w	r3, r3, #6
 8007c6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed00 	.word	0xe000ed00

08007c7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d007      	beq.n	8007c9c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c8c:	4b08      	ldr	r3, [pc, #32]	; (8007cb0 <HAL_PCD_ResumeCallback+0x34>)
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	4a07      	ldr	r2, [pc, #28]	; (8007cb0 <HAL_PCD_ResumeCallback+0x34>)
 8007c92:	f023 0306 	bic.w	r3, r3, #6
 8007c96:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007c98:	f000 f9d6 	bl	8008048 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fef8 	bl	8006a98 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	e000ed00 	.word	0xe000ed00

08007cb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007cbc:	4a23      	ldr	r2, [pc, #140]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a21      	ldr	r2, [pc, #132]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8007ccc:	f7fa fcba 	bl	8002644 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8007cd0:	4b1e      	ldr	r3, [pc, #120]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <USBD_LL_Init+0x9c>)
 8007cd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cd8:	2208      	movs	r2, #8
 8007cda:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007cdc:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cde:	2202      	movs	r2, #2
 8007ce0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ce2:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <USBD_LL_Init+0x98>)
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007ce8:	4b18      	ldr	r3, [pc, #96]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007cee:	4b17      	ldr	r3, [pc, #92]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007cf4:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007cfa:	4b14      	ldr	r3, [pc, #80]	; (8007d4c <USBD_LL_Init+0x98>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d00:	4812      	ldr	r0, [pc, #72]	; (8007d4c <USBD_LL_Init+0x98>)
 8007d02:	f7f8 ff65 	bl	8000bd0 <HAL_PCD_Init>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8007d0c:	f7f8 fb25 	bl	800035a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d16:	2318      	movs	r3, #24
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	f7fa fc06 	bl	800252c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d26:	2358      	movs	r3, #88	; 0x58
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2180      	movs	r1, #128	; 0x80
 8007d2c:	f7fa fbfe 	bl	800252c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2181      	movs	r1, #129	; 0x81
 8007d3e:	f7fa fbf5 	bl	800252c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000674 	.word	0x20000674
 8007d50:	40006800 	.word	0x40006800

08007d54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7f9 f815 	bl	8000d9a <HAL_PCD_Start>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f96c 	bl	8008054 <USBD_Get_USB_Status>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	4608      	mov	r0, r1
 8007d94:	4611      	mov	r1, r2
 8007d96:	461a      	mov	r2, r3
 8007d98:	4603      	mov	r3, r0
 8007d9a:	70fb      	strb	r3, [r7, #3]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70bb      	strb	r3, [r7, #2]
 8007da0:	4613      	mov	r3, r2
 8007da2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007db2:	78bb      	ldrb	r3, [r7, #2]
 8007db4:	883a      	ldrh	r2, [r7, #0]
 8007db6:	78f9      	ldrb	r1, [r7, #3]
 8007db8:	f7f9 f95d 	bl	8001076 <HAL_PCD_EP_Open>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f946 	bl	8008054 <USBD_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7f9 f9a4 	bl	8001142 <HAL_PCD_EP_Close>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 f927 	bl	8008054 <USBD_Get_USB_Status>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e2e:	78fa      	ldrb	r2, [r7, #3]
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7f9 fa4d 	bl	80012d2 <HAL_PCD_EP_SetStall>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 f908 	bl	8008054 <USBD_Get_USB_Status>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e6c:	78fa      	ldrb	r2, [r7, #3]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7f9 fa80 	bl	8001376 <HAL_PCD_EP_ClrStall>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 f8e9 	bl	8008054 <USBD_Get_USB_Status>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ea2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da0c      	bge.n	8007ec6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	440b      	add	r3, r1
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	e00b      	b.n	8007ede <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ecc:	68f9      	ldr	r1, [r7, #12]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	440b      	add	r3, r1
 8007ed8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007edc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	4611      	mov	r1, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7f9 f88f 	bl	800102c <HAL_PCD_SetAddress>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 f89d 	bl	8008054 <USBD_Get_USB_Status>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	460b      	mov	r3, r1
 8007f36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f46:	7af9      	ldrb	r1, [r7, #11]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	f7f9 f97e 	bl	800124c <HAL_PCD_EP_Transmit>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f87c 	bl	8008054 <USBD_Get_USB_Status>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f60:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b086      	sub	sp, #24
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	460b      	mov	r3, r1
 8007f78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f88:	7af9      	ldrb	r1, [r7, #11]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	f7f9 f920 	bl	80011d2 <HAL_PCD_EP_Receive>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f85b 	bl	8008054 <USBD_Get_USB_Status>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fa2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_PCDEx_LPM_Callback+0x18>
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d013      	beq.n	8007fea <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007fc2:	e023      	b.n	800800c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007fcc:	f000 f83c 	bl	8008048 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fd0:	4b10      	ldr	r3, [pc, #64]	; (8008014 <HAL_PCDEx_LPM_Callback+0x68>)
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	4a0f      	ldr	r2, [pc, #60]	; (8008014 <HAL_PCDEx_LPM_Callback+0x68>)
 8007fd6:	f023 0306 	bic.w	r3, r3, #6
 8007fda:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fd58 	bl	8006a98 <USBD_LL_Resume>
    break;
 8007fe8:	e010      	b.n	800800c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fe fd3b 	bl	8006a6c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_PCDEx_LPM_Callback+0x68>)
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	4a04      	ldr	r2, [pc, #16]	; (8008014 <HAL_PCDEx_LPM_Callback+0x68>)
 8008004:	f043 0306 	orr.w	r3, r3, #6
 8008008:	6113      	str	r3, [r2, #16]
    break;
 800800a:	bf00      	nop
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	e000ed00 	.word	0xe000ed00

08008018 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008020:	4b03      	ldr	r3, [pc, #12]	; (8008030 <USBD_static_malloc+0x18>)
}
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	2000018c 	.word	0x2000018c

08008034 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]

}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800804c:	f7f8 f8fc 	bl	8000248 <SystemClock_Config>
}
 8008050:	bf00      	nop
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d817      	bhi.n	8008098 <USBD_Get_USB_Status+0x44>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <USBD_Get_USB_Status+0x1c>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	08008081 	.word	0x08008081
 8008074:	08008087 	.word	0x08008087
 8008078:	0800808d 	.word	0x0800808d
 800807c:	08008093 	.word	0x08008093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
    break;
 8008084:	e00b      	b.n	800809e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008086:	2303      	movs	r3, #3
 8008088:	73fb      	strb	r3, [r7, #15]
    break;
 800808a:	e008      	b.n	800809e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
    break;
 8008090:	e005      	b.n	800809e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008092:	2303      	movs	r3, #3
 8008094:	73fb      	strb	r3, [r7, #15]
    break;
 8008096:	e002      	b.n	800809e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008098:	2303      	movs	r3, #3
 800809a:	73fb      	strb	r3, [r7, #15]
    break;
 800809c:	bf00      	nop
  }
  return usb_status;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <__libc_init_array>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4d0d      	ldr	r5, [pc, #52]	; (80080e4 <__libc_init_array+0x38>)
 80080b0:	4c0d      	ldr	r4, [pc, #52]	; (80080e8 <__libc_init_array+0x3c>)
 80080b2:	1b64      	subs	r4, r4, r5
 80080b4:	10a4      	asrs	r4, r4, #2
 80080b6:	2600      	movs	r6, #0
 80080b8:	42a6      	cmp	r6, r4
 80080ba:	d109      	bne.n	80080d0 <__libc_init_array+0x24>
 80080bc:	4d0b      	ldr	r5, [pc, #44]	; (80080ec <__libc_init_array+0x40>)
 80080be:	4c0c      	ldr	r4, [pc, #48]	; (80080f0 <__libc_init_array+0x44>)
 80080c0:	f000 f820 	bl	8008104 <_init>
 80080c4:	1b64      	subs	r4, r4, r5
 80080c6:	10a4      	asrs	r4, r4, #2
 80080c8:	2600      	movs	r6, #0
 80080ca:	42a6      	cmp	r6, r4
 80080cc:	d105      	bne.n	80080da <__libc_init_array+0x2e>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d4:	4798      	blx	r3
 80080d6:	3601      	adds	r6, #1
 80080d8:	e7ee      	b.n	80080b8 <__libc_init_array+0xc>
 80080da:	f855 3b04 	ldr.w	r3, [r5], #4
 80080de:	4798      	blx	r3
 80080e0:	3601      	adds	r6, #1
 80080e2:	e7f2      	b.n	80080ca <__libc_init_array+0x1e>
 80080e4:	08008210 	.word	0x08008210
 80080e8:	08008210 	.word	0x08008210
 80080ec:	08008210 	.word	0x08008210
 80080f0:	08008214 	.word	0x08008214

080080f4 <memset>:
 80080f4:	4402      	add	r2, r0
 80080f6:	4603      	mov	r3, r0
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d100      	bne.n	80080fe <memset+0xa>
 80080fc:	4770      	bx	lr
 80080fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008102:	e7f9      	b.n	80080f8 <memset+0x4>

08008104 <_init>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	bf00      	nop
 8008108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810a:	bc08      	pop	{r3}
 800810c:	469e      	mov	lr, r3
 800810e:	4770      	bx	lr

08008110 <_fini>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	bf00      	nop
 8008114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008116:	bc08      	pop	{r3}
 8008118:	469e      	mov	lr, r3
 800811a:	4770      	bx	lr

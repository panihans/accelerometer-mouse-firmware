
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009680  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080098b0  080098b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000004  080098b8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a74  20000188  08009a3c  00020188  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001bfc  08009a3c  00021bfc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cad0  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003e73  00000000  00000000  0003cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001758  00000000  00000000  00040b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000015e0  00000000  00000000  00042258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00022efc  00000000  00000000  00043838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016df7  00000000  00000000  00066734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cd83f  00000000  00000000  0007d52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0014ad6a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005e98  00000000  00000000  0014adc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000188 	.word	0x20000188
 8000158:	00000000 	.word	0x00000000
 800015c:	080097a4 	.word	0x080097a4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000018c 	.word	0x2000018c
 8000178:	080097a4 	.word	0x080097a4

0800017c <read_register>:
#include "imu.h"

void read_register(uint8_t r, uint8_t pRxData[]) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	6039      	str	r1, [r7, #0]
 8000186:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800018e:	b2db      	uxtb	r3, r3
 8000190:	733b      	strb	r3, [r7, #12]
	CS_START();
 8000192:	2200      	movs	r2, #0
 8000194:	2110      	movs	r1, #16
 8000196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800019a:	f000 fe9b 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 800019e:	f107 010c 	add.w	r1, r7, #12
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	2201      	movs	r2, #1
 80001a8:	4809      	ldr	r0, [pc, #36]	; (80001d0 <read_register+0x54>)
 80001aa:	f004 fa4b 	bl	8004644 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 80001ae:	f04f 33ff 	mov.w	r3, #4294967295
 80001b2:	2201      	movs	r2, #1
 80001b4:	6839      	ldr	r1, [r7, #0]
 80001b6:	4806      	ldr	r0, [pc, #24]	; (80001d0 <read_register+0x54>)
 80001b8:	f004 fbb2 	bl	8004920 <HAL_SPI_Receive>
//	HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 1, HAL_MAX_DELAY);
	CS_END();
 80001bc:	2201      	movs	r2, #1
 80001be:	2110      	movs	r1, #16
 80001c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001c4:	f000 fe86 	bl	8000ed4 <HAL_GPIO_WritePin>
}
 80001c8:	bf00      	nop
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	200003d0 	.word	0x200003d0

080001d4 <write_register>:

void write_register(uint8_t r, uint8_t value) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	733b      	strb	r3, [r7, #12]
 80001e8:	79bb      	ldrb	r3, [r7, #6]
 80001ea:	737b      	strb	r3, [r7, #13]
	uint8_t pRxData[2] = { 0, 0 };
 80001ec:	2300      	movs	r3, #0
 80001ee:	813b      	strh	r3, [r7, #8]
	CS_START();
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f8:	f000 fe6c 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 2, HAL_MAX_DELAY);
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f107 010c 	add.w	r1, r7, #12
 8000204:	f04f 33ff 	mov.w	r3, #4294967295
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	2302      	movs	r3, #2
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <write_register+0x54>)
 800020e:	f004 fcb7 	bl	8004b80 <HAL_SPI_TransmitReceive>
	CS_END();
 8000212:	2201      	movs	r2, #1
 8000214:	2110      	movs	r1, #16
 8000216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021a:	f000 fe5b 	bl	8000ed4 <HAL_GPIO_WritePin>
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200003d0 	.word	0x200003d0

0800022c <read_x>:

uint16_t read_x() {
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	uint8_t pRxData[1] = { 0 };
 8000232:	2300      	movs	r3, #0
 8000234:	713b      	strb	r3, [r7, #4]
	read_register(ACCEL_XOUT_H, pRxData);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4619      	mov	r1, r3
 800023a:	203b      	movs	r0, #59	; 0x3b
 800023c:	f7ff ff9e 	bl	800017c <read_register>
	uint8_t pRxData2[1] = { 0 };
 8000240:	2300      	movs	r3, #0
 8000242:	703b      	strb	r3, [r7, #0]
	read_register(ACCEL_XOUT_L, pRxData2);
 8000244:	463b      	mov	r3, r7
 8000246:	4619      	mov	r1, r3
 8000248:	203c      	movs	r0, #60	; 0x3c
 800024a:	f7ff ff97 	bl	800017c <read_register>
	int16_t x = (pRxData[0] << 8) | pRxData2[0];
 800024e:	793b      	ldrb	r3, [r7, #4]
 8000250:	021b      	lsls	r3, r3, #8
 8000252:	b21a      	sxth	r2, r3
 8000254:	783b      	ldrb	r3, [r7, #0]
 8000256:	b21b      	sxth	r3, r3
 8000258:	4313      	orrs	r3, r2
 800025a:	80fb      	strh	r3, [r7, #6]
	return x;
 800025c:	88fb      	ldrh	r3, [r7, #6]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <read_y>:

uint16_t read_y() {
 8000266:	b580      	push	{r7, lr}
 8000268:	b082      	sub	sp, #8
 800026a:	af00      	add	r7, sp, #0
	uint8_t pRxData[1] = { 0 };
 800026c:	2300      	movs	r3, #0
 800026e:	713b      	strb	r3, [r7, #4]
	read_register(ACCEL_YOUT_H, pRxData);
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4619      	mov	r1, r3
 8000274:	203d      	movs	r0, #61	; 0x3d
 8000276:	f7ff ff81 	bl	800017c <read_register>
	uint8_t pRxData2[1] = { 0 };
 800027a:	2300      	movs	r3, #0
 800027c:	703b      	strb	r3, [r7, #0]
	read_register(ACCEL_YOUT_L, pRxData2);
 800027e:	463b      	mov	r3, r7
 8000280:	4619      	mov	r1, r3
 8000282:	203e      	movs	r0, #62	; 0x3e
 8000284:	f7ff ff7a 	bl	800017c <read_register>
	int16_t y = (pRxData[0] << 8) | pRxData2[0];
 8000288:	793b      	ldrb	r3, [r7, #4]
 800028a:	021b      	lsls	r3, r3, #8
 800028c:	b21a      	sxth	r2, r3
 800028e:	783b      	ldrb	r3, [r7, #0]
 8000290:	b21b      	sxth	r3, r3
 8000292:	4313      	orrs	r3, r2
 8000294:	80fb      	strh	r3, [r7, #6]
	return y;
 8000296:	88fb      	ldrh	r3, [r7, #6]
}
 8000298:	4618      	mov	r0, r3
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <read_z>:

uint16_t read_z() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	uint8_t pRxData[1] = { 0 };
 80002a6:	2300      	movs	r3, #0
 80002a8:	713b      	strb	r3, [r7, #4]
	read_register(ACCEL_ZOUT_H, pRxData);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	203f      	movs	r0, #63	; 0x3f
 80002b0:	f7ff ff64 	bl	800017c <read_register>
	uint8_t pRxData2[1] = { 0 };
 80002b4:	2300      	movs	r3, #0
 80002b6:	703b      	strb	r3, [r7, #0]
	read_register(ACCEL_ZOUT_L, pRxData2);
 80002b8:	463b      	mov	r3, r7
 80002ba:	4619      	mov	r1, r3
 80002bc:	2040      	movs	r0, #64	; 0x40
 80002be:	f7ff ff5d 	bl	800017c <read_register>
	int16_t z = (pRxData[0] << 8) | pRxData2[0];
 80002c2:	793b      	ldrb	r3, [r7, #4]
 80002c4:	021b      	lsls	r3, r3, #8
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	783b      	ldrb	r3, [r7, #0]
 80002ca:	b21b      	sxth	r3, r3
 80002cc:	4313      	orrs	r3, r2
 80002ce:	80fb      	strh	r3, [r7, #6]
	return z;
 80002d0:	88fb      	ldrh	r3, [r7, #6]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80002f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4013      	ands	r3, r2
 80002fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fe:	68fb      	ldr	r3, [r7, #12]
}
 8000300:	bf00      	nop
 8000302:	3714      	adds	r7, #20
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000320:	2002      	movs	r0, #2
 8000322:	f7ff ffda 	bl	80002da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	2001      	movs	r0, #1
 8000328:	f7ff ffd7 	bl	80002da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000332:	4814      	ldr	r0, [pc, #80]	; (8000384 <MX_GPIO_Init+0x78>)
 8000334:	f000 fdce 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2110      	movs	r1, #16
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f000 fdc8 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2301      	movs	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	480a      	ldr	r0, [pc, #40]	; (8000384 <MX_GPIO_Init+0x78>)
 800035c:	f000 fc52 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000360:	2310      	movs	r3, #16
 8000362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2300      	movs	r3, #0
 800036e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4619      	mov	r1, r3
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f000 fc44 	bl	8000c04 <HAL_GPIO_Init>

}
 800037c:	bf00      	nop
 800037e:	3718      	adds	r7, #24
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	48000400 	.word	0x48000400

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038e:	f000 fa7f 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000392:	f000 f86d 	bl	8000470 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000396:	f000 f8d7 	bl	8000548 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039a:	f7ff ffb7 	bl	800030c <MX_GPIO_Init>
  MX_USB_Device_Init();
 800039e:	f008 fc73 	bl	8008c88 <MX_USB_Device_Init>
  MX_SPI1_Init();
 80003a2:	f000 f925 	bl	80005f0 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	write_register(PWR_MGMT_1, (1UL << 7));
 80003a6:	2180      	movs	r1, #128	; 0x80
 80003a8:	206b      	movs	r0, #107	; 0x6b
 80003aa:	f7ff ff13 	bl	80001d4 <write_register>
	HAL_Delay(100);
 80003ae:	2064      	movs	r0, #100	; 0x64
 80003b0:	f000 faf4 	bl	800099c <HAL_Delay>
	write_register(PWR_MGMT_1, (1UL << 7));
 80003b4:	2180      	movs	r1, #128	; 0x80
 80003b6:	206b      	movs	r0, #107	; 0x6b
 80003b8:	f7ff ff0c 	bl	80001d4 <write_register>
	HAL_Delay(100);
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 faed 	bl	800099c <HAL_Delay>
	for (int i = 0; i < 5; ++i) {
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e00f      	b.n	80003e8 <main+0x60>
		uint8_t pRxData[2] = { 0, 0 };
 80003c8:	2300      	movs	r3, #0
 80003ca:	813b      	strh	r3, [r7, #8]
		read_register(PWR_MGMT_1, pRxData);
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	4619      	mov	r1, r3
 80003d2:	206b      	movs	r0, #107	; 0x6b
 80003d4:	f7ff fed2 	bl	800017c <read_register>
		if (pRxData[0] & (1UL << 6)) {
 80003d8:	7a3b      	ldrb	r3, [r7, #8]
 80003da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d106      	bne.n	80003f0 <main+0x68>
	for (int i = 0; i < 5; ++i) {
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	ddec      	ble.n	80003c8 <main+0x40>
 80003ee:	e000      	b.n	80003f2 <main+0x6a>
			break;
 80003f0:	bf00      	nop
		}
	}
	write_register(PWR_MGMT_1, 0);
 80003f2:	2100      	movs	r1, #0
 80003f4:	206b      	movs	r0, #107	; 0x6b
 80003f6:	f7ff feed 	bl	80001d4 <write_register>
	for (int i = 0; i < 5; ++i) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	e00c      	b.n	800041a <main+0x92>
		uint8_t pRxData[2] = { 0, 0 };
 8000400:	2300      	movs	r3, #0
 8000402:	80bb      	strh	r3, [r7, #4]
		read_register(WHO_AM_I, pRxData);
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	2075      	movs	r0, #117	; 0x75
 800040a:	f7ff feb7 	bl	800017c <read_register>
		if (pRxData[0] == 0xAF) {
 800040e:	793b      	ldrb	r3, [r7, #4]
 8000410:	2baf      	cmp	r3, #175	; 0xaf
 8000412:	d006      	beq.n	8000422 <main+0x9a>
	for (int i = 0; i < 5; ++i) {
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	3301      	adds	r3, #1
 8000418:	613b      	str	r3, [r7, #16]
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	2b04      	cmp	r3, #4
 800041e:	ddef      	ble.n	8000400 <main+0x78>
 8000420:	e000      	b.n	8000424 <main+0x9c>
			break;
 8000422:	bf00      	nop
		}
	}
	write_register(PWR_MGMT_2, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	206c      	movs	r0, #108	; 0x6c
 8000428:	f7ff fed4 	bl	80001d4 <write_register>
	HAL_Delay(10);
 800042c:	200a      	movs	r0, #10
 800042e:	f000 fab5 	bl	800099c <HAL_Delay>
//		TOGGLE_LED();
//		HAL_Delay(500);
//		TOGGLE_LED();
//		HAL_Delay(500);

		int16_t x = read_x();
 8000432:	f7ff fefb 	bl	800022c <read_x>
 8000436:	4603      	mov	r3, r0
 8000438:	81fb      	strh	r3, [r7, #14]
		int16_t y = read_y();
 800043a:	f7ff ff14 	bl	8000266 <read_y>
 800043e:	4603      	mov	r3, r0
 8000440:	81bb      	strh	r3, [r7, #12]
		int16_t z = read_z();
 8000442:	f7ff ff2d 	bl	80002a0 <read_z>
 8000446:	4603      	mov	r3, r0
 8000448:	817b      	strh	r3, [r7, #10]

		feedback.x = x;
 800044a:	4a08      	ldr	r2, [pc, #32]	; (800046c <main+0xe4>)
 800044c:	89fb      	ldrh	r3, [r7, #14]
 800044e:	8013      	strh	r3, [r2, #0]
		feedback.y = y ;
 8000450:	4a06      	ldr	r2, [pc, #24]	; (800046c <main+0xe4>)
 8000452:	89bb      	ldrh	r3, [r7, #12]
 8000454:	8053      	strh	r3, [r2, #2]
		feedback.z = z;
 8000456:	4a05      	ldr	r2, [pc, #20]	; (800046c <main+0xe4>)
 8000458:	897b      	ldrh	r3, [r7, #10]
 800045a:	8093      	strh	r3, [r2, #4]
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 800045c:	2106      	movs	r1, #6
 800045e:	4803      	ldr	r0, [pc, #12]	; (800046c <main+0xe4>)
 8000460:	f008 fcd0 	bl	8008e04 <CDC_Transmit_FS>
		HAL_Delay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f000 fa99 	bl	800099c <HAL_Delay>
	while (1) {
 800046a:	e7e2      	b.n	8000432 <main+0xaa>
 800046c:	200003c8 	.word	0x200003c8

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b09a      	sub	sp, #104	; 0x68
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	f107 0320 	add.w	r3, r7, #32
 800047a:	2248      	movs	r2, #72	; 0x48
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f009 f988 	bl	8009794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <SystemClock_Config+0xd4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800049e:	4a29      	ldr	r2, [pc, #164]	; (8000544 <SystemClock_Config+0xd4>)
 80004a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004a4:	6013      	str	r3, [r2, #0]
 80004a6:	4b27      	ldr	r3, [pc, #156]	; (8000544 <SystemClock_Config+0xd4>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80004b2:	2326      	movs	r3, #38	; 0x26
 80004b4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80004b6:	2300      	movs	r3, #0
 80004b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004c0:	2301      	movs	r3, #1
 80004c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c4:	2340      	movs	r3, #64	; 0x40
 80004c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004cc:	2360      	movs	r3, #96	; 0x60
 80004ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d0:	2302      	movs	r3, #2
 80004d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004d4:	2301      	movs	r3, #1
 80004d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80004dc:	2320      	movs	r3, #32
 80004de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80004ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fdc4 	bl	8003084 <HAL_RCC_OscConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000502:	f000 f83e 	bl	8000582 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000506:	236f      	movs	r3, #111	; 0x6f
 8000508:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050a:	2303      	movs	r3, #3
 800050c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2103      	movs	r1, #3
 8000526:	4618      	mov	r0, r3
 8000528:	f003 f938 	bl	800379c <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000532:	f000 f826 	bl	8000582 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000536:	f003 fecb 	bl	80042d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800053a:	bf00      	nop
 800053c:	3768      	adds	r7, #104	; 0x68
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	58000400 	.word	0x58000400

08000548 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800054e:	463b      	mov	r3, r7
 8000550:	2250      	movs	r2, #80	; 0x50
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f009 f91d 	bl	8009794 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800055a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000560:	2300      	movs	r3, #0
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000564:	2310      	movs	r3, #16
 8000566:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fd3a 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000576:	f000 f804 	bl	8000582 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800057a:	bf00      	nop
 800057c:	3750      	adds	r7, #80	; 0x50
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000586:	b672      	cpsid	i
}
 8000588:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800058a:	e7fe      	b.n	800058a <Error_Handler+0x8>

0800058c <LL_AHB2_GRP1_EnableClock>:
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000598:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800059a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4013      	ands	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b0:	68fb      	ldr	r3, [r7, #12]
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005be:	b480      	push	{r7}
 80005c0:	b085      	sub	sp, #20
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4013      	ands	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_SPI1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_SPI1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_SPI1_Init+0x74>)
 80005fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_SPI1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_SPI1_Init+0x74>)
 800060a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800060e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_SPI1_Init+0x74>)
 8000612:	2202      	movs	r2, #2
 8000614:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_SPI1_Init+0x74>)
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_SPI1_Init+0x74>)
 800061e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000622:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_SPI1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_SPI1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_SPI1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_SPI1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_SPI1_Init+0x74>)
 800063e:	2207      	movs	r2, #7
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_SPI1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_SPI1_Init+0x74>)
 8000650:	f003 ff55 	bl	80044fe <HAL_SPI_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f7ff ff92 	bl	8000582 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200003d0 	.word	0x200003d0
 8000668:	40013000 	.word	0x40013000

0800066c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <HAL_SPI_MspInit+0x5c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d117      	bne.n	80006be <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800068e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000692:	f7ff ff94 	bl	80005be <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ff78 	bl	800058c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800069c:	23c2      	movs	r3, #194	; 0xc2
 800069e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ac:	2305      	movs	r3, #5
 80006ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f000 faa3 	bl	8000c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40013000 	.word	0x40013000

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	f06f 000b 	mvn.w	r0, #11
 80006d8:	f000 fa5f 	bl	8000b9a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	f06f 000a 	mvn.w	r0, #10
 80006e4:	f000 fa59 	bl	8000b9a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	f06f 0009 	mvn.w	r0, #9
 80006f0:	f000 fa53 	bl	8000b9a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2101      	movs	r1, #1
 80006f8:	f06f 0004 	mvn.w	r0, #4
 80006fc:	f000 fa4d 	bl	8000b9a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2101      	movs	r1, #1
 8000704:	f06f 0003 	mvn.w	r0, #3
 8000708:	f000 fa47 	bl	8000b9a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2101      	movs	r1, #1
 8000710:	f06f 0001 	mvn.w	r0, #1
 8000714:	f000 fa41 	bl	8000b9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <MemManage_Handler+0x4>

0800072e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <UsageFault_Handler+0x4>

0800073a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 f8ec 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <USB_LP_IRQHandler+0x10>)
 8000776:	f000 fccc 	bl	8001112 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20001908 	.word	0x20001908

08000784 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemInit+0x90>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemInit+0x90>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80007b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <SystemInit+0x94>)
 80007be:	4013      	ands	r3, r2
 80007c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ce:	f023 0305 	bic.w	r3, r3, #5
 80007d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007e2:	f023 0301 	bic.w	r3, r3, #1
 80007e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <SystemInit+0x98>)
 80007f0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000800:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	faf6fefb 	.word	0xfaf6fefb
 800081c:	22041000 	.word	0x22041000

08000820 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000820:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000822:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000824:	3304      	adds	r3, #4

08000826 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000826:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000828:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800082a:	d3f9      	bcc.n	8000820 <CopyDataInit>
  bx lr
 800082c:	4770      	bx	lr

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800082e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000830:	3004      	adds	r0, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000832:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>
  bx lr
 8000836:	4770      	bx	lr

08000838 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800083a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800083c:	f7ff ffa2 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopForever+0x8>)
 8000842:	490c      	ldr	r1, [pc, #48]	; (8000874 <LoopForever+0xc>)
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <LoopForever+0x10>)
 8000846:	2300      	movs	r3, #0
 8000848:	f7ff ffed 	bl	8000826 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <LoopForever+0x14>)
 800084e:	490c      	ldr	r1, [pc, #48]	; (8000880 <LoopForever+0x18>)
 8000850:	2300      	movs	r3, #0
 8000852:	f7ff ffee 	bl	8000832 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <LoopForever+0x1c>)
 8000858:	490b      	ldr	r1, [pc, #44]	; (8000888 <LoopForever+0x20>)
 800085a:	2300      	movs	r3, #0
 800085c:	f7ff ffe9 	bl	8000832 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000860:	f008 ff74 	bl	800974c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000864:	f7ff fd90 	bl	8000388 <main>

08000868 <LoopForever>:

LoopForever:
  b LoopForever
 8000868:	e7fe      	b.n	8000868 <LoopForever>
 800086a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800086c:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8000870:	20000004 	.word	0x20000004
 8000874:	20000188 	.word	0x20000188
 8000878:	080098b8 	.word	0x080098b8
  INIT_BSS _sbss, _ebss
 800087c:	20000188 	.word	0x20000188
 8000880:	20001bfc 	.word	0x20001bfc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000884:	20030000 	.word	0x20030000
 8000888:	20030000 	.word	0x20030000

0800088c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_Init+0x3c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_Init+0x3c>)
 80008a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 f96c 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 f80f 	bl	80008d0 <HAL_InitTick>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	e001      	b.n	80008c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008be:	f7ff ff05 	bl	80006cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	58004000 	.word	0x58004000

080008d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_InitTick+0x6c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d024      	beq.n	800092e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008e4:	f003 f906 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_InitTick+0x6c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f974 	bl	8000bea <HAL_SYSTICK_Config>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10f      	bne.n	8000928 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b0f      	cmp	r3, #15
 800090c:	d809      	bhi.n	8000922 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090e:	2200      	movs	r2, #0
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	f04f 30ff 	mov.w	r0, #4294967295
 8000916:	f000 f940 	bl	8000b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <HAL_InitTick+0x70>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e007      	b.n	8000932 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	e004      	b.n	8000932 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e001      	b.n	8000932 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000000c 	.word	0x2000000c
 8000940:	20000008 	.word	0x20000008

08000944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x20>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_IncTick+0x24>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	2000000c 	.word	0x2000000c
 8000968:	20000434 	.word	0x20000434

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000434 	.word	0x20000434

08000984 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTickPrio+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff ffe2 	bl	800096c <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_Delay+0x44>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffd2 	bl	800096c <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
    {
    }
  }
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000000c 	.word	0x2000000c

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <__NVIC_EnableIRQ+0x38>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff8e 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff29 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff40 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff90 	bl	8000ad8 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5f 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff33 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffa4 	bl	8000b40 <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e146      	b.n	8000ea2 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8138 	beq.w	8000e9c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 0201 	and.w	r2, r3, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d017      	beq.n	8000ce2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d123      	bne.n	8000d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	6939      	ldr	r1, [r7, #16]
 8000d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0203 	and.w	r2, r3, #3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 8092 	beq.w	8000e9c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d78:	4a51      	ldr	r2, [pc, #324]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000da2:	d013      	beq.n	8000dcc <HAL_GPIO_Init+0x1c8>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d00d      	beq.n	8000dc8 <HAL_GPIO_Init+0x1c4>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a46      	ldr	r2, [pc, #280]	; (8000ec8 <HAL_GPIO_Init+0x2c4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d007      	beq.n	8000dc4 <HAL_GPIO_Init+0x1c0>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <HAL_GPIO_Init+0x2c8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_GPIO_Init+0x1bc>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x1ca>
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	e004      	b.n	8000dce <HAL_GPIO_Init+0x1ca>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x1ca>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_Init+0x1ca>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	f002 0203 	and.w	r2, r2, #3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dde:	4938      	ldr	r1, [pc, #224]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dec:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e10:	4a2f      	ldr	r2, [pc, #188]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e3a:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e66:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f47f aeb1 	bne.w	8000c14 <HAL_GPIO_Init+0x10>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	48001000 	.word	0x48001000
 8000ed0:	58000800 	.word	0x58000800

08000ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee4:	787b      	ldrb	r3, [r7, #1]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef0:	e002      	b.n	8000ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	b08b      	sub	sp, #44	; 0x2c
 8000f08:	af06      	add	r7, sp, #24
 8000f0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e0d7      	b.n	80010c6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f008 f8e4 	bl	80090f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fa06 	bl	800534e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e04c      	b.n	8000fe2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3301      	adds	r3, #1
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	b298      	uxth	r0, r3
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	440b      	add	r3, r1
 8000f84:	3336      	adds	r3, #54	; 0x36
 8000f86:	4602      	mov	r2, r0
 8000f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3303      	adds	r3, #3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3338      	adds	r3, #56	; 0x38
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	333c      	adds	r3, #60	; 0x3c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3340      	adds	r3, #64	; 0x40
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3ad      	bcc.n	8000f48 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e044      	b.n	800107c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	3301      	adds	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d3b5      	bcc.n	8000ff2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	687e      	ldr	r6, [r7, #4]
 800108e:	466d      	mov	r5, sp
 8001090:	f106 0410 	add.w	r4, r6, #16
 8001094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	602b      	str	r3, [r5, #0]
 800109c:	1d33      	adds	r3, r6, #4
 800109e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f004 f96f 	bl	8005384 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d102      	bne.n	80010c4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 fc29 	bl	8002916 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_PCD_Start+0x16>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e012      	b.n	800110a <HAL_PCD_Start+0x3c>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 f915 	bl	8005320 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 f8ca 	bl	8007294 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f006 f8cf 	bl	80072c2 <USB_ReadInterrupts>
 8001124:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fb26 	bl	8001782 <PCD_EP_ISR_Handler>

    return;
 8001136:	e110      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113e:	2b00      	cmp	r3, #0
 8001140:	d013      	beq.n	800116a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001154:	b292      	uxth	r2, r2
 8001156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f008 f87f 	bl	800925e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001160:	2100      	movs	r1, #0
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f8fc 	bl	8001360 <HAL_PCD_SetAddress>

    return;
 8001168:	e0f7      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00c      	beq.n	800118e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800117c:	b29a      	uxth	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001186:	b292      	uxth	r2, r2
 8001188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800118c:	e0e5      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011aa:	b292      	uxth	r2, r2
 80011ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011b0:	e0d3      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d034      	beq.n	8001226 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	b292      	uxth	r2, r2
 80011d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0208 	bic.w	r2, r2, #8
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011fe:	2100      	movs	r1, #0
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f008 fa23 	bl	800964c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f008 f862 	bl	80092d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001214:	b29a      	uxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800121e:	b292      	uxth	r2, r2
 8001220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001224:	e099      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800122c:	2b00      	cmp	r3, #0
 800122e:	d027      	beq.n	8001280 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0208 	orr.w	r2, r2, #8
 8001242:	b292      	uxth	r2, r2
 8001244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800125a:	b292      	uxth	r2, r2
 800125c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0204 	orr.w	r2, r2, #4
 8001272:	b292      	uxth	r2, r2
 8001274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f008 f80f 	bl	800929c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800127e:	e06c      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	2b00      	cmp	r3, #0
 8001288:	d040      	beq.n	800130c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800129c:	b292      	uxth	r2, r2
 800129e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d12b      	bne.n	8001304 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0204 	orr.w	r2, r2, #4
 80012be:	b292      	uxth	r2, r2
 80012c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0208 	orr.w	r2, r2, #8
 80012d6:	b292      	uxth	r2, r2
 80012d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012fa:	2101      	movs	r1, #1
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f008 f9a5 	bl	800964c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001302:	e02a      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f007 ffc9 	bl	800929c <HAL_PCD_SuspendCallback>
    return;
 800130a:	e026      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00f      	beq.n	8001336 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001328:	b292      	uxth	r2, r2
 800132a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f007 ff87 	bl	8009242 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001334:	e011      	b.n	800135a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001348:	b29a      	uxth	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001352:	b292      	uxth	r2, r2
 8001354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001358:	bf00      	nop
  }
}
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_PCD_SetAddress+0x1a>
 8001376:	2302      	movs	r3, #2
 8001378:	e013      	b.n	80013a2 <HAL_PCD_SetAddress+0x42>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	78fa      	ldrb	r2, [r7, #3]
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f005 ff6a 	bl	800726c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	4608      	mov	r0, r1
 80013b4:	4611      	mov	r1, r2
 80013b6:	461a      	mov	r2, r3
 80013b8:	4603      	mov	r3, r0
 80013ba:	70fb      	strb	r3, [r7, #3]
 80013bc:	460b      	mov	r3, r1
 80013be:	803b      	strh	r3, [r7, #0]
 80013c0:	4613      	mov	r3, r2
 80013c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da0e      	bge.n	80013ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	705a      	strb	r2, [r3, #1]
 80013ec:	e00e      	b.n	800140c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	f003 0207 	and.w	r2, r3, #7
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	b2da      	uxtb	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001418:	883a      	ldrh	r2, [r7, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	78ba      	ldrb	r2, [r7, #2]
 8001422:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	785b      	ldrb	r3, [r3, #1]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b29a      	uxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001436:	78bb      	ldrb	r3, [r7, #2]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d102      	bne.n	8001442 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_PCD_EP_Open+0xa6>
 800144c:	2302      	movs	r3, #2
 800144e:	e00e      	b.n	800146e <HAL_PCD_EP_Open+0xc4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 ffb2 	bl	80053c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800146c:	7afb      	ldrb	r3, [r7, #11]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	da0e      	bge.n	80014a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	705a      	strb	r2, [r3, #1]
 80014a6:	e00e      	b.n	80014c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f003 0207 	and.w	r2, r3, #7
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_PCD_EP_Close+0x6a>
 80014dc:	2302      	movs	r3, #2
 80014de:	e00e      	b.n	80014fe <HAL_PCD_EP_Close+0x88>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68f9      	ldr	r1, [r7, #12]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 fafe 	bl	8005af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	460b      	mov	r3, r1
 8001514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	f003 0207 	and.w	r2, r3, #7
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2200      	movs	r2, #0
 8001544:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	b2da      	uxtb	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	2b00      	cmp	r3, #0
 800155a:	d106      	bne.n	800156a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6979      	ldr	r1, [r7, #20]
 8001562:	4618      	mov	r0, r3
 8001564:	f004 fcb1 	bl	8005eca <USB_EPStartXfer>
 8001568:	e005      	b.n	8001576 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6979      	ldr	r1, [r7, #20]
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fcaa 	bl	8005eca <USB_EPStartXfer>
  }

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	460b      	mov	r3, r1
 80015be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2201      	movs	r2, #1
 80015fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	b2da      	uxtb	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001608:	7afb      	ldrb	r3, [r7, #11]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6979      	ldr	r1, [r7, #20]
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fc56 	bl	8005eca <USB_EPStartXfer>
 800161e:	e005      	b.n	800162c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6979      	ldr	r1, [r7, #20]
 8001626:	4618      	mov	r0, r3
 8001628:	f004 fc4f 	bl	8005eca <USB_EPStartXfer>
  }

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0207 	and.w	r2, r3, #7
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d901      	bls.n	8001654 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e03e      	b.n	80016d2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001658:	2b00      	cmp	r3, #0
 800165a:	da0e      	bge.n	800167a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	705a      	strb	r2, [r3, #1]
 8001678:	e00c      	b.n	8001694 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2201      	movs	r2, #1
 8001698:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_PCD_EP_SetStall+0x7e>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e00e      	b.n	80016d2 <HAL_PCD_EP_SetStall+0x9c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f005 fcd3 	bl	800706e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	f003 020f 	and.w	r2, r3, #15
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d901      	bls.n	80016f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e040      	b.n	800177a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da0e      	bge.n	800171e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	705a      	strb	r2, [r3, #1]
 800171c:	e00e      	b.n	800173c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	f003 0207 	and.w	r2, r3, #7
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	b2da      	uxtb	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_PCD_EP_ClrStall+0x82>
 8001758:	2302      	movs	r3, #2
 800175a:	e00e      	b.n	800177a <HAL_PCD_EP_ClrStall+0xa0>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	4618      	mov	r0, r3
 800176c:	f005 fcd0 	bl	8007110 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b096      	sub	sp, #88	; 0x58
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800178a:	e39c      	b.n	8001ec6 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001794:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001798:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80017a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 815e 	bne.w	8001a6c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d150      	bne.n	800185e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017cc:	81fb      	strh	r3, [r7, #14]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017dc:	b29b      	uxth	r3, r3
 80017de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3328      	adds	r3, #40	; 0x28
 80017e4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800180a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800180c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800180e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	441a      	add	r2, r3
 8001818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800181a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800181c:	2100      	movs	r1, #0
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f007 fcf5 	bl	800920e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 834a 	beq.w	8001ec6 <PCD_EP_ISR_Handler+0x744>
 8001832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 8345 	bne.w	8001ec6 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001848:	b2da      	uxtb	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b292      	uxth	r2, r2
 8001850:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800185c:	e333      	b.n	8001ec6 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001864:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001870:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001878:	2b00      	cmp	r3, #0
 800187a:	d032      	beq.n	80018e2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001884:	b29b      	uxth	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4413      	add	r3, r2
 8001896:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80018ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f005 fd55 	bl	8007366 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018c8:	4013      	ands	r3, r2
 80018ca:	823b      	strh	r3, [r7, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	8a3a      	ldrh	r2, [r7, #16]
 80018d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018d6:	b292      	uxth	r2, r2
 80018d8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f007 fc6a 	bl	80091b4 <HAL_PCD_SetupStageCallback>
 80018e0:	e2f1      	b.n	8001ec6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018e2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f280 82ed 	bge.w	8001ec6 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018f8:	4013      	ands	r3, r2
 80018fa:	83fb      	strh	r3, [r7, #30]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	8bfa      	ldrh	r2, [r7, #30]
 8001902:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001906:	b292      	uxth	r2, r2
 8001908:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001912:	b29b      	uxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	4413      	add	r3, r2
 8001924:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800192e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001930:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d019      	beq.n	800196e <PCD_EP_ISR_Handler+0x1ec>
 800193a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d015      	beq.n	800196e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001948:	6959      	ldr	r1, [r3, #20]
 800194a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800194e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001950:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001952:	b29b      	uxth	r3, r3
 8001954:	f005 fd07 	bl	8007366 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	441a      	add	r2, r3
 8001962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001964:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001966:	2100      	movs	r1, #0
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f007 fc35 	bl	80091d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 82a3 	bne.w	8001ec6 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4413      	add	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b3e      	cmp	r3, #62	; 0x3e
 80019a6:	d918      	bls.n	80019da <PCD_EP_ISR_Handler+0x258>
 80019a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	647b      	str	r3, [r7, #68]	; 0x44
 80019b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <PCD_EP_ISR_Handler+0x240>
 80019bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019be:	3b01      	subs	r3, #1
 80019c0:	647b      	str	r3, [r7, #68]	; 0x44
 80019c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	801a      	strh	r2, [r3, #0]
 80019d8:	e029      	b.n	8001a2e <PCD_EP_ISR_Handler+0x2ac>
 80019da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d112      	bne.n	8001a08 <PCD_EP_ISR_Handler+0x286>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	e012      	b.n	8001a2e <PCD_EP_ISR_Handler+0x2ac>
 8001a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <PCD_EP_ISR_Handler+0x2a0>
 8001a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a1e:	3301      	adds	r3, #1
 8001a20:	647b      	str	r3, [r7, #68]	; 0x44
 8001a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	029b      	lsls	r3, r3, #10
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3e:	827b      	strh	r3, [r7, #18]
 8001a40:	8a7b      	ldrh	r3, [r7, #18]
 8001a42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a46:	827b      	strh	r3, [r7, #18]
 8001a48:	8a7b      	ldrh	r3, [r7, #18]
 8001a4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a4e:	827b      	strh	r3, [r7, #18]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	8a7b      	ldrh	r3, [r7, #18]
 8001a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	8013      	strh	r3, [r2, #0]
 8001a6a:	e22c      	b.n	8001ec6 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a80:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f280 80f6 	bge.w	8001c76 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001ab8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001abc:	b292      	uxth	r2, r2
 8001abe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ac0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad8:	7b1b      	ldrb	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d123      	bne.n	8001b26 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001b06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 808e 	beq.w	8001c2c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b16:	6959      	ldr	r1, [r3, #20]
 8001b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1a:	88da      	ldrh	r2, [r3, #6]
 8001b1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b20:	f005 fc21 	bl	8007366 <USB_ReadPMA>
 8001b24:	e082      	b.n	8001c2c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b28:	78db      	ldrb	r3, [r3, #3]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d10a      	bne.n	8001b44 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b2e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b32:	461a      	mov	r2, r3
 8001b34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f9d3 	bl	8001ee2 <HAL_PCD_EP_DB_Receive>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b42:	e073      	b.n	8001c2c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	441a      	add	r2, r3
 8001b70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d022      	beq.n	8001be8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001bca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02c      	beq.n	8001c2c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd8:	6959      	ldr	r1, [r3, #20]
 8001bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bdc:	891a      	ldrh	r2, [r3, #8]
 8001bde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001be2:	f005 fbc0 	bl	8007366 <USB_ReadPMA>
 8001be6:	e021      	b.n	8001c2c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001c10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1e:	6959      	ldr	r1, [r3, #20]
 8001c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c22:	895a      	ldrh	r2, [r3, #10]
 8001c24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c28:	f005 fb9d 	bl	8007366 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c2e:	69da      	ldr	r2, [r3, #28]
 8001c30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c34:	441a      	add	r2, r3
 8001c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c42:	441a      	add	r2, r3
 8001c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c46:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <PCD_EP_ISR_Handler+0x4da>
 8001c50:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d206      	bcs.n	8001c6a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f007 fab8 	bl	80091d8 <HAL_PCD_DataOutStageCallback>
 8001c68:	e005      	b.n	8001c76 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 f92a 	bl	8005eca <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c76:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8121 	beq.w	8001ec6 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c84:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	441a      	add	r2, r3
 8001cc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd6:	78db      	ldrb	r3, [r3, #3]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	f000 80a2 	beq.w	8001e22 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8001cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce6:	7b1b      	ldrb	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8093 	beq.w	8001e14 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d046      	beq.n	8001d88 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cfc:	785b      	ldrb	r3, [r3, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d126      	bne.n	8001d50 <PCD_EP_ISR_Handler+0x5ce>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	4413      	add	r3, r2
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	00da      	lsls	r2, r3, #3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	4413      	add	r3, r2
 8001d24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	801a      	strh	r2, [r3, #0]
 8001d4e:	e061      	b.n	8001e14 <PCD_EP_ISR_Handler+0x692>
 8001d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d15d      	bne.n	8001e14 <PCD_EP_ISR_Handler+0x692>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	4413      	add	r3, r2
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	00da      	lsls	r2, r3, #3
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	4413      	add	r3, r2
 8001d7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	2200      	movs	r2, #0
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	e045      	b.n	8001e14 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d90:	785b      	ldrb	r3, [r3, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d126      	bne.n	8001de4 <PCD_EP_ISR_Handler+0x662>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001daa:	4413      	add	r3, r2
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
 8001dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	00da      	lsls	r2, r3, #3
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	4413      	add	r3, r2
 8001db8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	e017      	b.n	8001e14 <PCD_EP_ISR_Handler+0x692>
 8001de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de6:	785b      	ldrb	r3, [r3, #1]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d113      	bne.n	8001e14 <PCD_EP_ISR_Handler+0x692>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfa:	4413      	add	r3, r2
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	00da      	lsls	r2, r3, #3
 8001e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e06:	4413      	add	r3, r2
 8001e08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e10:	2200      	movs	r2, #0
 8001e12:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f007 f9f7 	bl	800920e <HAL_PCD_DataInStageCallback>
 8001e20:	e051      	b.n	8001ec6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e22:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d144      	bne.n	8001eb8 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d907      	bls.n	8001e72 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8001e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6e:	619a      	str	r2, [r3, #24]
 8001e70:	e002      	b.n	8001e78 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f007 f9c1 	bl	800920e <HAL_PCD_DataInStageCallback>
 8001e8c:	e01b      	b.n	8001ec6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e96:	441a      	add	r2, r3
 8001e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ea4:	441a      	add	r2, r3
 8001ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 f80a 	bl	8005eca <USB_EPStartXfer>
 8001eb6:	e006      	b.n	8001ec6 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001eb8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f917 	bl	80020f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f6ff ac5a 	blt.w	800178c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3758      	adds	r7, #88	; 0x58
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b088      	sub	sp, #32
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	4613      	mov	r3, r2
 8001eee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d07c      	beq.n	8001ff4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	8b7b      	ldrh	r3, [r7, #26]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d306      	bcc.n	8001f38 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	8b7b      	ldrh	r3, [r7, #26]
 8001f30:	1ad2      	subs	r2, r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	619a      	str	r2, [r3, #24]
 8001f36:	e002      	b.n	8001f3e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d123      	bne.n	8001f8e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f60:	833b      	strh	r3, [r7, #24]
 8001f62:	8b3b      	ldrh	r3, [r7, #24]
 8001f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f68:	833b      	strh	r3, [r7, #24]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	441a      	add	r2, r3
 8001f78:	8b3b      	ldrh	r3, [r7, #24]
 8001f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01f      	beq.n	8001fd8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	82fb      	strh	r3, [r7, #22]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	441a      	add	r2, r3
 8001fc2:	8afb      	ldrh	r3, [r7, #22]
 8001fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fd8:	8b7b      	ldrh	r3, [r7, #26]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8085 	beq.w	80020ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	6959      	ldr	r1, [r3, #20]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	891a      	ldrh	r2, [r3, #8]
 8001fec:	8b7b      	ldrh	r3, [r7, #26]
 8001fee:	f005 f9ba 	bl	8007366 <USB_ReadPMA>
 8001ff2:	e07a      	b.n	80020ea <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	4413      	add	r3, r2
 800200e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002018:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	8b7b      	ldrh	r3, [r7, #26]
 8002020:	429a      	cmp	r2, r3
 8002022:	d306      	bcc.n	8002032 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	8b7b      	ldrh	r3, [r7, #26]
 800202a:	1ad2      	subs	r2, r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	619a      	str	r2, [r3, #24]
 8002030:	e002      	b.n	8002038 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d123      	bne.n	8002088 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	83fb      	strh	r3, [r7, #30]
 800205c:	8bfb      	ldrh	r3, [r7, #30]
 800205e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002062:	83fb      	strh	r3, [r7, #30]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	441a      	add	r2, r3
 8002072:	8bfb      	ldrh	r3, [r7, #30]
 8002074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800207c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002084:	b29b      	uxth	r3, r3
 8002086:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11f      	bne.n	80020d2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ac:	83bb      	strh	r3, [r7, #28]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	441a      	add	r2, r3
 80020bc:	8bbb      	ldrh	r3, [r7, #28]
 80020be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020d2:	8b7b      	ldrh	r3, [r7, #26]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	6959      	ldr	r1, [r3, #20]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	895a      	ldrh	r2, [r3, #10]
 80020e4:	8b7b      	ldrh	r3, [r7, #26]
 80020e6:	f005 f93e 	bl	8007366 <USB_ReadPMA>
    }
  }

  return count;
 80020ea:	8b7b      	ldrh	r3, [r7, #26]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0a2      	sub	sp, #136	; 0x88
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 81c5 	beq.w	8002498 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002116:	b29b      	uxth	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4413      	add	r3, r2
 8002128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002132:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800213e:	429a      	cmp	r2, r3
 8002140:	d907      	bls.n	8002152 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	619a      	str	r2, [r3, #24]
 8002150:	e002      	b.n	8002158 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 80b9 	bne.w	80022d4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d126      	bne.n	80021b8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	4413      	add	r3, r2
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	00da      	lsls	r2, r3, #3
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	4413      	add	r3, r2
 800218c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800219c:	b29a      	uxth	r2, r3
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	e01a      	b.n	80021ee <HAL_PCD_EP_DB_Transmit+0xfa>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d116      	bne.n	80021ee <HAL_PCD_EP_DB_Transmit+0xfa>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	4413      	add	r3, r2
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	00da      	lsls	r2, r3, #3
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	4413      	add	r3, r2
 80021e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ea:	2200      	movs	r2, #0
 80021ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d126      	bne.n	800224a <HAL_PCD_EP_DB_Transmit+0x156>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	00da      	lsls	r2, r3, #3
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4413      	add	r3, r2
 800221e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800222e:	b29a      	uxth	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800223e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002242:	b29a      	uxth	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	e017      	b.n	800227a <HAL_PCD_EP_DB_Transmit+0x186>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d113      	bne.n	800227a <HAL_PCD_EP_DB_Transmit+0x186>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	4413      	add	r3, r2
 8002262:	623b      	str	r3, [r7, #32]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	00da      	lsls	r2, r3, #3
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	4413      	add	r3, r2
 800226e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2200      	movs	r2, #0
 8002278:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f006 ffc4 	bl	800920e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 82d2 	beq.w	8002836 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ac:	827b      	strh	r3, [r7, #18]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	441a      	add	r2, r3
 80022bc:	8a7b      	ldrh	r3, [r7, #18]
 80022be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	8013      	strh	r3, [r2, #0]
 80022d2:	e2b0      	b.n	8002836 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d021      	beq.n	8002322 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	441a      	add	r2, r3
 800230a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800230e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800231a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231e:	b29b      	uxth	r3, r3
 8002320:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002328:	2b01      	cmp	r3, #1
 800232a:	f040 8284 	bne.w	8002836 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002336:	441a      	add	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002344:	441a      	add	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6a1a      	ldr	r2, [r3, #32]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	429a      	cmp	r2, r3
 8002354:	d309      	bcc.n	800236a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002362:	1ad2      	subs	r2, r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	e015      	b.n	8002396 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d107      	bne.n	8002382 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002376:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002380:	e009      	b.n	8002396 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d155      	bne.n	800244a <HAL_PCD_EP_DB_Transmit+0x356>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	4413      	add	r3, r2
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	00da      	lsls	r2, r3, #3
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	4413      	add	r3, r2
 80023c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
 80023c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c8:	2b3e      	cmp	r3, #62	; 0x3e
 80023ca:	d916      	bls.n	80023fa <HAL_PCD_EP_DB_Transmit+0x306>
 80023cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80023dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023de:	3b01      	subs	r3, #1
 80023e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	801a      	strh	r2, [r3, #0]
 80023f8:	e043      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x38e>
 80023fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d112      	bne.n	8002426 <HAL_PCD_EP_DB_Transmit+0x332>
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800240a:	b29a      	uxth	r2, r3
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	801a      	strh	r2, [r3, #0]
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800241e:	b29a      	uxth	r2, r3
 8002420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	e02d      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
 800242c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_PCD_EP_DB_Transmit+0x348>
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	3301      	adds	r3, #1
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
 800243c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243e:	b29b      	uxth	r3, r3
 8002440:	029b      	lsls	r3, r3, #10
 8002442:	b29a      	uxth	r2, r3
 8002444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002446:	801a      	strh	r2, [r3, #0]
 8002448:	e01b      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x38e>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d117      	bne.n	8002482 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	643b      	str	r3, [r7, #64]	; 0x40
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002460:	b29b      	uxth	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002466:	4413      	add	r3, r2
 8002468:	643b      	str	r3, [r7, #64]	; 0x40
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	00da      	lsls	r2, r3, #3
 8002470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002472:	4413      	add	r3, r2
 8002474:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800247c:	b29a      	uxth	r2, r3
 800247e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002480:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	6959      	ldr	r1, [r3, #20]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	891a      	ldrh	r2, [r3, #8]
 800248e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	f004 ff26 	bl	80072e2 <USB_WritePMA>
 8002496:	e1ce      	b.n	8002836 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d307      	bcc.n	80024dc <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d4:	1ad2      	subs	r2, r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	619a      	str	r2, [r3, #24]
 80024da:	e002      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 80c4 	bne.w	8002674 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d126      	bne.n	8002542 <HAL_PCD_EP_DB_Transmit+0x44e>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002508:	4413      	add	r3, r2
 800250a:	66bb      	str	r3, [r7, #104]	; 0x68
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	00da      	lsls	r2, r3, #3
 8002512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002514:	4413      	add	r3, r2
 8002516:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800251a:	667b      	str	r3, [r7, #100]	; 0x64
 800251c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002526:	b29a      	uxth	r2, r3
 8002528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253a:	b29a      	uxth	r2, r3
 800253c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	e01a      	b.n	8002578 <HAL_PCD_EP_DB_Transmit+0x484>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d116      	bne.n	8002578 <HAL_PCD_EP_DB_Transmit+0x484>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	673b      	str	r3, [r7, #112]	; 0x70
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800255e:	4413      	add	r3, r2
 8002560:	673b      	str	r3, [r7, #112]	; 0x70
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	00da      	lsls	r2, r3, #3
 8002568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800256a:	4413      	add	r3, r2
 800256c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002574:	2200      	movs	r2, #0
 8002576:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d12f      	bne.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800259e:	4413      	add	r3, r2
 80025a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	00da      	lsls	r2, r3, #3
 80025aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ae:	4413      	add	r3, r2
 80025b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29a      	uxth	r2, r3
 80025de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e2:	801a      	strh	r2, [r3, #0]
 80025e4:	e017      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x522>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	785b      	ldrb	r3, [r3, #1]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d113      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x522>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025fc:	4413      	add	r3, r2
 80025fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	00da      	lsls	r2, r3, #3
 8002606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002608:	4413      	add	r3, r2
 800260a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800260e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002612:	2200      	movs	r2, #0
 8002614:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f006 fdf6 	bl	800920e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8104 	bne.w	8002836 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002648:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	441a      	add	r2, r3
 800265a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800265e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	b29b      	uxth	r3, r3
 8002670:	8013      	strh	r3, [r2, #0]
 8002672:	e0e0      	b.n	8002836 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d121      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	441a      	add	r2, r3
 80026aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026be:	b29b      	uxth	r3, r3
 80026c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	f040 80b4 	bne.w	8002836 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d6:	441a      	add	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e4:	441a      	add	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d309      	bcc.n	800270a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002702:	1ad2      	subs	r2, r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	621a      	str	r2, [r3, #32]
 8002708:	e015      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002716:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002720:	e009      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	663b      	str	r3, [r7, #96]	; 0x60
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	785b      	ldrb	r3, [r3, #1]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d155      	bne.n	80027f0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	65bb      	str	r3, [r7, #88]	; 0x58
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002758:	4413      	add	r3, r2
 800275a:	65bb      	str	r3, [r7, #88]	; 0x58
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	00da      	lsls	r2, r3, #3
 8002762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002764:	4413      	add	r3, r2
 8002766:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800276a:	657b      	str	r3, [r7, #84]	; 0x54
 800276c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276e:	2b3e      	cmp	r3, #62	; 0x3e
 8002770:	d916      	bls.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	677b      	str	r3, [r7, #116]	; 0x74
 8002778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x694>
 8002782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002784:	3b01      	subs	r3, #1
 8002786:	677b      	str	r3, [r7, #116]	; 0x74
 8002788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278a:	b29b      	uxth	r3, r3
 800278c:	029b      	lsls	r3, r3, #10
 800278e:	b29b      	uxth	r3, r3
 8002790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002798:	b29a      	uxth	r2, r3
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	e040      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x72e>
 80027a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d112      	bne.n	80027cc <HAL_PCD_EP_DB_Transmit+0x6d8>
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	e02a      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x72e>
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	677b      	str	r3, [r7, #116]	; 0x74
 80027d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80027dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027de:	3301      	adds	r3, #1
 80027e0:	677b      	str	r3, [r7, #116]	; 0x74
 80027e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	e018      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x72e>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d114      	bne.n	8002822 <HAL_PCD_EP_DB_Transmit+0x72e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002800:	b29b      	uxth	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002806:	4413      	add	r3, r2
 8002808:	663b      	str	r3, [r7, #96]	; 0x60
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	00da      	lsls	r2, r3, #3
 8002810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002812:	4413      	add	r3, r2
 8002814:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800281a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281c:	b29a      	uxth	r2, r3
 800281e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002820:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6959      	ldr	r1, [r3, #20]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	895a      	ldrh	r2, [r3, #10]
 800282e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	f004 fd56 	bl	80072e2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002850:	823b      	strh	r3, [r7, #16]
 8002852:	8a3b      	ldrh	r3, [r7, #16]
 8002854:	f083 0310 	eor.w	r3, r3, #16
 8002858:	823b      	strh	r3, [r7, #16]
 800285a:	8a3b      	ldrh	r3, [r7, #16]
 800285c:	f083 0320 	eor.w	r3, r3, #32
 8002860:	823b      	strh	r3, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	441a      	add	r2, r3
 8002870:	8a3b      	ldrh	r3, [r7, #16]
 8002872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800287a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3788      	adds	r7, #136	; 0x88
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	817b      	strh	r3, [r7, #10]
 800289e:	4613      	mov	r3, r2
 80028a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028a2:	897b      	ldrh	r3, [r7, #10]
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4413      	add	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e009      	b.n	80028da <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028c6:	897a      	ldrh	r2, [r7, #10]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028da:	893b      	ldrh	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2200      	movs	r2, #0
 80028e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	80da      	strh	r2, [r3, #6]
 80028ee:	e00b      	b.n	8002908 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2201      	movs	r2, #1
 80028f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	b29a      	uxth	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800293a:	b29b      	uxth	r3, r3
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800294e:	b29b      	uxth	r3, r3
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	58000400 	.word	0x58000400

0800298c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	58000400 	.word	0x58000400

080029a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b6:	6053      	str	r3, [r2, #4]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	58000400 	.word	0x58000400

080029c8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029da:	d101      	bne.n	80029e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a3a:	d101      	bne.n	8002a40 <LL_RCC_HSE_IsReady+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_RCC_HSE_IsReady+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d101      	bne.n	8002aa0 <LL_RCC_HSI_IsReady+0x18>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <LL_RCC_HSI_IsReady+0x1a>
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d101      	bne.n	8002b32 <LL_RCC_HSI48_IsReady+0x18>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_RCC_HSI48_IsReady+0x1a>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d101      	bne.n	8002bde <LL_RCC_LSE_IsReady+0x18>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <LL_RCC_LSE_IsReady+0x1a>
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d101      	bne.n	8002c46 <LL_RCC_LSI1_IsReady+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_RCC_LSI1_IsReady+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d101      	bne.n	8002cae <LL_RCC_LSI2_IsReady+0x18>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_RCC_LSI2_IsReady+0x1a>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	6013      	str	r3, [r2, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d101      	bne.n	8002d3a <LL_RCC_MSI_IsReady+0x16>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_RCC_MSI_IsReady+0x18>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2bb0      	cmp	r3, #176	; 0xb0
 8002d84:	d901      	bls.n	8002d8a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002d86:	23b0      	movs	r3, #176	; 0xb0
 8002d88:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002d8a:	687b      	ldr	r3, [r7, #4]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 0203 	bic.w	r2, r3, #3
 8002dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f38:	6013      	str	r3, [r2, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f56:	d101      	bne.n	8002f5c <LL_RCC_PLL_IsReady+0x18>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <LL_RCC_PLL_IsReady+0x1a>
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d101      	bne.n	8002fe2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003002:	d101      	bne.n	8003008 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003028:	d101      	bne.n	800302e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800304c:	d101      	bne.n	8003052 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003070:	d101      	bne.n	8003076 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b08d      	sub	sp, #52	; 0x34
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e37e      	b.n	8003794 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8092 	beq.w	80031c8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a4:	f7ff fea1 	bl	8002dea <LL_RCC_GetSysClkSource>
 80030a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030aa:	f7ff ff82 	bl	8002fb2 <LL_RCC_PLL_GetMainSource>
 80030ae:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3e>
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d14c      	bne.n	8003156 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d149      	bne.n	8003156 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030c2:	f7ff fe2f 	bl	8002d24 <LL_RCC_MSI_IsReady>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_OscConfig+0x54>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e35d      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80030dc:	f7ff fe47 	bl	8002d6e <LL_RCC_MSI_GetRange>
 80030e0:	4603      	mov	r3, r0
 80030e2:	429c      	cmp	r4, r3
 80030e4:	d914      	bls.n	8003110 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fd16 	bl	8003b1c <RCC_SetFlashLatencyFromMSIRange>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e34c      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fe21 	bl	8002d46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fe45 	bl	8002d98 <LL_RCC_MSI_SetCalibTrimming>
 800310e:	e013      	b.n	8003138 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fe16 	bl	8002d46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fe3a 	bl	8002d98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fcf7 	bl	8003b1c <RCC_SetFlashLatencyFromMSIRange>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e32d      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003138:	f000 fcdc 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 800313c:	4603      	mov	r3, r0
 800313e:	4ab3      	ldr	r2, [pc, #716]	; (800340c <HAL_RCC_OscConfig+0x388>)
 8003140:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003142:	4bb3      	ldr	r3, [pc, #716]	; (8003410 <HAL_RCC_OscConfig+0x38c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fbc2 	bl	80008d0 <HAL_InitTick>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d039      	beq.n	80031c6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e31e      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01e      	beq.n	800319c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800315e:	f7ff fdc3 	bl	8002ce8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003162:	f7fd fc03 	bl	800096c <HAL_GetTick>
 8003166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800316a:	f7fd fbff 	bl	800096c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e30b      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800317c:	f7ff fdd2 	bl	8002d24 <LL_RCC_MSI_IsReady>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f1      	beq.n	800316a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fddb 	bl	8002d46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fdff 	bl	8002d98 <LL_RCC_MSI_SetCalibTrimming>
 800319a:	e015      	b.n	80031c8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800319c:	f7ff fdb3 	bl	8002d06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031a0:	f7fd fbe4 	bl	800096c <HAL_GetTick>
 80031a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031a8:	f7fd fbe0 	bl	800096c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e2ec      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031ba:	f7ff fdb3 	bl	8002d24 <LL_RCC_MSI_IsReady>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f1      	bne.n	80031a8 <HAL_RCC_OscConfig+0x124>
 80031c4:	e000      	b.n	80031c8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031c6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d04e      	beq.n	8003272 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d4:	f7ff fe09 	bl	8002dea <LL_RCC_GetSysClkSource>
 80031d8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031da:	f7ff feea 	bl	8002fb2 <LL_RCC_PLL_GetMainSource>
 80031de:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x16e>
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	d10d      	bne.n	8003208 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d10a      	bne.n	8003208 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	f7ff fc19 	bl	8002a28 <LL_RCC_HSE_IsReady>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d039      	beq.n	8003270 <HAL_RCC_OscConfig+0x1ec>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d135      	bne.n	8003270 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e2c5      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d102      	bne.n	8003218 <HAL_RCC_OscConfig+0x194>
 8003212:	f7ff fbeb 	bl	80029ec <LL_RCC_HSE_Enable>
 8003216:	e001      	b.n	800321c <HAL_RCC_OscConfig+0x198>
 8003218:	f7ff fbf7 	bl	8002a0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d012      	beq.n	800324a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fd fba2 	bl	800096c <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7fd fb9e 	bl	800096c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e2aa      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800323e:	f7ff fbf3 	bl	8002a28 <LL_RCC_HSE_IsReady>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f1      	beq.n	800322c <HAL_RCC_OscConfig+0x1a8>
 8003248:	e013      	b.n	8003272 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fd fb8f 	bl	800096c <HAL_GetTick>
 800324e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003252:	f7fd fb8b 	bl	800096c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b64      	cmp	r3, #100	; 0x64
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e297      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003264:	f7ff fbe0 	bl	8002a28 <LL_RCC_HSE_IsReady>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f1      	bne.n	8003252 <HAL_RCC_OscConfig+0x1ce>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d051      	beq.n	8003322 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327e:	f7ff fdb4 	bl	8002dea <LL_RCC_GetSysClkSource>
 8003282:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003284:	f7ff fe95 	bl	8002fb2 <LL_RCC_PLL_GetMainSource>
 8003288:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x218>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d113      	bne.n	80032be <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d110      	bne.n	80032be <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800329c:	f7ff fbf4 	bl	8002a88 <LL_RCC_HSI_IsReady>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x22e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e270      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fbf8 	bl	8002aac <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032bc:	e031      	b.n	8003322 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d019      	beq.n	80032fa <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c6:	f7ff fbc1 	bl	8002a4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fd fb4f 	bl	800096c <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fd fb4b 	bl	800096c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e257      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032e4:	f7ff fbd0 	bl	8002a88 <LL_RCC_HSI_IsReady>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f1      	beq.n	80032d2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fbda 	bl	8002aac <LL_RCC_HSI_SetCalibTrimming>
 80032f8:	e013      	b.n	8003322 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fa:	f7ff fbb6 	bl	8002a6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fd fb35 	bl	800096c <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003306:	f7fd fb31 	bl	800096c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e23d      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003318:	f7ff fbb6 	bl	8002a88 <LL_RCC_HSI_IsReady>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f1      	bne.n	8003306 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80a3 	beq.w	8003482 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d076      	beq.n	8003432 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d046      	beq.n	80033de <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003350:	f7ff fc6d 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d113      	bne.n	8003382 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800335a:	f7ff fc46 	bl	8002bea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800335e:	f7fd fb05 	bl	800096c <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003366:	f7fd fb01 	bl	800096c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e20d      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003378:	f7ff fc59 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f1      	beq.n	8003366 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003382:	f7ff fc66 	bl	8002c52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fd faf1 	bl	800096c <HAL_GetTick>
 800338a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800338e:	f7fd faed 	bl	800096c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b03      	cmp	r3, #3
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1f9      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80033a0:	f7ff fc79 	bl	8002c96 <LL_RCC_LSI2_IsReady>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f1      	beq.n	800338e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fc83 	bl	8002cba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80033b4:	f7ff fc2a 	bl	8002c0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fad8 	bl	800096c <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033c0:	f7fd fad4 	bl	800096c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e1e0      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033d2:	f7ff fc2c 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f1      	bne.n	80033c0 <HAL_RCC_OscConfig+0x33c>
 80033dc:	e051      	b.n	8003482 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033de:	f7ff fc04 	bl	8002bea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd fac3 	bl	800096c <HAL_GetTick>
 80033e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033ea:	f7fd fabf 	bl	800096c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1cb      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033fc:	f7ff fc17 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f1      	beq.n	80033ea <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003406:	f7ff fc35 	bl	8002c74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800340a:	e00c      	b.n	8003426 <HAL_RCC_OscConfig+0x3a2>
 800340c:	20000004 	.word	0x20000004
 8003410:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003414:	f7fd faaa 	bl	800096c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b03      	cmp	r3, #3
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1b6      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003426:	f7ff fc36 	bl	8002c96 <LL_RCC_LSI2_IsReady>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f1      	bne.n	8003414 <HAL_RCC_OscConfig+0x390>
 8003430:	e027      	b.n	8003482 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003432:	f7ff fc1f 	bl	8002c74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fd fa99 	bl	800096c <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800343e:	f7fd fa95 	bl	800096c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b03      	cmp	r3, #3
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e1a1      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003450:	f7ff fc21 	bl	8002c96 <LL_RCC_LSI2_IsReady>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f1      	bne.n	800343e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800345a:	f7ff fbd7 	bl	8002c0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7fd fa85 	bl	800096c <HAL_GetTick>
 8003462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003466:	f7fd fa81 	bl	800096c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e18d      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003478:	f7ff fbd9 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f1      	bne.n	8003466 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d05b      	beq.n	8003546 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348e:	4bb5      	ldr	r3, [pc, #724]	; (8003764 <HAL_RCC_OscConfig+0x6e0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d114      	bne.n	80034c4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800349a:	f7ff fa67 	bl	800296c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349e:	f7fd fa65 	bl	800096c <HAL_GetTick>
 80034a2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a6:	f7fd fa61 	bl	800096c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e16d      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b8:	4baa      	ldr	r3, [pc, #680]	; (8003764 <HAL_RCC_OscConfig+0x6e0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <HAL_RCC_OscConfig+0x44e>
 80034cc:	f7ff fb37 	bl	8002b3e <LL_RCC_LSE_Enable>
 80034d0:	e00c      	b.n	80034ec <HAL_RCC_OscConfig+0x468>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d104      	bne.n	80034e4 <HAL_RCC_OscConfig+0x460>
 80034da:	f7ff fb52 	bl	8002b82 <LL_RCC_LSE_EnableBypass>
 80034de:	f7ff fb2e 	bl	8002b3e <LL_RCC_LSE_Enable>
 80034e2:	e003      	b.n	80034ec <HAL_RCC_OscConfig+0x468>
 80034e4:	f7ff fb3c 	bl	8002b60 <LL_RCC_LSE_Disable>
 80034e8:	f7ff fb5c 	bl	8002ba4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d014      	beq.n	800351e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fa3a 	bl	800096c <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd fa36 	bl	800096c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e140      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003512:	f7ff fb58 	bl	8002bc6 <LL_RCC_LSE_IsReady>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ef      	beq.n	80034fc <HAL_RCC_OscConfig+0x478>
 800351c:	e013      	b.n	8003546 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fd fa25 	bl	800096c <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fd fa21 	bl	800096c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e12b      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800353c:	f7ff fb43 	bl	8002bc6 <LL_RCC_LSE_IsReady>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ef      	bne.n	8003526 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02c      	beq.n	80035ac <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d014      	beq.n	8003584 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800355a:	f7ff fabc 	bl	8002ad6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355e:	f7fd fa05 	bl	800096c <HAL_GetTick>
 8003562:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003566:	f7fd fa01 	bl	800096c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e10d      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003578:	f7ff facf 	bl	8002b1a <LL_RCC_HSI48_IsReady>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f1      	beq.n	8003566 <HAL_RCC_OscConfig+0x4e2>
 8003582:	e013      	b.n	80035ac <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003584:	f7ff fab8 	bl	8002af8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd f9f0 	bl	800096c <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003590:	f7fd f9ec 	bl	800096c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0f8      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80035a2:	f7ff faba 	bl	8002b1a <LL_RCC_HSI48_IsReady>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f1      	bne.n	8003590 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80ee 	beq.w	8003792 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b6:	f7ff fc18 	bl	8002dea <LL_RCC_GetSysClkSource>
 80035ba:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	f040 80af 	bne.w	800372c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0203 	and.w	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	429a      	cmp	r2, r3
 80035da:	d123      	bne.n	8003624 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11c      	bne.n	8003624 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d114      	bne.n	8003624 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d10d      	bne.n	8003624 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d05d      	beq.n	80036e0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d058      	beq.n	80036dc <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0ab      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800363c:	f7ff fc73 	bl	8002f26 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003640:	f7fd f994 	bl	800096c <HAL_GetTick>
 8003644:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fd f990 	bl	800096c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e09c      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ef      	bne.n	8003648 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <HAL_RCC_OscConfig+0x6e4>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003680:	0212      	lsls	r2, r2, #8
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003694:	430a      	orrs	r2, r1
 8003696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369a:	4313      	orrs	r3, r2
 800369c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800369e:	f7ff fc33 	bl	8002f08 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b2:	f7fd f95b 	bl	800096c <HAL_GetTick>
 80036b6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fd f957 	bl	800096c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e063      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0ef      	beq.n	80036ba <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036da:	e05a      	b.n	8003792 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e059      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d151      	bne.n	8003792 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036ee:	f7ff fc0b 	bl	8002f08 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003700:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003702:	f7fd f933 	bl	800096c <HAL_GetTick>
 8003706:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fd f92f 	bl	800096c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e03b      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ef      	beq.n	800370a <HAL_RCC_OscConfig+0x686>
 800372a:	e032      	b.n	8003792 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d02d      	beq.n	800378e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	f7ff fbf8 	bl	8002f26 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003740:	f023 0303 	bic.w	r3, r3, #3
 8003744:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003750:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003758:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd f907 	bl	800096c <HAL_GetTick>
 800375e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003760:	e00d      	b.n	800377e <HAL_RCC_OscConfig+0x6fa>
 8003762:	bf00      	nop
 8003764:	58000400 	.word	0x58000400
 8003768:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fd f8fe 	bl	800096c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ef      	bne.n	800376c <HAL_RCC_OscConfig+0x6e8>
 800378c:	e001      	b.n	8003792 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3734      	adds	r7, #52	; 0x34
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e12d      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b98      	ldr	r3, [pc, #608]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d91b      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b95      	ldr	r3, [pc, #596]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	4993      	ldr	r1, [pc, #588]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ce:	f7fd f8cd 	bl	800096c <HAL_GetTick>
 80037d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037d6:	f7fd f8c9 	bl	800096c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e111      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e8:	4b8a      	ldr	r3, [pc, #552]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d1ef      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fafb 	bl	8002e02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800380c:	f7fd f8ae 	bl	800096c <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003814:	f7fd f8aa 	bl	800096c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0f2      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003826:	f7ff fbd0 	bl	8002fca <LL_RCC_IsActiveFlag_HPRE>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f1      	beq.n	8003814 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d016      	beq.n	800386a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff faf2 	bl	8002e2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003846:	f7fd f891 	bl	800096c <HAL_GetTick>
 800384a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800384e:	f7fd f88d 	bl	800096c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0d5      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003860:	f7ff fbc5 	bl	8002fee <LL_RCC_IsActiveFlag_C2HPRE>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f1      	beq.n	800384e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff faeb 	bl	8002e56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003880:	f7fd f874 	bl	800096c <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003888:	f7fd f870 	bl	800096c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0b8      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800389a:	f7ff fbbb 	bl	8003014 <LL_RCC_IsActiveFlag_SHDHPRE>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f1      	beq.n	8003888 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d016      	beq.n	80038de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fae5 	bl	8002e84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038ba:	f7fd f857 	bl	800096c <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038c2:	f7fd f853 	bl	800096c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e09b      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038d4:	f7ff fbb1 	bl	800303a <LL_RCC_IsActiveFlag_PPRE1>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f1      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d017      	beq.n	800391a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fadb 	bl	8002eac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038f6:	f7fd f839 	bl	800096c <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038fe:	f7fd f835 	bl	800096c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e07d      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003910:	f7ff fba5 	bl	800305e <LL_RCC_IsActiveFlag_PPRE2>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f1      	beq.n	80038fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d043      	beq.n	80039ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d106      	bne.n	800393c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800392e:	f7ff f87b 	bl	8002a28 <LL_RCC_HSE_IsReady>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d11e      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e067      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d106      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003944:	f7ff fafe 	bl	8002f44 <LL_RCC_PLL_IsReady>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e05c      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800395a:	f7ff f9e3 	bl	8002d24 <LL_RCC_MSI_IsReady>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e051      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003968:	f7ff f88e 	bl	8002a88 <LL_RCC_HSI_IsReady>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e04a      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fa21 	bl	8002dc2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003980:	f7fc fff4 	bl	800096c <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	e00a      	b.n	800399e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003988:	f7fc fff0 	bl	800096c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e036      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	f7ff fa24 	bl	8002dea <LL_RCC_GetSysClkSource>
 80039a2:	4602      	mov	r2, r0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d1ec      	bne.n	8003988 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ae:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d21b      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039bc:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 0207 	bic.w	r2, r3, #7
 80039c4:	4913      	ldr	r1, [pc, #76]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fc ffce 	bl	800096c <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039d4:	f7fc ffca 	bl	800096c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e012      	b.n	8003a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x278>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1ef      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039f4:	f000 f87e 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <HAL_RCC_ClockConfig+0x27c>)
 80039fc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039fe:	f7fc ffc1 	bl	8000984 <HAL_GetTickPrio>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fc ff63 	bl	80008d0 <HAL_InitTick>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	58004000 	.word	0x58004000
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a22:	f7ff f9e2 	bl	8002dea <LL_RCC_GetSysClkSource>
 8003a26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a2e:	f7ff f99e 	bl	8002d6e <LL_RCC_MSI_GetRange>
 8003a32:	4603      	mov	r3, r0
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e04b      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a4a:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e045      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d10a      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a56:	f7fe ffb7 	bl	80029c8 <LL_RCC_HSE_IsEnabledDiv2>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a60:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e03a      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e037      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a6c:	f7ff faa1 	bl	8002fb2 <LL_RCC_PLL_GetMainSource>
 8003a70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d003      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x64>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x6a>
 8003a7e:	e00d      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a82:	60bb      	str	r3, [r7, #8]
        break;
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a86:	f7fe ff9f 	bl	80029c8 <LL_RCC_HSE_IsEnabledDiv2>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a90:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a92:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a94:	e00d      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a98:	60bb      	str	r3, [r7, #8]
        break;
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a9c:	f7ff f967 	bl	8002d6e <LL_RCC_MSI_GetRange>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	60bb      	str	r3, [r7, #8]
        break;
 8003ab0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003ab2:	f7ff fa59 	bl	8002f68 <LL_RCC_PLL_GetN>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	fb03 f402 	mul.w	r4, r3, r2
 8003abe:	f7ff fa6c 	bl	8002f9a <LL_RCC_PLL_GetDivider>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003acc:	f7ff fa59 	bl	8002f82 <LL_RCC_PLL_GetR>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	0f5b      	lsrs	r3, r3, #29
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003adc:	68fb      	ldr	r3, [r7, #12]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd90      	pop	{r4, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	08009870 	.word	0x08009870
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b598      	push	{r3, r4, r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003af8:	f7ff ff90 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8003afc:	4604      	mov	r4, r0
 8003afe:	f7ff f9e9 	bl	8002ed4 <LL_RCC_GetAHBPrescaler>
 8003b02:	4603      	mov	r3, r0
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a03      	ldr	r2, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x24>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd98      	pop	{r3, r4, r7, pc}
 8003b18:	08009830 	.word	0x08009830

08003b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2bb0      	cmp	r3, #176	; 0xb0
 8003b28:	d903      	bls.n	8003b32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e007      	b.n	8003b42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	4a11      	ldr	r2, [pc, #68]	; (8003b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b42:	f7ff f9d3 	bl	8002eec <LL_RCC_GetAHB4Prescaler>
 8003b46:	4603      	mov	r3, r0
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	0c9c      	lsrs	r4, r3, #18
 8003b66:	f7fe ff11 	bl	800298c <HAL_PWREx_GetVoltageRange>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 f80c 	bl	8003b8c <RCC_SetFlashLatency>
 8003b74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	08009870 	.word	0x08009870
 8003b84:	08009830 	.word	0x08009830
 8003b88:	431bde83 	.word	0x431bde83

08003b8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b093      	sub	sp, #76	; 0x4c
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b96:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <RCC_SetFlashLatency+0xf0>)
 8003b98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003ba2:	4a37      	ldr	r2, [pc, #220]	; (8003c80 <RCC_SetFlashLatency+0xf4>)
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003bae:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <RCC_SetFlashLatency+0xf8>)
 8003bb0:	f107 040c 	add.w	r4, r7, #12
 8003bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bba:	2300      	movs	r3, #0
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc4:	d11c      	bne.n	8003c00 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bca:	e015      	b.n	8003bf8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d808      	bhi.n	8003bf2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003be8:	4413      	add	r3, r2
 8003bea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003bf0:	e022      	b.n	8003c38 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d9e6      	bls.n	8003bcc <RCC_SetFlashLatency+0x40>
 8003bfe:	e01b      	b.n	8003c38 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c04:	e015      	b.n	8003c32 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c0e:	4413      	add	r3, r2
 8003c10:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d808      	bhi.n	8003c2c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c22:	4413      	add	r3, r2
 8003c24:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c2a:	e005      	b.n	8003c38 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2e:	3301      	adds	r3, #1
 8003c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d9e6      	bls.n	8003c06 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <RCC_SetFlashLatency+0xfc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 0207 	bic.w	r2, r3, #7
 8003c40:	4911      	ldr	r1, [pc, #68]	; (8003c88 <RCC_SetFlashLatency+0xfc>)
 8003c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c48:	f7fc fe90 	bl	800096c <HAL_GetTick>
 8003c4c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c4e:	e008      	b.n	8003c62 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c50:	f7fc fe8c 	bl	800096c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e007      	b.n	8003c72 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <RCC_SetFlashLatency+0xfc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1ef      	bne.n	8003c50 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	374c      	adds	r7, #76	; 0x4c
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	080097bc 	.word	0x080097bc
 8003c80:	080097cc 	.word	0x080097cc
 8003c84:	080097d8 	.word	0x080097d8
 8003c88:	58004000 	.word	0x58004000

08003c8c <LL_RCC_LSE_IsEnabled>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <LL_RCC_LSE_IsEnabled+0x18>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <LL_RCC_LSE_IsEnabled+0x1a>
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_LSE_IsReady>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d101      	bne.n	8003cc8 <LL_RCC_LSE_IsReady+0x18>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <LL_RCC_LSE_IsReady+0x1a>
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_RCC_MSI_EnablePLLMode>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce2:	f043 0304 	orr.w	r3, r3, #4
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_SetRFWKPClockSource>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_RCC_SetSMPSClockSource>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f023 0203 	bic.w	r2, r3, #3
 8003d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_RCC_SetSMPSPrescaler>:
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_SetUSARTClockSource>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_RCC_SetLPUARTClockSource>:
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_SetI2CClockSource>:
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dde:	43db      	mvns	r3, r3
 8003de0:	401a      	ands	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_RCC_SetLPTIMClockSource>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	0c1b      	lsrs	r3, r3, #16
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	43db      	mvns	r3, r3
 8003e18:	401a      	ands	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_RCC_SetSAIClockSource>:
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_RCC_SetRNGClockSource>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_RCC_SetCLK48ClockSource>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_RCC_SetUSBClockSource>:
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ffe3 	bl	8003e8c <LL_RCC_SetCLK48ClockSource>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <LL_RCC_SetADCClockSource>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_SetRTCClockSource>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_GetRTCClockSource>:
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_RCC_ForceBackupDomainReset>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f7a:	bf00      	nop
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_RCC_PLLSAI1_Enable>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f96:	6013      	str	r3, [r2, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <LL_RCC_PLLSAI1_Disable>:
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fb4:	6013      	str	r3, [r2, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_RCC_PLLSAI1_IsReady>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd2:	d101      	bne.n	8003fd8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fec:	2300      	movs	r3, #0
 8003fee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d034      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004008:	d021      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800400a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800400e:	d81b      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004014:	d01d      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004016:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800401a:	d815      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004024:	d110      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004034:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004036:	e00d      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f94d 	bl	80042dc <RCCEx_PLLSAI1_ConfigNP>
 8004042:	4603      	mov	r3, r0
 8004044:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004046:	e005      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	77fb      	strb	r3, [r7, #31]
        break;
 800404c:	e002      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004054:	7ffb      	ldrb	r3, [r7, #31]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fee8 	bl	8003e34 <LL_RCC_SetSAIClockSource>
 8004064:	e001      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	7ffb      	ldrb	r3, [r7, #31]
 8004068:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004072:	2b00      	cmp	r3, #0
 8004074:	d046      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004076:	f7ff ff56 	bl	8003f26 <LL_RCC_GetRTCClockSource>
 800407a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	429a      	cmp	r2, r3
 8004084:	d03c      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004086:	f7fe fc71 	bl	800296c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff30 	bl	8003efa <LL_RCC_SetRTCClockSource>
 800409a:	e02e      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040a6:	f7ff ff4b 	bl	8003f40 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80040aa:	f7ff ff5a 	bl	8003f62 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80040bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80040c6:	f7ff fde1 	bl	8003c8c <LL_RCC_LSE_IsEnabled>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d114      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040d0:	f7fc fc4c 	bl	800096c <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80040d6:	e00b      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d8:	f7fc fc48 	bl	800096c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d902      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	77fb      	strb	r3, [r7, #31]
              break;
 80040ee:	e004      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040f0:	f7ff fdde 	bl	8003cb0 <LL_RCC_LSE_IsReady>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d1ee      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	77bb      	strb	r3, [r7, #30]
 80040fe:	e001      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7ffb      	ldrb	r3, [r7, #31]
 8004102:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fe2a 	bl	8003d6e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fe35 	bl	8003d9a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fe5d 	bl	8003e00 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fe52 	bl	8003e00 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fe2a 	bl	8003dc6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fe1f 	bl	8003dc6 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d022      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fe8d 	bl	8003eb8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a6:	d107      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80041a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041c0:	d10b      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f8e3 	bl	8004392 <RCCEx_PLLSAI1_ConfigNQ>
 80041cc:	4603      	mov	r3, r0
 80041ce:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80041d0:	7ffb      	ldrb	r3, [r7, #31]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
 80041d8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02b      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d008      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f8:	d003      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fe2a 	bl	8003e60 <LL_RCC_SetRNGClockSource>
 800420c:	e00a      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	2000      	movs	r0, #0
 800421a:	f7ff fe21 	bl	8003e60 <LL_RCC_SetRNGClockSource>
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff fe34 	bl	8003e8c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800422c:	d107      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800422e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800423c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	2b00      	cmp	r3, #0
 8004248:	d022      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fe3d 	bl	8003ece <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800425c:	d107      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004276:	d10b      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f8e3 	bl	8004448 <RCCEx_PLLSAI1_ConfigNR>
 8004282:	4603      	mov	r3, r0
 8004284:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004286:	7ffb      	ldrb	r3, [r7, #31]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800428c:	7ffb      	ldrb	r3, [r7, #31]
 800428e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fd26 	bl	8003cf2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fd45 	bl	8003d46 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fd2c 	bl	8003d1e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80042c6:	7fbb      	ldrb	r3, [r7, #30]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3720      	adds	r7, #32
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80042d4:	f7ff fcfe 	bl	8003cd4 <LL_RCC_MSI_EnablePLLMode>
}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}

080042dc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042e8:	f7ff fe5b 	bl	8003fa2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042ec:	f7fc fb3e 	bl	800096c <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042f2:	e009      	b.n	8004308 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f4:	f7fc fb3a 	bl	800096c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
      break;
 8004306:	e004      	b.n	8004312 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004308:	f7ff fe5a 	bl	8003fc0 <LL_RCC_PLLSAI1_IsReady>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d137      	bne.n	8004388 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432c:	4313      	orrs	r3, r2
 800432e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004342:	4313      	orrs	r3, r2
 8004344:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004346:	f7ff fe1d 	bl	8003f84 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434a:	f7fc fb0f 	bl	800096c <HAL_GetTick>
 800434e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004350:	e009      	b.n	8004366 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004352:	f7fc fb0b 	bl	800096c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d902      	bls.n	8004366 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	73fb      	strb	r3, [r7, #15]
        break;
 8004364:	e004      	b.n	8004370 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004366:	f7ff fe2b 	bl	8003fc0 <LL_RCC_PLLSAI1_IsReady>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d1f0      	bne.n	8004352 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004384:	4313      	orrs	r3, r2
 8004386:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004388:	7bfb      	ldrb	r3, [r7, #15]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800439e:	f7ff fe00 	bl	8003fa2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043a2:	f7fc fae3 	bl	800096c <HAL_GetTick>
 80043a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043a8:	e009      	b.n	80043be <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043aa:	f7fc fadf 	bl	800096c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d902      	bls.n	80043be <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	73fb      	strb	r3, [r7, #15]
      break;
 80043bc:	e004      	b.n	80043c8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043be:	f7ff fdff 	bl	8003fc0 <LL_RCC_PLLSAI1_IsReady>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d137      	bne.n	800443e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e2:	4313      	orrs	r3, r2
 80043e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043f8:	4313      	orrs	r3, r2
 80043fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043fc:	f7ff fdc2 	bl	8003f84 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004400:	f7fc fab4 	bl	800096c <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004406:	e009      	b.n	800441c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004408:	f7fc fab0 	bl	800096c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d902      	bls.n	800441c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	73fb      	strb	r3, [r7, #15]
        break;
 800441a:	e004      	b.n	8004426 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800441c:	f7ff fdd0 	bl	8003fc0 <LL_RCC_PLLSAI1_IsReady>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d1f0      	bne.n	8004408 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d108      	bne.n	800443e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800443a:	4313      	orrs	r3, r2
 800443c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004454:	f7ff fda5 	bl	8003fa2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004458:	f7fc fa88 	bl	800096c <HAL_GetTick>
 800445c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800445e:	e009      	b.n	8004474 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004460:	f7fc fa84 	bl	800096c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d902      	bls.n	8004474 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	73fb      	strb	r3, [r7, #15]
      break;
 8004472:	e004      	b.n	800447e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004474:	f7ff fda4 	bl	8003fc0 <LL_RCC_PLLSAI1_IsReady>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d137      	bne.n	80044f4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004498:	4313      	orrs	r3, r2
 800449a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800449c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ae:	4313      	orrs	r3, r2
 80044b0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044b2:	f7ff fd67 	bl	8003f84 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b6:	f7fc fa59 	bl	800096c <HAL_GetTick>
 80044ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044bc:	e009      	b.n	80044d2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044be:	f7fc fa55 	bl	800096c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d902      	bls.n	80044d2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	73fb      	strb	r3, [r7, #15]
        break;
 80044d0:	e004      	b.n	80044dc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044d2:	f7ff fd75 	bl	8003fc0 <LL_RCC_PLLSAI1_IsReady>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d1f0      	bne.n	80044be <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f0:	4313      	orrs	r3, r2
 80044f2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e095      	b.n	800463c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d108      	bne.n	800452a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004520:	d009      	beq.n	8004536 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	61da      	str	r2, [r3, #28]
 8004528:	e005      	b.n	8004536 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7fc f88b 	bl	800066c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004576:	d902      	bls.n	800457e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e002      	b.n	8004584 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800457e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004582:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800458c:	d007      	beq.n	800459e <HAL_SPI_Init+0xa0>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004596:	d002      	beq.n	800459e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	ea42 0103 	orr.w	r1, r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0204 	and.w	r2, r3, #4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800461a:	ea42 0103 	orr.w	r1, r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_SPI_Transmit+0x22>
 8004662:	2302      	movs	r3, #2
 8004664:	e158      	b.n	8004918 <HAL_SPI_Transmit+0x2d4>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800466e:	f7fc f97d 	bl	800096c <HAL_GetTick>
 8004672:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d002      	beq.n	800468a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004684:	2302      	movs	r3, #2
 8004686:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004688:	e13d      	b.n	8004906 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_SPI_Transmit+0x52>
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	77fb      	strb	r3, [r7, #31]
    goto error;
 800469a:	e134      	b.n	8004906 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2203      	movs	r2, #3
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e6:	d10f      	bne.n	8004708 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004706:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d007      	beq.n	8004726 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004724:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800472e:	d94b      	bls.n	80047c8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_SPI_Transmit+0xfa>
 8004738:	8afb      	ldrh	r3, [r7, #22]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d13e      	bne.n	80047bc <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	881a      	ldrh	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	1c9a      	adds	r2, r3, #2
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004762:	e02b      	b.n	80047bc <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	d112      	bne.n	8004798 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004796:	e011      	b.n	80047bc <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004798:	f7fc f8e8 	bl	800096c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d803      	bhi.n	80047b0 <HAL_SPI_Transmit+0x16c>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d102      	bne.n	80047b6 <HAL_SPI_Transmit+0x172>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047ba:	e0a4      	b.n	8004906 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ce      	bne.n	8004764 <HAL_SPI_Transmit+0x120>
 80047c6:	e07c      	b.n	80048c2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_SPI_Transmit+0x192>
 80047d0:	8afb      	ldrh	r3, [r7, #22]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d170      	bne.n	80048b8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d912      	bls.n	8004806 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	881a      	ldrh	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	1c9a      	adds	r2, r3, #2
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b02      	subs	r3, #2
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004804:	e058      	b.n	80048b8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	7812      	ldrb	r2, [r2, #0]
 8004812:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800482c:	e044      	b.n	80048b8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b02      	cmp	r3, #2
 800483a:	d12b      	bne.n	8004894 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d912      	bls.n	800486c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	881a      	ldrh	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	1c9a      	adds	r2, r3, #2
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b02      	subs	r3, #2
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	87da      	strh	r2, [r3, #62]	; 0x3e
 800486a:	e025      	b.n	80048b8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004892:	e011      	b.n	80048b8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004894:	f7fc f86a 	bl	800096c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d803      	bhi.n	80048ac <HAL_SPI_Transmit+0x268>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d102      	bne.n	80048b2 <HAL_SPI_Transmit+0x26e>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048b6:	e026      	b.n	8004906 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1b5      	bne.n	800482e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 fce4 	bl	8005294 <SPI_EndRxTxTransaction>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e000      	b.n	8004906 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004916:	7ffb      	ldrb	r3, [r7, #31]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493c:	d112      	bne.n	8004964 <HAL_SPI_Receive+0x44>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10e      	bne.n	8004964 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2204      	movs	r2, #4
 800494a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f910 	bl	8004b80 <HAL_SPI_TransmitReceive>
 8004960:	4603      	mov	r3, r0
 8004962:	e109      	b.n	8004b78 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_SPI_Receive+0x52>
 800496e:	2302      	movs	r3, #2
 8004970:	e102      	b.n	8004b78 <HAL_SPI_Receive+0x258>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800497a:	f7fb fff7 	bl	800096c <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d002      	beq.n	8004992 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800498c:	2302      	movs	r3, #2
 800498e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004990:	e0e9      	b.n	8004b66 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <HAL_SPI_Receive+0x7e>
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049a2:	e0e0      	b.n	8004b66 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2204      	movs	r2, #4
 80049a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ee:	d908      	bls.n	8004a02 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	e007      	b.n	8004a12 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a10:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1a:	d10f      	bne.n	8004a3c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d007      	beq.n	8004a5a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a62:	d867      	bhi.n	8004b34 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a64:	e030      	b.n	8004ac8 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d117      	bne.n	8004aa4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f103 020c 	add.w	r2, r3, #12
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004aa2:	e011      	b.n	8004ac8 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa4:	f7fb ff62 	bl	800096c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d803      	bhi.n	8004abc <HAL_SPI_Receive+0x19c>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Receive+0x1a2>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ac6:	e04e      	b.n	8004b66 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1c8      	bne.n	8004a66 <HAL_SPI_Receive+0x146>
 8004ad4:	e034      	b.n	8004b40 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d115      	bne.n	8004b10 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	b292      	uxth	r2, r2
 8004af0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004b0e:	e011      	b.n	8004b34 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b10:	f7fb ff2c 	bl	800096c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d803      	bhi.n	8004b28 <HAL_SPI_Receive+0x208>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d102      	bne.n	8004b2e <HAL_SPI_Receive+0x20e>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b32:	e018      	b.n	8004b66 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1ca      	bne.n	8004ad6 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fb4d 	bl	80051e4 <SPI_EndRxTransaction>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
 8004b62:	e000      	b.n	8004b66 <HAL_SPI_Receive+0x246>
  }

error :
 8004b64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x26>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e1fb      	b.n	8004f9e <HAL_SPI_TransmitReceive+0x41e>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bae:	f7fb fedd 	bl	800096c <HAL_GetTick>
 8004bb2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bc2:	887b      	ldrh	r3, [r7, #2]
 8004bc4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004bc6:	887b      	ldrh	r3, [r7, #2]
 8004bc8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bca:	7efb      	ldrb	r3, [r7, #27]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d00e      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x6e>
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd6:	d106      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x66>
 8004be0:	7efb      	ldrb	r3, [r7, #27]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d003      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bec:	e1cd      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x80>
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d103      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c06:	e1c0      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d003      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2205      	movs	r2, #5
 8004c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	887a      	ldrh	r2, [r7, #2]
 8004c2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	887a      	ldrh	r2, [r7, #2]
 8004c42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c5e:	d802      	bhi.n	8004c66 <HAL_SPI_TransmitReceive+0xe6>
 8004c60:	8a3b      	ldrh	r3, [r7, #16]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d908      	bls.n	8004c78 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	e007      	b.n	8004c88 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d007      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cae:	d97c      	bls.n	8004daa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x13e>
 8004cb8:	8a7b      	ldrh	r3, [r7, #18]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d169      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce2:	e056      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d11b      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x1aa>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d016      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x1aa>
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d113      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	881a      	ldrh	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	1c9a      	adds	r2, r3, #2
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11c      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x1f2>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d72:	f7fb fdfb 	bl	800096c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d807      	bhi.n	8004d92 <HAL_SPI_TransmitReceive+0x212>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d003      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d90:	e0fb      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1a3      	bne.n	8004ce4 <HAL_SPI_TransmitReceive+0x164>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d19d      	bne.n	8004ce4 <HAL_SPI_TransmitReceive+0x164>
 8004da8:	e0df      	b.n	8004f6a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x23a>
 8004db2:	8a7b      	ldrh	r3, [r7, #18]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	f040 80cb 	bne.w	8004f50 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d912      	bls.n	8004dea <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	881a      	ldrh	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	1c9a      	adds	r2, r3, #2
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b02      	subs	r3, #2
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004de8:	e0b2      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	7812      	ldrb	r2, [r2, #0]
 8004df6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e10:	e09e      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d134      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x30a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02f      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x30a>
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d12c      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d912      	bls.n	8004e60 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	881a      	ldrh	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b02      	subs	r3, #2
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e5e:	e012      	b.n	8004e86 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	7812      	ldrb	r2, [r2, #0]
 8004e6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d148      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x3aa>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d042      	beq.n	8004f2a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d923      	bls.n	8004ef8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b02      	subs	r3, #2
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d81f      	bhi.n	8004f26 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	e016      	b.n	8004f26 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f103 020c 	add.w	r2, r3, #12
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f26:	2301      	movs	r3, #1
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f2a:	f7fb fd1f 	bl	800096c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d803      	bhi.n	8004f42 <HAL_SPI_TransmitReceive+0x3c2>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d102      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x3c8>
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d103      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f4e:	e01c      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f47f af5b 	bne.w	8004e12 <HAL_SPI_TransmitReceive+0x292>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f47f af54 	bne.w	8004e12 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f990 	bl	8005294 <SPI_EndRxTxTransaction>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d006      	beq.n	8004f88 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60
 8004f86:	e000      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004f88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fb8:	f7fb fcd8 	bl	800096c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fc8:	f7fb fcd0 	bl	800096c <HAL_GetTick>
 8004fcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fce:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	015b      	lsls	r3, r3, #5
 8004fd4:	0d1b      	lsrs	r3, r3, #20
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fde:	e054      	b.n	800508a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d050      	beq.n	800508a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fe8:	f7fb fcc0 	bl	800096c <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d902      	bls.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d13d      	bne.n	800507a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800500c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005016:	d111      	bne.n	800503c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005020:	d004      	beq.n	800502c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502a:	d107      	bne.n	800503c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005044:	d10f      	bne.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005064:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e017      	b.n	80050aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3b01      	subs	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	429a      	cmp	r2, r3
 8005098:	bf0c      	ite	eq
 800509a:	2301      	moveq	r3, #1
 800509c:	2300      	movne	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d19b      	bne.n	8004fe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000004 	.word	0x20000004

080050b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050ca:	f7fb fc4f 	bl	800096c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	4413      	add	r3, r2
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80050da:	f7fb fc47 	bl	800096c <HAL_GetTick>
 80050de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050e8:	4b3d      	ldr	r3, [pc, #244]	; (80051e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	00da      	lsls	r2, r3, #3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	0d1b      	lsrs	r3, r3, #20
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	fb02 f303 	mul.w	r3, r2, r3
 80050fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005100:	e060      	b.n	80051c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005108:	d107      	bne.n	800511a <SPI_WaitFifoStateUntilTimeout+0x62>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005118:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d050      	beq.n	80051c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005122:	f7fb fc23 	bl	800096c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512e:	429a      	cmp	r2, r3
 8005130:	d902      	bls.n	8005138 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d13d      	bne.n	80051b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005146:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005150:	d111      	bne.n	8005176 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800515a:	d004      	beq.n	8005166 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005164:	d107      	bne.n	8005176 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005174:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517e:	d10f      	bne.n	80051a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800519e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e010      	b.n	80051d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d196      	bne.n	8005102 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3728      	adds	r7, #40	; 0x28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000004 	.word	0x20000004

080051e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f8:	d111      	bne.n	800521e <SPI_EndRxTransaction+0x3a>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005202:	d004      	beq.n	800520e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520c:	d107      	bne.n	800521e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	2180      	movs	r1, #128	; 0x80
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7ff febd 	bl	8004fa8 <SPI_WaitFlagStateUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e023      	b.n	800528c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524c:	d11d      	bne.n	800528a <SPI_EndRxTransaction+0xa6>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005256:	d004      	beq.n	8005262 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005260:	d113      	bne.n	800528a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2200      	movs	r2, #0
 800526a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff ff22 	bl	80050b8 <SPI_WaitFifoStateUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e000      	b.n	800528c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff ff03 	bl	80050b8 <SPI_WaitFifoStateUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e027      	b.n	8005318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff fe68 	bl	8004fa8 <SPI_WaitFlagStateUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e014      	b.n	8005318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f7ff fedc 	bl	80050b8 <SPI_WaitFifoStateUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e000      	b.n	8005318 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005330:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005334:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	b29a      	uxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005356:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800535a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	b29b      	uxth	r3, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	b29b      	uxth	r3, r3
 800536c:	4013      	ands	r3, r2
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005384:	b084      	sub	sp, #16
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	f107 0014 	add.w	r0, r7, #20
 8005392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	b004      	add	sp, #16
 80053c4:	4770      	bx	lr
	...

080053c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b09d      	sub	sp, #116	; 0x74
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d81f      	bhi.n	800543a <USB_ActivateEndpoint+0x72>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <USB_ActivateEndpoint+0x38>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005411 	.word	0x08005411
 8005404:	0800542d 	.word	0x0800542d
 8005408:	08005443 	.word	0x08005443
 800540c:	0800541f 	.word	0x0800541f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005410:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005418:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800541c:	e012      	b.n	8005444 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800541e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005422:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005426:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800542a:	e00b      	b.n	8005444 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800542c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005430:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005434:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005438:	e004      	b.n	8005444 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005440:	e000      	b.n	8005444 <USB_ActivateEndpoint+0x7c>
      break;
 8005442:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	b21b      	sxth	r3, r3
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	b21a      	sxth	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b21b      	sxth	r3, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	b21b      	sxth	r3, r3
 800548a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	7b1b      	ldrb	r3, [r3, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f040 8149 	bne.w	800574c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8084 	beq.w	80055cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	4413      	add	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	00da      	lsls	r2, r3, #3
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	88db      	ldrh	r3, [r3, #6]
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	827b      	strh	r3, [r7, #18]
 8005506:	8a7b      	ldrh	r3, [r7, #18]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <USB_ActivateEndpoint+0x180>
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	823b      	strh	r3, [r7, #16]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	8a3b      	ldrh	r3, [r7, #16]
 8005534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005544:	b29b      	uxth	r3, r3
 8005546:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	78db      	ldrb	r3, [r3, #3]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d020      	beq.n	8005592 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005566:	81bb      	strh	r3, [r7, #12]
 8005568:	89bb      	ldrh	r3, [r7, #12]
 800556a:	f083 0320 	eor.w	r3, r3, #32
 800556e:	81bb      	strh	r3, [r7, #12]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	89bb      	ldrh	r3, [r7, #12]
 800557c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558c:	b29b      	uxth	r3, r3
 800558e:	8013      	strh	r3, [r2, #0]
 8005590:	e2a6      	b.n	8005ae0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a8:	81fb      	strh	r3, [r7, #14]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]
 80055ca:	e289      	b.n	8005ae0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	4413      	add	r3, r2
 80055de:	633b      	str	r3, [r7, #48]	; 0x30
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	00da      	lsls	r2, r3, #3
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	4413      	add	r3, r2
 80055ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	88db      	ldrh	r3, [r3, #6]
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560a:	b29b      	uxth	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	4413      	add	r3, r2
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	00da      	lsls	r2, r3, #3
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	4413      	add	r3, r2
 800561e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b3e      	cmp	r3, #62	; 0x3e
 800562a:	d918      	bls.n	800565e <USB_ActivateEndpoint+0x296>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	66bb      	str	r3, [r7, #104]	; 0x68
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <USB_ActivateEndpoint+0x27e>
 8005640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005642:	3b01      	subs	r3, #1
 8005644:	66bb      	str	r3, [r7, #104]	; 0x68
 8005646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005648:	b29b      	uxth	r3, r3
 800564a:	029b      	lsls	r3, r3, #10
 800564c:	b29b      	uxth	r3, r3
 800564e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005656:	b29a      	uxth	r2, r3
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	e029      	b.n	80056b2 <USB_ActivateEndpoint+0x2ea>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d112      	bne.n	800568c <USB_ActivateEndpoint+0x2c4>
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005670:	b29a      	uxth	r2, r3
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005684:	b29a      	uxth	r2, r3
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	e012      	b.n	80056b2 <USB_ActivateEndpoint+0x2ea>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	66bb      	str	r3, [r7, #104]	; 0x68
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <USB_ActivateEndpoint+0x2de>
 80056a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a2:	3301      	adds	r3, #1
 80056a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	029b      	lsls	r3, r3, #10
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	847b      	strh	r3, [r7, #34]	; 0x22
 80056c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01b      	beq.n	8005702 <USB_ActivateEndpoint+0x33a>
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e0:	843b      	strh	r3, [r7, #32]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	8c3b      	ldrh	r3, [r7, #32]
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005718:	83fb      	strh	r3, [r7, #30]
 800571a:	8bfb      	ldrh	r3, [r7, #30]
 800571c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005720:	83fb      	strh	r3, [r7, #30]
 8005722:	8bfb      	ldrh	r3, [r7, #30]
 8005724:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005728:	83fb      	strh	r3, [r7, #30]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	8bfb      	ldrh	r3, [r7, #30]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
 800574a:	e1c9      	b.n	8005ae0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	78db      	ldrb	r3, [r3, #3]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d11e      	bne.n	8005792 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
 8005790:	e01d      	b.n	80057ce <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	441a      	add	r2, r3
 80057b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d8:	b29b      	uxth	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057de:	4413      	add	r3, r2
 80057e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	00da      	lsls	r2, r3, #3
 80057e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	891b      	ldrh	r3, [r3, #8]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	657b      	str	r3, [r7, #84]	; 0x54
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005812:	4413      	add	r3, r2
 8005814:	657b      	str	r3, [r7, #84]	; 0x54
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	00da      	lsls	r2, r3, #3
 800581c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581e:	4413      	add	r3, r2
 8005820:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005824:	653b      	str	r3, [r7, #80]	; 0x50
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	895b      	ldrh	r3, [r3, #10]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	b29b      	uxth	r3, r3
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005834:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 8093 	bne.w	8005966 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005850:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <USB_ActivateEndpoint+0x4cc>
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	441a      	add	r2, r3
 800587e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005890:	b29b      	uxth	r3, r3
 8005892:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80058a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01b      	beq.n	80058e4 <USB_ActivateEndpoint+0x51c>
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80058d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	873b      	strh	r3, [r7, #56]	; 0x38
 80058fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005902:	873b      	strh	r3, [r7, #56]	; 0x38
 8005904:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005906:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800590a:	873b      	strh	r3, [r7, #56]	; 0x38
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	b29b      	uxth	r3, r3
 800592a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005942:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005960:	b29b      	uxth	r3, r3
 8005962:	8013      	strh	r3, [r2, #0]
 8005964:	e0bc      	b.n	8005ae0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005976:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800597a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01d      	beq.n	80059be <USB_ActivateEndpoint+0x5f6>
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005998:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	441a      	add	r2, r3
 80059a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80059aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80059ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01d      	beq.n	8005a16 <USB_ActivateEndpoint+0x64e>
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	78db      	ldrb	r3, [r3, #3]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d024      	beq.n	8005a68 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a3c:	f083 0320 	eor.w	r3, r3, #32
 8005a40:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	441a      	add	r2, r3
 8005a4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	8013      	strh	r3, [r2, #0]
 8005a66:	e01d      	b.n	8005aa4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	441a      	add	r2, r3
 8005a8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005ae0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3774      	adds	r7, #116	; 0x74
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b08d      	sub	sp, #52	; 0x34
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	7b1b      	ldrb	r3, [r3, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 808e 	bne.w	8005c20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d044      	beq.n	8005b96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	81bb      	strh	r3, [r7, #12]
 8005b1a:	89bb      	ldrh	r3, [r7, #12]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <USB_DeactivateEndpoint+0x6c>
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	817b      	strh	r3, [r7, #10]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	897b      	ldrh	r3, [r7, #10]
 8005b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b72:	813b      	strh	r3, [r7, #8]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	441a      	add	r2, r3
 8005b7e:	893b      	ldrh	r3, [r7, #8]
 8005b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	8013      	strh	r3, [r2, #0]
 8005b94:	e192      	b.n	8005ebc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	827b      	strh	r3, [r7, #18]
 8005ba4:	8a7b      	ldrh	r3, [r7, #18]
 8005ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01b      	beq.n	8005be6 <USB_DeactivateEndpoint+0xf6>
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	823b      	strh	r3, [r7, #16]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	441a      	add	r2, r3
 8005bd0:	8a3b      	ldrh	r3, [r7, #16]
 8005bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfc:	81fb      	strh	r3, [r7, #14]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	441a      	add	r2, r3
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	8013      	strh	r3, [r2, #0]
 8005c1e:	e14d      	b.n	8005ebc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f040 80a5 	bne.w	8005d74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	843b      	strh	r3, [r7, #32]
 8005c38:	8c3b      	ldrh	r3, [r7, #32]
 8005c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01b      	beq.n	8005c7a <USB_DeactivateEndpoint+0x18a>
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c58:	83fb      	strh	r3, [r7, #30]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	8bfb      	ldrh	r3, [r7, #30]
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	83bb      	strh	r3, [r7, #28]
 8005c88:	8bbb      	ldrh	r3, [r7, #28]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01b      	beq.n	8005cca <USB_DeactivateEndpoint+0x1da>
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca8:	837b      	strh	r3, [r7, #26]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	441a      	add	r2, r3
 8005cb4:	8b7b      	ldrh	r3, [r7, #26]
 8005cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce0:	833b      	strh	r3, [r7, #24]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	441a      	add	r2, r3
 8005cec:	8b3b      	ldrh	r3, [r7, #24]
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	82fb      	strh	r3, [r7, #22]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	441a      	add	r2, r3
 8005d24:	8afb      	ldrh	r3, [r7, #22]
 8005d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	82bb      	strh	r3, [r7, #20]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	8abb      	ldrh	r3, [r7, #20]
 8005d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	8013      	strh	r3, [r2, #0]
 8005d72:	e0a3      	b.n	8005ebc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <USB_DeactivateEndpoint+0x2d4>
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	441a      	add	r2, r3
 8005dae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005dd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01b      	beq.n	8005e14 <USB_DeactivateEndpoint+0x324>
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	441a      	add	r2, r3
 8005dfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	441a      	add	r2, r3
 8005e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3734      	adds	r7, #52	; 0x34
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b0c2      	sub	sp, #264	; 0x108
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	6018      	str	r0, [r3, #0]
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ed8:	463b      	mov	r3, r7
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	f040 8509 	bne.w	80068f6 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	463b      	mov	r3, r7
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d905      	bls.n	8005f00 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005efe:	e004      	b.n	8005f0a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	7b1b      	ldrb	r3, [r3, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d128      	bne.n	8005f66 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6959      	ldr	r1, [r3, #20]
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	88da      	ldrh	r2, [r3, #6]
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	1d38      	adds	r0, r7, #4
 8005f28:	6800      	ldr	r0, [r0, #0]
 8005f2a:	f001 f9da 	bl	80072e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4413      	add	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	00da      	lsls	r2, r3, #3
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	f000 bc9f 	b.w	80068a4 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f66:	463b      	mov	r3, r7
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	78db      	ldrb	r3, [r3, #3]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	f040 8347 	bne.w	8006600 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	f240 82eb 	bls.w	800655a <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	463b      	mov	r3, r7
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005fa2:	1d3b      	adds	r3, r7, #4
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005fc8:	463b      	mov	r3, r7
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a1a      	ldr	r2, [r3, #32]
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd2:	1ad2      	subs	r2, r2, r3
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	463b      	mov	r3, r7
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8159 	beq.w	80062a8 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ff6:	1d3b      	adds	r3, r7, #4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d164      	bne.n	80060d0 <USB_EPStartXfer+0x206>
 8006006:	1d3b      	adds	r3, r7, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006014:	b29b      	uxth	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	4413      	add	r3, r2
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
 800601e:	463b      	mov	r3, r7
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	00da      	lsls	r2, r3, #3
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	4413      	add	r3, r2
 800602a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006034:	2b3e      	cmp	r3, #62	; 0x3e
 8006036:	d91c      	bls.n	8006072 <USB_EPStartXfer+0x1a8>
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <USB_EPStartXfer+0x18e>
 800604e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006052:	3b01      	subs	r3, #1
 8006054:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006058:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800605c:	b29b      	uxth	r3, r3
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e04a      	b.n	8006108 <USB_EPStartXfer+0x23e>
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006076:	2b00      	cmp	r3, #0
 8006078:	d112      	bne.n	80060a0 <USB_EPStartXfer+0x1d6>
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006084:	b29a      	uxth	r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006098:	b29a      	uxth	r2, r3
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	e033      	b.n	8006108 <USB_EPStartXfer+0x23e>
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <USB_EPStartXfer+0x1f6>
 80060b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060ba:	3301      	adds	r3, #1
 80060bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	029b      	lsls	r3, r3, #10
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e01b      	b.n	8006108 <USB_EPStartXfer+0x23e>
 80060d0:	463b      	mov	r3, r7
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d116      	bne.n	8006108 <USB_EPStartXfer+0x23e>
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	4413      	add	r3, r2
 80060ea:	633b      	str	r3, [r7, #48]	; 0x30
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	00da      	lsls	r2, r3, #3
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	4413      	add	r3, r2
 80060f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006102:	b29a      	uxth	r2, r3
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	895b      	ldrh	r3, [r3, #10]
 800610e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006112:	463b      	mov	r3, r7
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6959      	ldr	r1, [r3, #20]
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611c:	b29b      	uxth	r3, r3
 800611e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006122:	1d38      	adds	r0, r7, #4
 8006124:	6800      	ldr	r0, [r0, #0]
 8006126:	f001 f8dc 	bl	80072e2 <USB_WritePMA>
            ep->xfer_buff += len;
 800612a:	463b      	mov	r3, r7
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695a      	ldr	r2, [r3, #20]
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006134:	441a      	add	r2, r3
 8006136:	463b      	mov	r3, r7
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800613c:	463b      	mov	r3, r7
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a1a      	ldr	r2, [r3, #32]
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d909      	bls.n	8006160 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	463b      	mov	r3, r7
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	621a      	str	r2, [r3, #32]
 800615e:	e008      	b.n	8006172 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800616a:	463b      	mov	r3, r7
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2200      	movs	r2, #0
 8006170:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006172:	463b      	mov	r3, r7
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d164      	bne.n	8006246 <USB_EPStartXfer+0x37c>
 800617c:	1d3b      	adds	r3, r7, #4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618a:	b29b      	uxth	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	4413      	add	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	00da      	lsls	r2, r3, #3
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	4413      	add	r3, r2
 80061a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	2b3e      	cmp	r3, #62	; 0x3e
 80061ac:	d91c      	bls.n	80061e8 <USB_EPStartXfer+0x31e>
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <USB_EPStartXfer+0x304>
 80061c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c8:	3b01      	subs	r3, #1
 80061ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	029b      	lsls	r3, r3, #10
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	e04d      	b.n	8006284 <USB_EPStartXfer+0x3ba>
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d112      	bne.n	8006216 <USB_EPStartXfer+0x34c>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620e:	b29a      	uxth	r2, r3
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	e036      	b.n	8006284 <USB_EPStartXfer+0x3ba>
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d004      	beq.n	8006236 <USB_EPStartXfer+0x36c>
 800622c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006230:	3301      	adds	r3, #1
 8006232:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623a:	b29b      	uxth	r3, r3
 800623c:	029b      	lsls	r3, r3, #10
 800623e:	b29a      	uxth	r2, r3
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	e01e      	b.n	8006284 <USB_EPStartXfer+0x3ba>
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d119      	bne.n	8006284 <USB_EPStartXfer+0x3ba>
 8006250:	1d3b      	adds	r3, r7, #4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	623b      	str	r3, [r7, #32]
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625e:	b29b      	uxth	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	4413      	add	r3, r2
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	463b      	mov	r3, r7
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	00da      	lsls	r2, r3, #3
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	4413      	add	r3, r2
 8006274:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627e:	b29a      	uxth	r2, r3
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006284:	463b      	mov	r3, r7
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	891b      	ldrh	r3, [r3, #8]
 800628a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800628e:	463b      	mov	r3, r7
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6959      	ldr	r1, [r3, #20]
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006298:	b29b      	uxth	r3, r3
 800629a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800629e:	1d38      	adds	r0, r7, #4
 80062a0:	6800      	ldr	r0, [r0, #0]
 80062a2:	f001 f81e 	bl	80072e2 <USB_WritePMA>
 80062a6:	e2fd      	b.n	80068a4 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d164      	bne.n	800637c <USB_EPStartXfer+0x4b2>
 80062b2:	1d3b      	adds	r3, r7, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b8:	1d3b      	adds	r3, r7, #4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c6:	4413      	add	r3, r2
 80062c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	00da      	lsls	r2, r3, #3
 80062d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d4:	4413      	add	r3, r2
 80062d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062da:	647b      	str	r3, [r7, #68]	; 0x44
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	2b3e      	cmp	r3, #62	; 0x3e
 80062e2:	d91c      	bls.n	800631e <USB_EPStartXfer+0x454>
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USB_EPStartXfer+0x43a>
 80062fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062fe:	3b01      	subs	r3, #1
 8006300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006308:	b29b      	uxth	r3, r3
 800630a:	029b      	lsls	r3, r3, #10
 800630c:	b29b      	uxth	r3, r3
 800630e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006316:	b29a      	uxth	r2, r3
 8006318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	e04d      	b.n	80063ba <USB_EPStartXfer+0x4f0>
 800631e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006322:	2b00      	cmp	r3, #0
 8006324:	d112      	bne.n	800634c <USB_EPStartXfer+0x482>
 8006326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006330:	b29a      	uxth	r2, r3
 8006332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006344:	b29a      	uxth	r2, r3
 8006346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e036      	b.n	80063ba <USB_EPStartXfer+0x4f0>
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <USB_EPStartXfer+0x4a2>
 8006362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006366:	3301      	adds	r3, #1
 8006368:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800636c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006370:	b29b      	uxth	r3, r3
 8006372:	029b      	lsls	r3, r3, #10
 8006374:	b29a      	uxth	r2, r3
 8006376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	e01e      	b.n	80063ba <USB_EPStartXfer+0x4f0>
 800637c:	463b      	mov	r3, r7
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d119      	bne.n	80063ba <USB_EPStartXfer+0x4f0>
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	653b      	str	r3, [r7, #80]	; 0x50
 800638c:	1d3b      	adds	r3, r7, #4
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006394:	b29b      	uxth	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800639a:	4413      	add	r3, r2
 800639c:	653b      	str	r3, [r7, #80]	; 0x50
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	00da      	lsls	r2, r3, #3
 80063a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a8:	4413      	add	r3, r2
 80063aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063ba:	463b      	mov	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	891b      	ldrh	r3, [r3, #8]
 80063c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6959      	ldr	r1, [r3, #20]
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063d4:	1d38      	adds	r0, r7, #4
 80063d6:	6800      	ldr	r0, [r0, #0]
 80063d8:	f000 ff83 	bl	80072e2 <USB_WritePMA>
            ep->xfer_buff += len;
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695a      	ldr	r2, [r3, #20]
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e6:	441a      	add	r2, r3
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063ee:	463b      	mov	r3, r7
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	463b      	mov	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d909      	bls.n	8006412 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	621a      	str	r2, [r3, #32]
 8006410:	e008      	b.n	8006424 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006412:	463b      	mov	r3, r7
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800641c:	463b      	mov	r3, r7
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2200      	movs	r2, #0
 8006422:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	643b      	str	r3, [r7, #64]	; 0x40
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	785b      	ldrb	r3, [r3, #1]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d164      	bne.n	80064fe <USB_EPStartXfer+0x634>
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	63bb      	str	r3, [r7, #56]	; 0x38
 800643a:	1d3b      	adds	r3, r7, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	4413      	add	r3, r2
 800644a:	63bb      	str	r3, [r7, #56]	; 0x38
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	00da      	lsls	r2, r3, #3
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	4413      	add	r3, r2
 8006458:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006462:	2b3e      	cmp	r3, #62	; 0x3e
 8006464:	d91c      	bls.n	80064a0 <USB_EPStartXfer+0x5d6>
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <USB_EPStartXfer+0x5bc>
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	3b01      	subs	r3, #1
 8006482:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648a:	b29b      	uxth	r3, r3
 800648c:	029b      	lsls	r3, r3, #10
 800648e:	b29b      	uxth	r3, r3
 8006490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006498:	b29a      	uxth	r2, r3
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	801a      	strh	r2, [r3, #0]
 800649e:	e04a      	b.n	8006536 <USB_EPStartXfer+0x66c>
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d112      	bne.n	80064ce <USB_EPStartXfer+0x604>
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	e033      	b.n	8006536 <USB_EPStartXfer+0x66c>
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <USB_EPStartXfer+0x624>
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	3301      	adds	r3, #1
 80064ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	029b      	lsls	r3, r3, #10
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	e01b      	b.n	8006536 <USB_EPStartXfer+0x66c>
 80064fe:	463b      	mov	r3, r7
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d116      	bne.n	8006536 <USB_EPStartXfer+0x66c>
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006510:	b29b      	uxth	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006516:	4413      	add	r3, r2
 8006518:	643b      	str	r3, [r7, #64]	; 0x40
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00da      	lsls	r2, r3, #3
 8006522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006524:	4413      	add	r3, r2
 8006526:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006530:	b29a      	uxth	r2, r3
 8006532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006534:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006536:	463b      	mov	r3, r7
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	895b      	ldrh	r3, [r3, #10]
 800653c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006540:	463b      	mov	r3, r7
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6959      	ldr	r1, [r3, #20]
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654a:	b29b      	uxth	r3, r3
 800654c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006550:	1d38      	adds	r0, r7, #4
 8006552:	6800      	ldr	r0, [r0, #0]
 8006554:	f000 fec5 	bl	80072e2 <USB_WritePMA>
 8006558:	e1a4      	b.n	80068a4 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800655a:	463b      	mov	r3, r7
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006564:	1d3b      	adds	r3, r7, #4
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	463b      	mov	r3, r7
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	463b      	mov	r3, r7
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	441a      	add	r2, r3
 8006590:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065a8:	1d3b      	adds	r3, r7, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ae:	1d3b      	adds	r3, r7, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065bc:	4413      	add	r3, r2
 80065be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	00da      	lsls	r2, r3, #3
 80065c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ca:	4413      	add	r3, r2
 80065cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	891b      	ldrh	r3, [r3, #8]
 80065e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6959      	ldr	r1, [r3, #20]
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065f6:	1d38      	adds	r0, r7, #4
 80065f8:	6800      	ldr	r0, [r0, #0]
 80065fa:	f000 fe72 	bl	80072e2 <USB_WritePMA>
 80065fe:	e151      	b.n	80068a4 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6a1a      	ldr	r2, [r3, #32]
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006612:	1d3b      	adds	r3, r7, #4
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 809b 	beq.w	8006764 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	673b      	str	r3, [r7, #112]	; 0x70
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d164      	bne.n	8006708 <USB_EPStartXfer+0x83e>
 800663e:	1d3b      	adds	r3, r7, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	66bb      	str	r3, [r7, #104]	; 0x68
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664c:	b29b      	uxth	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006652:	4413      	add	r3, r2
 8006654:	66bb      	str	r3, [r7, #104]	; 0x68
 8006656:	463b      	mov	r3, r7
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	00da      	lsls	r2, r3, #3
 800665e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006660:	4413      	add	r3, r2
 8006662:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006666:	667b      	str	r3, [r7, #100]	; 0x64
 8006668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666c:	2b3e      	cmp	r3, #62	; 0x3e
 800666e:	d91c      	bls.n	80066aa <USB_EPStartXfer+0x7e0>
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <USB_EPStartXfer+0x7c6>
 8006686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800668a:	3b01      	subs	r3, #1
 800668c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006690:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006694:	b29b      	uxth	r3, r3
 8006696:	029b      	lsls	r3, r3, #10
 8006698:	b29b      	uxth	r3, r3
 800669a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	e04a      	b.n	8006740 <USB_EPStartXfer+0x876>
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d112      	bne.n	80066d8 <USB_EPStartXfer+0x80e>
 80066b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	e033      	b.n	8006740 <USB_EPStartXfer+0x876>
 80066d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <USB_EPStartXfer+0x82e>
 80066ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066f2:	3301      	adds	r3, #1
 80066f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	029b      	lsls	r3, r3, #10
 8006700:	b29a      	uxth	r2, r3
 8006702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	e01b      	b.n	8006740 <USB_EPStartXfer+0x876>
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d116      	bne.n	8006740 <USB_EPStartXfer+0x876>
 8006712:	1d3b      	adds	r3, r7, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671a:	b29b      	uxth	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006720:	4413      	add	r3, r2
 8006722:	673b      	str	r3, [r7, #112]	; 0x70
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	00da      	lsls	r2, r3, #3
 800672c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800672e:	4413      	add	r3, r2
 8006730:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673a:	b29a      	uxth	r2, r3
 800673c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	895b      	ldrh	r3, [r3, #10]
 8006746:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800674a:	463b      	mov	r3, r7
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6959      	ldr	r1, [r3, #20]
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	b29b      	uxth	r3, r3
 8006756:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800675a:	1d38      	adds	r0, r7, #4
 800675c:	6800      	ldr	r0, [r0, #0]
 800675e:	f000 fdc0 	bl	80072e2 <USB_WritePMA>
 8006762:	e09f      	b.n	80068a4 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006764:	463b      	mov	r3, r7
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d164      	bne.n	8006838 <USB_EPStartXfer+0x96e>
 800676e:	1d3b      	adds	r3, r7, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006774:	1d3b      	adds	r3, r7, #4
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677c:	b29b      	uxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006782:	4413      	add	r3, r2
 8006784:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	00da      	lsls	r2, r3, #3
 800678e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006790:	4413      	add	r3, r2
 8006792:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006796:	67bb      	str	r3, [r7, #120]	; 0x78
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679c:	2b3e      	cmp	r3, #62	; 0x3e
 800679e:	d91c      	bls.n	80067da <USB_EPStartXfer+0x910>
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <USB_EPStartXfer+0x8f6>
 80067b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067ba:	3b01      	subs	r3, #1
 80067bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	029b      	lsls	r3, r3, #10
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e053      	b.n	8006882 <USB_EPStartXfer+0x9b8>
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d112      	bne.n	8006808 <USB_EPStartXfer+0x93e>
 80067e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006800:	b29a      	uxth	r2, r3
 8006802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	e03c      	b.n	8006882 <USB_EPStartXfer+0x9b8>
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d004      	beq.n	8006828 <USB_EPStartXfer+0x95e>
 800681e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006822:	3301      	adds	r3, #1
 8006824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006828:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800682c:	b29b      	uxth	r3, r3
 800682e:	029b      	lsls	r3, r3, #10
 8006830:	b29a      	uxth	r2, r3
 8006832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	e024      	b.n	8006882 <USB_EPStartXfer+0x9b8>
 8006838:	463b      	mov	r3, r7
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d11f      	bne.n	8006882 <USB_EPStartXfer+0x9b8>
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800684a:	1d3b      	adds	r3, r7, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006852:	b29b      	uxth	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800685a:	4413      	add	r3, r2
 800685c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	00da      	lsls	r2, r3, #3
 8006868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800686c:	4413      	add	r3, r2
 800686e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006880:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006882:	463b      	mov	r3, r7
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	891b      	ldrh	r3, [r3, #8]
 8006888:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6959      	ldr	r1, [r3, #20]
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	b29b      	uxth	r3, r3
 8006898:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800689c:	1d38      	adds	r0, r7, #4
 800689e:	6800      	ldr	r0, [r0, #0]
 80068a0:	f000 fd1f 	bl	80072e2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068a4:	1d3b      	adds	r3, r7, #4
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	463b      	mov	r3, r7
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068be:	817b      	strh	r3, [r7, #10]
 80068c0:	897b      	ldrh	r3, [r7, #10]
 80068c2:	f083 0310 	eor.w	r3, r3, #16
 80068c6:	817b      	strh	r3, [r7, #10]
 80068c8:	897b      	ldrh	r3, [r7, #10]
 80068ca:	f083 0320 	eor.w	r3, r3, #32
 80068ce:	817b      	strh	r3, [r7, #10]
 80068d0:	1d3b      	adds	r3, r7, #4
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	463b      	mov	r3, r7
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	897b      	ldrh	r3, [r7, #10]
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]
 80068f4:	e3b5      	b.n	8007062 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	7b1b      	ldrb	r3, [r3, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 8090 	bne.w	8006a22 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006902:	463b      	mov	r3, r7
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	463b      	mov	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	429a      	cmp	r2, r3
 8006910:	d90e      	bls.n	8006930 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8006912:	463b      	mov	r3, r7
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	619a      	str	r2, [r3, #24]
 800692e:	e008      	b.n	8006942 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800693a:	463b      	mov	r3, r7
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006942:	1d3b      	adds	r3, r7, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006952:	b29b      	uxth	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800695a:	4413      	add	r3, r2
 800695c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006960:	463b      	mov	r3, r7
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	00da      	lsls	r2, r3, #3
 8006968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800696c:	4413      	add	r3, r2
 800696e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697a:	2b3e      	cmp	r3, #62	; 0x3e
 800697c:	d91d      	bls.n	80069ba <USB_EPStartXfer+0xaf0>
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <USB_EPStartXfer+0xad4>
 8006994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006998:	3b01      	subs	r3, #1
 800699a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800699e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	029b      	lsls	r3, r3, #10
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	e325      	b.n	8007006 <USB_EPStartXfer+0x113c>
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d116      	bne.n	80069f0 <USB_EPStartXfer+0xb26>
 80069c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d4:	801a      	strh	r2, [r3, #0]
 80069d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	e30a      	b.n	8007006 <USB_EPStartXfer+0x113c>
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <USB_EPStartXfer+0xb46>
 8006a06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	029b      	lsls	r3, r3, #10
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	e2f1      	b.n	8007006 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a22:	463b      	mov	r3, r7
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	78db      	ldrb	r3, [r3, #3]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	f040 818f 	bne.w	8006d4c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a2e:	463b      	mov	r3, r7
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d175      	bne.n	8006b24 <USB_EPStartXfer+0xc5a>
 8006a38:	1d3b      	adds	r3, r7, #4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a40:	1d3b      	adds	r3, r7, #4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a50:	4413      	add	r3, r2
 8006a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a56:	463b      	mov	r3, r7
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	00da      	lsls	r2, r3, #3
 8006a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a62:	4413      	add	r3, r2
 8006a64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	2b3e      	cmp	r3, #62	; 0x3e
 8006a74:	d91f      	bls.n	8006ab6 <USB_EPStartXfer+0xbec>
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a82:	463b      	mov	r3, r7
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <USB_EPStartXfer+0xbd0>
 8006a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a94:	3b01      	subs	r3, #1
 8006a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	029b      	lsls	r3, r3, #10
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	e05c      	b.n	8006b70 <USB_EPStartXfer+0xca6>
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d116      	bne.n	8006aee <USB_EPStartXfer+0xc24>
 8006ac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ad2:	801a      	strh	r2, [r3, #0]
 8006ad4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	e040      	b.n	8006b70 <USB_EPStartXfer+0xca6>
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006afa:	463b      	mov	r3, r7
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <USB_EPStartXfer+0xc48>
 8006b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	029b      	lsls	r3, r3, #10
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	e025      	b.n	8006b70 <USB_EPStartXfer+0xca6>
 8006b24:	463b      	mov	r3, r7
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d120      	bne.n	8006b70 <USB_EPStartXfer+0xca6>
 8006b2e:	1d3b      	adds	r3, r7, #4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b36:	1d3b      	adds	r3, r7, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b46:	4413      	add	r3, r2
 8006b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	00da      	lsls	r2, r3, #3
 8006b54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b58:	4413      	add	r3, r2
 8006b5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b62:	463b      	mov	r3, r7
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	1d3b      	adds	r3, r7, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d175      	bne.n	8006c6e <USB_EPStartXfer+0xda4>
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	00da      	lsls	r2, r3, #3
 8006ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bbe:	d91f      	bls.n	8006c00 <USB_EPStartXfer+0xd36>
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bcc:	463b      	mov	r3, r7
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 031f 	and.w	r3, r3, #31
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <USB_EPStartXfer+0xd1a>
 8006bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bde:	3b01      	subs	r3, #1
 8006be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	029b      	lsls	r3, r3, #10
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	e058      	b.n	8006cb2 <USB_EPStartXfer+0xde8>
 8006c00:	463b      	mov	r3, r7
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d116      	bne.n	8006c38 <USB_EPStartXfer+0xd6e>
 8006c0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	e03c      	b.n	8006cb2 <USB_EPStartXfer+0xde8>
 8006c38:	463b      	mov	r3, r7
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c44:	463b      	mov	r3, r7
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d004      	beq.n	8006c5c <USB_EPStartXfer+0xd92>
 8006c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c56:	3301      	adds	r3, #1
 8006c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	029b      	lsls	r3, r3, #10
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e021      	b.n	8006cb2 <USB_EPStartXfer+0xde8>
 8006c6e:	463b      	mov	r3, r7
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d11c      	bne.n	8006cb2 <USB_EPStartXfer+0xde8>
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c88:	4413      	add	r3, r2
 8006c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c8e:	463b      	mov	r3, r7
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	00da      	lsls	r2, r3, #3
 8006c96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cb0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 81a4 	beq.w	8007006 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cbe:	1d3b      	adds	r3, r7, #4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cd2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <USB_EPStartXfer+0xe20>
 8006cde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10d      	bne.n	8006d06 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 8187 	bne.w	8007006 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cf8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 8180 	bne.w	8007006 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d20:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	463b      	mov	r3, r7
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8013      	strh	r3, [r2, #0]
 8006d4a:	e15c      	b.n	8007006 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	78db      	ldrb	r3, [r3, #3]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	f040 8155 	bne.w	8007002 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	463b      	mov	r3, r7
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d90e      	bls.n	8006d86 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8006d68:	463b      	mov	r3, r7
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006d72:	463b      	mov	r3, r7
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699a      	ldr	r2, [r3, #24]
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7c:	1ad2      	subs	r2, r2, r3
 8006d7e:	463b      	mov	r3, r7
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	619a      	str	r2, [r3, #24]
 8006d84:	e008      	b.n	8006d98 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8006d86:	463b      	mov	r3, r7
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006d90:	463b      	mov	r3, r7
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2200      	movs	r2, #0
 8006d96:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d98:	463b      	mov	r3, r7
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d16f      	bne.n	8006e82 <USB_EPStartXfer+0xfb8>
 8006da2:	1d3b      	adds	r3, r7, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	00da      	lsls	r2, r3, #3
 8006dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dcc:	4413      	add	r3, r2
 8006dce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dda:	2b3e      	cmp	r3, #62	; 0x3e
 8006ddc:	d91d      	bls.n	8006e1a <USB_EPStartXfer+0xf50>
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d104      	bne.n	8006dfe <USB_EPStartXfer+0xf34>
 8006df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	029b      	lsls	r3, r3, #10
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e058      	b.n	8006ecc <USB_EPStartXfer+0x1002>
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d116      	bne.n	8006e50 <USB_EPStartXfer+0xf86>
 8006e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e34:	801a      	strh	r2, [r3, #0]
 8006e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	e03d      	b.n	8006ecc <USB_EPStartXfer+0x1002>
 8006e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e54:	085b      	lsrs	r3, r3, #1
 8006e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d004      	beq.n	8006e70 <USB_EPStartXfer+0xfa6>
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	029b      	lsls	r3, r3, #10
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e024      	b.n	8006ecc <USB_EPStartXfer+0x1002>
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	785b      	ldrb	r3, [r3, #1]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d11f      	bne.n	8006ecc <USB_EPStartXfer+0x1002>
 8006e8c:	1d3b      	adds	r3, r7, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e94:	1d3b      	adds	r3, r7, #4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006eaa:	463b      	mov	r3, r7
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	00da      	lsls	r2, r3, #3
 8006eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	1d3b      	adds	r3, r7, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d16f      	bne.n	8006fbe <USB_EPStartXfer+0x10f4>
 8006ede:	1d3b      	adds	r3, r7, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006efc:	463b      	mov	r3, r7
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	00da      	lsls	r2, r3, #3
 8006f04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f16:	2b3e      	cmp	r3, #62	; 0x3e
 8006f18:	d91d      	bls.n	8006f56 <USB_EPStartXfer+0x108c>
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <USB_EPStartXfer+0x1070>
 8006f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f34:	3b01      	subs	r3, #1
 8006f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	029b      	lsls	r3, r3, #10
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	e057      	b.n	8007006 <USB_EPStartXfer+0x113c>
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d116      	bne.n	8006f8c <USB_EPStartXfer+0x10c2>
 8006f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f88:	801a      	strh	r2, [r3, #0]
 8006f8a:	e03c      	b.n	8007006 <USB_EPStartXfer+0x113c>
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <USB_EPStartXfer+0x10e2>
 8006fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	029b      	lsls	r3, r3, #10
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e023      	b.n	8007006 <USB_EPStartXfer+0x113c>
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d11e      	bne.n	8007006 <USB_EPStartXfer+0x113c>
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fd8:	4413      	add	r3, r2
 8006fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fde:	463b      	mov	r3, r7
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	00da      	lsls	r2, r3, #3
 8006fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fea:	4413      	add	r3, r2
 8006fec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e001      	b.n	8007006 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e02e      	b.n	8007064 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	463b      	mov	r3, r7
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800701c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007020:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007024:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007028:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800702c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007030:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007034:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007038:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800703c:	1d3b      	adds	r3, r7, #4
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	463b      	mov	r3, r7
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	441a      	add	r2, r3
 800704a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800704e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705e:	b29b      	uxth	r3, r3
 8007060:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d020      	beq.n	80070c2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	81bb      	strh	r3, [r7, #12]
 8007098:	89bb      	ldrh	r3, [r7, #12]
 800709a:	f083 0310 	eor.w	r3, r3, #16
 800709e:	81bb      	strh	r3, [r7, #12]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	441a      	add	r2, r3
 80070aa:	89bb      	ldrh	r3, [r7, #12]
 80070ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	b29b      	uxth	r3, r3
 80070be:	8013      	strh	r3, [r2, #0]
 80070c0:	e01f      	b.n	8007102 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d8:	81fb      	strh	r3, [r7, #14]
 80070da:	89fb      	ldrh	r3, [r7, #14]
 80070dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070e0:	81fb      	strh	r3, [r7, #14]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	441a      	add	r2, r3
 80070ec:	89fb      	ldrh	r3, [r7, #14]
 80070ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fe:	b29b      	uxth	r3, r3
 8007100:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	7b1b      	ldrb	r3, [r3, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 809d 	bne.w	800725e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d04c      	beq.n	80071c6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	823b      	strh	r3, [r7, #16]
 800713a:	8a3b      	ldrh	r3, [r7, #16]
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01b      	beq.n	800717c <USB_EPClearStall+0x6c>
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715a:	81fb      	strh	r3, [r7, #14]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	89fb      	ldrh	r3, [r7, #14]
 8007168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007178:	b29b      	uxth	r3, r3
 800717a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	78db      	ldrb	r3, [r3, #3]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d06c      	beq.n	800725e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719a:	81bb      	strh	r3, [r7, #12]
 800719c:	89bb      	ldrh	r3, [r7, #12]
 800719e:	f083 0320 	eor.w	r3, r3, #32
 80071a2:	81bb      	strh	r3, [r7, #12]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	441a      	add	r2, r3
 80071ae:	89bb      	ldrh	r3, [r7, #12]
 80071b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	8013      	strh	r3, [r2, #0]
 80071c4:	e04b      	b.n	800725e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	82fb      	strh	r3, [r7, #22]
 80071d4:	8afb      	ldrh	r3, [r7, #22]
 80071d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01b      	beq.n	8007216 <USB_EPClearStall+0x106>
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f4:	82bb      	strh	r3, [r7, #20]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	8abb      	ldrh	r3, [r7, #20]
 8007202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800720e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007212:	b29b      	uxth	r3, r3
 8007214:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722c:	827b      	strh	r3, [r7, #18]
 800722e:	8a7b      	ldrh	r3, [r7, #18]
 8007230:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007234:	827b      	strh	r3, [r7, #18]
 8007236:	8a7b      	ldrh	r3, [r7, #18]
 8007238:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800723c:	827b      	strh	r3, [r7, #18]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	8a7b      	ldrh	r3, [r7, #18]
 800724a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725a:	b29b      	uxth	r3, r3
 800725c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2280      	movs	r2, #128	; 0x80
 8007282:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b08d      	sub	sp, #52	; 0x34
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	4611      	mov	r1, r2
 80072ee:	461a      	mov	r2, r3
 80072f0:	460b      	mov	r3, r1
 80072f2:	80fb      	strh	r3, [r7, #6]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072f8:	88bb      	ldrh	r3, [r7, #4]
 80072fa:	3301      	adds	r3, #1
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007308:	88fa      	ldrh	r2, [r7, #6]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007318:	e01b      	b.n	8007352 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	3301      	adds	r3, #1
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	b29b      	uxth	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	b29a      	uxth	r2, r3
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	3302      	adds	r3, #2
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	3301      	adds	r3, #1
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	3b01      	subs	r3, #1
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e0      	bne.n	800731a <USB_WritePMA+0x38>
  }
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	3734      	adds	r7, #52	; 0x34
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007366:	b480      	push	{r7}
 8007368:	b08b      	sub	sp, #44	; 0x2c
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	4611      	mov	r1, r2
 8007372:	461a      	mov	r2, r3
 8007374:	460b      	mov	r3, r1
 8007376:	80fb      	strh	r3, [r7, #6]
 8007378:	4613      	mov	r3, r2
 800737a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800737c:	88bb      	ldrh	r3, [r7, #4]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	b29b      	uxth	r3, r3
 8007382:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007396:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	e018      	b.n	80073d0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	3302      	adds	r3, #2
 80073aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	3301      	adds	r3, #1
 80073b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	3301      	adds	r3, #1
 80073c8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	3b01      	subs	r3, #1
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e3      	bne.n	800739e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80073d6:	88bb      	ldrh	r3, [r7, #4]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	701a      	strb	r2, [r3, #0]
  }
}
 80073f2:	bf00      	nop
 80073f4:	372c      	adds	r7, #44	; 0x2c
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800740a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800740e:	f002 f953 	bl	80096b8 <USBD_static_malloc>
 8007412:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007422:	2302      	movs	r3, #2
 8007424:	e066      	b.n	80074f4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7c1b      	ldrb	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d119      	bne.n	800746a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743a:	2202      	movs	r2, #2
 800743c:	2181      	movs	r1, #129	; 0x81
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 ffdf 	bl	8009402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800744a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800744e:	2202      	movs	r2, #2
 8007450:	2101      	movs	r1, #1
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 ffd5 	bl	8009402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2210      	movs	r2, #16
 8007464:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007468:	e016      	b.n	8007498 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800746a:	2340      	movs	r3, #64	; 0x40
 800746c:	2202      	movs	r2, #2
 800746e:	2181      	movs	r1, #129	; 0x81
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 ffc6 	bl	8009402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	2202      	movs	r2, #2
 8007480:	2101      	movs	r1, #1
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 ffbd 	bl	8009402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2210      	movs	r2, #16
 8007494:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007498:	2308      	movs	r3, #8
 800749a:	2203      	movs	r2, #3
 800749c:	2182      	movs	r1, #130	; 0x82
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 ffaf 	bl	8009402 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	7c1b      	ldrb	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d8:	2101      	movs	r1, #1
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f002 f881 	bl	80095e2 <USBD_LL_PrepareReceive>
 80074e0:	e007      	b.n	80074f2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	2101      	movs	r1, #1
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f002 f878 	bl	80095e2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007508:	2181      	movs	r1, #129	; 0x81
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 ff9f 	bl	800944e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007516:	2101      	movs	r1, #1
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 ff98 	bl	800944e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007526:	2182      	movs	r1, #130	; 0x82
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 ff90 	bl	800944e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007558:	4618      	mov	r0, r3
 800755a:	f002 f8bb 	bl	80096d4 <USBD_static_free>
    pdev->pClassData = NULL;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007580:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	e0af      	b.n	80076f8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d03f      	beq.n	8007624 <USBD_CDC_Setup+0xb4>
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	f040 809f 	bne.w	80076e8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d02e      	beq.n	8007610 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	b25b      	sxtb	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da16      	bge.n	80075ea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80075c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	88d2      	ldrh	r2, [r2, #6]
 80075ce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	88db      	ldrh	r3, [r3, #6]
 80075d4:	2b07      	cmp	r3, #7
 80075d6:	bf28      	it	cs
 80075d8:	2307      	movcs	r3, #7
 80075da:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	89fa      	ldrh	r2, [r7, #14]
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 facf 	bl	8008b86 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80075e8:	e085      	b.n	80076f6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	785a      	ldrb	r2, [r3, #1]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	88db      	ldrh	r3, [r3, #6]
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007600:	6939      	ldr	r1, [r7, #16]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	88db      	ldrh	r3, [r3, #6]
 8007606:	461a      	mov	r2, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fae8 	bl	8008bde <USBD_CtlPrepareRx>
      break;
 800760e:	e072      	b.n	80076f6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	7850      	ldrb	r0, [r2, #1]
 800761c:	2200      	movs	r2, #0
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	4798      	blx	r3
      break;
 8007622:	e068      	b.n	80076f6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b0b      	cmp	r3, #11
 800762a:	d852      	bhi.n	80076d2 <USBD_CDC_Setup+0x162>
 800762c:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <USBD_CDC_Setup+0xc4>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007665 	.word	0x08007665
 8007638:	080076e1 	.word	0x080076e1
 800763c:	080076d3 	.word	0x080076d3
 8007640:	080076d3 	.word	0x080076d3
 8007644:	080076d3 	.word	0x080076d3
 8007648:	080076d3 	.word	0x080076d3
 800764c:	080076d3 	.word	0x080076d3
 8007650:	080076d3 	.word	0x080076d3
 8007654:	080076d3 	.word	0x080076d3
 8007658:	080076d3 	.word	0x080076d3
 800765c:	0800768f 	.word	0x0800768f
 8007660:	080076b9 	.word	0x080076b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b03      	cmp	r3, #3
 800766e:	d107      	bne.n	8007680 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007670:	f107 030a 	add.w	r3, r7, #10
 8007674:	2202      	movs	r2, #2
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 fa84 	bl	8008b86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800767e:	e032      	b.n	80076e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fa0e 	bl	8008aa4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007688:	2303      	movs	r3, #3
 800768a:	75fb      	strb	r3, [r7, #23]
          break;
 800768c:	e02b      	b.n	80076e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b03      	cmp	r3, #3
 8007698:	d107      	bne.n	80076aa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800769a:	f107 030d 	add.w	r3, r7, #13
 800769e:	2201      	movs	r2, #1
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fa6f 	bl	8008b86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076a8:	e01d      	b.n	80076e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f9f9 	bl	8008aa4 <USBD_CtlError>
            ret = USBD_FAIL;
 80076b2:	2303      	movs	r3, #3
 80076b4:	75fb      	strb	r3, [r7, #23]
          break;
 80076b6:	e016      	b.n	80076e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d00f      	beq.n	80076e4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 f9ec 	bl	8008aa4 <USBD_CtlError>
            ret = USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076d0:	e008      	b.n	80076e4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 f9e5 	bl	8008aa4 <USBD_CtlError>
          ret = USBD_FAIL;
 80076da:	2303      	movs	r3, #3
 80076dc:	75fb      	strb	r3, [r7, #23]
          break;
 80076de:	e002      	b.n	80076e6 <USBD_CDC_Setup+0x176>
          break;
 80076e0:	bf00      	nop
 80076e2:	e008      	b.n	80076f6 <USBD_CDC_Setup+0x186>
          break;
 80076e4:	bf00      	nop
      }
      break;
 80076e6:	e006      	b.n	80076f6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 f9da 	bl	8008aa4 <USBD_CtlError>
      ret = USBD_FAIL;
 80076f0:	2303      	movs	r3, #3
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007712:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800771e:	2303      	movs	r3, #3
 8007720:	e04f      	b.n	80077c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007728:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	3318      	adds	r3, #24
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d029      	beq.n	8007794 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	440b      	add	r3, r1
 800774e:	3318      	adds	r3, #24
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	78f9      	ldrb	r1, [r7, #3]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	460b      	mov	r3, r1
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	4403      	add	r3, r0
 8007760:	3338      	adds	r3, #56	; 0x38
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	fbb2 f1f3 	udiv	r1, r2, r3
 8007768:	fb03 f301 	mul.w	r3, r3, r1
 800776c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800776e:	2b00      	cmp	r3, #0
 8007770:	d110      	bne.n	8007794 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	3318      	adds	r3, #24
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007786:	78f9      	ldrb	r1, [r7, #3]
 8007788:	2300      	movs	r3, #0
 800778a:	2200      	movs	r2, #0
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 ff07 	bl	80095a0 <USBD_LL_Transmit>
 8007792:	e015      	b.n	80077c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e015      	b.n	8007818 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 ff17 	bl	8009624 <USBD_LL_GetRxDataSize>
 80077f6:	4602      	mov	r2, r0
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007812:	4611      	mov	r1, r2
 8007814:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007836:	2303      	movs	r3, #3
 8007838:	e01b      	b.n	8007872 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d015      	beq.n	8007870 <USBD_CDC_EP0_RxReady+0x50>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800784a:	2bff      	cmp	r3, #255	; 0xff
 800784c:	d010      	beq.n	8007870 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800785c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007864:	b292      	uxth	r2, r2
 8007866:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	22ff      	movs	r2, #255	; 0xff
 800786c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2243      	movs	r2, #67	; 0x43
 8007888:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800788a:	4b03      	ldr	r3, [pc, #12]	; (8007898 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	20000098 	.word	0x20000098

0800789c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2243      	movs	r2, #67	; 0x43
 80078a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80078aa:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000054 	.word	0x20000054

080078bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2243      	movs	r2, #67	; 0x43
 80078c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80078ca:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	200000dc 	.word	0x200000dc

080078dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	220a      	movs	r2, #10
 80078e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078ea:	4b03      	ldr	r3, [pc, #12]	; (80078f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	20000010 	.word	0x20000010

080078fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800790c:	2303      	movs	r3, #3
 800790e:	e004      	b.n	800791a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007938:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007940:	2303      	movs	r3, #3
 8007942:	e008      	b.n	8007956 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007972:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	e004      	b.n	8007988 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80079a4:	2301      	movs	r3, #1
 80079a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e01a      	b.n	80079ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d114      	bne.n	80079ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079de:	2181      	movs	r1, #129	; 0x81
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fddd 	bl	80095a0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e016      	b.n	8007a40 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7c1b      	ldrb	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a24:	2101      	movs	r1, #1
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fddb 	bl	80095e2 <USBD_LL_PrepareReceive>
 8007a2c:	e007      	b.n	8007a3e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a34:	2340      	movs	r3, #64	; 0x40
 8007a36:	2101      	movs	r1, #1
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fdd2 	bl	80095e2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e01f      	b.n	8007aa0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	79fa      	ldrb	r2, [r7, #7]
 8007a92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f001 fc37 	bl	8009308 <USBD_LL_Init>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e016      	b.n	8007aee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00b      	beq.n	8007aec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	f107 020e 	add.w	r2, r7, #14
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4798      	blx	r3
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 fc64 	bl	80093cc <USBD_LL_Start>
 8007b04:	4603      	mov	r3, r0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b30:	2303      	movs	r3, #3
 8007b32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	78fa      	ldrb	r2, [r7, #3]
 8007b48:	4611      	mov	r1, r2
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
  }

  return USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 ff46 	bl	8008a30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bc0:	f003 031f 	and.w	r3, r3, #31
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d01a      	beq.n	8007bfe <USBD_LL_SetupStage+0x72>
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d822      	bhi.n	8007c12 <USBD_LL_SetupStage+0x86>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <USBD_LL_SetupStage+0x4a>
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d00a      	beq.n	8007bea <USBD_LL_SetupStage+0x5e>
 8007bd4:	e01d      	b.n	8007c12 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f9ee 	bl	8007fc0 <USBD_StdDevReq>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]
      break;
 8007be8:	e020      	b.n	8007c2c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa52 	bl	800809c <USBD_StdItfReq>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfc:	e016      	b.n	8007c2c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa91 	bl	800812e <USBD_StdEPReq>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c10:	e00c      	b.n	8007c2c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 fc33 	bl	800948c <USBD_LL_StallEP>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2a:	bf00      	nop
  }

  return ret;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c44:	7afb      	ldrb	r3, [r7, #11]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d138      	bne.n	8007cbc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d14a      	bne.n	8007cf2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d913      	bls.n	8007c90 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	1ad2      	subs	r2, r2, r3
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	bf28      	it	cs
 8007c82:	4613      	movcs	r3, r2
 8007c84:	461a      	mov	r2, r3
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 ffc5 	bl	8008c18 <USBD_CtlContinueRx>
 8007c8e:	e030      	b.n	8007cf2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d10b      	bne.n	8007cb4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 ffc0 	bl	8008c3a <USBD_CtlSendStatus>
 8007cba:	e01a      	b.n	8007cf2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d114      	bne.n	8007cf2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00e      	beq.n	8007cf2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	7afa      	ldrb	r2, [r7, #11]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	4798      	blx	r3
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	e000      	b.n	8007cf4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	460b      	mov	r3, r1
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d16b      	bne.n	8007de8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3314      	adds	r3, #20
 8007d14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d156      	bne.n	8007dce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d914      	bls.n	8007d56 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	1ad2      	subs	r2, r2, r3
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 ff3a 	bl	8008bbc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f001 fc47 	bl	80095e2 <USBD_LL_PrepareReceive>
 8007d54:	e03b      	b.n	8007dce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d11c      	bne.n	8007d9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d316      	bcc.n	8007d9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d20f      	bcs.n	8007d9c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 ff1b 	bl	8008bbc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2200      	movs	r2, #0
 8007d92:	2100      	movs	r1, #0
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f001 fc24 	bl	80095e2 <USBD_LL_PrepareReceive>
 8007d9a:	e018      	b.n	8007dce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d10b      	bne.n	8007dc0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dc0:	2180      	movs	r1, #128	; 0x80
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f001 fb62 	bl	800948c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 ff49 	bl	8008c60 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d122      	bne.n	8007e1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f7ff fe98 	bl	8007b0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007de6:	e01a      	b.n	8007e1e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d114      	bne.n	8007e1e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00e      	beq.n	8007e1e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	7afa      	ldrb	r2, [r7, #11]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	4798      	blx	r3
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	e000      	b.n	8007e20 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e02f      	b.n	8007ebc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00f      	beq.n	8007e86 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d009      	beq.n	8007e86 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6852      	ldr	r2, [r2, #4]
 8007e7e:	b2d2      	uxtb	r2, r2
 8007e80:	4611      	mov	r1, r2
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e86:	2340      	movs	r3, #64	; 0x40
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 fab8 	bl	8009402 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2240      	movs	r2, #64	; 0x40
 8007e9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ea2:	2340      	movs	r3, #64	; 0x40
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2180      	movs	r1, #128	; 0x80
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 faaa 	bl	8009402 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2240      	movs	r2, #64	; 0x40
 8007eb8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2204      	movs	r2, #4
 8007efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d106      	bne.n	8007f32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e012      	b.n	8007f7c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d10b      	bne.n	8007f7a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fa2:	8a3b      	ldrh	r3, [r7, #16]
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	b21a      	sxth	r2, r3
 8007fa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fb2:	89fb      	ldrh	r3, [r7, #14]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	371c      	adds	r7, #28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	d005      	beq.n	8007fe6 <USBD_StdDevReq+0x26>
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d853      	bhi.n	8008086 <USBD_StdDevReq+0xc6>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00b      	beq.n	8007ffa <USBD_StdDevReq+0x3a>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d14f      	bne.n	8008086 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4798      	blx	r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff8:	e04a      	b.n	8008090 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b09      	cmp	r3, #9
 8008000:	d83b      	bhi.n	800807a <USBD_StdDevReq+0xba>
 8008002:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <USBD_StdDevReq+0x48>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	0800805d 	.word	0x0800805d
 800800c:	08008071 	.word	0x08008071
 8008010:	0800807b 	.word	0x0800807b
 8008014:	08008067 	.word	0x08008067
 8008018:	0800807b 	.word	0x0800807b
 800801c:	0800803b 	.word	0x0800803b
 8008020:	08008031 	.word	0x08008031
 8008024:	0800807b 	.word	0x0800807b
 8008028:	08008053 	.word	0x08008053
 800802c:	08008045 	.word	0x08008045
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f9de 	bl	80083f4 <USBD_GetDescriptor>
          break;
 8008038:	e024      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb6d 	bl	800871c <USBD_SetAddress>
          break;
 8008042:	e01f      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fbac 	bl	80087a4 <USBD_SetConfig>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
          break;
 8008050:	e018      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fc4b 	bl	80088f0 <USBD_GetConfig>
          break;
 800805a:	e013      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fc7c 	bl	800895c <USBD_GetStatus>
          break;
 8008064:	e00e      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fcab 	bl	80089c4 <USBD_SetFeature>
          break;
 800806e:	e009      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fcba 	bl	80089ec <USBD_ClrFeature>
          break;
 8008078:	e004      	b.n	8008084 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fd11 	bl	8008aa4 <USBD_CtlError>
          break;
 8008082:	bf00      	nop
      }
      break;
 8008084:	e004      	b.n	8008090 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fd0b 	bl	8008aa4 <USBD_CtlError>
      break;
 800808e:	bf00      	nop
  }

  return ret;
 8008090:	7bfb      	ldrb	r3, [r7, #15]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop

0800809c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	d005      	beq.n	80080c2 <USBD_StdItfReq+0x26>
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d82f      	bhi.n	800811a <USBD_StdItfReq+0x7e>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <USBD_StdItfReq+0x26>
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d12b      	bne.n	800811a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d81d      	bhi.n	800810c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	889b      	ldrh	r3, [r3, #4]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d813      	bhi.n	8008102 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	88db      	ldrh	r3, [r3, #6]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d110      	bne.n	8008116 <USBD_StdItfReq+0x7a>
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10d      	bne.n	8008116 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fd9d 	bl	8008c3a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008100:	e009      	b.n	8008116 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fccd 	bl	8008aa4 <USBD_CtlError>
          break;
 800810a:	e004      	b.n	8008116 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fcc8 	bl	8008aa4 <USBD_CtlError>
          break;
 8008114:	e000      	b.n	8008118 <USBD_StdItfReq+0x7c>
          break;
 8008116:	bf00      	nop
      }
      break;
 8008118:	e004      	b.n	8008124 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fcc1 	bl	8008aa4 <USBD_CtlError>
      break;
 8008122:	bf00      	nop
  }

  return ret;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	889b      	ldrh	r3, [r3, #4]
 8008140:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d007      	beq.n	800815e <USBD_StdEPReq+0x30>
 800814e:	2b40      	cmp	r3, #64	; 0x40
 8008150:	f200 8145 	bhi.w	80083de <USBD_StdEPReq+0x2b0>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00c      	beq.n	8008172 <USBD_StdEPReq+0x44>
 8008158:	2b20      	cmp	r3, #32
 800815a:	f040 8140 	bne.w	80083de <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]
      break;
 8008170:	e13a      	b.n	80083e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b03      	cmp	r3, #3
 8008178:	d007      	beq.n	800818a <USBD_StdEPReq+0x5c>
 800817a:	2b03      	cmp	r3, #3
 800817c:	f300 8129 	bgt.w	80083d2 <USBD_StdEPReq+0x2a4>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d07f      	beq.n	8008284 <USBD_StdEPReq+0x156>
 8008184:	2b01      	cmp	r3, #1
 8008186:	d03c      	beq.n	8008202 <USBD_StdEPReq+0xd4>
 8008188:	e123      	b.n	80083d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d002      	beq.n	800819c <USBD_StdEPReq+0x6e>
 8008196:	2b03      	cmp	r3, #3
 8008198:	d016      	beq.n	80081c8 <USBD_StdEPReq+0x9a>
 800819a:	e02c      	b.n	80081f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00d      	beq.n	80081be <USBD_StdEPReq+0x90>
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b80      	cmp	r3, #128	; 0x80
 80081a6:	d00a      	beq.n	80081be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 f96d 	bl	800948c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081b2:	2180      	movs	r1, #128	; 0x80
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f969 	bl	800948c <USBD_LL_StallEP>
 80081ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081bc:	e020      	b.n	8008200 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fc6f 	bl	8008aa4 <USBD_CtlError>
              break;
 80081c6:	e01b      	b.n	8008200 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	885b      	ldrh	r3, [r3, #2]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10e      	bne.n	80081ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <USBD_StdEPReq+0xc0>
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b80      	cmp	r3, #128	; 0x80
 80081da:	d008      	beq.n	80081ee <USBD_StdEPReq+0xc0>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	88db      	ldrh	r3, [r3, #6]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 f94f 	bl	800948c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fd23 	bl	8008c3a <USBD_CtlSendStatus>

              break;
 80081f4:	e004      	b.n	8008200 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fc53 	bl	8008aa4 <USBD_CtlError>
              break;
 80081fe:	bf00      	nop
          }
          break;
 8008200:	e0ec      	b.n	80083dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d002      	beq.n	8008214 <USBD_StdEPReq+0xe6>
 800820e:	2b03      	cmp	r3, #3
 8008210:	d016      	beq.n	8008240 <USBD_StdEPReq+0x112>
 8008212:	e030      	b.n	8008276 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <USBD_StdEPReq+0x108>
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b80      	cmp	r3, #128	; 0x80
 800821e:	d00a      	beq.n	8008236 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 f931 	bl	800948c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800822a:	2180      	movs	r1, #128	; 0x80
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f92d 	bl	800948c <USBD_LL_StallEP>
 8008232:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008234:	e025      	b.n	8008282 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc33 	bl	8008aa4 <USBD_CtlError>
              break;
 800823e:	e020      	b.n	8008282 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	885b      	ldrh	r3, [r3, #2]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d11b      	bne.n	8008280 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	2b00      	cmp	r3, #0
 8008250:	d004      	beq.n	800825c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 f937 	bl	80094ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fcec 	bl	8008c3a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008274:	e004      	b.n	8008280 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc13 	bl	8008aa4 <USBD_CtlError>
              break;
 800827e:	e000      	b.n	8008282 <USBD_StdEPReq+0x154>
              break;
 8008280:	bf00      	nop
          }
          break;
 8008282:	e0ab      	b.n	80083dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d002      	beq.n	8008296 <USBD_StdEPReq+0x168>
 8008290:	2b03      	cmp	r3, #3
 8008292:	d032      	beq.n	80082fa <USBD_StdEPReq+0x1cc>
 8008294:	e097      	b.n	80083c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d007      	beq.n	80082ac <USBD_StdEPReq+0x17e>
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b80      	cmp	r3, #128	; 0x80
 80082a0:	d004      	beq.n	80082ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fbfd 	bl	8008aa4 <USBD_CtlError>
                break;
 80082aa:	e091      	b.n	80083d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da0b      	bge.n	80082cc <USBD_StdEPReq+0x19e>
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	3310      	adds	r3, #16
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4413      	add	r3, r2
 80082c8:	3304      	adds	r3, #4
 80082ca:	e00b      	b.n	80082e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	3304      	adds	r3, #4
 80082e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2202      	movs	r2, #2
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fc47 	bl	8008b86 <USBD_CtlSendData>
              break;
 80082f8:	e06a      	b.n	80083d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da11      	bge.n	8008326 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	f003 020f 	and.w	r2, r3, #15
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	3324      	adds	r3, #36	; 0x24
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d117      	bne.n	800834c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fbc0 	bl	8008aa4 <USBD_CtlError>
                  break;
 8008324:	e054      	b.n	80083d0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	f003 020f 	and.w	r2, r3, #15
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d104      	bne.n	800834c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fbad 	bl	8008aa4 <USBD_CtlError>
                  break;
 800834a:	e041      	b.n	80083d0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800834c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008350:	2b00      	cmp	r3, #0
 8008352:	da0b      	bge.n	800836c <USBD_StdEPReq+0x23e>
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	3310      	adds	r3, #16
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	4413      	add	r3, r2
 8008368:	3304      	adds	r3, #4
 800836a:	e00b      	b.n	8008384 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	3304      	adds	r3, #4
 8008384:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <USBD_StdEPReq+0x264>
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b80      	cmp	r3, #128	; 0x80
 8008390:	d103      	bne.n	800839a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2200      	movs	r2, #0
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	e00e      	b.n	80083b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 f8b2 	bl	8009508 <USBD_LL_IsStallEP>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	e002      	b.n	80083b8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2202      	movs	r2, #2
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fbe1 	bl	8008b86 <USBD_CtlSendData>
              break;
 80083c4:	e004      	b.n	80083d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fb6b 	bl	8008aa4 <USBD_CtlError>
              break;
 80083ce:	bf00      	nop
          }
          break;
 80083d0:	e004      	b.n	80083dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb65 	bl	8008aa4 <USBD_CtlError>
          break;
 80083da:	bf00      	nop
      }
      break;
 80083dc:	e004      	b.n	80083e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fb5f 	bl	8008aa4 <USBD_CtlError>
      break;
 80083e6:	bf00      	nop
  }

  return ret;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	885b      	ldrh	r3, [r3, #2]
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	2b0e      	cmp	r3, #14
 8008416:	f200 8152 	bhi.w	80086be <USBD_GetDescriptor+0x2ca>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <USBD_GetDescriptor+0x2c>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	08008491 	.word	0x08008491
 8008424:	080084a9 	.word	0x080084a9
 8008428:	080084e9 	.word	0x080084e9
 800842c:	080086bf 	.word	0x080086bf
 8008430:	080086bf 	.word	0x080086bf
 8008434:	0800865f 	.word	0x0800865f
 8008438:	0800868b 	.word	0x0800868b
 800843c:	080086bf 	.word	0x080086bf
 8008440:	080086bf 	.word	0x080086bf
 8008444:	080086bf 	.word	0x080086bf
 8008448:	080086bf 	.word	0x080086bf
 800844c:	080086bf 	.word	0x080086bf
 8008450:	080086bf 	.word	0x080086bf
 8008454:	080086bf 	.word	0x080086bf
 8008458:	0800845d 	.word	0x0800845d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	7c12      	ldrb	r2, [r2, #16]
 8008474:	f107 0108 	add.w	r1, r7, #8
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800847e:	e126      	b.n	80086ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fb0e 	bl	8008aa4 <USBD_CtlError>
        err++;
 8008488:	7afb      	ldrb	r3, [r7, #11]
 800848a:	3301      	adds	r3, #1
 800848c:	72fb      	strb	r3, [r7, #11]
      break;
 800848e:	e11e      	b.n	80086ce <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	7c12      	ldrb	r2, [r2, #16]
 800849c:	f107 0108 	add.w	r1, r7, #8
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	60f8      	str	r0, [r7, #12]
      break;
 80084a6:	e112      	b.n	80086ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	7c1b      	ldrb	r3, [r3, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10d      	bne.n	80084cc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b8:	f107 0208 	add.w	r2, r7, #8
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	2202      	movs	r2, #2
 80084c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084ca:	e100      	b.n	80086ce <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	f107 0208 	add.w	r2, r7, #8
 80084d8:	4610      	mov	r0, r2
 80084da:	4798      	blx	r3
 80084dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3301      	adds	r3, #1
 80084e2:	2202      	movs	r2, #2
 80084e4:	701a      	strb	r2, [r3, #0]
      break;
 80084e6:	e0f2      	b.n	80086ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	885b      	ldrh	r3, [r3, #2]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	f200 80ac 	bhi.w	800864c <USBD_GetDescriptor+0x258>
 80084f4:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <USBD_GetDescriptor+0x108>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	08008515 	.word	0x08008515
 8008500:	08008549 	.word	0x08008549
 8008504:	0800857d 	.word	0x0800857d
 8008508:	080085b1 	.word	0x080085b1
 800850c:	080085e5 	.word	0x080085e5
 8008510:	08008619 	.word	0x08008619
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	7c12      	ldrb	r2, [r2, #16]
 800852c:	f107 0108 	add.w	r1, r7, #8
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008536:	e091      	b.n	800865c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fab2 	bl	8008aa4 <USBD_CtlError>
            err++;
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	3301      	adds	r3, #1
 8008544:	72fb      	strb	r3, [r7, #11]
          break;
 8008546:	e089      	b.n	800865c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00b      	beq.n	800856c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	7c12      	ldrb	r2, [r2, #16]
 8008560:	f107 0108 	add.w	r1, r7, #8
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800856a:	e077      	b.n	800865c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa98 	bl	8008aa4 <USBD_CtlError>
            err++;
 8008574:	7afb      	ldrb	r3, [r7, #11]
 8008576:	3301      	adds	r3, #1
 8008578:	72fb      	strb	r3, [r7, #11]
          break;
 800857a:	e06f      	b.n	800865c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	7c12      	ldrb	r2, [r2, #16]
 8008594:	f107 0108 	add.w	r1, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800859e:	e05d      	b.n	800865c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa7e 	bl	8008aa4 <USBD_CtlError>
            err++;
 80085a8:	7afb      	ldrb	r3, [r7, #11]
 80085aa:	3301      	adds	r3, #1
 80085ac:	72fb      	strb	r3, [r7, #11]
          break;
 80085ae:	e055      	b.n	800865c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	7c12      	ldrb	r2, [r2, #16]
 80085c8:	f107 0108 	add.w	r1, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d2:	e043      	b.n	800865c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa64 	bl	8008aa4 <USBD_CtlError>
            err++;
 80085dc:	7afb      	ldrb	r3, [r7, #11]
 80085de:	3301      	adds	r3, #1
 80085e0:	72fb      	strb	r3, [r7, #11]
          break;
 80085e2:	e03b      	b.n	800865c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	7c12      	ldrb	r2, [r2, #16]
 80085fc:	f107 0108 	add.w	r1, r7, #8
 8008600:	4610      	mov	r0, r2
 8008602:	4798      	blx	r3
 8008604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008606:	e029      	b.n	800865c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa4a 	bl	8008aa4 <USBD_CtlError>
            err++;
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	3301      	adds	r3, #1
 8008614:	72fb      	strb	r3, [r7, #11]
          break;
 8008616:	e021      	b.n	800865c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	7c12      	ldrb	r2, [r2, #16]
 8008630:	f107 0108 	add.w	r1, r7, #8
 8008634:	4610      	mov	r0, r2
 8008636:	4798      	blx	r3
 8008638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863a:	e00f      	b.n	800865c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa30 	bl	8008aa4 <USBD_CtlError>
            err++;
 8008644:	7afb      	ldrb	r3, [r7, #11]
 8008646:	3301      	adds	r3, #1
 8008648:	72fb      	strb	r3, [r7, #11]
          break;
 800864a:	e007      	b.n	800865c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa28 	bl	8008aa4 <USBD_CtlError>
          err++;
 8008654:	7afb      	ldrb	r3, [r7, #11]
 8008656:	3301      	adds	r3, #1
 8008658:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800865a:	bf00      	nop
      }
      break;
 800865c:	e037      	b.n	80086ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7c1b      	ldrb	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d109      	bne.n	800867a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866e:	f107 0208 	add.w	r2, r7, #8
 8008672:	4610      	mov	r0, r2
 8008674:	4798      	blx	r3
 8008676:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008678:	e029      	b.n	80086ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fa11 	bl	8008aa4 <USBD_CtlError>
        err++;
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	3301      	adds	r3, #1
 8008686:	72fb      	strb	r3, [r7, #11]
      break;
 8008688:	e021      	b.n	80086ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7c1b      	ldrb	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10d      	bne.n	80086ae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	f107 0208 	add.w	r2, r7, #8
 800869e:	4610      	mov	r0, r2
 80086a0:	4798      	blx	r3
 80086a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	2207      	movs	r2, #7
 80086aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086ac:	e00f      	b.n	80086ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f9f7 	bl	8008aa4 <USBD_CtlError>
        err++;
 80086b6:	7afb      	ldrb	r3, [r7, #11]
 80086b8:	3301      	adds	r3, #1
 80086ba:	72fb      	strb	r3, [r7, #11]
      break;
 80086bc:	e007      	b.n	80086ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f9ef 	bl	8008aa4 <USBD_CtlError>
      err++;
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	3301      	adds	r3, #1
 80086ca:	72fb      	strb	r3, [r7, #11]
      break;
 80086cc:	bf00      	nop
  }

  if (err != 0U)
 80086ce:	7afb      	ldrb	r3, [r7, #11]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11e      	bne.n	8008712 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	88db      	ldrh	r3, [r3, #6]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d016      	beq.n	800870a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80086dc:	893b      	ldrh	r3, [r7, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00e      	beq.n	8008700 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88da      	ldrh	r2, [r3, #6]
 80086e6:	893b      	ldrh	r3, [r7, #8]
 80086e8:	4293      	cmp	r3, r2
 80086ea:	bf28      	it	cs
 80086ec:	4613      	movcs	r3, r2
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086f2:	893b      	ldrh	r3, [r7, #8]
 80086f4:	461a      	mov	r2, r3
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fa44 	bl	8008b86 <USBD_CtlSendData>
 80086fe:	e009      	b.n	8008714 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f9ce 	bl	8008aa4 <USBD_CtlError>
 8008708:	e004      	b.n	8008714 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fa95 	bl	8008c3a <USBD_CtlSendStatus>
 8008710:	e000      	b.n	8008714 <USBD_GetDescriptor+0x320>
    return;
 8008712:	bf00      	nop
  }
}
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop

0800871c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	889b      	ldrh	r3, [r3, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d131      	bne.n	8008792 <USBD_SetAddress+0x76>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	88db      	ldrh	r3, [r3, #6]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d12d      	bne.n	8008792 <USBD_SetAddress+0x76>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	2b7f      	cmp	r3, #127	; 0x7f
 800873c:	d829      	bhi.n	8008792 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	885b      	ldrh	r3, [r3, #2]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008748:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b03      	cmp	r3, #3
 8008754:	d104      	bne.n	8008760 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9a3 	bl	8008aa4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875e:	e01d      	b.n	800879c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7bfa      	ldrb	r2, [r7, #15]
 8008764:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fef8 	bl	8009562 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa61 	bl	8008c3a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	e009      	b.n	800879c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008790:	e004      	b.n	800879c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f985 	bl	8008aa4 <USBD_CtlError>
  }
}
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	4b4c      	ldr	r3, [pc, #304]	; (80088ec <USBD_SetConfig+0x148>)
 80087ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087bc:	4b4b      	ldr	r3, [pc, #300]	; (80088ec <USBD_SetConfig+0x148>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d905      	bls.n	80087d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f96c 	bl	8008aa4 <USBD_CtlError>
    return USBD_FAIL;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e088      	b.n	80088e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d002      	beq.n	80087e2 <USBD_SetConfig+0x3e>
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d025      	beq.n	800882c <USBD_SetConfig+0x88>
 80087e0:	e071      	b.n	80088c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087e2:	4b42      	ldr	r3, [pc, #264]	; (80088ec <USBD_SetConfig+0x148>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d01c      	beq.n	8008824 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80087ea:	4b40      	ldr	r3, [pc, #256]	; (80088ec <USBD_SetConfig+0x148>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087f4:	4b3d      	ldr	r3, [pc, #244]	; (80088ec <USBD_SetConfig+0x148>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff f992 	bl	8007b24 <USBD_SetClassConfig>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f949 	bl	8008aa4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008812:	e065      	b.n	80088e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa10 	bl	8008c3a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2203      	movs	r2, #3
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008822:	e05d      	b.n	80088e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fa08 	bl	8008c3a <USBD_CtlSendStatus>
      break;
 800882a:	e059      	b.n	80088e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800882c:	4b2f      	ldr	r3, [pc, #188]	; (80088ec <USBD_SetConfig+0x148>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d112      	bne.n	800885a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800883c:	4b2b      	ldr	r3, [pc, #172]	; (80088ec <USBD_SetConfig+0x148>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008846:	4b29      	ldr	r3, [pc, #164]	; (80088ec <USBD_SetConfig+0x148>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff f985 	bl	8007b5c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9f1 	bl	8008c3a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008858:	e042      	b.n	80088e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800885a:	4b24      	ldr	r3, [pc, #144]	; (80088ec <USBD_SetConfig+0x148>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	429a      	cmp	r2, r3
 8008866:	d02a      	beq.n	80088be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	b2db      	uxtb	r3, r3
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff f973 	bl	8007b5c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008876:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <USBD_SetConfig+0x148>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008880:	4b1a      	ldr	r3, [pc, #104]	; (80088ec <USBD_SetConfig+0x148>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff f94c 	bl	8007b24 <USBD_SetClassConfig>
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00f      	beq.n	80088b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f903 	bl	8008aa4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff f958 	bl	8007b5c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088b4:	e014      	b.n	80088e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f9bf 	bl	8008c3a <USBD_CtlSendStatus>
      break;
 80088bc:	e010      	b.n	80088e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9bb 	bl	8008c3a <USBD_CtlSendStatus>
      break;
 80088c4:	e00c      	b.n	80088e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f8eb 	bl	8008aa4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <USBD_SetConfig+0x148>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff f941 	bl	8007b5c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088da:	2303      	movs	r3, #3
 80088dc:	73fb      	strb	r3, [r7, #15]
      break;
 80088de:	bf00      	nop
  }

  return ret;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	200001a4 	.word	0x200001a4

080088f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	88db      	ldrh	r3, [r3, #6]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d004      	beq.n	800890c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f8cd 	bl	8008aa4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800890a:	e023      	b.n	8008954 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	dc02      	bgt.n	800891e <USBD_GetConfig+0x2e>
 8008918:	2b00      	cmp	r3, #0
 800891a:	dc03      	bgt.n	8008924 <USBD_GetConfig+0x34>
 800891c:	e015      	b.n	800894a <USBD_GetConfig+0x5a>
 800891e:	2b03      	cmp	r3, #3
 8008920:	d00b      	beq.n	800893a <USBD_GetConfig+0x4a>
 8008922:	e012      	b.n	800894a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3308      	adds	r3, #8
 800892e:	2201      	movs	r2, #1
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f927 	bl	8008b86 <USBD_CtlSendData>
        break;
 8008938:	e00c      	b.n	8008954 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3304      	adds	r3, #4
 800893e:	2201      	movs	r2, #1
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f91f 	bl	8008b86 <USBD_CtlSendData>
        break;
 8008948:	e004      	b.n	8008954 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f8a9 	bl	8008aa4 <USBD_CtlError>
        break;
 8008952:	bf00      	nop
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896c:	b2db      	uxtb	r3, r3
 800896e:	3b01      	subs	r3, #1
 8008970:	2b02      	cmp	r3, #2
 8008972:	d81e      	bhi.n	80089b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	88db      	ldrh	r3, [r3, #6]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d004      	beq.n	8008986 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f890 	bl	8008aa4 <USBD_CtlError>
        break;
 8008984:	e01a      	b.n	80089bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f043 0202 	orr.w	r2, r3, #2
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	330c      	adds	r3, #12
 80089a6:	2202      	movs	r2, #2
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f8eb 	bl	8008b86 <USBD_CtlSendData>
      break;
 80089b0:	e004      	b.n	80089bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f875 	bl	8008aa4 <USBD_CtlError>
      break;
 80089ba:	bf00      	nop
  }
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d106      	bne.n	80089e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f92b 	bl	8008c3a <USBD_CtlSendStatus>
  }
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	3b01      	subs	r3, #1
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d80b      	bhi.n	8008a1c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	885b      	ldrh	r3, [r3, #2]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d10c      	bne.n	8008a26 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f910 	bl	8008c3a <USBD_CtlSendStatus>
      }
      break;
 8008a1a:	e004      	b.n	8008a26 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f840 	bl	8008aa4 <USBD_CtlError>
      break;
 8008a24:	e000      	b.n	8008a28 <USBD_ClrFeature+0x3c>
      break;
 8008a26:	bf00      	nop
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	781a      	ldrb	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fa92 	bl	8007f84 <SWAPBYTE>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3301      	adds	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7ff fa85 	bl	8007f84 <SWAPBYTE>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3301      	adds	r3, #1
 8008a86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7ff fa78 	bl	8007f84 <SWAPBYTE>
 8008a94:	4603      	mov	r3, r0
 8008a96:	461a      	mov	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	80da      	strh	r2, [r3, #6]
}
 8008a9c:	bf00      	nop
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aae:	2180      	movs	r1, #128	; 0x80
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fceb 	bl	800948c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fce7 	bl	800948c <USBD_LL_StallEP>
}
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b086      	sub	sp, #24
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d036      	beq.n	8008b4a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ae0:	6938      	ldr	r0, [r7, #16]
 8008ae2:	f000 f836 	bl	8008b52 <USBD_GetLen>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	3301      	adds	r3, #1
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4413      	add	r3, r2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	7812      	ldrb	r2, [r2, #0]
 8008afe:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	3301      	adds	r3, #1
 8008b04:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	3301      	adds	r3, #1
 8008b14:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b16:	e013      	b.n	8008b40 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	7812      	ldrb	r2, [r2, #0]
 8008b22:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	3301      	adds	r3, #1
 8008b28:	613b      	str	r3, [r7, #16]
    idx++;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4413      	add	r3, r2
 8008b36:	2200      	movs	r2, #0
 8008b38:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e7      	bne.n	8008b18 <USBD_GetString+0x52>
 8008b48:	e000      	b.n	8008b4c <USBD_GetString+0x86>
    return;
 8008b4a:	bf00      	nop
  }
}
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b085      	sub	sp, #20
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b62:	e005      	b.n	8008b70 <USBD_GetLen+0x1e>
  {
    len++;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	3301      	adds	r3, #1
 8008b68:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1f5      	bne.n	8008b64 <USBD_GetLen+0x12>
  }

  return len;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	60f8      	str	r0, [r7, #12]
 8008b8e:	60b9      	str	r1, [r7, #8]
 8008b90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2202      	movs	r2, #2
 8008b96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 fcf7 	bl	80095a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	2100      	movs	r1, #0
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fce6 	bl	80095a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2203      	movs	r2, #3
 8008bee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	2100      	movs	r1, #0
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 fcea 	bl	80095e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	2100      	movs	r1, #0
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 fcd9 	bl	80095e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2204      	movs	r2, #4
 8008c46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fca5 	bl	80095a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2205      	movs	r2, #5
 8008c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c70:	2300      	movs	r3, #0
 8008c72:	2200      	movs	r2, #0
 8008c74:	2100      	movs	r1, #0
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fcb3 	bl	80095e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4912      	ldr	r1, [pc, #72]	; (8008cd8 <MX_USB_Device_Init+0x50>)
 8008c90:	4812      	ldr	r0, [pc, #72]	; (8008cdc <MX_USB_Device_Init+0x54>)
 8008c92:	f7fe fed9 	bl	8007a48 <USBD_Init>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008c9c:	f7f7 fc71 	bl	8000582 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008ca0:	490f      	ldr	r1, [pc, #60]	; (8008ce0 <MX_USB_Device_Init+0x58>)
 8008ca2:	480e      	ldr	r0, [pc, #56]	; (8008cdc <MX_USB_Device_Init+0x54>)
 8008ca4:	f7fe ff00 	bl	8007aa8 <USBD_RegisterClass>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008cae:	f7f7 fc68 	bl	8000582 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008cb2:	490c      	ldr	r1, [pc, #48]	; (8008ce4 <MX_USB_Device_Init+0x5c>)
 8008cb4:	4809      	ldr	r0, [pc, #36]	; (8008cdc <MX_USB_Device_Init+0x54>)
 8008cb6:	f7fe fe21 	bl	80078fc <USBD_CDC_RegisterInterface>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008cc0:	f7f7 fc5f 	bl	8000582 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008cc4:	4805      	ldr	r0, [pc, #20]	; (8008cdc <MX_USB_Device_Init+0x54>)
 8008cc6:	f7fe ff16 	bl	8007af6 <USBD_Start>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008cd0:	f7f7 fc57 	bl	8000582 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008cd4:	bf00      	nop
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	20000134 	.word	0x20000134
 8008cdc:	20000438 	.word	0x20000438
 8008ce0:	2000001c 	.word	0x2000001c
 8008ce4:	20000120 	.word	0x20000120

08008ce8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cec:	2200      	movs	r2, #0
 8008cee:	4905      	ldr	r1, [pc, #20]	; (8008d04 <CDC_Init_FS+0x1c>)
 8008cf0:	4805      	ldr	r0, [pc, #20]	; (8008d08 <CDC_Init_FS+0x20>)
 8008cf2:	f7fe fe18 	bl	8007926 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008cf6:	4905      	ldr	r1, [pc, #20]	; (8008d0c <CDC_Init_FS+0x24>)
 8008cf8:	4803      	ldr	r0, [pc, #12]	; (8008d08 <CDC_Init_FS+0x20>)
 8008cfa:	f7fe fe32 	bl	8007962 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20000f08 	.word	0x20000f08
 8008d08:	20000438 	.word	0x20000438
 8008d0c:	20000708 	.word	0x20000708

08008d10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	6039      	str	r1, [r7, #0]
 8008d2a:	71fb      	strb	r3, [r7, #7]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	2b23      	cmp	r3, #35	; 0x23
 8008d34:	d84a      	bhi.n	8008dcc <CDC_Control_FS+0xac>
 8008d36:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <CDC_Control_FS+0x1c>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008dcd 	.word	0x08008dcd
 8008d40:	08008dcd 	.word	0x08008dcd
 8008d44:	08008dcd 	.word	0x08008dcd
 8008d48:	08008dcd 	.word	0x08008dcd
 8008d4c:	08008dcd 	.word	0x08008dcd
 8008d50:	08008dcd 	.word	0x08008dcd
 8008d54:	08008dcd 	.word	0x08008dcd
 8008d58:	08008dcd 	.word	0x08008dcd
 8008d5c:	08008dcd 	.word	0x08008dcd
 8008d60:	08008dcd 	.word	0x08008dcd
 8008d64:	08008dcd 	.word	0x08008dcd
 8008d68:	08008dcd 	.word	0x08008dcd
 8008d6c:	08008dcd 	.word	0x08008dcd
 8008d70:	08008dcd 	.word	0x08008dcd
 8008d74:	08008dcd 	.word	0x08008dcd
 8008d78:	08008dcd 	.word	0x08008dcd
 8008d7c:	08008dcd 	.word	0x08008dcd
 8008d80:	08008dcd 	.word	0x08008dcd
 8008d84:	08008dcd 	.word	0x08008dcd
 8008d88:	08008dcd 	.word	0x08008dcd
 8008d8c:	08008dcd 	.word	0x08008dcd
 8008d90:	08008dcd 	.word	0x08008dcd
 8008d94:	08008dcd 	.word	0x08008dcd
 8008d98:	08008dcd 	.word	0x08008dcd
 8008d9c:	08008dcd 	.word	0x08008dcd
 8008da0:	08008dcd 	.word	0x08008dcd
 8008da4:	08008dcd 	.word	0x08008dcd
 8008da8:	08008dcd 	.word	0x08008dcd
 8008dac:	08008dcd 	.word	0x08008dcd
 8008db0:	08008dcd 	.word	0x08008dcd
 8008db4:	08008dcd 	.word	0x08008dcd
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008dcd 	.word	0x08008dcd
 8008dc4:	08008dcd 	.word	0x08008dcd
 8008dc8:	08008dcd 	.word	0x08008dcd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008dcc:	bf00      	nop
  }

  return (USBD_OK);
 8008dce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	4805      	ldr	r0, [pc, #20]	; (8008e00 <CDC_Receive_FS+0x24>)
 8008dea:	f7fe fdba 	bl	8007962 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008dee:	4804      	ldr	r0, [pc, #16]	; (8008e00 <CDC_Receive_FS+0x24>)
 8008df0:	f7fe fe00 	bl	80079f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008df4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000438 	.word	0x20000438

08008e04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e14:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <CDC_Transmit_FS+0x48>)
 8008e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e00b      	b.n	8008e42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e2a:	887b      	ldrh	r3, [r7, #2]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4806      	ldr	r0, [pc, #24]	; (8008e4c <CDC_Transmit_FS+0x48>)
 8008e32:	f7fe fd78 	bl	8007926 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e36:	4805      	ldr	r0, [pc, #20]	; (8008e4c <CDC_Transmit_FS+0x48>)
 8008e38:	f7fe fdac 	bl	8007994 <USBD_CDC_TransmitPacket>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000438 	.word	0x20000438

08008e50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2212      	movs	r2, #18
 8008e84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008e86:	4b03      	ldr	r3, [pc, #12]	; (8008e94 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	20000154 	.word	0x20000154

08008e98 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008eaa:	4b03      	ldr	r3, [pc, #12]	; (8008eb8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	20000168 	.word	0x20000168

08008ebc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	6039      	str	r1, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d105      	bne.n	8008eda <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	4907      	ldr	r1, [pc, #28]	; (8008ef0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008ed2:	4808      	ldr	r0, [pc, #32]	; (8008ef4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008ed4:	f7ff fdf7 	bl	8008ac6 <USBD_GetString>
 8008ed8:	e004      	b.n	8008ee4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	4904      	ldr	r1, [pc, #16]	; (8008ef0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008ede:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008ee0:	f7ff fdf1 	bl	8008ac6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ee4:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20001708 	.word	0x20001708
 8008ef4:	080097e8 	.word	0x080097e8

08008ef8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	4904      	ldr	r1, [pc, #16]	; (8008f18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008f08:	4804      	ldr	r0, [pc, #16]	; (8008f1c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008f0a:	f7ff fddc 	bl	8008ac6 <USBD_GetString>
  return USBD_StrDesc;
 8008f0e:	4b02      	ldr	r3, [pc, #8]	; (8008f18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20001708 	.word	0x20001708
 8008f1c:	08009800 	.word	0x08009800

08008f20 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	6039      	str	r1, [r7, #0]
 8008f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	221a      	movs	r2, #26
 8008f30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f32:	f000 f843 	bl	8008fbc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008f36:	4b02      	ldr	r3, [pc, #8]	; (8008f40 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	2000016c 	.word	0x2000016c

08008f44 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4907      	ldr	r1, [pc, #28]	; (8008f78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008f5a:	4808      	ldr	r0, [pc, #32]	; (8008f7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008f5c:	f7ff fdb3 	bl	8008ac6 <USBD_GetString>
 8008f60:	e004      	b.n	8008f6c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4904      	ldr	r1, [pc, #16]	; (8008f78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008f66:	4805      	ldr	r0, [pc, #20]	; (8008f7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008f68:	f7ff fdad 	bl	8008ac6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f6c:	4b02      	ldr	r3, [pc, #8]	; (8008f78 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20001708 	.word	0x20001708
 8008f7c:	08009814 	.word	0x08009814

08008f80 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	6039      	str	r1, [r7, #0]
 8008f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d105      	bne.n	8008f9e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4907      	ldr	r1, [pc, #28]	; (8008fb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008f96:	4808      	ldr	r0, [pc, #32]	; (8008fb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008f98:	f7ff fd95 	bl	8008ac6 <USBD_GetString>
 8008f9c:	e004      	b.n	8008fa8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4904      	ldr	r1, [pc, #16]	; (8008fb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008fa2:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008fa4:	f7ff fd8f 	bl	8008ac6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20001708 	.word	0x20001708
 8008fb8:	08009820 	.word	0x08009820

08008fbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fc2:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <Get_SerialNum+0x44>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fc8:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <Get_SerialNum+0x48>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fce:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <Get_SerialNum+0x4c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fe2:	2208      	movs	r2, #8
 8008fe4:	4909      	ldr	r1, [pc, #36]	; (800900c <Get_SerialNum+0x50>)
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 f814 	bl	8009014 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fec:	2204      	movs	r2, #4
 8008fee:	4908      	ldr	r1, [pc, #32]	; (8009010 <Get_SerialNum+0x54>)
 8008ff0:	68b8      	ldr	r0, [r7, #8]
 8008ff2:	f000 f80f 	bl	8009014 <IntToUnicode>
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	1fff7590 	.word	0x1fff7590
 8009004:	1fff7594 	.word	0x1fff7594
 8009008:	1fff7598 	.word	0x1fff7598
 800900c:	2000016e 	.word	0x2000016e
 8009010:	2000017e 	.word	0x2000017e

08009014 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009026:	2300      	movs	r3, #0
 8009028:	75fb      	strb	r3, [r7, #23]
 800902a:	e027      	b.n	800907c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	0f1b      	lsrs	r3, r3, #28
 8009030:	2b09      	cmp	r3, #9
 8009032:	d80b      	bhi.n	800904c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	0f1b      	lsrs	r3, r3, #28
 8009038:	b2da      	uxtb	r2, r3
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	4619      	mov	r1, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	440b      	add	r3, r1
 8009044:	3230      	adds	r2, #48	; 0x30
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	e00a      	b.n	8009062 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	0f1b      	lsrs	r3, r3, #28
 8009050:	b2da      	uxtb	r2, r3
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	4619      	mov	r1, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	440b      	add	r3, r1
 800905c:	3237      	adds	r2, #55	; 0x37
 800905e:	b2d2      	uxtb	r2, r2
 8009060:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	3301      	adds	r3, #1
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4413      	add	r3, r2
 8009072:	2200      	movs	r2, #0
 8009074:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	3301      	adds	r3, #1
 800907a:	75fb      	strb	r3, [r7, #23]
 800907c:	7dfa      	ldrb	r2, [r7, #23]
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	429a      	cmp	r2, r3
 8009082:	d3d3      	bcc.n	800902c <IntToUnicode+0x18>
  }
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <LL_AHB2_GRP1_EnableClock>:
{
 8009092:	b480      	push	{r7}
 8009094:	b085      	sub	sp, #20
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800909a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800909e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80090aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4013      	ands	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090b6:	68fb      	ldr	r3, [r7, #12]
}
 80090b8:	bf00      	nop
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <LL_APB1_GRP1_EnableClock>:
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80090cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4313      	orrs	r3, r2
 80090da:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80090dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4013      	ands	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090e8:	68fb      	ldr	r3, [r7, #12]
}
 80090ea:	bf00      	nop
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b09c      	sub	sp, #112	; 0x70
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009100:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	605a      	str	r2, [r3, #4]
 800910a:	609a      	str	r2, [r3, #8]
 800910c:	60da      	str	r2, [r3, #12]
 800910e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009110:	f107 030c 	add.w	r3, r7, #12
 8009114:	2250      	movs	r2, #80	; 0x50
 8009116:	2100      	movs	r1, #0
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fb3b 	bl	8009794 <memset>
  if(pcdHandle->Instance==USB)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a23      	ldr	r2, [pc, #140]	; (80091b0 <HAL_PCD_MspInit+0xb8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d13e      	bne.n	80091a6 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800912c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800912e:	2318      	movs	r3, #24
 8009130:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009136:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009138:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800913c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800913e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009142:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8009144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009148:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800914a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800914e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009150:	f107 030c 	add.w	r3, r7, #12
 8009154:	4618      	mov	r0, r3
 8009156:	f7fa ff45 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8009160:	f7f7 fa0f 	bl	8000582 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009164:	2001      	movs	r0, #1
 8009166:	f7ff ff94 	bl	8009092 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800916a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800916e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009170:	2302      	movs	r3, #2
 8009172:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009174:	2300      	movs	r3, #0
 8009176:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009178:	2300      	movs	r3, #0
 800917a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800917c:	230a      	movs	r3, #10
 800917e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009184:	4619      	mov	r1, r3
 8009186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800918a:	f7f7 fd3b 	bl	8000c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800918e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009192:	f7ff ff97 	bl	80090c4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009196:	2200      	movs	r2, #0
 8009198:	2100      	movs	r1, #0
 800919a:	2014      	movs	r0, #20
 800919c:	f7f7 fcfd 	bl	8000b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80091a0:	2014      	movs	r0, #20
 80091a2:	f7f7 fd14 	bl	8000bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80091a6:	bf00      	nop
 80091a8:	3770      	adds	r7, #112	; 0x70
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	40006800 	.word	0x40006800

080091b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fe fcde 	bl	8007b8c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80091ea:	78fa      	ldrb	r2, [r7, #3]
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	440b      	add	r3, r1
 80091f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	4619      	mov	r1, r3
 8009202:	f7fe fd18 	bl	8007c36 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	440b      	add	r3, r1
 800922e:	333c      	adds	r3, #60	; 0x3c
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	4619      	mov	r1, r3
 8009236:	f7fe fd61 	bl	8007cfc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009250:	4618      	mov	r0, r3
 8009252:	f7fe fe75 	bl	8007f40 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009266:	2301      	movs	r3, #1
 8009268:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d001      	beq.n	8009276 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009272:	f7f7 f986 	bl	8000582 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800927c:	7bfa      	ldrb	r2, [r7, #15]
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe fe1f 	bl	8007ec4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fdcb 	bl	8007e28 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fe1a 	bl	8007ee4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d005      	beq.n	80092c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092b8:	4b04      	ldr	r3, [pc, #16]	; (80092cc <HAL_PCD_SuspendCallback+0x30>)
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	4a03      	ldr	r2, [pc, #12]	; (80092cc <HAL_PCD_SuspendCallback+0x30>)
 80092be:	f043 0306 	orr.w	r3, r3, #6
 80092c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	e000ed00 	.word	0xe000ed00

080092d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d007      	beq.n	80092f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <HAL_PCD_ResumeCallback+0x34>)
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	4a07      	ldr	r2, [pc, #28]	; (8009304 <HAL_PCD_ResumeCallback+0x34>)
 80092e6:	f023 0306 	bic.w	r3, r3, #6
 80092ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80092ec:	f000 f9fc 	bl	80096e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fe0a 	bl	8007f10 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	e000ed00 	.word	0xe000ed00

08009308 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009310:	4a2c      	ldr	r2, [pc, #176]	; (80093c4 <USBD_LL_Init+0xbc>)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a2a      	ldr	r2, [pc, #168]	; (80093c4 <USBD_LL_Init+0xbc>)
 800931c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009320:	f7f9 fb42 	bl	80029a8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009324:	4b27      	ldr	r3, [pc, #156]	; (80093c4 <USBD_LL_Init+0xbc>)
 8009326:	4a28      	ldr	r2, [pc, #160]	; (80093c8 <USBD_LL_Init+0xc0>)
 8009328:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800932a:	4b26      	ldr	r3, [pc, #152]	; (80093c4 <USBD_LL_Init+0xbc>)
 800932c:	2208      	movs	r2, #8
 800932e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009330:	4b24      	ldr	r3, [pc, #144]	; (80093c4 <USBD_LL_Init+0xbc>)
 8009332:	2202      	movs	r2, #2
 8009334:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009336:	4b23      	ldr	r3, [pc, #140]	; (80093c4 <USBD_LL_Init+0xbc>)
 8009338:	2202      	movs	r2, #2
 800933a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800933c:	4b21      	ldr	r3, [pc, #132]	; (80093c4 <USBD_LL_Init+0xbc>)
 800933e:	2200      	movs	r2, #0
 8009340:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009342:	4b20      	ldr	r3, [pc, #128]	; (80093c4 <USBD_LL_Init+0xbc>)
 8009344:	2200      	movs	r2, #0
 8009346:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009348:	4b1e      	ldr	r3, [pc, #120]	; (80093c4 <USBD_LL_Init+0xbc>)
 800934a:	2200      	movs	r2, #0
 800934c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800934e:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <USBD_LL_Init+0xbc>)
 8009350:	2200      	movs	r2, #0
 8009352:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009354:	481b      	ldr	r0, [pc, #108]	; (80093c4 <USBD_LL_Init+0xbc>)
 8009356:	f7f7 fdd5 	bl	8000f04 <HAL_PCD_Init>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009360:	f7f7 f90f 	bl	8000582 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800936a:	2318      	movs	r3, #24
 800936c:	2200      	movs	r2, #0
 800936e:	2100      	movs	r1, #0
 8009370:	f7f9 fa8e 	bl	8002890 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800937a:	2358      	movs	r3, #88	; 0x58
 800937c:	2200      	movs	r2, #0
 800937e:	2180      	movs	r1, #128	; 0x80
 8009380:	f7f9 fa86 	bl	8002890 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800938a:	23c0      	movs	r3, #192	; 0xc0
 800938c:	2200      	movs	r2, #0
 800938e:	2181      	movs	r1, #129	; 0x81
 8009390:	f7f9 fa7e 	bl	8002890 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800939a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800939e:	2200      	movs	r2, #0
 80093a0:	2101      	movs	r1, #1
 80093a2:	f7f9 fa75 	bl	8002890 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093b0:	2200      	movs	r2, #0
 80093b2:	2182      	movs	r1, #130	; 0x82
 80093b4:	f7f9 fa6c 	bl	8002890 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20001908 	.word	0x20001908
 80093c8:	40006800 	.word	0x40006800

080093cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7f7 fe73 	bl	80010ce <HAL_PCD_Start>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 f980 	bl	80096f4 <USBD_Get_USB_Status>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	461a      	mov	r2, r3
 8009410:	4603      	mov	r3, r0
 8009412:	70fb      	strb	r3, [r7, #3]
 8009414:	460b      	mov	r3, r1
 8009416:	70bb      	strb	r3, [r7, #2]
 8009418:	4613      	mov	r3, r2
 800941a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800942a:	78bb      	ldrb	r3, [r7, #2]
 800942c:	883a      	ldrh	r2, [r7, #0]
 800942e:	78f9      	ldrb	r1, [r7, #3]
 8009430:	f7f7 ffbb 	bl	80013aa <HAL_PCD_EP_Open>
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f95a 	bl	80096f4 <USBD_Get_USB_Status>
 8009440:	4603      	mov	r3, r0
 8009442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009444:	7bbb      	ldrb	r3, [r7, #14]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	4611      	mov	r1, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f7f8 f802 	bl	8001476 <HAL_PCD_EP_Close>
 8009472:	4603      	mov	r3, r0
 8009474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	4618      	mov	r0, r3
 800947a:	f000 f93b 	bl	80096f4 <USBD_Get_USB_Status>
 800947e:	4603      	mov	r3, r0
 8009480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009482:	7bbb      	ldrb	r3, [r7, #14]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	4611      	mov	r1, r2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f8 f8c3 	bl	8001636 <HAL_PCD_EP_SetStall>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f91c 	bl	80096f4 <USBD_Get_USB_Status>
 80094bc:	4603      	mov	r3, r0
 80094be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	460b      	mov	r3, r1
 80094d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f8 f8f6 	bl	80016da <HAL_PCD_EP_ClrStall>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 f8fd 	bl	80096f4 <USBD_Get_USB_Status>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800951a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800951c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009520:	2b00      	cmp	r3, #0
 8009522:	da0c      	bge.n	800953e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009524:	78fb      	ldrb	r3, [r7, #3]
 8009526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800952a:	68f9      	ldr	r1, [r7, #12]
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	440b      	add	r3, r1
 8009538:	3302      	adds	r3, #2
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	e00b      	b.n	8009556 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009544:	68f9      	ldr	r1, [r7, #12]
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	440b      	add	r3, r1
 8009550:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009554:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800957c:	78fa      	ldrb	r2, [r7, #3]
 800957e:	4611      	mov	r1, r2
 8009580:	4618      	mov	r0, r3
 8009582:	f7f7 feed 	bl	8001360 <HAL_PCD_SetAddress>
 8009586:	4603      	mov	r3, r0
 8009588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	4618      	mov	r0, r3
 800958e:	f000 f8b1 	bl	80096f4 <USBD_Get_USB_Status>
 8009592:	4603      	mov	r3, r0
 8009594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009596:	7bbb      	ldrb	r3, [r7, #14]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	460b      	mov	r3, r1
 80095ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095be:	7af9      	ldrb	r1, [r7, #11]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	f7f7 fff4 	bl	80015b0 <HAL_PCD_EP_Transmit>
 80095c8:	4603      	mov	r3, r0
 80095ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f890 	bl	80096f4 <USBD_Get_USB_Status>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	60f8      	str	r0, [r7, #12]
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	603b      	str	r3, [r7, #0]
 80095ee:	460b      	mov	r3, r1
 80095f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009600:	7af9      	ldrb	r1, [r7, #11]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	f7f7 ff7e 	bl	8001506 <HAL_PCD_EP_Receive>
 800960a:	4603      	mov	r3, r0
 800960c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	4618      	mov	r0, r3
 8009612:	f000 f86f 	bl	80096f4 <USBD_Get_USB_Status>
 8009616:	4603      	mov	r3, r0
 8009618:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800961a:	7dbb      	ldrb	r3, [r7, #22]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009636:	78fa      	ldrb	r2, [r7, #3]
 8009638:	4611      	mov	r1, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f7f7 ffa0 	bl	8001580 <HAL_PCD_EP_GetRxCount>
 8009640:	4603      	mov	r3, r0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <HAL_PCDEx_LPM_Callback+0x18>
 800965e:	2b01      	cmp	r3, #1
 8009660:	d013      	beq.n	800968a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009662:	e023      	b.n	80096ac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d007      	beq.n	800967c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800966c:	f000 f83c 	bl	80096e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009670:	4b10      	ldr	r3, [pc, #64]	; (80096b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	4a0f      	ldr	r2, [pc, #60]	; (80096b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009676:	f023 0306 	bic.w	r3, r3, #6
 800967a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fc44 	bl	8007f10 <USBD_LL_Resume>
    break;
 8009688:	e010      	b.n	80096ac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fc27 	bl	8007ee4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800969e:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	4a04      	ldr	r2, [pc, #16]	; (80096b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80096a4:	f043 0306 	orr.w	r3, r3, #6
 80096a8:	6113      	str	r3, [r2, #16]
    break;
 80096aa:	bf00      	nop
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	e000ed00 	.word	0xe000ed00

080096b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096c0:	4b03      	ldr	r3, [pc, #12]	; (80096d0 <USBD_static_malloc+0x18>)
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	200001a8 	.word	0x200001a8

080096d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]

}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80096ec:	f7f6 fec0 	bl	8000470 <SystemClock_Config>
}
 80096f0:	bf00      	nop
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	2b03      	cmp	r3, #3
 8009706:	d817      	bhi.n	8009738 <USBD_Get_USB_Status+0x44>
 8009708:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <USBD_Get_USB_Status+0x1c>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009721 	.word	0x08009721
 8009714:	08009727 	.word	0x08009727
 8009718:	0800972d 	.word	0x0800972d
 800971c:	08009733 	.word	0x08009733
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	e00b      	b.n	800973e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009726:	2303      	movs	r3, #3
 8009728:	73fb      	strb	r3, [r7, #15]
    break;
 800972a:	e008      	b.n	800973e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800972c:	2301      	movs	r3, #1
 800972e:	73fb      	strb	r3, [r7, #15]
    break;
 8009730:	e005      	b.n	800973e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009732:	2303      	movs	r3, #3
 8009734:	73fb      	strb	r3, [r7, #15]
    break;
 8009736:	e002      	b.n	800973e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009738:	2303      	movs	r3, #3
 800973a:	73fb      	strb	r3, [r7, #15]
    break;
 800973c:	bf00      	nop
  }
  return usb_status;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <__libc_init_array>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	4d0d      	ldr	r5, [pc, #52]	; (8009784 <__libc_init_array+0x38>)
 8009750:	4c0d      	ldr	r4, [pc, #52]	; (8009788 <__libc_init_array+0x3c>)
 8009752:	1b64      	subs	r4, r4, r5
 8009754:	10a4      	asrs	r4, r4, #2
 8009756:	2600      	movs	r6, #0
 8009758:	42a6      	cmp	r6, r4
 800975a:	d109      	bne.n	8009770 <__libc_init_array+0x24>
 800975c:	4d0b      	ldr	r5, [pc, #44]	; (800978c <__libc_init_array+0x40>)
 800975e:	4c0c      	ldr	r4, [pc, #48]	; (8009790 <__libc_init_array+0x44>)
 8009760:	f000 f820 	bl	80097a4 <_init>
 8009764:	1b64      	subs	r4, r4, r5
 8009766:	10a4      	asrs	r4, r4, #2
 8009768:	2600      	movs	r6, #0
 800976a:	42a6      	cmp	r6, r4
 800976c:	d105      	bne.n	800977a <__libc_init_array+0x2e>
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	f855 3b04 	ldr.w	r3, [r5], #4
 8009774:	4798      	blx	r3
 8009776:	3601      	adds	r6, #1
 8009778:	e7ee      	b.n	8009758 <__libc_init_array+0xc>
 800977a:	f855 3b04 	ldr.w	r3, [r5], #4
 800977e:	4798      	blx	r3
 8009780:	3601      	adds	r6, #1
 8009782:	e7f2      	b.n	800976a <__libc_init_array+0x1e>
 8009784:	080098b0 	.word	0x080098b0
 8009788:	080098b0 	.word	0x080098b0
 800978c:	080098b0 	.word	0x080098b0
 8009790:	080098b4 	.word	0x080098b4

08009794 <memset>:
 8009794:	4402      	add	r2, r0
 8009796:	4603      	mov	r3, r0
 8009798:	4293      	cmp	r3, r2
 800979a:	d100      	bne.n	800979e <memset+0xa>
 800979c:	4770      	bx	lr
 800979e:	f803 1b01 	strb.w	r1, [r3], #1
 80097a2:	e7f9      	b.n	8009798 <memset+0x4>

080097a4 <_init>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr

080097b0 <_fini>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr

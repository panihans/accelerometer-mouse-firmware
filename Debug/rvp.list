
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa40  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800ab7c  0800ab7c  0001ab7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ac70  0800ac70  0001ac70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ac74  0800ac74  0001ac74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000004  0800ac78  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000930  20000188  0800adf8  00020188  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000ab8  0800adf8  00020ab8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   000235b7  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004850  00000000  00000000  0004376b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d20  00000000  00000000  00047fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b40  00000000  00000000  00049ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024ae8  00000000  00000000  0004b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e4e5  00000000  00000000  00070308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8c09  00000000  00000000  0008e7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001673f6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007a24  00000000  00000000  0016744c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000188 	.word	0x20000188
 8000158:	00000000 	.word	0x00000000
 800015c:	0800ab64 	.word	0x0800ab64

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000018c 	.word	0x2000018c
 8000178:	0800ab64 	.word	0x0800ab64

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__gedf2>:
 8000918:	f04f 3cff 	mov.w	ip, #4294967295
 800091c:	e006      	b.n	800092c <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__ledf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	e002      	b.n	800092c <__cmpdf2+0x4>
 8000926:	bf00      	nop

08000928 <__cmpdf2>:
 8000928:	f04f 0c01 	mov.w	ip, #1
 800092c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000930:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800093c:	bf18      	it	ne
 800093e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000942:	d01b      	beq.n	800097c <__cmpdf2+0x54>
 8000944:	b001      	add	sp, #4
 8000946:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094a:	bf0c      	ite	eq
 800094c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000950:	ea91 0f03 	teqne	r1, r3
 8000954:	bf02      	ittt	eq
 8000956:	ea90 0f02 	teqeq	r0, r2
 800095a:	2000      	moveq	r0, #0
 800095c:	4770      	bxeq	lr
 800095e:	f110 0f00 	cmn.w	r0, #0
 8000962:	ea91 0f03 	teq	r1, r3
 8000966:	bf58      	it	pl
 8000968:	4299      	cmppl	r1, r3
 800096a:	bf08      	it	eq
 800096c:	4290      	cmpeq	r0, r2
 800096e:	bf2c      	ite	cs
 8000970:	17d8      	asrcs	r0, r3, #31
 8000972:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000976:	f040 0001 	orr.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d102      	bne.n	800098c <__cmpdf2+0x64>
 8000986:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098a:	d107      	bne.n	800099c <__cmpdf2+0x74>
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	d1d6      	bne.n	8000944 <__cmpdf2+0x1c>
 8000996:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099a:	d0d3      	beq.n	8000944 <__cmpdf2+0x1c>
 800099c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdrcmple>:
 80009a4:	4684      	mov	ip, r0
 80009a6:	4610      	mov	r0, r2
 80009a8:	4662      	mov	r2, ip
 80009aa:	468c      	mov	ip, r1
 80009ac:	4619      	mov	r1, r3
 80009ae:	4663      	mov	r3, ip
 80009b0:	e000      	b.n	80009b4 <__aeabi_cdcmpeq>
 80009b2:	bf00      	nop

080009b4 <__aeabi_cdcmpeq>:
 80009b4:	b501      	push	{r0, lr}
 80009b6:	f7ff ffb7 	bl	8000928 <__cmpdf2>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	bf48      	it	mi
 80009be:	f110 0f00 	cmnmi.w	r0, #0
 80009c2:	bd01      	pop	{r0, pc}

080009c4 <__aeabi_dcmpeq>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff fff4 	bl	80009b4 <__aeabi_cdcmpeq>
 80009cc:	bf0c      	ite	eq
 80009ce:	2001      	moveq	r0, #1
 80009d0:	2000      	movne	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_dcmplt>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff ffea 	bl	80009b4 <__aeabi_cdcmpeq>
 80009e0:	bf34      	ite	cc
 80009e2:	2001      	movcc	r0, #1
 80009e4:	2000      	movcs	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmple>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffe0 	bl	80009b4 <__aeabi_cdcmpeq>
 80009f4:	bf94      	ite	ls
 80009f6:	2001      	movls	r0, #1
 80009f8:	2000      	movhi	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmpge>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffce 	bl	80009a4 <__aeabi_cdrcmple>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpgt>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffc4 	bl	80009a4 <__aeabi_cdrcmple>
 8000a1c:	bf34      	ite	cc
 8000a1e:	2001      	movcc	r0, #1
 8000a20:	2000      	movcs	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	// updates all the button states
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f001 fc4c 	bl	8002320 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <update_buttons+0x1c>
		left_down = 0;
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <update_buttons+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000a94:	2108      	movs	r1, #8
 8000a96:	482f      	ldr	r0, [pc, #188]	; (8000b54 <update_buttons+0xdc>)
 8000a98:	f001 fc42 	bl	8002320 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <update_buttons+0x30>
		left_down = 1;
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <update_buttons+0xd8>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 8000aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 fc36 	bl	8002320 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <update_buttons+0x48>
		middle_down = 0;
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <update_buttons+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <update_buttons+0xe4>)
 8000ac4:	f001 fc2c 	bl	8002320 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <update_buttons+0x5c>
		middle_down = 1;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <update_buttons+0xe0>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <update_buttons+0xdc>)
 8000ad8:	f001 fc22 	bl	8002320 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <update_buttons+0x70>
		right_down = 0;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <update_buttons+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 8000ae8:	2101      	movs	r1, #1
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <update_buttons+0xdc>)
 8000aec:	f001 fc18 	bl	8002320 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <update_buttons+0x84>
		right_down = 1;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <update_buttons+0xe8>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000afc:	2120      	movs	r1, #32
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <update_buttons+0xdc>)
 8000b00:	f001 fc0e 	bl	8002320 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <update_buttons+0x98>
		b4_down = 0;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <update_buttons+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000b10:	2110      	movs	r1, #16
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <update_buttons+0xdc>)
 8000b14:	f001 fc04 	bl	8002320 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <update_buttons+0xac>
		b4_down = 1;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <update_buttons+0xec>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <update_buttons+0xdc>)
 8000b28:	f001 fbfa 	bl	8002320 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <update_buttons+0xc0>
		b5_down = 0;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <update_buttons+0xf0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <update_buttons+0xdc>)
 8000b3c:	f001 fbf0 	bl	8002320 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <update_buttons+0xd4>
		b5_down = 1;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <update_buttons+0xf0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200001a4 	.word	0x200001a4
 8000b54:	48000400 	.word	0x48000400
 8000b58:	200001a5 	.word	0x200001a5
 8000b5c:	48001000 	.word	0x48001000
 8000b60:	200001a6 	.word	0x200001a6
 8000b64:	200001a7 	.word	0x200001a7
 8000b68:	200001a8 	.word	0x200001a8

08000b6c <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	// reads a single value from a register
	// r - register
	uint8_t pTxData[1] = { r | (1UL << 7) };
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000b80:	2300      	movs	r3, #0
 8000b82:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000b84:	2200      	movs	r2, #0
 8000b86:	2110      	movs	r1, #16
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f001 fbe0 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000b90:	f107 010c 	add.w	r1, r7, #12
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	2201      	movs	r2, #1
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <read_register+0x5c>)
 8000b9c:	f004 ff78 	bl	8005a90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 8000ba0:	f107 0108 	add.w	r1, r7, #8
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <read_register+0x5c>)
 8000bac:	f005 f8de 	bl	8005d6c <HAL_SPI_Receive>
	CS_END();
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f001 fbca 	bl	8002350 <HAL_GPIO_WritePin>
	return pRxData[0];
 8000bbc:	7a3b      	ldrb	r3, [r7, #8]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000240 	.word	0x20000240

08000bcc <write_register>:

void write_register(uint8_t r, uint8_t value) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	// writes the value to the register
	// r - register
	// value - value to write
	uint8_t pTxData[2] = { r, value };
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	733b      	strb	r3, [r7, #12]
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	737b      	strb	r3, [r7, #13]
	uint8_t pRxData[2] = { 0, 0 };
 8000be4:	2300      	movs	r3, #0
 8000be6:	813b      	strh	r3, [r7, #8]
	CS_START();
 8000be8:	2200      	movs	r2, #0
 8000bea:	2110      	movs	r1, #16
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 fbae 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 8000bf4:	f107 010c 	add.w	r1, r7, #12
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <write_register+0x5c>)
 8000c00:	f004 ff46 	bl	8005a90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 2, HAL_MAX_DELAY);
 8000c04:	f107 0108 	add.w	r1, r7, #8
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <write_register+0x5c>)
 8000c10:	f005 f8ac 	bl	8005d6c <HAL_SPI_Receive>
	CS_END();
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 fb98 	bl	8002350 <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000240 	.word	0x20000240

08000c2c <imu_setup>:

#define ACCEL_CALIBRATION_N 100
int16_t x_offset, y_offset, z_offset = 0;
void imu_setup() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	// IMU setup operations

	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	206b      	movs	r0, #107	; 0x6b
 8000c36:	f7ff ffc9 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f001 f8d4 	bl	8001de8 <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c40:	206b      	movs	r0, #107	; 0x6b
 8000c42:	f7ff ff93 	bl	8000b6c <read_register>
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
		if (reg & (1UL << 6)) {
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0ee      	beq.n	8000c32 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000c54:	2101      	movs	r1, #1
 8000c56:	206b      	movs	r0, #107	; 0x6b
 8000c58:	f7ff ffb8 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f001 f8c3 	bl	8001de8 <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c62:	206b      	movs	r0, #107	; 0x6b
 8000c64:	f7ff ff82 	bl	8000b6c <read_register>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71bb      	strb	r3, [r7, #6]
		if (reg & (1 << 0)) {
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0ee      	beq.n	8000c54 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000c76:	2110      	movs	r1, #16
 8000c78:	206a      	movs	r0, #106	; 0x6a
 8000c7a:	f7ff ffa7 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f001 f8b2 	bl	8001de8 <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000c84:	206a      	movs	r0, #106	; 0x6a
 8000c86:	f7ff ff71 	bl	8000b6c <read_register>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	717b      	strb	r3, [r7, #5]
		if (reg & (1 << 4)) {
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0ee      	beq.n	8000c76 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000c98:	2118      	movs	r1, #24
 8000c9a:	201c      	movs	r0, #28
 8000c9c:	f7ff ff96 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000ca0:	2064      	movs	r0, #100	; 0x64
 8000ca2:	f001 f8a1 	bl	8001de8 <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f7ff ff60 	bl	8000b6c <read_register>
 8000cac:	4603      	mov	r3, r0
 8000cae:	713b      	strb	r3, [r7, #4]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0ee      	beq.n	8000c98 <imu_setup+0x6c>
 8000cba:	793b      	ldrb	r3, [r7, #4]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0e9      	beq.n	8000c98 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 1);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	201d      	movs	r0, #29
 8000cc8:	f7ff ff80 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f001 f88b 	bl	8001de8 <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 8000cd2:	201d      	movs	r0, #29
 8000cd4:	f7ff ff4a 	bl	8000b6c <read_register>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	70fb      	strb	r3, [r7, #3]
		if (reg == 1) {
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d000      	beq.n	8000ce4 <imu_setup+0xb8>
	while (1) {
 8000ce2:	e7ef      	b.n	8000cc4 <imu_setup+0x98>
			break;
 8000ce4:	bf00      	nop
//		HAL_Delay(1);
//	}
//	x_offset = xsum / ACCEL_CALIBRATION_N;
//	y_offset = ysum / ACCEL_CALIBRATION_N;
//	z_offset = zsum / ACCEL_CALIBRATION_N;
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <read_x>:

int16_t read_x() {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
	// reads and returns the accel x axis
	uint8_t h = read_register(ACCEL_XOUT_H);
 8000cf4:	203b      	movs	r0, #59	; 0x3b
 8000cf6:	f7ff ff39 	bl	8000b6c <read_register>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_XOUT_L);
 8000cfe:	203c      	movs	r0, #60	; 0x3c
 8000d00:	f7ff ff34 	bl	8000b6c <read_register>
 8000d04:	4603      	mov	r3, r0
 8000d06:	71bb      	strb	r3, [r7, #6]
	int16_t x = (h << 8) | l;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	80bb      	strh	r3, [r7, #4]
	return x;
 8000d16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <read_y>:

int16_t read_y() {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
	// reads and returns the accel y axis
	uint8_t h = read_register(ACCEL_YOUT_H);
 8000d28:	203d      	movs	r0, #61	; 0x3d
 8000d2a:	f7ff ff1f 	bl	8000b6c <read_register>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_YOUT_L);
 8000d32:	203e      	movs	r0, #62	; 0x3e
 8000d34:	f7ff ff1a 	bl	8000b6c <read_register>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71bb      	strb	r3, [r7, #6]
	int16_t y = (h << 8) | l;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	80bb      	strh	r3, [r7, #4]
	return y;
 8000d4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <read_z>:

int16_t read_z() {
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
	// reads and returns the accel z axis
	uint8_t h = read_register(ACCEL_ZOUT_H);
 8000d5c:	203f      	movs	r0, #63	; 0x3f
 8000d5e:	f7ff ff05 	bl	8000b6c <read_register>
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_ZOUT_L);
 8000d66:	2040      	movs	r0, #64	; 0x40
 8000d68:	f7ff ff00 	bl	8000b6c <read_register>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71bb      	strb	r3, [r7, #6]
	int16_t z = (h << 8) | l;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	80bb      	strh	r3, [r7, #4]
	return z;
 8000d7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <filter_p>:
//float den[] = { -1, 3.1673, -3.8396, 2.1405, -0.4706 };
//#define FILTER_N 3
//float num[] = { 0.6156, -1.8468, 1.8468, -0.6156 };
//float den[] = { -1, 2.0478, -1.5057, 0.3713 };

void filter_p(int16_t r[], int16_t f[], int16_t new) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	80fb      	strh	r3, [r7, #6]
	// applies an iir filter
	// r - raw inputs array
	// f - filtered values array
	// new - the new value to add
	if (new < -10000 || new > 10000) {
 8000d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <filter_p+0x10c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	db72      	blt.n	8000e8a <filter_p+0xfe>
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dac:	4293      	cmp	r3, r2
 8000dae:	dc6c      	bgt.n	8000e8a <filter_p+0xfe>
		return;
	}
	r[0] = new;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	801a      	strh	r2, [r3, #0]
	f[0] = 0;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2200      	movs	r2, #0
 8000dba:	801a      	strh	r2, [r3, #0]
	float sum = 0;
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	e032      	b.n	8000e2e <filter_p+0xa2>
		sum += den[i] * f[i];
 8000dc8:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <filter_p+0x110>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	68ba      	ldr	r2, [r7, #8]
 8000dda:	4413      	add	r3, r2
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dec:	ed97 7a07 	vldr	s14, [r7, #28]
 8000df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df4:	edc7 7a07 	vstr	s15, [r7, #28]
		sum += num[i] * r[i];
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <filter_p+0x114>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	ed93 7a00 	vldr	s14, [r3]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e24:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	ddc9      	ble.n	8000dc8 <filter_p+0x3c>
	}
	f[0] = sum;
 8000e34:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 3a90 	vmov	r3, s15
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e01a      	b.n	8000e82 <filter_p+0xf6>
		r[i + 1] = r[i];
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	441a      	add	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3301      	adds	r3, #1
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	68f9      	ldr	r1, [r7, #12]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e62:	801a      	strh	r2, [r3, #0]
		f[i + 1] = f[i];
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	441a      	add	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	440b      	add	r3, r1
 8000e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e7a:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dae1      	bge.n	8000e4c <filter_p+0xc0>
 8000e88:	e000      	b.n	8000e8c <filter_p+0x100>
		return;
 8000e8a:	bf00      	nop
	}
}
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	ffffd8f0 	.word	0xffffd8f0
 8000e9c:	20000010 	.word	0x20000010
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <get_xyz>:
int16_t y_r[FILTER_N + 1] = { 0 };
int16_t y_f[FILTER_N + 1] = { 0 };
int16_t z_r[FILTER_N + 1] = { 0 };
int16_t z_f[FILTER_N + 1] = { 0 };

void get_xyz(int16_t *x, int16_t *y, int16_t *z) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	// returns current xyz accelerometer values
	// x - accel x return value ptr
	// y - accel y return value ptr
	// z - accel z return value ptr
	filter_p(x_r, x_f, read_x());
 8000eb0:	f7ff ff1d 	bl	8000cee <read_x>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <get_xyz+0x64>)
 8000eba:	4814      	ldr	r0, [pc, #80]	; (8000f0c <get_xyz+0x68>)
 8000ebc:	f7ff ff66 	bl	8000d8c <filter_p>
	filter_p(y_r, y_f, read_y());
 8000ec0:	f7ff ff2f 	bl	8000d22 <read_y>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4911      	ldr	r1, [pc, #68]	; (8000f10 <get_xyz+0x6c>)
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <get_xyz+0x70>)
 8000ecc:	f7ff ff5e 	bl	8000d8c <filter_p>
	filter_p(z_r, z_f, read_z());
 8000ed0:	f7ff ff41 	bl	8000d56 <read_z>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	490f      	ldr	r1, [pc, #60]	; (8000f18 <get_xyz+0x74>)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <get_xyz+0x78>)
 8000edc:	f7ff ff56 	bl	8000d8c <filter_p>
	*x = x_f[0];
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <get_xyz+0x64>)
 8000ee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	801a      	strh	r2, [r3, #0]
	*y = y_f[0];
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <get_xyz+0x6c>)
 8000eec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	801a      	strh	r2, [r3, #0]
	*z = z_f[0];
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <get_xyz+0x74>)
 8000ef6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	801a      	strh	r2, [r3, #0]
//	*x = read_x() - x_offset;
//	*y = read_y() - y_offset;
//	*z = read_z() - z_offset;
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001b4 	.word	0x200001b4
 8000f0c:	200001ac 	.word	0x200001ac
 8000f10:	200001c4 	.word	0x200001c4
 8000f14:	200001bc 	.word	0x200001bc
 8000f18:	200001d4 	.word	0x200001d4
 8000f1c:	200001cc 	.word	0x200001cc

08000f20 <get_mouse_xy>:

#define PREV_C 10
int16_t prev_x[PREV_C] = { 0 };
int16_t prev_y[PREV_C] = { 0 };

void get_mouse_xy(int8_t *x, int8_t *y) {
 8000f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f24:	b09a      	sub	sp, #104	; 0x68
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6578      	str	r0, [r7, #84]	; 0x54
 8000f2a:	6539      	str	r1, [r7, #80]	; 0x50
//		*y = -ceil(accel.y / 500.0);
//	} else {
//		*y = -floor(accel.y / 500.0);
//	}

	get_xyz(&accel.x, &accel.y, &accel.z);
 8000f2c:	4a7b      	ldr	r2, [pc, #492]	; (800111c <get_mouse_xy+0x1fc>)
 8000f2e:	497c      	ldr	r1, [pc, #496]	; (8001120 <get_mouse_xy+0x200>)
 8000f30:	487c      	ldr	r0, [pc, #496]	; (8001124 <get_mouse_xy+0x204>)
 8000f32:	f7ff ffb7 	bl	8000ea4 <get_xyz>

	// exponential moving avg. to smooth peaks
	if (i == 0) {
 8000f36:	4b7c      	ldr	r3, [pc, #496]	; (8001128 <get_mouse_xy+0x208>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d11c      	bne.n	8000f78 <get_mouse_xy+0x58>
		avg_x = accel.x;
 8000f3e:	4b79      	ldr	r3, [pc, #484]	; (8001124 <get_mouse_xy+0x204>)
 8000f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa6b 	bl	8000420 <__aeabi_i2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4977      	ldr	r1, [pc, #476]	; (800112c <get_mouse_xy+0x20c>)
 8000f50:	e9c1 2300 	strd	r2, r3, [r1]
		avg_y = accel.y;
 8000f54:	4b73      	ldr	r3, [pc, #460]	; (8001124 <get_mouse_xy+0x204>)
 8000f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa60 	bl	8000420 <__aeabi_i2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4972      	ldr	r1, [pc, #456]	; (8001130 <get_mouse_xy+0x210>)
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
		i++;
 8000f6a:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <get_mouse_xy+0x208>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4a6d      	ldr	r2, [pc, #436]	; (8001128 <get_mouse_xy+0x208>)
 8000f74:	7013      	strb	r3, [r2, #0]
 8000f76:	e047      	b.n	8001008 <get_mouse_xy+0xe8>
	} else {
		avg_x = 0.5 * accel.x + (1 - 0.5) * avg_x;
 8000f78:	4b6a      	ldr	r3, [pc, #424]	; (8001124 <get_mouse_xy+0x204>)
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa4e 	bl	8000420 <__aeabi_i2d>
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b6a      	ldr	r3, [pc, #424]	; (8001134 <get_mouse_xy+0x214>)
 8000f8a:	f7ff fab3 	bl	80004f4 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	461d      	mov	r5, r3
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <get_mouse_xy+0x20c>)
 8000f98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	4b64      	ldr	r3, [pc, #400]	; (8001134 <get_mouse_xy+0x214>)
 8000fa2:	f7ff faa7 	bl	80004f4 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4620      	mov	r0, r4
 8000fac:	4629      	mov	r1, r5
 8000fae:	f7ff f8eb 	bl	8000188 <__adddf3>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <get_mouse_xy+0x20c>)
 8000fbc:	e9c3 0100 	strd	r0, r1, [r3]
		avg_y = 0.5 * accel.y + (1 - 0.5) * avg_y;
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <get_mouse_xy+0x204>)
 8000fc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa2a 	bl	8000420 <__aeabi_i2d>
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b58      	ldr	r3, [pc, #352]	; (8001134 <get_mouse_xy+0x214>)
 8000fd2:	f7ff fa8f 	bl	80004f4 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <get_mouse_xy+0x210>)
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b52      	ldr	r3, [pc, #328]	; (8001134 <get_mouse_xy+0x214>)
 8000fea:	f7ff fa83 	bl	80004f4 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	f7ff f8c7 	bl	8000188 <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <get_mouse_xy+0x210>)
 8001004:	e9c3 0100 	strd	r0, r1, [r3]
	}

	for (int l = PREV_C - 2; l >= 0; l--) {
 8001008:	2308      	movs	r3, #8
 800100a:	667b      	str	r3, [r7, #100]	; 0x64
 800100c:	e014      	b.n	8001038 <get_mouse_xy+0x118>
		prev_x[l + 1] = prev_x[l];
 800100e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001010:	1c59      	adds	r1, r3, #1
 8001012:	4a49      	ldr	r2, [pc, #292]	; (8001138 <get_mouse_xy+0x218>)
 8001014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001016:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800101a:	4a47      	ldr	r2, [pc, #284]	; (8001138 <get_mouse_xy+0x218>)
 800101c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		prev_y[l + 1] = prev_y[l];
 8001020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001022:	1c59      	adds	r1, r3, #1
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <get_mouse_xy+0x21c>)
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800102c:	4a43      	ldr	r2, [pc, #268]	; (800113c <get_mouse_xy+0x21c>)
 800102e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	for (int l = PREV_C - 2; l >= 0; l--) {
 8001032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001034:	3b01      	subs	r3, #1
 8001036:	667b      	str	r3, [r7, #100]	; 0x64
 8001038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800103a:	2b00      	cmp	r3, #0
 800103c:	dae7      	bge.n	800100e <get_mouse_xy+0xee>
	}
	prev_x[0] = avg_x;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <get_mouse_xy+0x20c>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fcee 	bl	8000a28 <__aeabi_d2iz>
 800104c:	4603      	mov	r3, r0
 800104e:	b21b      	sxth	r3, r3
 8001050:	4a39      	ldr	r2, [pc, #228]	; (8001138 <get_mouse_xy+0x218>)
 8001052:	8013      	strh	r3, [r2, #0]
	prev_y[0] = avg_y;
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <get_mouse_xy+0x210>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fce3 	bl	8000a28 <__aeabi_d2iz>
 8001062:	4603      	mov	r3, r0
 8001064:	b21b      	sxth	r3, r3
 8001066:	4a35      	ldr	r2, [pc, #212]	; (800113c <get_mouse_xy+0x21c>)
 8001068:	8013      	strh	r3, [r2, #0]

	// movement direction trigger
	int x_reset = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
	int y_reset = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (int k = 0; k < PREV_C; k++) {
 8001072:	2300      	movs	r3, #0
 8001074:	65bb      	str	r3, [r7, #88]	; 0x58
 8001076:	e01a      	b.n	80010ae <get_mouse_xy+0x18e>
		// reset if 5 small values in a row
		if (abs(prev_x[k]) > 5) {
 8001078:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <get_mouse_xy+0x218>)
 800107a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800107c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001080:	2b00      	cmp	r3, #0
 8001082:	bfb8      	it	lt
 8001084:	425b      	neglt	r3, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	2b05      	cmp	r3, #5
 800108a:	d901      	bls.n	8001090 <get_mouse_xy+0x170>
			x_reset = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	663b      	str	r3, [r7, #96]	; 0x60
		}
		if (abs(prev_y[k]) > 5) {
 8001090:	4a2a      	ldr	r2, [pc, #168]	; (800113c <get_mouse_xy+0x21c>)
 8001092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001094:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bfb8      	it	lt
 800109c:	425b      	neglt	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d901      	bls.n	80010a8 <get_mouse_xy+0x188>
			y_reset = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (int k = 0; k < PREV_C; k++) {
 80010a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010aa:	3301      	adds	r3, #1
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80010ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	dde1      	ble.n	8001078 <get_mouse_xy+0x158>
		}
	}
	if (x_reset) {
 80010b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <get_mouse_xy+0x1a0>
		*x = 0;
 80010ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010bc:	2300      	movs	r3, #0
 80010be:	7013      	strb	r3, [r2, #0]
	}
	if (y_reset) {
 80010c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <get_mouse_xy+0x1ac>
		*y = 0;
 80010c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010c8:	2300      	movs	r3, #0
 80010ca:	7013      	strb	r3, [r2, #0]
	}

	// if x trigger is not set and accel is significant
	if (*x == 0) {
 80010cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ce:	f993 3000 	ldrsb.w	r3, [r3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d15a      	bne.n	800118c <get_mouse_xy+0x26c>
		if (avg_x < -SIG_ACCEL) {
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <get_mouse_xy+0x20c>)
 80010d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <get_mouse_xy+0x220>)
 80010e2:	f7ff fc79 	bl	80009d8 <__aeabi_dcmplt>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02d      	beq.n	8001148 <get_mouse_xy+0x228>
			*x = -avg_x / ACCEL_DIV;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <get_mouse_xy+0x20c>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	4690      	mov	r8, r2
 80010f4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <get_mouse_xy+0x224>)
 80010fe:	4640      	mov	r0, r8
 8001100:	4649      	mov	r1, r9
 8001102:	f7ff fb21 	bl	8000748 <__aeabi_ddiv>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fc8b 	bl	8000a28 <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	b25b      	sxtb	r3, r3
 8001116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001118:	7013      	strb	r3, [r2, #0]
 800111a:	e037      	b.n	800118c <get_mouse_xy+0x26c>
 800111c:	20000238 	.word	0x20000238
 8001120:	20000236 	.word	0x20000236
 8001124:	20000234 	.word	0x20000234
 8001128:	200001da 	.word	0x200001da
 800112c:	200001e0 	.word	0x200001e0
 8001130:	200001e8 	.word	0x200001e8
 8001134:	3fe00000 	.word	0x3fe00000
 8001138:	200001f0 	.word	0x200001f0
 800113c:	20000204 	.word	0x20000204
 8001140:	c0390000 	.word	0xc0390000
 8001144:	40340000 	.word	0x40340000
		} else if (avg_x > SIG_ACCEL) {
 8001148:	4ba9      	ldr	r3, [pc, #676]	; (80013f0 <get_mouse_xy+0x4d0>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4ba8      	ldr	r3, [pc, #672]	; (80013f4 <get_mouse_xy+0x4d4>)
 8001154:	f7ff fc5e 	bl	8000a14 <__aeabi_dcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d016      	beq.n	800118c <get_mouse_xy+0x26c>
			*x = -avg_x / ACCEL_DIV;
 800115e:	4ba4      	ldr	r3, [pc, #656]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	4692      	mov	sl, r2
 8001166:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4ba2      	ldr	r3, [pc, #648]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001170:	4650      	mov	r0, sl
 8001172:	4659      	mov	r1, fp
 8001174:	f7ff fae8 	bl	8000748 <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fc52 	bl	8000a28 <__aeabi_d2iz>
 8001184:	4603      	mov	r3, r0
 8001186:	b25b      	sxtb	r3, r3
 8001188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800118a:	7013      	strb	r3, [r2, #0]
		}
	}
	// if x accel is greater than starting accel
	if (*x > 0) {
 800118c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800118e:	f993 3000 	ldrsb.w	r3, [r3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd45      	ble.n	8001222 <get_mouse_xy+0x302>
		if (avg_x < -SIG_ACCEL) {
 8001196:	4b96      	ldr	r3, [pc, #600]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b96      	ldr	r3, [pc, #600]	; (80013fc <get_mouse_xy+0x4dc>)
 80011a2:	f7ff fc19 	bl	80009d8 <__aeabi_dcmplt>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d03a      	beq.n	8001222 <get_mouse_xy+0x302>
			if (fabs(avg_x / ACCEL_DIV) > fabs(*x)) {
 80011ac:	4b90      	ldr	r3, [pc, #576]	; (80013f0 <get_mouse_xy+0x4d0>)
 80011ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b90      	ldr	r3, [pc, #576]	; (80013f8 <get_mouse_xy+0x4d8>)
 80011b8:	f7ff fac6 	bl	8000748 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80011c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ca:	f993 3000 	ldrsb.w	r3, [r3]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f926 	bl	8000420 <__aeabi_i2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	643a      	str	r2, [r7, #64]	; 0x40
 80011da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
 80011e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80011e8:	f7ff fc14 	bl	8000a14 <__aeabi_dcmpgt>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d017      	beq.n	8001222 <get_mouse_xy+0x302>
				*x = -avg_x / ACCEL_DIV;
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <get_mouse_xy+0x4d0>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80011fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001206:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800120a:	f7ff fa9d 	bl	8000748 <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fc07 	bl	8000a28 <__aeabi_d2iz>
 800121a:	4603      	mov	r3, r0
 800121c:	b25b      	sxtb	r3, r3
 800121e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001220:	7013      	strb	r3, [r2, #0]
			}
		}
	}
	if (*x < 0) {
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	f993 3000 	ldrsb.w	r3, [r3]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da45      	bge.n	80012b8 <get_mouse_xy+0x398>
		if (avg_x > SIG_ACCEL) {
 800122c:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <get_mouse_xy+0x4d0>)
 800122e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <get_mouse_xy+0x4d4>)
 8001238:	f7ff fbec 	bl	8000a14 <__aeabi_dcmpgt>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d03a      	beq.n	80012b8 <get_mouse_xy+0x398>
			if (fabs(avg_x / ACCEL_DIV) > fabs(*x)) {
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <get_mouse_xy+0x4d8>)
 800124e:	f7ff fa7b 	bl	8000748 <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	633a      	str	r2, [r7, #48]	; 0x30
 8001258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
 800125e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001260:	f993 3000 	ldrsb.w	r3, [r3]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f8db 	bl	8000420 <__aeabi_i2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800127a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800127e:	f7ff fbc9 	bl	8000a14 <__aeabi_dcmpgt>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d017      	beq.n	80012b8 <get_mouse_xy+0x398>
				*x = -avg_x / ACCEL_DIV;
 8001288:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <get_mouse_xy+0x4d0>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	623a      	str	r2, [r7, #32]
 8001290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <get_mouse_xy+0x4d8>)
 800129c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012a0:	f7ff fa52 	bl	8000748 <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbbc 	bl	8000a28 <__aeabi_d2iz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b25a      	sxtb	r2, r3
 80012b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b6:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// if y trigger is not set and accel is significant
	if (*y == 0) {
 80012b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ba:	f993 3000 	ldrsb.w	r3, [r3]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d13a      	bne.n	8001338 <get_mouse_xy+0x418>
		if (avg_y < -SIG_ACCEL) {
 80012c2:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <get_mouse_xy+0x4e0>)
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <get_mouse_xy+0x4dc>)
 80012ce:	f7ff fb83 	bl	80009d8 <__aeabi_dcmplt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <get_mouse_xy+0x3de>
			*y = avg_y / ACCEL_DIV;
 80012d8:	4b49      	ldr	r3, [pc, #292]	; (8001400 <get_mouse_xy+0x4e0>)
 80012da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <get_mouse_xy+0x4d8>)
 80012e4:	f7ff fa30 	bl	8000748 <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fb9a 	bl	8000a28 <__aeabi_d2iz>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e01c      	b.n	8001338 <get_mouse_xy+0x418>
		} else if (avg_y > SIG_ACCEL) {
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <get_mouse_xy+0x4e0>)
 8001300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <get_mouse_xy+0x4d4>)
 800130a:	f7ff fb83 	bl	8000a14 <__aeabi_dcmpgt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d011      	beq.n	8001338 <get_mouse_xy+0x418>
			*y = avg_y / ACCEL_DIV;
 8001314:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <get_mouse_xy+0x4e0>)
 8001316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001320:	f7ff fa12 	bl	8000748 <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fb7c 	bl	8000a28 <__aeabi_d2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	b25a      	sxtb	r2, r3
 8001334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001336:	701a      	strb	r2, [r3, #0]
		}
	}
	// if y accel is greater than starting accel
	if (*y < 0 || *y > 0) {
 8001338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800133a:	f993 3000 	ldrsb.w	r3, [r3]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db04      	blt.n	800134c <get_mouse_xy+0x42c>
 8001342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001344:	f993 3000 	ldrsb.w	r3, [r3]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd3f      	ble.n	80013cc <get_mouse_xy+0x4ac>
		if (avg_y < -SIG_ACCEL) {
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <get_mouse_xy+0x4e0>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <get_mouse_xy+0x4dc>)
 8001358:	f7ff fb3e 	bl	80009d8 <__aeabi_dcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d034      	beq.n	80013cc <get_mouse_xy+0x4ac>
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
 8001362:	4b27      	ldr	r3, [pc, #156]	; (8001400 <get_mouse_xy+0x4e0>)
 8001364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <get_mouse_xy+0x4d8>)
 800136e:	f7ff f9eb 	bl	8000748 <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	61ba      	str	r2, [r7, #24]
 8001378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001380:	f993 3000 	ldrsb.w	r3, [r3]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f84b 	bl	8000420 <__aeabi_i2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	613a      	str	r2, [r7, #16]
 8001390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800139a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800139e:	f7ff fb39 	bl	8000a14 <__aeabi_dcmpgt>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d011      	beq.n	80013cc <get_mouse_xy+0x4ac>
				*y = avg_y / ACCEL_DIV;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <get_mouse_xy+0x4e0>)
 80013aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <get_mouse_xy+0x4d8>)
 80013b4:	f7ff f9c8 	bl	8000748 <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb32 	bl	8000a28 <__aeabi_d2iz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (*y > 0) {
 80013cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ce:	f993 3000 	ldrsb.w	r3, [r3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dd4c      	ble.n	8001470 <get_mouse_xy+0x550>
		if (avg_y > SIG_ACCEL) {
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <get_mouse_xy+0x4e0>)
 80013d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <get_mouse_xy+0x4d4>)
 80013e2:	f7ff fb17 	bl	8000a14 <__aeabi_dcmpgt>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10b      	bne.n	8001404 <get_mouse_xy+0x4e4>
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
				*y = avg_y / ACCEL_DIV;
			}
		}
	}
}
 80013ec:	e040      	b.n	8001470 <get_mouse_xy+0x550>
 80013ee:	bf00      	nop
 80013f0:	200001e0 	.word	0x200001e0
 80013f4:	40390000 	.word	0x40390000
 80013f8:	40340000 	.word	0x40340000
 80013fc:	c0390000 	.word	0xc0390000
 8001400:	200001e8 	.word	0x200001e8
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <get_mouse_xy+0x55c>)
 8001406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <get_mouse_xy+0x560>)
 8001410:	f7ff f99a 	bl	8000748 <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001422:	f993 3000 	ldrsb.w	r3, [r3]
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fffa 	bl	8000420 <__aeabi_i2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	603a      	str	r2, [r7, #0]
 8001432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800143c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001440:	f7ff fae8 	bl	8000a14 <__aeabi_dcmpgt>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <get_mouse_xy+0x52c>
}
 800144a:	e011      	b.n	8001470 <get_mouse_xy+0x550>
				*y = avg_y / ACCEL_DIV;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <get_mouse_xy+0x55c>)
 800144e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <get_mouse_xy+0x560>)
 8001458:	f7ff f976 	bl	8000748 <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fae0 	bl	8000a28 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	b25a      	sxtb	r2, r3
 800146c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800146e:	701a      	strb	r2, [r3, #0]
}
 8001470:	bf00      	nop
 8001472:	3768      	adds	r7, #104	; 0x68
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800147a:	bf00      	nop
 800147c:	200001e8 	.word	0x200001e8
 8001480:	40340000 	.word	0x40340000

08001484 <calculate_encoder_diff>:
#include "wheel.h"

int8_t calculate_encoder_diff(uint32_t prev_pos, uint32_t cur_pos) {
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	// calculates encoder diff
	// prev_pos - previous position of the encoder
	// cur_pos - current position of the encoder
	int diff = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8001498:	4293      	cmp	r3, r2
 800149a:	d90c      	bls.n	80014b6 <calculate_encoder_diff+0x32>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d807      	bhi.n	80014b6 <calculate_encoder_diff+0x32>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014b0:	33ff      	adds	r3, #255	; 0xff
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e015      	b.n	80014e2 <calculate_encoder_diff+0x5e>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80014bc:	4293      	cmp	r3, r2
 80014be:	d80c      	bhi.n	80014da <calculate_encoder_diff+0x56>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d907      	bls.n	80014da <calculate_encoder_diff+0x56>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80014d4:	3bff      	subs	r3, #255	; 0xff
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e003      	b.n	80014e2 <calculate_encoder_diff+0x5e>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) clamp(INT8_MIN, INT8_MAX, diff);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80014e8:	db07      	blt.n	80014fa <calculate_encoder_diff+0x76>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b7f      	cmp	r3, #127	; 0x7f
 80014ee:	dc02      	bgt.n	80014f6 <calculate_encoder_diff+0x72>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	e003      	b.n	80014fe <calculate_encoder_diff+0x7a>
 80014f6:	237f      	movs	r3, #127	; 0x7f
 80014f8:	e001      	b.n	80014fe <calculate_encoder_diff+0x7a>
 80014fa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <get_wheel_change>:


uint32_t encoder_prev = 0;
uint8_t get_wheel_change(uint32_t encoder_timer_count) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	// returns wheel change -1, 0 or 1 when compared to the last wheel position
	// encoder_timer_count - current wheel encoder timer count
	uint32_t encoder_cur = encoder_timer_count;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60fb      	str	r3, [r7, #12]
	uint8_t diff = clamp(-1, 1, calculate_encoder_diff(encoder_prev, encoder_cur));
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <get_wheel_change+0x70>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffb0 	bl	8001484 <calculate_encoder_diff>
 8001524:	4603      	mov	r3, r0
 8001526:	2b01      	cmp	r3, #1
 8001528:	dc09      	bgt.n	800153e <get_wheel_change+0x32>
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <get_wheel_change+0x70>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ffa7 	bl	8001484 <calculate_encoder_diff>
 8001536:	4603      	mov	r3, r0
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	db13      	blt.n	8001566 <get_wheel_change+0x5a>
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <get_wheel_change+0x70>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff9d 	bl	8001484 <calculate_encoder_diff>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	dc08      	bgt.n	8001562 <get_wheel_change+0x56>
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <get_wheel_change+0x70>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff94 	bl	8001484 <calculate_encoder_diff>
 800155c:	4603      	mov	r3, r0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	e002      	b.n	8001568 <get_wheel_change+0x5c>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <get_wheel_change+0x5c>
 8001566:	23ff      	movs	r3, #255	; 0xff
 8001568:	72fb      	strb	r3, [r7, #11]
	encoder_prev = encoder_cur;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <get_wheel_change+0x70>)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6013      	str	r3, [r2, #0]
	return diff;
 8001570:	7afb      	ldrb	r3, [r7, #11]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000218 	.word	0x20000218

08001580 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a4:	68fb      	ldr	r3, [r7, #12]
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	2002      	movs	r0, #2
 80015ca:	f7ff ffd9 	bl	8001580 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff ffd6 	bl	8001580 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d4:	2010      	movs	r0, #16
 80015d6:	f7ff ffd3 	bl	8001580 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e0:	4825      	ldr	r0, [pc, #148]	; (8001678 <MX_GPIO_Init+0xc4>)
 80015e2:	f000 feb5 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2110      	movs	r1, #16
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f000 feaf 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	481b      	ldr	r0, [pc, #108]	; (8001678 <MX_GPIO_Init+0xc4>)
 800160a:	f000 fd21 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800160e:	2310      	movs	r3, #16
 8001610:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001626:	f000 fd13 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 800162a:	23fb      	movs	r3, #251	; 0xfb
 800162c:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <MX_GPIO_Init+0xc4>)
 800163c:	f000 fd08 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 8001640:	2310      	movs	r3, #16
 8001642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	480a      	ldr	r0, [pc, #40]	; (800167c <MX_GPIO_Init+0xc8>)
 8001652:	f000 fcfd 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 8001656:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800165a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166c:	f000 fcf0 	bl	8002050 <HAL_GPIO_Init>

}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	48000400 	.word	0x48000400
 800167c:	48001000 	.word	0x48001000

08001680 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001684:	f000 fb2a 	bl	8001cdc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001688:	f000 f85c 	bl	8001744 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800168c:	f000 f8c6 	bl	800181c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001690:	f7ff ff90 	bl	80015b4 <MX_GPIO_Init>
	MX_USB_Device_Init();
 8001694:	f008 fdce 	bl	800a234 <MX_USB_Device_Init>
	MX_SPI1_Init();
 8001698:	f000 f914 	bl	80018c4 <MX_SPI1_Init>
	MX_TIM1_Init();
 800169c:	f000 fa5c 	bl	8001b58 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// start encoder timer
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80016a0:	2104      	movs	r1, #4
 80016a2:	481d      	ldr	r0, [pc, #116]	; (8001718 <main+0x98>)
 80016a4:	f005 f908 	bl	80068b8 <HAL_TIM_Encoder_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	imu_setup();
 80016a8:	f7ff fac0 	bl	8000c2c <imu_setup>
	while (1) {
		// buttons
		update_buttons();
 80016ac:	f7ff f9e4 	bl	8000a78 <update_buttons>
		report.buttons = (left_down << 0) | (right_down << 1)
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <main+0x9c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <main+0xa0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25a      	sxtb	r2, r3
				| (middle_down << 2) | (b5_down << 3) | (b4_down << 4);
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <main+0xa4>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b25a      	sxtb	r2, r3
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <main+0xa8>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <main+0xac>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	b2da      	uxtb	r2, r3
		report.buttons = (left_down << 0) | (right_down << 1)
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <main+0xb0>)
 80016ea:	701a      	strb	r2, [r3, #0]

		// wheel
		report.wheel = get_wheel_change(TIM1->CNT);
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <main+0xb4>)
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff0b 	bl	800150c <get_wheel_change>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <main+0xb0>)
 80016fc:	70da      	strb	r2, [r3, #3]

		// mouse x, y
		get_mouse_xy(&report.x, &report.y);
 80016fe:	490e      	ldr	r1, [pc, #56]	; (8001738 <main+0xb8>)
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <main+0xbc>)
 8001702:	f7ff fc0d 	bl	8000f20 <get_mouse_xy>

		USBD_HID_SendReport(&hUsbDeviceFS, &report, 4);
 8001706:	2204      	movs	r2, #4
 8001708:	4909      	ldr	r1, [pc, #36]	; (8001730 <main+0xb0>)
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <main+0xc0>)
 800170c:	f007 fc16 	bl	8008f3c <USBD_HID_SendReport>
		HAL_Delay(1);
 8001710:	2001      	movs	r0, #1
 8001712:	f000 fb69 	bl	8001de8 <HAL_Delay>
		update_buttons();
 8001716:	e7c9      	b.n	80016ac <main+0x2c>
 8001718:	200002a4 	.word	0x200002a4
 800171c:	200001a6 	.word	0x200001a6
 8001720:	200001a4 	.word	0x200001a4
 8001724:	200001a5 	.word	0x200001a5
 8001728:	200001a8 	.word	0x200001a8
 800172c:	200001a7 	.word	0x200001a7
 8001730:	2000023c 	.word	0x2000023c
 8001734:	40012c00 	.word	0x40012c00
 8001738:	2000023e 	.word	0x2000023e
 800173c:	2000023d 	.word	0x2000023d
 8001740:	200002f4 	.word	0x200002f4

08001744 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b09a      	sub	sp, #104	; 0x68
 8001748:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800174a:	f107 0320 	add.w	r3, r7, #32
 800174e:	2248      	movs	r2, #72	; 0x48
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f009 f9fe 	bl	800ab54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800176a:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <SystemClock_Config+0xd4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001772:	4a29      	ldr	r2, [pc, #164]	; (8001818 <SystemClock_Config+0xd4>)
 8001774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <SystemClock_Config+0xd4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001786:	2326      	movs	r3, #38	; 0x26
 8001788:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800178a:	2300      	movs	r3, #0
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001794:	2301      	movs	r3, #1
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001798:	2340      	movs	r3, #64	; 0x40
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800179c:	2300      	movs	r3, #0
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017a0:	2360      	movs	r3, #96	; 0x60
 80017a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017a8:	2301      	movs	r3, #1
 80017aa:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 80017b0:	2320      	movs	r3, #32
 80017b2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017be:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c4:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017c6:	f107 0320 	add.w	r3, r7, #32
 80017ca:	4618      	mov	r0, r3
 80017cc:	f002 fe80 	bl	80044d0 <HAL_RCC_OscConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0x96>
		Error_Handler();
 80017d6:	f000 f83e 	bl	8001856 <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80017da:	236f      	movs	r3, #111	; 0x6f
 80017dc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017de:	2303      	movs	r3, #3
 80017e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2103      	movs	r1, #3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 f9f4 	bl	8004be8 <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0xc6>
		Error_Handler();
 8001806:	f000 f826 	bl	8001856 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800180a:	f003 ff87 	bl	800571c <HAL_RCCEx_EnableMSIPLLMode>
}
 800180e:	bf00      	nop
 8001810:	3768      	adds	r7, #104	; 0x68
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	58000400 	.word	0x58000400

0800181c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	; 0x50
 8001820:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001822:	463b      	mov	r3, r7
 8001824:	2250      	movs	r2, #80	; 0x50
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f009 f993 	bl	800ab54 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800182e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001832:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001834:	2300      	movs	r3, #0
 8001836:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001838:	2310      	movs	r3, #16
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800183c:	463b      	mov	r3, r7
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fdf6 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <PeriphCommonClock_Config+0x32>
		Error_Handler();
 800184a:	f000 f804 	bl	8001856 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 800184e:	bf00      	nop
 8001850:	3750      	adds	r7, #80	; 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185a:	b672      	cpsid	i
}
 800185c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800185e:	e7fe      	b.n	800185e <Error_Handler+0x8>

08001860 <LL_AHB2_GRP1_EnableClock>:
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800186e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <MX_SPI1_Init+0x74>)
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <MX_SPI1_Init+0x78>)
 80018cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_SPI1_Init+0x74>)
 80018d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MX_SPI1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_SPI1_Init+0x74>)
 80018de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_SPI1_Init+0x74>)
 80018e6:	2202      	movs	r2, #2
 80018e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_SPI1_Init+0x74>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_SPI1_Init+0x74>)
 80018f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_SPI1_Init+0x74>)
 80018fa:	2210      	movs	r2, #16
 80018fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_SPI1_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_SPI1_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_SPI1_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_SPI1_Init+0x74>)
 8001912:	2207      	movs	r2, #7
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_SPI1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_SPI1_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_SPI1_Init+0x74>)
 8001924:	f004 f811 	bl	800594a <HAL_SPI_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800192e:	f7ff ff92 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000240 	.word	0x20000240
 800193c:	40013000 	.word	0x40013000

08001940 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_SPI_MspInit+0x5c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d117      	bne.n	8001992 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001962:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001966:	f7ff ff94 	bl	8001892 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff ff78 	bl	8001860 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001970:	23c2      	movs	r3, #194	; 0xc2
 8001972:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001980:	2305      	movs	r3, #5
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f000 fb5f 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40013000 	.word	0x40013000

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2101      	movs	r1, #1
 80019a8:	f06f 000b 	mvn.w	r0, #11
 80019ac:	f000 fb1b 	bl	8001fe6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2101      	movs	r1, #1
 80019b4:	f06f 000a 	mvn.w	r0, #10
 80019b8:	f000 fb15 	bl	8001fe6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2101      	movs	r1, #1
 80019c0:	f06f 0009 	mvn.w	r0, #9
 80019c4:	f000 fb0f 	bl	8001fe6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2101      	movs	r1, #1
 80019cc:	f06f 0004 	mvn.w	r0, #4
 80019d0:	f000 fb09 	bl	8001fe6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2101      	movs	r1, #1
 80019d8:	f06f 0003 	mvn.w	r0, #3
 80019dc:	f000 fb03 	bl	8001fe6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2101      	movs	r1, #1
 80019e4:	f06f 0001 	mvn.w	r0, #1
 80019e8:	f000 fafd 	bl	8001fe6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3c:	f000 f9a8 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <USB_LP_IRQHandler+0x10>)
 8001a4a:	f000 fda0 	bl	800258e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200007c4 	.word	0x200007c4

08001a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <SystemInit+0x90>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <SystemInit+0x90>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001a84:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <SystemInit+0x94>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa2:	f023 0305 	bic.w	r3, r3, #5
 8001aa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <SystemInit+0x98>)
 8001ac4:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00
 8001aec:	faf6fefb 	.word	0xfaf6fefb
 8001af0:	22041000 	.word	0x22041000

08001af4 <LL_AHB2_GRP1_EnableClock>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b18:	68fb      	ldr	r3, [r7, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_APB2_GRP1_EnableClock>:
{
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f008 fff4 	bl	800ab54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <MX_TIM1_Init+0xb0>)
 8001b7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001baa:	2301      	movs	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001bce:	f004 fdcd 	bl	800676c <HAL_TIM_Encoder_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001bd8:	f7ff fe3d 	bl	8001856 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_TIM1_Init+0xac>)
 8001bee:	f004 ff7b 	bl	8006ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001bf8:	f7ff fe2d 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	3730      	adds	r7, #48	; 0x30
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200002a4 	.word	0x200002a4
 8001c08:	40012c00 	.word	0x40012c00

08001c0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_TIM_Encoder_MspInit+0x5c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d118      	bne.n	8001c60 <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c32:	f7ff ff78 	bl	8001b26 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff ff5c 	bl	8001af4 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5c:	f000 f9f8 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40012c00 	.word	0x40012c00

08001c6c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001c6c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c70:	3304      	adds	r3, #4

08001c72 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c72:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c74:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001c76:	d3f9      	bcc.n	8001c6c <CopyDataInit>
  bx lr
 8001c78:	4770      	bx	lr

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001c7a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001c7c:	3004      	adds	r0, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001c7e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>
  bx lr
 8001c82:	4770      	bx	lr

08001c84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001c86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c88:	f7ff fee6 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <LoopForever+0x8>)
 8001c8e:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <LoopForever+0xc>)
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <LoopForever+0x10>)
 8001c92:	2300      	movs	r3, #0
 8001c94:	f7ff ffed 	bl	8001c72 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <LoopForever+0x14>)
 8001c9a:	490c      	ldr	r1, [pc, #48]	; (8001ccc <LoopForever+0x18>)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f7ff ffee 	bl	8001c7e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ca2:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <LoopForever+0x1c>)
 8001ca4:	490b      	ldr	r1, [pc, #44]	; (8001cd4 <LoopForever+0x20>)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f7ff ffe9 	bl	8001c7e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cac:	f008 ff2e 	bl	800ab0c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001cb0:	f7ff fce6 	bl	8001680 <main>

08001cb4 <LoopForever>:

LoopForever:
  b LoopForever
 8001cb4:	e7fe      	b.n	8001cb4 <LoopForever>
 8001cb6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001cb8:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	20000184 	.word	0x20000184
 8001cc4:	0800ac78 	.word	0x0800ac78
  INIT_BSS _sbss, _ebss
 8001cc8:	20000188 	.word	0x20000188
 8001ccc:	20000ab8 	.word	0x20000ab8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001cd0:	20030000 	.word	0x20030000
 8001cd4:	20030000 	.word	0x20030000

08001cd8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_Init+0x3c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_Init+0x3c>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 f96c 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f80f 	bl	8001d1c <HAL_InitTick>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	e001      	b.n	8001d0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d0a:	f7ff fe49 	bl	80019a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	58004000 	.word	0x58004000

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_InitTick+0x6c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d024      	beq.n	8001d7a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d30:	f003 f906 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_InitTick+0x6c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d40:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f974 	bl	8002036 <HAL_SYSTICK_Config>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10f      	bne.n	8001d74 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	d809      	bhi.n	8001d6e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d62:	f000 f940 	bl	8001fe6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_InitTick+0x70>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e007      	b.n	8001d7e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	e004      	b.n	8001d7e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e001      	b.n	8001d7e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000024 	.word	0x20000024
 8001d8c:	20000020 	.word	0x20000020

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000024 	.word	0x20000024
 8001db4:	200002f0 	.word	0x200002f0

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	200002f0 	.word	0x200002f0

08001dd0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_GetTickPrio+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000020 	.word	0x20000020

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff ffe2 	bl	8001db8 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_Delay+0x44>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffd2 	bl	8001db8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
    {
    }
  }
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000024 	.word	0x20000024

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4907      	ldr	r1, [pc, #28]	; (8001ecc <__NVIC_EnableIRQ+0x38>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff29 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff40 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff90 	bl	8001f24 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5f 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff33 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffa4 	bl	8001f8c <SysTick_Config>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e146      	b.n	80022ee <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8138 	beq.w	80022e8 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d005      	beq.n	8002090 <HAL_GPIO_Init+0x40>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d130      	bne.n	80020f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020c6:	2201      	movs	r2, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 0201 	and.w	r2, r3, #1
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d017      	beq.n	800212e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d123      	bne.n	8002182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	08da      	lsrs	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0203 	and.w	r2, r3, #3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8092 	beq.w	80022e8 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_GPIO_Init+0x2bc>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ee:	d013      	beq.n	8002218 <HAL_GPIO_Init+0x1c8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_GPIO_Init+0x2c0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00d      	beq.n	8002214 <HAL_GPIO_Init+0x1c4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a46      	ldr	r2, [pc, #280]	; (8002314 <HAL_GPIO_Init+0x2c4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <HAL_GPIO_Init+0x1c0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a45      	ldr	r2, [pc, #276]	; (8002318 <HAL_GPIO_Init+0x2c8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d101      	bne.n	800220c <HAL_GPIO_Init+0x1bc>
 8002208:	2304      	movs	r3, #4
 800220a:	e006      	b.n	800221a <HAL_GPIO_Init+0x1ca>
 800220c:	2307      	movs	r3, #7
 800220e:	e004      	b.n	800221a <HAL_GPIO_Init+0x1ca>
 8002210:	2302      	movs	r3, #2
 8002212:	e002      	b.n	800221a <HAL_GPIO_Init+0x1ca>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_GPIO_Init+0x1ca>
 8002218:	2300      	movs	r3, #0
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	f002 0203 	and.w	r2, r2, #3
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	4093      	lsls	r3, r2
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800222a:	4938      	ldr	r1, [pc, #224]	; (800230c <HAL_GPIO_Init+0x2bc>)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002238:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_GPIO_Init+0x2cc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800225c:	4a2f      	ldr	r2, [pc, #188]	; (800231c <HAL_GPIO_Init+0x2cc>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_GPIO_Init+0x2cc>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <HAL_GPIO_Init+0x2cc>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_GPIO_Init+0x2cc>)
 800228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_GPIO_Init+0x2cc>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_GPIO_Init+0x2cc>)
 80022bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_GPIO_Init+0x2cc>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3301      	adds	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f47f aeb1 	bne.w	8002060 <HAL_GPIO_Init+0x10>
  }
}
 80022fe:	bf00      	nop
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40010000 	.word	0x40010000
 8002310:	48000400 	.word	0x48000400
 8002314:	48000800 	.word	0x48000800
 8002318:	48001000 	.word	0x48001000
 800231c:	58000800 	.word	0x58000800

08002320 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	b08b      	sub	sp, #44	; 0x2c
 8002384:	af06      	add	r7, sp, #24
 8002386:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0d7      	b.n	8002542 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f008 f8ac 	bl	800a504 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2203      	movs	r2, #3
 80023b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 fc0c 	bl	8006bd6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	e04c      	b.n	800245e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	3301      	adds	r3, #1
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	b298      	uxth	r0, r3
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3336      	adds	r3, #54	; 0x36
 8002402:	4602      	mov	r2, r0
 8002404:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	3303      	adds	r3, #3
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3338      	adds	r3, #56	; 0x38
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	333c      	adds	r3, #60	; 0x3c
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	3340      	adds	r3, #64	; 0x40
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d3ad      	bcc.n	80023c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e044      	b.n	80024f8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	3301      	adds	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3b5      	bcc.n	800246e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	687e      	ldr	r6, [r7, #4]
 800250a:	466d      	mov	r5, sp
 800250c:	f106 0410 	add.w	r4, r6, #16
 8002510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	602b      	str	r3, [r5, #0]
 8002518:	1d33      	adds	r3, r6, #4
 800251a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251c:	6838      	ldr	r0, [r7, #0]
 800251e:	f004 fb75 	bl	8006c0c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d102      	bne.n	8002540 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f001 fc11 	bl	8003d62 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800254a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_PCD_Start+0x16>
 800255c:	2302      	movs	r3, #2
 800255e:	e012      	b.n	8002586 <HAL_PCD_Start+0x3c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f004 fb1b 	bl	8006ba8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f006 fad0 	bl	8008b1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f006 fad5 	bl	8008b4a <USB_ReadInterrupts>
 80025a0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fb0e 	bl	8002bce <PCD_EP_ISR_Handler>

    return;
 80025b2:	e110      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d013      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d0:	b292      	uxth	r2, r2
 80025d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f008 f847 	bl	800a66a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025dc:	2100      	movs	r1, #0
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8fc 	bl	80027dc <HAL_PCD_SetAddress>

    return;
 80025e4:	e0f7      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002602:	b292      	uxth	r2, r2
 8002604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002608:	e0e5      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00c      	beq.n	800262e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002626:	b292      	uxth	r2, r2
 8002628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800262c:	e0d3      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d034      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	b292      	uxth	r2, r2
 800264c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002658:	b29a      	uxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0208 	bic.w	r2, r2, #8
 8002662:	b292      	uxth	r2, r2
 8002664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f008 f9c5 	bl	800aa0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f008 f82a 	bl	800a6dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800269a:	b292      	uxth	r2, r2
 800269c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80026a0:	e099      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d027      	beq.n	80026fc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	b292      	uxth	r2, r2
 80026c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d6:	b292      	uxth	r2, r2
 80026d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0204 	orr.w	r2, r2, #4
 80026ee:	b292      	uxth	r2, r2
 80026f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f007 ffd7 	bl	800a6a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026fa:	e06c      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002718:	b292      	uxth	r2, r2
 800271a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12b      	bne.n	8002780 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0204 	orr.w	r2, r2, #4
 800273a:	b292      	uxth	r2, r2
 800273c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0208 	orr.w	r2, r2, #8
 8002752:	b292      	uxth	r2, r2
 8002754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002768:	b29b      	uxth	r3, r3
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002776:	2101      	movs	r1, #1
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f008 f947 	bl	800aa0c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800277e:	e02a      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f007 ff91 	bl	800a6a8 <HAL_PCD_SuspendCallback>
    return;
 8002786:	e026      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00f      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027a4:	b292      	uxth	r2, r2
 80027a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f007 ff4f 	bl	800a64e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027b0:	e011      	b.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ce:	b292      	uxth	r2, r2
 80027d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80027d4:	bf00      	nop
  }
}
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_PCD_SetAddress+0x1a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e013      	b.n	800281e <HAL_PCD_SetAddress+0x42>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f006 f970 	bl	8008af4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	4608      	mov	r0, r1
 8002830:	4611      	mov	r1, r2
 8002832:	461a      	mov	r2, r3
 8002834:	4603      	mov	r3, r0
 8002836:	70fb      	strb	r3, [r7, #3]
 8002838:	460b      	mov	r3, r1
 800283a:	803b      	strh	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da0e      	bge.n	800286a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	705a      	strb	r2, [r3, #1]
 8002868:	e00e      	b.n	8002888 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 0207 	and.w	r2, r3, #7
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002894:	883a      	ldrh	r2, [r7, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	78ba      	ldrb	r2, [r7, #2]
 800289e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	785b      	ldrb	r3, [r3, #1]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028b2:	78bb      	ldrb	r3, [r7, #2]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d102      	bne.n	80028be <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_PCD_EP_Open+0xa6>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e00e      	b.n	80028ea <HAL_PCD_EP_Open+0xc4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 f9b8 	bl	8006c50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80028e8:	7afb      	ldrb	r3, [r7, #11]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002902:	2b00      	cmp	r3, #0
 8002904:	da0e      	bge.n	8002924 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	705a      	strb	r2, [r3, #1]
 8002922:	e00e      	b.n	8002942 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 0207 	and.w	r2, r3, #7
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_PCD_EP_Close+0x6a>
 8002958:	2302      	movs	r3, #2
 800295a:	e00e      	b.n	800297a <HAL_PCD_EP_Close+0x88>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 fd04 	bl	8007378 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	460b      	mov	r3, r1
 8002990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	f003 0207 	and.w	r2, r3, #7
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2200      	movs	r2, #0
 80029c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6979      	ldr	r1, [r7, #20]
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 feb7 	bl	8007752 <USB_EPStartXfer>
 80029e4:	e005      	b.n	80029f2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6979      	ldr	r1, [r7, #20]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 feb0 	bl	8007752 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2201      	movs	r2, #1
 8002a46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a48:	7afb      	ldrb	r3, [r7, #11]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6979      	ldr	r1, [r7, #20]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 fe74 	bl	8007752 <USB_EPStartXfer>
 8002a6a:	e005      	b.n	8002a78 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6979      	ldr	r1, [r7, #20]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 fe6d 	bl	8007752 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 0207 	and.w	r2, r3, #7
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d901      	bls.n	8002aa0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e03e      	b.n	8002b1e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da0e      	bge.n	8002ac6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	705a      	strb	r2, [r3, #1]
 8002ac4:	e00c      	b.n	8002ae0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_PCD_EP_SetStall+0x7e>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e00e      	b.n	8002b1e <HAL_PCD_EP_SetStall+0x9c>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f005 fef1 	bl	80088f6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d901      	bls.n	8002b44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e040      	b.n	8002bc6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	da0e      	bge.n	8002b6a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	705a      	strb	r2, [r3, #1]
 8002b68:	e00e      	b.n	8002b88 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	f003 0207 	and.w	r2, r3, #7
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_PCD_EP_ClrStall+0x82>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e00e      	b.n	8002bc6 <HAL_PCD_EP_ClrStall+0xa0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68f9      	ldr	r1, [r7, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f005 feee 	bl	8008998 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b096      	sub	sp, #88	; 0x58
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bd6:	e39c      	b.n	8003312 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002be0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002be4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002bf2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 815e 	bne.w	8002eb8 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bfc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d150      	bne.n	8002caa <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c18:	81fb      	strh	r3, [r7, #14]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3328      	adds	r3, #40	; 0x28
 8002c30:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	441a      	add	r2, r3
 8002c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c66:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c68:	2100      	movs	r1, #0
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f007 fcd5 	bl	800a61a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 834a 	beq.w	8003312 <PCD_EP_ISR_Handler+0x744>
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 8345 	bne.w	8003312 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ca8:	e333      	b.n	8003312 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002cbc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d032      	beq.n	8002d2e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d00:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f005 ff73 	bl	8008bee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d14:	4013      	ands	r3, r2
 8002d16:	823b      	strh	r3, [r7, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	8a3a      	ldrh	r2, [r7, #16]
 8002d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d22:	b292      	uxth	r2, r2
 8002d24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f007 fc4a 	bl	800a5c0 <HAL_PCD_SetupStageCallback>
 8002d2c:	e2f1      	b.n	8003312 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d2e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f280 82ed 	bge.w	8003312 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d44:	4013      	ands	r3, r2
 8002d46:	83fb      	strh	r3, [r7, #30]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	8bfa      	ldrh	r2, [r7, #30]
 8002d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d52:	b292      	uxth	r2, r2
 8002d54:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d7c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d019      	beq.n	8002dba <PCD_EP_ISR_Handler+0x1ec>
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d015      	beq.n	8002dba <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d94:	6959      	ldr	r1, [r3, #20]
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f005 ff25 	bl	8008bee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	441a      	add	r2, r3
 8002dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002db2:	2100      	movs	r1, #0
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f007 fc15 	bl	800a5e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 82a3 	bne.w	8003312 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4413      	add	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b3e      	cmp	r3, #62	; 0x3e
 8002df2:	d918      	bls.n	8002e26 <PCD_EP_ISR_Handler+0x258>
 8002df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <PCD_EP_ISR_Handler+0x240>
 8002e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	029b      	lsls	r3, r3, #10
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	801a      	strh	r2, [r3, #0]
 8002e24:	e029      	b.n	8002e7a <PCD_EP_ISR_Handler+0x2ac>
 8002e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d112      	bne.n	8002e54 <PCD_EP_ISR_Handler+0x286>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	801a      	strh	r2, [r3, #0]
 8002e52:	e012      	b.n	8002e7a <PCD_EP_ISR_Handler+0x2ac>
 8002e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <PCD_EP_ISR_Handler+0x2a0>
 8002e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	029b      	lsls	r3, r3, #10
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	827b      	strh	r3, [r7, #18]
 8002e8c:	8a7b      	ldrh	r3, [r7, #18]
 8002e8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e92:	827b      	strh	r3, [r7, #18]
 8002e94:	8a7b      	ldrh	r3, [r7, #18]
 8002e96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e9a:	827b      	strh	r3, [r7, #18]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	8a7b      	ldrh	r3, [r7, #18]
 8002ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	8013      	strh	r3, [r2, #0]
 8002eb6:	e22c      	b.n	8003312 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ecc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f280 80f6 	bge.w	80030c2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002eec:	4013      	ands	r3, r2
 8002eee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f0c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	7b1b      	ldrb	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d123      	bne.n	8002f72 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002f52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 808e 	beq.w	8003078 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f62:	6959      	ldr	r1, [r3, #20]
 8002f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f66:	88da      	ldrh	r2, [r3, #6]
 8002f68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f6c:	f005 fe3f 	bl	8008bee <USB_ReadPMA>
 8002f70:	e082      	b.n	8003078 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	78db      	ldrb	r3, [r3, #3]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d10a      	bne.n	8002f90 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9d3 	bl	800332e <HAL_PCD_EP_DB_Receive>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002f8e:	e073      	b.n	8003078 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	441a      	add	r2, r3
 8002fbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d022      	beq.n	8003034 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	4413      	add	r3, r2
 8003008:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003012:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003016:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02c      	beq.n	8003078 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003024:	6959      	ldr	r1, [r3, #20]
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	891a      	ldrh	r2, [r3, #8]
 800302a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800302e:	f005 fdde 	bl	8008bee <USB_ReadPMA>
 8003032:	e021      	b.n	8003078 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	4413      	add	r3, r2
 800304e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003058:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800305c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306a:	6959      	ldr	r1, [r3, #20]
 800306c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306e:	895a      	ldrh	r2, [r3, #10]
 8003070:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003074:	f005 fdbb 	bl	8008bee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003080:	441a      	add	r2, r3
 8003082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003084:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800308e:	441a      	add	r2, r3
 8003090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003092:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <PCD_EP_ISR_Handler+0x4da>
 800309c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d206      	bcs.n	80030b6 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f007 fa98 	bl	800a5e4 <HAL_PCD_DataOutStageCallback>
 80030b4:	e005      	b.n	80030c2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 fb48 	bl	8007752 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8121 	beq.w	8003312 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80030d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	441a      	add	r2, r3
 8003110:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311c:	b29b      	uxth	r3, r3
 800311e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003122:	78db      	ldrb	r3, [r3, #3]
 8003124:	2b02      	cmp	r3, #2
 8003126:	f000 80a2 	beq.w	800326e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003132:	7b1b      	ldrb	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8093 	beq.w	8003260 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800313a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d046      	beq.n	80031d4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d126      	bne.n	800319c <PCD_EP_ISR_Handler+0x5ce>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800315c:	b29b      	uxth	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	4413      	add	r3, r2
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	00da      	lsls	r2, r3, #3
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	4413      	add	r3, r2
 8003170:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003174:	623b      	str	r3, [r7, #32]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003180:	b29a      	uxth	r2, r3
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003194:	b29a      	uxth	r2, r3
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	e061      	b.n	8003260 <PCD_EP_ISR_Handler+0x692>
 800319c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d15d      	bne.n	8003260 <PCD_EP_ISR_Handler+0x692>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	4413      	add	r3, r2
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	00da      	lsls	r2, r3, #3
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	4413      	add	r3, r2
 80031c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	2200      	movs	r2, #0
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	e045      	b.n	8003260 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d126      	bne.n	8003230 <PCD_EP_ISR_Handler+0x662>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	637b      	str	r3, [r7, #52]	; 0x34
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f6:	4413      	add	r3, r2
 80031f8:	637b      	str	r3, [r7, #52]	; 0x34
 80031fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	00da      	lsls	r2, r3, #3
 8003200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003202:	4413      	add	r3, r2
 8003204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003208:	633b      	str	r3, [r7, #48]	; 0x30
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003214:	b29a      	uxth	r2, r3
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003228:	b29a      	uxth	r2, r3
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	e017      	b.n	8003260 <PCD_EP_ISR_Handler+0x692>
 8003230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d113      	bne.n	8003260 <PCD_EP_ISR_Handler+0x692>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003240:	b29b      	uxth	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003246:	4413      	add	r3, r2
 8003248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800324a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	00da      	lsls	r2, r3, #3
 8003250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003252:	4413      	add	r3, r2
 8003254:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	2200      	movs	r2, #0
 800325e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f007 f9d7 	bl	800a61a <HAL_PCD_DataInStageCallback>
 800326c:	e051      	b.n	8003312 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800326e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d144      	bne.n	8003304 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003282:	b29b      	uxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	4413      	add	r3, r2
 8003294:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800329e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80032a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d907      	bls.n	80032be <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80032ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032b6:	1ad2      	subs	r2, r2, r3
 80032b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ba:	619a      	str	r2, [r3, #24]
 80032bc:	e002      	b.n	80032c4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80032be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80032c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f007 f9a1 	bl	800a61a <HAL_PCD_DataInStageCallback>
 80032d8:	e01b      	b.n	8003312 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80032da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032e2:	441a      	add	r2, r3
 80032e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80032e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032f0:	441a      	add	r2, r3
 80032f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 fa28 	bl	8007752 <USB_EPStartXfer>
 8003302:	e006      	b.n	8003312 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003304:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003308:	461a      	mov	r2, r3
 800330a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f917 	bl	8003540 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800331a:	b29b      	uxth	r3, r3
 800331c:	b21b      	sxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	f6ff ac5a 	blt.w	8002bd8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3758      	adds	r7, #88	; 0x58
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b088      	sub	sp, #32
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	4613      	mov	r3, r2
 800333a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d07c      	beq.n	8003440 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800334e:	b29b      	uxth	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4413      	add	r3, r2
 8003360:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	8b7b      	ldrh	r3, [r7, #26]
 8003372:	429a      	cmp	r2, r3
 8003374:	d306      	bcc.n	8003384 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	8b7b      	ldrh	r3, [r7, #26]
 800337c:	1ad2      	subs	r2, r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	619a      	str	r2, [r3, #24]
 8003382:	e002      	b.n	800338a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2200      	movs	r2, #0
 8003388:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d123      	bne.n	80033da <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ac:	833b      	strh	r3, [r7, #24]
 80033ae:	8b3b      	ldrh	r3, [r7, #24]
 80033b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033b4:	833b      	strh	r3, [r7, #24]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	441a      	add	r2, r3
 80033c4:	8b3b      	ldrh	r3, [r7, #24]
 80033c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01f      	beq.n	8003424 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	82fb      	strh	r3, [r7, #22]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	8afb      	ldrh	r3, [r7, #22]
 8003410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003420:	b29b      	uxth	r3, r3
 8003422:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003424:	8b7b      	ldrh	r3, [r7, #26]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8085 	beq.w	8003536 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6959      	ldr	r1, [r3, #20]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	891a      	ldrh	r2, [r3, #8]
 8003438:	8b7b      	ldrh	r3, [r7, #26]
 800343a:	f005 fbd8 	bl	8008bee <USB_ReadPMA>
 800343e:	e07a      	b.n	8003536 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003448:	b29b      	uxth	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	4413      	add	r3, r2
 800345a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003464:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	8b7b      	ldrh	r3, [r7, #26]
 800346c:	429a      	cmp	r2, r3
 800346e:	d306      	bcc.n	800347e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	8b7b      	ldrh	r3, [r7, #26]
 8003476:	1ad2      	subs	r2, r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	619a      	str	r2, [r3, #24]
 800347c:	e002      	b.n	8003484 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d123      	bne.n	80034d4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	83fb      	strh	r3, [r7, #30]
 80034a8:	8bfb      	ldrh	r3, [r7, #30]
 80034aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034ae:	83fb      	strh	r3, [r7, #30]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	441a      	add	r2, r3
 80034be:	8bfb      	ldrh	r3, [r7, #30]
 80034c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11f      	bne.n	800351e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f8:	83bb      	strh	r3, [r7, #28]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	441a      	add	r2, r3
 8003508:	8bbb      	ldrh	r3, [r7, #28]
 800350a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800350e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800351a:	b29b      	uxth	r3, r3
 800351c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800351e:	8b7b      	ldrh	r3, [r7, #26]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6959      	ldr	r1, [r3, #20]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	895a      	ldrh	r2, [r3, #10]
 8003530:	8b7b      	ldrh	r3, [r7, #26]
 8003532:	f005 fb5c 	bl	8008bee <USB_ReadPMA>
    }
  }

  return count;
 8003536:	8b7b      	ldrh	r3, [r7, #26]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b0a2      	sub	sp, #136	; 0x88
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 81c5 	beq.w	80038e4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003562:	b29b      	uxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	4413      	add	r3, r2
 8003574:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800358a:	429a      	cmp	r2, r3
 800358c:	d907      	bls.n	800359e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003596:	1ad2      	subs	r2, r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	619a      	str	r2, [r3, #24]
 800359c:	e002      	b.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f040 80b9 	bne.w	8003720 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d126      	bne.n	8003604 <HAL_PCD_EP_DB_Transmit+0xc4>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	4413      	add	r3, r2
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	00da      	lsls	r2, r3, #3
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	4413      	add	r3, r2
 80035d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	801a      	strh	r2, [r3, #0]
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	e01a      	b.n	800363a <HAL_PCD_EP_DB_Transmit+0xfa>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d116      	bne.n	800363a <HAL_PCD_EP_DB_Transmit+0xfa>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	4413      	add	r3, r2
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00da      	lsls	r2, r3, #3
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	4413      	add	r3, r2
 800362e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	785b      	ldrb	r3, [r3, #1]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d126      	bne.n	8003696 <HAL_PCD_EP_DB_Transmit+0x156>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003656:	b29b      	uxth	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4413      	add	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	00da      	lsls	r2, r3, #3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800367a:	b29a      	uxth	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	801a      	strh	r2, [r3, #0]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800368e:	b29a      	uxth	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	801a      	strh	r2, [r3, #0]
 8003694:	e017      	b.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x186>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	785b      	ldrb	r3, [r3, #1]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d113      	bne.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x186>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	4413      	add	r3, r2
 80036ae:	623b      	str	r3, [r7, #32]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	00da      	lsls	r2, r3, #3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	4413      	add	r3, r2
 80036ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2200      	movs	r2, #0
 80036c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f006 ffa4 	bl	800a61a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 82d2 	beq.w	8003c82 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	827b      	strh	r3, [r7, #18]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	441a      	add	r2, r3
 8003708:	8a7b      	ldrh	r3, [r7, #18]
 800370a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371a:	b29b      	uxth	r3, r3
 800371c:	8013      	strh	r3, [r2, #0]
 800371e:	e2b0      	b.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d021      	beq.n	800376e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003744:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800375a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003774:	2b01      	cmp	r3, #1
 8003776:	f040 8284 	bne.w	8003c82 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003782:	441a      	add	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003790:	441a      	add	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6a1a      	ldr	r2, [r3, #32]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d309      	bcc.n	80037b6 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ae:	1ad2      	subs	r2, r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	621a      	str	r2, [r3, #32]
 80037b4:	e015      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80037be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037cc:	e009      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2200      	movs	r2, #0
 80037e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d155      	bne.n	8003896 <HAL_PCD_EP_DB_Transmit+0x356>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	4413      	add	r3, r2
 8003800:	63bb      	str	r3, [r7, #56]	; 0x38
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	00da      	lsls	r2, r3, #3
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	4413      	add	r3, r2
 800380c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
 8003812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003814:	2b3e      	cmp	r3, #62	; 0x3e
 8003816:	d916      	bls.n	8003846 <HAL_PCD_EP_DB_Transmit+0x306>
 8003818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	64bb      	str	r3, [r7, #72]	; 0x48
 800381e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800382a:	3b01      	subs	r3, #1
 800382c:	64bb      	str	r3, [r7, #72]	; 0x48
 800382e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003830:	b29b      	uxth	r3, r3
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	b29b      	uxth	r3, r3
 8003836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383e:	b29a      	uxth	r2, r3
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003842:	801a      	strh	r2, [r3, #0]
 8003844:	e043      	b.n	80038ce <HAL_PCD_EP_DB_Transmit+0x38e>
 8003846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003848:	2b00      	cmp	r3, #0
 800384a:	d112      	bne.n	8003872 <HAL_PCD_EP_DB_Transmit+0x332>
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003856:	b29a      	uxth	r2, r3
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	801a      	strh	r2, [r3, #0]
 800385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386a:	b29a      	uxth	r2, r3
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	e02d      	b.n	80038ce <HAL_PCD_EP_DB_Transmit+0x38e>
 8003872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	64bb      	str	r3, [r7, #72]	; 0x48
 8003878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_PCD_EP_DB_Transmit+0x348>
 8003882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003884:	3301      	adds	r3, #1
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
 8003888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388a:	b29b      	uxth	r3, r3
 800388c:	029b      	lsls	r3, r3, #10
 800388e:	b29a      	uxth	r2, r3
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	e01b      	b.n	80038ce <HAL_PCD_EP_DB_Transmit+0x38e>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d117      	bne.n	80038ce <HAL_PCD_EP_DB_Transmit+0x38e>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b2:	4413      	add	r3, r2
 80038b4:	643b      	str	r3, [r7, #64]	; 0x40
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	00da      	lsls	r2, r3, #3
 80038bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038be:	4413      	add	r3, r2
 80038c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6959      	ldr	r1, [r3, #20]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	891a      	ldrh	r2, [r3, #8]
 80038da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f005 f944 	bl	8008b6a <USB_WritePMA>
 80038e2:	e1ce      	b.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	4413      	add	r3, r2
 80038fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003908:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003914:	429a      	cmp	r2, r3
 8003916:	d307      	bcc.n	8003928 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003920:	1ad2      	subs	r2, r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	619a      	str	r2, [r3, #24]
 8003926:	e002      	b.n	800392e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 80c4 	bne.w	8003ac0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d126      	bne.n	800398e <HAL_PCD_EP_DB_Transmit+0x44e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	66bb      	str	r3, [r7, #104]	; 0x68
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003954:	4413      	add	r3, r2
 8003956:	66bb      	str	r3, [r7, #104]	; 0x68
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	00da      	lsls	r2, r3, #3
 800395e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003960:	4413      	add	r3, r2
 8003962:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003966:	667b      	str	r3, [r7, #100]	; 0x64
 8003968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003972:	b29a      	uxth	r2, r3
 8003974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003986:	b29a      	uxth	r2, r3
 8003988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	e01a      	b.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x484>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	785b      	ldrb	r3, [r3, #1]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d116      	bne.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x484>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	673b      	str	r3, [r7, #112]	; 0x70
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039aa:	4413      	add	r3, r2
 80039ac:	673b      	str	r3, [r7, #112]	; 0x70
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	00da      	lsls	r2, r3, #3
 80039b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b6:	4413      	add	r3, r2
 80039b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d12f      	bne.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ea:	4413      	add	r3, r2
 80039ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	00da      	lsls	r2, r3, #3
 80039f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039fa:	4413      	add	r3, r2
 80039fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	e017      	b.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d113      	bne.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a48:	4413      	add	r3, r2
 8003a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	00da      	lsls	r2, r3, #3
 8003a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a54:	4413      	add	r3, r2
 8003a56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a5e:	2200      	movs	r2, #0
 8003a60:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	4619      	mov	r1, r3
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f006 fdd6 	bl	800a61a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 8104 	bne.w	8003c82 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	8013      	strh	r3, [r2, #0]
 8003abe:	e0e0      	b.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d121      	bne.n	8003b0e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	f040 80b4 	bne.w	8003c82 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b22:	441a      	add	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b30:	441a      	add	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6a1a      	ldr	r2, [r3, #32]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d309      	bcc.n	8003b56 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	621a      	str	r2, [r3, #32]
 8003b54:	e015      	b.n	8003b82 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d107      	bne.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003b5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b6c:	e009      	b.n	8003b82 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2200      	movs	r2, #0
 8003b78:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	663b      	str	r3, [r7, #96]	; 0x60
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	785b      	ldrb	r3, [r3, #1]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d155      	bne.n	8003c3c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ba4:	4413      	add	r3, r2
 8003ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	00da      	lsls	r2, r3, #3
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bba:	2b3e      	cmp	r3, #62	; 0x3e
 8003bbc:	d916      	bls.n	8003bec <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	677b      	str	r3, [r7, #116]	; 0x74
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x694>
 8003bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	677b      	str	r3, [r7, #116]	; 0x74
 8003bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	029b      	lsls	r3, r3, #10
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	e040      	b.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d112      	bne.n	8003c18 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	e02a      	b.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	677b      	str	r3, [r7, #116]	; 0x74
 8003c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8003c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	e018      	b.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	785b      	ldrb	r3, [r3, #1]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d114      	bne.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c52:	4413      	add	r3, r2
 8003c54:	663b      	str	r3, [r7, #96]	; 0x60
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	00da      	lsls	r2, r3, #3
 8003c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c5e:	4413      	add	r3, r2
 8003c60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6959      	ldr	r1, [r3, #20]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	895a      	ldrh	r2, [r3, #10]
 8003c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f004 ff74 	bl	8008b6a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9c:	823b      	strh	r3, [r7, #16]
 8003c9e:	8a3b      	ldrh	r3, [r7, #16]
 8003ca0:	f083 0310 	eor.w	r3, r3, #16
 8003ca4:	823b      	strh	r3, [r7, #16]
 8003ca6:	8a3b      	ldrh	r3, [r7, #16]
 8003ca8:	f083 0320 	eor.w	r3, r3, #32
 8003cac:	823b      	strh	r3, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	441a      	add	r2, r3
 8003cbc:	8a3b      	ldrh	r3, [r7, #16]
 8003cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3788      	adds	r7, #136	; 0x88
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	817b      	strh	r3, [r7, #10]
 8003cea:	4613      	mov	r3, r2
 8003cec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	897b      	ldrh	r3, [r7, #10]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e009      	b.n	8003d26 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d12:	897a      	ldrh	r2, [r7, #10]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d26:	893b      	ldrh	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	80da      	strh	r2, [r3, #6]
 8003d3a:	e00b      	b.n	8003d54 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	58000400 	.word	0x58000400

08003dd8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	58000400 	.word	0x58000400

08003df4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e02:	6053      	str	r3, [r2, #4]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	58000400 	.word	0x58000400

08003e14 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e26:	d101      	bne.n	8003e2c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003e56:	b480      	push	{r7}
 8003e58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e86:	d101      	bne.n	8003e8c <LL_RCC_HSE_IsReady+0x18>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <LL_RCC_HSE_IsReady+0x1a>
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d101      	bne.n	8003eec <LL_RCC_HSI_IsReady+0x18>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <LL_RCC_HSI_IsReady+0x1a>
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f12:	4313      	orrs	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d101      	bne.n	8003f7e <LL_RCC_HSI48_IsReady+0x18>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <LL_RCC_HSI48_IsReady+0x1a>
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fde:	f043 0304 	orr.w	r3, r3, #4
 8003fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004000:	f023 0304 	bic.w	r3, r3, #4
 8004004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d101      	bne.n	800402a <LL_RCC_LSE_IsReady+0x18>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <LL_RCC_LSE_IsReady+0x1a>
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d101      	bne.n	8004092 <LL_RCC_LSI1_IsReady+0x18>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <LL_RCC_LSI1_IsReady+0x1a>
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d101      	bne.n	80040fa <LL_RCC_LSI2_IsReady+0x18>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <LL_RCC_LSI2_IsReady+0x1a>
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004116:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	6013      	str	r3, [r2, #0]
}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d101      	bne.n	8004186 <LL_RCC_MSI_IsReady+0x16>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <LL_RCC_MSI_IsReady+0x18>
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800419a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2bb0      	cmp	r3, #176	; 0xb0
 80041d0:	d901      	bls.n	80041d6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80041d2:	23b0      	movs	r3, #176	; 0xb0
 80041d4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80041d6:	687b      	ldr	r3, [r7, #4]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 0203 	bic.w	r2, r3, #3
 8004220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 030c 	and.w	r3, r3, #12
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042b2:	f023 020f 	bic.w	r2, r3, #15
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800430a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4313      	orrs	r3, r2
 8004312:	608b      	str	r3, [r1, #8]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004340:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800434a:	4618      	mov	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004384:	6013      	str	r3, [r2, #0]
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043a2:	d101      	bne.n	80043a8 <LL_RCC_PLL_IsReady+0x18>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <LL_RCC_PLL_IsReady+0x1a>
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80043b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80043ce:	b480      	push	{r7}
 80043d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80043fe:	b480      	push	{r7}
 8004400:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0303 	and.w	r3, r3, #3
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004416:	b480      	push	{r7}
 8004418:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004428:	d101      	bne.n	800442e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004442:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800444e:	d101      	bne.n	8004454 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004468:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d101      	bne.n	800447a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800448a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004498:	d101      	bne.n	800449e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044bc:	d101      	bne.n	80044c2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b08d      	sub	sp, #52	; 0x34
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e37e      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8092 	beq.w	8004614 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f0:	f7ff fea1 	bl	8004236 <LL_RCC_GetSysClkSource>
 80044f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044f6:	f7ff ff82 	bl	80043fe <LL_RCC_PLL_GetMainSource>
 80044fa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_RCC_OscConfig+0x3e>
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	2b0c      	cmp	r3, #12
 8004506:	d14c      	bne.n	80045a2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	2b01      	cmp	r3, #1
 800450c:	d149      	bne.n	80045a2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800450e:	f7ff fe2f 	bl	8004170 <LL_RCC_MSI_IsReady>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_OscConfig+0x54>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e35d      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004528:	f7ff fe47 	bl	80041ba <LL_RCC_MSI_GetRange>
 800452c:	4603      	mov	r3, r0
 800452e:	429c      	cmp	r4, r3
 8004530:	d914      	bls.n	800455c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fd16 	bl	8004f68 <RCC_SetFlashLatencyFromMSIRange>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e34c      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fe21 	bl	8004192 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fe45 	bl	80041e4 <LL_RCC_MSI_SetCalibTrimming>
 800455a:	e013      	b.n	8004584 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fe16 	bl	8004192 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fe3a 	bl	80041e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fcf7 	bl	8004f68 <RCC_SetFlashLatencyFromMSIRange>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e32d      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004584:	f000 fcdc 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004588:	4603      	mov	r3, r0
 800458a:	4ab3      	ldr	r2, [pc, #716]	; (8004858 <HAL_RCC_OscConfig+0x388>)
 800458c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800458e:	4bb3      	ldr	r3, [pc, #716]	; (800485c <HAL_RCC_OscConfig+0x38c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fbc2 	bl	8001d1c <HAL_InitTick>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d039      	beq.n	8004612 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e31e      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01e      	beq.n	80045e8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045aa:	f7ff fdc3 	bl	8004134 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ae:	f7fd fc03 	bl	8001db8 <HAL_GetTick>
 80045b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045b6:	f7fd fbff 	bl	8001db8 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e30b      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80045c8:	f7ff fdd2 	bl	8004170 <LL_RCC_MSI_IsReady>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f1      	beq.n	80045b6 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fddb 	bl	8004192 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fdff 	bl	80041e4 <LL_RCC_MSI_SetCalibTrimming>
 80045e6:	e015      	b.n	8004614 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045e8:	f7ff fdb3 	bl	8004152 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ec:	f7fd fbe4 	bl	8001db8 <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045f4:	f7fd fbe0 	bl	8001db8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e2ec      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004606:	f7ff fdb3 	bl	8004170 <LL_RCC_MSI_IsReady>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f1      	bne.n	80045f4 <HAL_RCC_OscConfig+0x124>
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004612:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d04e      	beq.n	80046be <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004620:	f7ff fe09 	bl	8004236 <LL_RCC_GetSysClkSource>
 8004624:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004626:	f7ff feea 	bl	80043fe <LL_RCC_PLL_GetMainSource>
 800462a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2b08      	cmp	r3, #8
 8004630:	d005      	beq.n	800463e <HAL_RCC_OscConfig+0x16e>
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	2b0c      	cmp	r3, #12
 8004636:	d10d      	bne.n	8004654 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d10a      	bne.n	8004654 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463e:	f7ff fc19 	bl	8003e74 <LL_RCC_HSE_IsReady>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d039      	beq.n	80046bc <HAL_RCC_OscConfig+0x1ec>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d135      	bne.n	80046bc <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e2c5      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d102      	bne.n	8004664 <HAL_RCC_OscConfig+0x194>
 800465e:	f7ff fbeb 	bl	8003e38 <LL_RCC_HSE_Enable>
 8004662:	e001      	b.n	8004668 <HAL_RCC_OscConfig+0x198>
 8004664:	f7ff fbf7 	bl	8003e56 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d012      	beq.n	8004696 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd fba2 	bl	8001db8 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004678:	f7fd fb9e 	bl	8001db8 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e2aa      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800468a:	f7ff fbf3 	bl	8003e74 <LL_RCC_HSE_IsReady>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f1      	beq.n	8004678 <HAL_RCC_OscConfig+0x1a8>
 8004694:	e013      	b.n	80046be <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fd fb8f 	bl	8001db8 <HAL_GetTick>
 800469a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800469e:	f7fd fb8b 	bl	8001db8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b64      	cmp	r3, #100	; 0x64
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e297      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80046b0:	f7ff fbe0 	bl	8003e74 <LL_RCC_HSE_IsReady>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f1      	bne.n	800469e <HAL_RCC_OscConfig+0x1ce>
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d051      	beq.n	800476e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ca:	f7ff fdb4 	bl	8004236 <LL_RCC_GetSysClkSource>
 80046ce:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d0:	f7ff fe95 	bl	80043fe <LL_RCC_PLL_GetMainSource>
 80046d4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_OscConfig+0x218>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d113      	bne.n	800470a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d110      	bne.n	800470a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e8:	f7ff fbf4 	bl	8003ed4 <LL_RCC_HSI_IsReady>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_RCC_OscConfig+0x22e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e270      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fbf8 	bl	8003ef8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004708:	e031      	b.n	800476e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d019      	beq.n	8004746 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004712:	f7ff fbc1 	bl	8003e98 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fd fb4f 	bl	8001db8 <HAL_GetTick>
 800471a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800471e:	f7fd fb4b 	bl	8001db8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e257      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004730:	f7ff fbd0 	bl	8003ed4 <LL_RCC_HSI_IsReady>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f1      	beq.n	800471e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fbda 	bl	8003ef8 <LL_RCC_HSI_SetCalibTrimming>
 8004744:	e013      	b.n	800476e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004746:	f7ff fbb6 	bl	8003eb6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fb35 	bl	8001db8 <HAL_GetTick>
 800474e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7fd fb31 	bl	8001db8 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e23d      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004764:	f7ff fbb6 	bl	8003ed4 <LL_RCC_HSI_IsReady>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f1      	bne.n	8004752 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80a3 	beq.w	80048ce <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d076      	beq.n	800487e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d046      	beq.n	800482a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800479c:	f7ff fc6d 	bl	800407a <LL_RCC_LSI1_IsReady>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d113      	bne.n	80047ce <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80047a6:	f7ff fc46 	bl	8004036 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047aa:	f7fd fb05 	bl	8001db8 <HAL_GetTick>
 80047ae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047b2:	f7fd fb01 	bl	8001db8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e20d      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047c4:	f7ff fc59 	bl	800407a <LL_RCC_LSI1_IsReady>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f1      	beq.n	80047b2 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80047ce:	f7ff fc66 	bl	800409e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd faf1 	bl	8001db8 <HAL_GetTick>
 80047d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80047da:	f7fd faed 	bl	8001db8 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e1f9      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80047ec:	f7ff fc79 	bl	80040e2 <LL_RCC_LSI2_IsReady>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f1      	beq.n	80047da <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fc83 	bl	8004106 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004800:	f7ff fc2a 	bl	8004058 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd fad8 	bl	8001db8 <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800480c:	f7fd fad4 	bl	8001db8 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e1e0      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800481e:	f7ff fc2c 	bl	800407a <LL_RCC_LSI1_IsReady>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f1      	bne.n	800480c <HAL_RCC_OscConfig+0x33c>
 8004828:	e051      	b.n	80048ce <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800482a:	f7ff fc04 	bl	8004036 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fd fac3 	bl	8001db8 <HAL_GetTick>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004836:	f7fd fabf 	bl	8001db8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1cb      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004848:	f7ff fc17 	bl	800407a <LL_RCC_LSI1_IsReady>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f1      	beq.n	8004836 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004852:	f7ff fc35 	bl	80040c0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004856:	e00c      	b.n	8004872 <HAL_RCC_OscConfig+0x3a2>
 8004858:	2000001c 	.word	0x2000001c
 800485c:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004860:	f7fd faaa 	bl	8001db8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1b6      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004872:	f7ff fc36 	bl	80040e2 <LL_RCC_LSI2_IsReady>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f1      	bne.n	8004860 <HAL_RCC_OscConfig+0x390>
 800487c:	e027      	b.n	80048ce <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800487e:	f7ff fc1f 	bl	80040c0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004882:	f7fd fa99 	bl	8001db8 <HAL_GetTick>
 8004886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800488a:	f7fd fa95 	bl	8001db8 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e1a1      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800489c:	f7ff fc21 	bl	80040e2 <LL_RCC_LSI2_IsReady>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f1      	bne.n	800488a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80048a6:	f7ff fbd7 	bl	8004058 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048aa:	f7fd fa85 	bl	8001db8 <HAL_GetTick>
 80048ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048b2:	f7fd fa81 	bl	8001db8 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e18d      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048c4:	f7ff fbd9 	bl	800407a <LL_RCC_LSI1_IsReady>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f1      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d05b      	beq.n	8004992 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048da:	4bb5      	ldr	r3, [pc, #724]	; (8004bb0 <HAL_RCC_OscConfig+0x6e0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d114      	bne.n	8004910 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80048e6:	f7ff fa67 	bl	8003db8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ea:	f7fd fa65 	bl	8001db8 <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f2:	f7fd fa61 	bl	8001db8 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e16d      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004904:	4baa      	ldr	r3, [pc, #680]	; (8004bb0 <HAL_RCC_OscConfig+0x6e0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d102      	bne.n	800491e <HAL_RCC_OscConfig+0x44e>
 8004918:	f7ff fb37 	bl	8003f8a <LL_RCC_LSE_Enable>
 800491c:	e00c      	b.n	8004938 <HAL_RCC_OscConfig+0x468>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b05      	cmp	r3, #5
 8004924:	d104      	bne.n	8004930 <HAL_RCC_OscConfig+0x460>
 8004926:	f7ff fb52 	bl	8003fce <LL_RCC_LSE_EnableBypass>
 800492a:	f7ff fb2e 	bl	8003f8a <LL_RCC_LSE_Enable>
 800492e:	e003      	b.n	8004938 <HAL_RCC_OscConfig+0x468>
 8004930:	f7ff fb3c 	bl	8003fac <LL_RCC_LSE_Disable>
 8004934:	f7ff fb5c 	bl	8003ff0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d014      	beq.n	800496a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fd fa3a 	bl	8001db8 <HAL_GetTick>
 8004944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004946:	e00a      	b.n	800495e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fd fa36 	bl	8001db8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e140      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800495e:	f7ff fb58 	bl	8004012 <LL_RCC_LSE_IsReady>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ef      	beq.n	8004948 <HAL_RCC_OscConfig+0x478>
 8004968:	e013      	b.n	8004992 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496a:	f7fd fa25 	bl	8001db8 <HAL_GetTick>
 800496e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004970:	e00a      	b.n	8004988 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004972:	f7fd fa21 	bl	8001db8 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e12b      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004988:	f7ff fb43 	bl	8004012 <LL_RCC_LSE_IsReady>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1ef      	bne.n	8004972 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d02c      	beq.n	80049f8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d014      	beq.n	80049d0 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049a6:	f7ff fabc 	bl	8003f22 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fd fa05 	bl	8001db8 <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b2:	f7fd fa01 	bl	8001db8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e10d      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80049c4:	f7ff facf 	bl	8003f66 <LL_RCC_HSI48_IsReady>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f1      	beq.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
 80049ce:	e013      	b.n	80049f8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049d0:	f7ff fab8 	bl	8003f44 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fd f9f0 	bl	8001db8 <HAL_GetTick>
 80049d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049dc:	f7fd f9ec 	bl	8001db8 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0f8      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80049ee:	f7ff faba 	bl	8003f66 <LL_RCC_HSI48_IsReady>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f1      	bne.n	80049dc <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 80ee 	beq.w	8004bde <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a02:	f7ff fc18 	bl	8004236 <LL_RCC_GetSysClkSource>
 8004a06:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f040 80af 	bne.w	8004b78 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0203 	and.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d123      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d11c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d114      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d10d      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d106      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d05d      	beq.n	8004b2c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d058      	beq.n	8004b28 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0ab      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a88:	f7ff fc73 	bl	8004372 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a8c:	f7fd f994 	bl	8001db8 <HAL_GetTick>
 8004a90:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd f990 	bl	8001db8 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e09c      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ef      	bne.n	8004a94 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	4b3e      	ldr	r3, [pc, #248]	; (8004bb4 <HAL_RCC_OscConfig+0x6e4>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ac6:	4311      	orrs	r1, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004acc:	0212      	lsls	r2, r2, #8
 8004ace:	4311      	orrs	r1, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ad4:	4311      	orrs	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ada:	4311      	orrs	r1, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004aea:	f7ff fc33 	bl	8004354 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004afe:	f7fd f95b 	bl	8001db8 <HAL_GetTick>
 8004b02:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fd f957 	bl	8001db8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e063      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0ef      	beq.n	8004b06 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b26:	e05a      	b.n	8004bde <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e059      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d151      	bne.n	8004bde <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b3a:	f7ff fc0b 	bl	8004354 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b4e:	f7fd f933 	bl	8001db8 <HAL_GetTick>
 8004b52:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fd f92f 	bl	8001db8 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e03b      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ef      	beq.n	8004b56 <HAL_RCC_OscConfig+0x686>
 8004b76:	e032      	b.n	8004bde <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d02d      	beq.n	8004bda <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7e:	f7ff fbf8 	bl	8004372 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b8c:	f023 0303 	bic.w	r3, r3, #3
 8004b90:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fd f907 	bl	8001db8 <HAL_GetTick>
 8004baa:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bac:	e00d      	b.n	8004bca <HAL_RCC_OscConfig+0x6fa>
 8004bae:	bf00      	nop
 8004bb0:	58000400 	.word	0x58000400
 8004bb4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fd f8fe 	bl	8001db8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ef      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x6e8>
 8004bd8:	e001      	b.n	8004bde <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3734      	adds	r7, #52	; 0x34
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd90      	pop	{r4, r7, pc}

08004be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e12d      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b98      	ldr	r3, [pc, #608]	; (8004e60 <HAL_RCC_ClockConfig+0x278>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d91b      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b95      	ldr	r3, [pc, #596]	; (8004e60 <HAL_RCC_ClockConfig+0x278>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 0207 	bic.w	r2, r3, #7
 8004c12:	4993      	ldr	r1, [pc, #588]	; (8004e60 <HAL_RCC_ClockConfig+0x278>)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1a:	f7fd f8cd 	bl	8001db8 <HAL_GetTick>
 8004c1e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c22:	f7fd f8c9 	bl	8001db8 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e111      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c34:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <HAL_RCC_ClockConfig+0x278>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d1ef      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fafb 	bl	800424e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c58:	f7fd f8ae 	bl	8001db8 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c60:	f7fd f8aa 	bl	8001db8 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0f2      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c72:	f7ff fbd0 	bl	8004416 <LL_RCC_IsActiveFlag_HPRE>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f1      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d016      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff faf2 	bl	8004276 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c92:	f7fd f891 	bl	8001db8 <HAL_GetTick>
 8004c96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c9a:	f7fd f88d 	bl	8001db8 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0d5      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004cac:	f7ff fbc5 	bl	800443a <LL_RCC_IsActiveFlag_C2HPRE>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f1      	beq.n	8004c9a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff faeb 	bl	80042a2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ccc:	f7fd f874 	bl	8001db8 <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cd4:	f7fd f870 	bl	8001db8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0b8      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ce6:	f7ff fbbb 	bl	8004460 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f1      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d016      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fae5 	bl	80042d0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d06:	f7fd f857 	bl	8001db8 <HAL_GetTick>
 8004d0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d0e:	f7fd f853 	bl	8001db8 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e09b      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d20:	f7ff fbb1 	bl	8004486 <LL_RCC_IsActiveFlag_PPRE1>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f1      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fadb 	bl	80042f8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d42:	f7fd f839 	bl	8001db8 <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d4a:	f7fd f835 	bl	8001db8 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e07d      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d5c:	f7ff fba5 	bl	80044aa <LL_RCC_IsActiveFlag_PPRE2>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f1      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d043      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d106      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004d7a:	f7ff f87b 	bl	8003e74 <LL_RCC_HSE_IsReady>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11e      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e067      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004d90:	f7ff fafe 	bl	8004390 <LL_RCC_PLL_IsReady>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d113      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e05c      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004da6:	f7ff f9e3 	bl	8004170 <LL_RCC_MSI_IsReady>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e051      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004db4:	f7ff f88e 	bl	8003ed4 <LL_RCC_HSI_IsReady>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e04a      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fa21 	bl	800420e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dcc:	f7fc fff4 	bl	8001db8 <HAL_GetTick>
 8004dd0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd4:	f7fc fff0 	bl	8001db8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e036      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	f7ff fa24 	bl	8004236 <LL_RCC_GetSysClkSource>
 8004dee:	4602      	mov	r2, r0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d1ec      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dfa:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCC_ClockConfig+0x278>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d21b      	bcs.n	8004e40 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <HAL_RCC_ClockConfig+0x278>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 0207 	bic.w	r2, r3, #7
 8004e10:	4913      	ldr	r1, [pc, #76]	; (8004e60 <HAL_RCC_ClockConfig+0x278>)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e18:	f7fc ffce 	bl	8001db8 <HAL_GetTick>
 8004e1c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e20:	f7fc ffca 	bl	8001db8 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e012      	b.n	8004e58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_ClockConfig+0x278>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d1ef      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e40:	f000 f87e 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_RCC_ClockConfig+0x27c>)
 8004e48:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004e4a:	f7fc ffc1 	bl	8001dd0 <HAL_GetTickPrio>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fc ff63 	bl	8001d1c <HAL_InitTick>
 8004e56:	4603      	mov	r3, r0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	58004000 	.word	0x58004000
 8004e64:	2000001c 	.word	0x2000001c

08004e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6e:	f7ff f9e2 	bl	8004236 <LL_RCC_GetSysClkSource>
 8004e72:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e7a:	f7ff f99e 	bl	80041ba <LL_RCC_MSI_GetRange>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e04b      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d102      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e96:	4b28      	ldr	r3, [pc, #160]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e045      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ea2:	f7fe ffb7 	bl	8003e14 <LL_RCC_HSE_IsEnabledDiv2>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d102      	bne.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004eac:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e03a      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004eb2:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e037      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004eb8:	f7ff faa1 	bl	80043fe <LL_RCC_PLL_GetMainSource>
 8004ebc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d003      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x64>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d003      	beq.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x6a>
 8004eca:	e00d      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004ecc:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ece:	60bb      	str	r3, [r7, #8]
        break;
 8004ed0:	e015      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ed2:	f7fe ff9f 	bl	8003e14 <LL_RCC_HSE_IsEnabledDiv2>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d102      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004edc:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ede:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ee0:	e00d      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ee4:	60bb      	str	r3, [r7, #8]
        break;
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ee8:	f7ff f967 	bl	80041ba <LL_RCC_MSI_GetRange>
 8004eec:	4603      	mov	r3, r0
 8004eee:	091b      	lsrs	r3, r3, #4
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	4a0f      	ldr	r2, [pc, #60]	; (8004f34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efa:	60bb      	str	r3, [r7, #8]
        break;
 8004efc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004efe:	f7ff fa59 	bl	80043b4 <LL_RCC_PLL_GetN>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	fb03 f402 	mul.w	r4, r3, r2
 8004f0a:	f7ff fa6c 	bl	80043e6 <LL_RCC_PLL_GetDivider>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	3301      	adds	r3, #1
 8004f14:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f18:	f7ff fa59 	bl	80043ce <LL_RCC_PLL_GetR>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	0f5b      	lsrs	r3, r3, #29
 8004f20:	3301      	adds	r3, #1
 8004f22:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f26:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd90      	pop	{r4, r7, pc}
 8004f32:	bf00      	nop
 8004f34:	0800ac30 	.word	0x0800ac30
 8004f38:	00f42400 	.word	0x00f42400
 8004f3c:	007a1200 	.word	0x007a1200

08004f40 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f40:	b598      	push	{r3, r4, r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f44:	f7ff ff90 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8004f48:	4604      	mov	r4, r0
 8004f4a:	f7ff f9e9 	bl	8004320 <LL_RCC_GetAHBPrescaler>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	4a03      	ldr	r2, [pc, #12]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd98      	pop	{r3, r4, r7, pc}
 8004f64:	0800abf0 	.word	0x0800abf0

08004f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2bb0      	cmp	r3, #176	; 0xb0
 8004f74:	d903      	bls.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e007      	b.n	8004f8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	4a11      	ldr	r2, [pc, #68]	; (8004fcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004f8e:	f7ff f9d3 	bl	8004338 <LL_RCC_GetAHB4Prescaler>
 8004f92:	4603      	mov	r3, r0
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	4a0d      	ldr	r2, [pc, #52]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	0c9c      	lsrs	r4, r3, #18
 8004fb2:	f7fe ff11 	bl	8003dd8 <HAL_PWREx_GetVoltageRange>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 f80c 	bl	8004fd8 <RCC_SetFlashLatency>
 8004fc0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	0800ac30 	.word	0x0800ac30
 8004fd0:	0800abf0 	.word	0x0800abf0
 8004fd4:	431bde83 	.word	0x431bde83

08004fd8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b093      	sub	sp, #76	; 0x4c
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004fe2:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <RCC_SetFlashLatency+0xf0>)
 8004fe4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004fee:	4a37      	ldr	r2, [pc, #220]	; (80050cc <RCC_SetFlashLatency+0xf4>)
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004ffa:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <RCC_SetFlashLatency+0xf8>)
 8004ffc:	f107 040c 	add.w	r4, r7, #12
 8005000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005006:	2300      	movs	r3, #0
 8005008:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005010:	d11c      	bne.n	800504c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005012:	2300      	movs	r3, #0
 8005014:	643b      	str	r3, [r7, #64]	; 0x40
 8005016:	e015      	b.n	8005044 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005020:	4413      	add	r3, r2
 8005022:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d808      	bhi.n	800503e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800502c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005034:	4413      	add	r3, r2
 8005036:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800503a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800503c:	e022      	b.n	8005084 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800503e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005040:	3301      	adds	r3, #1
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
 8005044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005046:	2b03      	cmp	r3, #3
 8005048:	d9e6      	bls.n	8005018 <RCC_SetFlashLatency+0x40>
 800504a:	e01b      	b.n	8005084 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800504c:	2300      	movs	r3, #0
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005050:	e015      	b.n	800507e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800505a:	4413      	add	r3, r2
 800505c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d808      	bhi.n	8005078 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800506e:	4413      	add	r3, r2
 8005070:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005074:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005076:	e005      	b.n	8005084 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507a:	3301      	adds	r3, #1
 800507c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	2b02      	cmp	r3, #2
 8005082:	d9e6      	bls.n	8005052 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005084:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <RCC_SetFlashLatency+0xfc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 0207 	bic.w	r2, r3, #7
 800508c:	4911      	ldr	r1, [pc, #68]	; (80050d4 <RCC_SetFlashLatency+0xfc>)
 800508e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005090:	4313      	orrs	r3, r2
 8005092:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005094:	f7fc fe90 	bl	8001db8 <HAL_GetTick>
 8005098:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800509a:	e008      	b.n	80050ae <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800509c:	f7fc fe8c 	bl	8001db8 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e007      	b.n	80050be <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <RCC_SetFlashLatency+0xfc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1ef      	bne.n	800509c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	374c      	adds	r7, #76	; 0x4c
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}
 80050c6:	bf00      	nop
 80050c8:	0800ab7c 	.word	0x0800ab7c
 80050cc:	0800ab8c 	.word	0x0800ab8c
 80050d0:	0800ab98 	.word	0x0800ab98
 80050d4:	58004000 	.word	0x58004000

080050d8 <LL_RCC_LSE_IsEnabled>:
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80050dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <LL_RCC_LSE_IsEnabled+0x18>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <LL_RCC_LSE_IsEnabled+0x1a>
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <LL_RCC_LSE_IsReady>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d101      	bne.n	8005114 <LL_RCC_LSE_IsReady+0x18>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <LL_RCC_LSE_IsReady+0x1a>
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <LL_RCC_MSI_EnablePLLMode>:
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800512e:	f043 0304 	orr.w	r3, r3, #4
 8005132:	6013      	str	r3, [r2, #0]
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <LL_RCC_SetRFWKPClockSource>:
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <LL_RCC_SetSMPSClockSource>:
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f023 0203 	bic.w	r2, r3, #3
 800517c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4313      	orrs	r3, r2
 8005184:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_RCC_SetSMPSPrescaler>:
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <LL_RCC_SetUSARTClockSource>:
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f023 0203 	bic.w	r2, r3, #3
 80051ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <LL_RCC_SetLPUARTClockSource>:
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <LL_RCC_SetI2CClockSource>:
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800521a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800522a:	43db      	mvns	r3, r3
 800522c:	401a      	ands	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_RCC_SetLPTIMClockSource>:
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005258:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	0c1b      	lsrs	r3, r3, #16
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	43db      	mvns	r3, r3
 8005264:	401a      	ands	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <LL_RCC_SetSAIClockSource>:
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_SetRNGClockSource>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_RCC_SetCLK48ClockSource>:
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_RCC_SetUSBClockSource>:
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ffe3 	bl	80052d8 <LL_RCC_SetCLK48ClockSource>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <LL_RCC_SetADCClockSource>:
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800532e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_RCC_SetRTCClockSource>:
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800535a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <LL_RCC_GetRTCClockSource>:
{
 8005372:	b480      	push	{r7}
 8005374:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005382:	4618      	mov	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_RCC_ForceBackupDomainReset>:
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <LL_RCC_ReleaseBackupDomainReset>:
{
 80053ae:	b480      	push	{r7}
 80053b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053c6:	bf00      	nop
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <LL_RCC_PLLSAI1_Enable>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80053d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <LL_RCC_PLLSAI1_Disable>:
{
 80053ee:	b480      	push	{r7}
 80053f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80053f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005400:	6013      	str	r3, [r2, #0]
}
 8005402:	bf00      	nop
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <LL_RCC_PLLSAI1_IsReady>:
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800541a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541e:	d101      	bne.n	8005424 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005438:	2300      	movs	r3, #0
 800543a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800543c:	2300      	movs	r3, #0
 800543e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d034      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005454:	d021      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005456:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800545a:	d81b      	bhi.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800545c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005460:	d01d      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005462:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005466:	d815      	bhi.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800546c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005470:	d110      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800547c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005480:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005482:	e00d      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4618      	mov	r0, r3
 800548a:	f000 f94d 	bl	8005728 <RCCEx_PLLSAI1_ConfigNP>
 800548e:	4603      	mov	r3, r0
 8005490:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005492:	e005      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	77fb      	strb	r3, [r7, #31]
        break;
 8005498:	e002      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800549e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a0:	7ffb      	ldrb	r3, [r7, #31]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d105      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fee8 	bl	8005280 <LL_RCC_SetSAIClockSource>
 80054b0:	e001      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
 80054b4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d046      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80054c2:	f7ff ff56 	bl	8005372 <LL_RCC_GetRTCClockSource>
 80054c6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d03c      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80054d2:	f7fe fc71 	bl	8003db8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ff30 	bl	8005346 <LL_RCC_SetRTCClockSource>
 80054e6:	e02e      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80054e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80054f2:	f7ff ff4b 	bl	800538c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80054f6:	f7ff ff5a 	bl	80053ae <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005512:	f7ff fde1 	bl	80050d8 <LL_RCC_LSE_IsEnabled>
 8005516:	4603      	mov	r3, r0
 8005518:	2b01      	cmp	r3, #1
 800551a:	d114      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800551c:	f7fc fc4c 	bl	8001db8 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005522:	e00b      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005524:	f7fc fc48 	bl	8001db8 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d902      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	77fb      	strb	r3, [r7, #31]
              break;
 800553a:	e004      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800553c:	f7ff fdde 	bl	80050fc <LL_RCC_LSE_IsReady>
 8005540:	4603      	mov	r3, r0
 8005542:	2b01      	cmp	r3, #1
 8005544:	d1ee      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005546:	7ffb      	ldrb	r3, [r7, #31]
 8005548:	77bb      	strb	r3, [r7, #30]
 800554a:	e001      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	7ffb      	ldrb	r3, [r7, #31]
 800554e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fe2a 	bl	80051ba <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fe35 	bl	80051e6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff fe5d 	bl	800524c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fe52 	bl	800524c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fe2a 	bl	8005212 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fe1f 	bl	8005212 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d022      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fe8d 	bl	8005304 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f2:	d107      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005602:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800560c:	d10b      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f8e3 	bl	80057de <RCCEx_PLLSAI1_ConfigNQ>
 8005618:	4603      	mov	r3, r0
 800561a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800561c:	7ffb      	ldrb	r3, [r7, #31]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005622:	7ffb      	ldrb	r3, [r7, #31]
 8005624:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02b      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563a:	d008      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005644:	d003      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fe2a 	bl	80052ac <LL_RCC_SetRNGClockSource>
 8005658:	e00a      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	2000      	movs	r0, #0
 8005666:	f7ff fe21 	bl	80052ac <LL_RCC_SetRNGClockSource>
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff fe34 	bl	80052d8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005678:	d107      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800567a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005688:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005692:	2b00      	cmp	r3, #0
 8005694:	d022      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fe3d 	bl	800531a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a8:	d107      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c2:	d10b      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 f8e3 	bl	8005894 <RCCEx_PLLSAI1_ConfigNR>
 80056ce:	4603      	mov	r3, r0
 80056d0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80056d2:	7ffb      	ldrb	r3, [r7, #31]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
 80056da:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fd26 	bl	800513e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fd45 	bl	8005192 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff fd2c 	bl	800516a <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005712:	7fbb      	ldrb	r3, [r7, #30]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3720      	adds	r7, #32
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005720:	f7ff fcfe 	bl	8005120 <LL_RCC_MSI_EnablePLLMode>
}
 8005724:	bf00      	nop
 8005726:	bd80      	pop	{r7, pc}

08005728 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005734:	f7ff fe5b 	bl	80053ee <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005738:	f7fc fb3e 	bl	8001db8 <HAL_GetTick>
 800573c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800573e:	e009      	b.n	8005754 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005740:	f7fc fb3a 	bl	8001db8 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d902      	bls.n	8005754 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	73fb      	strb	r3, [r7, #15]
      break;
 8005752:	e004      	b.n	800575e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005754:	f7ff fe5a 	bl	800540c <LL_RCC_PLLSAI1_IsReady>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d137      	bne.n	80057d4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005778:	4313      	orrs	r3, r2
 800577a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800578e:	4313      	orrs	r3, r2
 8005790:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005792:	f7ff fe1d 	bl	80053d0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005796:	f7fc fb0f 	bl	8001db8 <HAL_GetTick>
 800579a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800579c:	e009      	b.n	80057b2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800579e:	f7fc fb0b 	bl	8001db8 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d902      	bls.n	80057b2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	73fb      	strb	r3, [r7, #15]
        break;
 80057b0:	e004      	b.n	80057bc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057b2:	f7ff fe2b 	bl	800540c <LL_RCC_PLLSAI1_IsReady>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d1f0      	bne.n	800579e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d108      	bne.n	80057d4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d0:	4313      	orrs	r3, r2
 80057d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057ea:	f7ff fe00 	bl	80053ee <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057ee:	f7fc fae3 	bl	8001db8 <HAL_GetTick>
 80057f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057f4:	e009      	b.n	800580a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057f6:	f7fc fadf 	bl	8001db8 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d902      	bls.n	800580a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	73fb      	strb	r3, [r7, #15]
      break;
 8005808:	e004      	b.n	8005814 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800580a:	f7ff fdff 	bl	800540c <LL_RCC_PLLSAI1_IsReady>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f0      	bne.n	80057f6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d137      	bne.n	800588a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800581a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800582e:	4313      	orrs	r3, r2
 8005830:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005844:	4313      	orrs	r3, r2
 8005846:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005848:	f7ff fdc2 	bl	80053d0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584c:	f7fc fab4 	bl	8001db8 <HAL_GetTick>
 8005850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005852:	e009      	b.n	8005868 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005854:	f7fc fab0 	bl	8001db8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d902      	bls.n	8005868 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	73fb      	strb	r3, [r7, #15]
        break;
 8005866:	e004      	b.n	8005872 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005868:	f7ff fdd0 	bl	800540c <LL_RCC_PLLSAI1_IsReady>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d1f0      	bne.n	8005854 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d108      	bne.n	800588a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005886:	4313      	orrs	r3, r2
 8005888:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800588a:	7bfb      	ldrb	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80058a0:	f7ff fda5 	bl	80053ee <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058a4:	f7fc fa88 	bl	8001db8 <HAL_GetTick>
 80058a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058aa:	e009      	b.n	80058c0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ac:	f7fc fa84 	bl	8001db8 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d902      	bls.n	80058c0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	73fb      	strb	r3, [r7, #15]
      break;
 80058be:	e004      	b.n	80058ca <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058c0:	f7ff fda4 	bl	800540c <LL_RCC_PLLSAI1_IsReady>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d137      	bne.n	8005940 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e4:	4313      	orrs	r3, r2
 80058e6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058fa:	4313      	orrs	r3, r2
 80058fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058fe:	f7ff fd67 	bl	80053d0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005902:	f7fc fa59 	bl	8001db8 <HAL_GetTick>
 8005906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005908:	e009      	b.n	800591e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800590a:	f7fc fa55 	bl	8001db8 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d902      	bls.n	800591e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	73fb      	strb	r3, [r7, #15]
        break;
 800591c:	e004      	b.n	8005928 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800591e:	f7ff fd75 	bl	800540c <LL_RCC_PLLSAI1_IsReady>
 8005922:	4603      	mov	r3, r0
 8005924:	2b01      	cmp	r3, #1
 8005926:	d1f0      	bne.n	800590a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800592e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800593c:	4313      	orrs	r3, r2
 800593e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e095      	b.n	8005a88 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d108      	bne.n	8005976 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596c:	d009      	beq.n	8005982 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	61da      	str	r2, [r3, #28]
 8005974:	e005      	b.n	8005982 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fb ffcf 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059c2:	d902      	bls.n	80059ca <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e002      	b.n	80059d0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059d8:	d007      	beq.n	80059ea <HAL_SPI_Init+0xa0>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	ea42 0103 	orr.w	r1, r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	0c1b      	lsrs	r3, r3, #16
 8005a46:	f003 0204 	and.w	r2, r3, #4
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a66:	ea42 0103 	orr.w	r1, r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_SPI_Transmit+0x22>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e158      	b.n	8005d64 <HAL_SPI_Transmit+0x2d4>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aba:	f7fc f97d 	bl	8001db8 <HAL_GetTick>
 8005abe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d002      	beq.n	8005ad6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ad4:	e13d      	b.n	8005d52 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_SPI_Transmit+0x52>
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ae6:	e134      	b.n	8005d52 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2203      	movs	r2, #3
 8005aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	88fa      	ldrh	r2, [r7, #6]
 8005b00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	88fa      	ldrh	r2, [r7, #6]
 8005b06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b32:	d10f      	bne.n	8005b54 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	d007      	beq.n	8005b72 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b7a:	d94b      	bls.n	8005c14 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_SPI_Transmit+0xfa>
 8005b84:	8afb      	ldrh	r3, [r7, #22]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d13e      	bne.n	8005c08 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	881a      	ldrh	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	1c9a      	adds	r2, r3, #2
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bae:	e02b      	b.n	8005c08 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d112      	bne.n	8005be4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	881a      	ldrh	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005be2:	e011      	b.n	8005c08 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be4:	f7fc f8e8 	bl	8001db8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d803      	bhi.n	8005bfc <HAL_SPI_Transmit+0x16c>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d102      	bne.n	8005c02 <HAL_SPI_Transmit+0x172>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d102      	bne.n	8005c08 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c06:	e0a4      	b.n	8005d52 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1ce      	bne.n	8005bb0 <HAL_SPI_Transmit+0x120>
 8005c12:	e07c      	b.n	8005d0e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_SPI_Transmit+0x192>
 8005c1c:	8afb      	ldrh	r3, [r7, #22]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d170      	bne.n	8005d04 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d912      	bls.n	8005c52 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	1c9a      	adds	r2, r3, #2
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b02      	subs	r3, #2
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c50:	e058      	b.n	8005d04 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c78:	e044      	b.n	8005d04 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d12b      	bne.n	8005ce0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d912      	bls.n	8005cb8 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	881a      	ldrh	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	1c9a      	adds	r2, r3, #2
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b02      	subs	r3, #2
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cb6:	e025      	b.n	8005d04 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cde:	e011      	b.n	8005d04 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ce0:	f7fc f86a 	bl	8001db8 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d803      	bhi.n	8005cf8 <HAL_SPI_Transmit+0x268>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d102      	bne.n	8005cfe <HAL_SPI_Transmit+0x26e>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d02:	e026      	b.n	8005d52 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1b5      	bne.n	8005c7a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fce4 	bl	80066e0 <SPI_EndRxTxTransaction>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e000      	b.n	8005d52 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005d50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d88:	d112      	bne.n	8005db0 <HAL_SPI_Receive+0x44>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10e      	bne.n	8005db0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2204      	movs	r2, #4
 8005d96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f910 	bl	8005fcc <HAL_SPI_TransmitReceive>
 8005dac:	4603      	mov	r3, r0
 8005dae:	e109      	b.n	8005fc4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <HAL_SPI_Receive+0x52>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e102      	b.n	8005fc4 <HAL_SPI_Receive+0x258>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc6:	f7fb fff7 	bl	8001db8 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d002      	beq.n	8005dde <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ddc:	e0e9      	b.n	8005fb2 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_SPI_Receive+0x7e>
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dee:	e0e0      	b.n	8005fb2 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2204      	movs	r2, #4
 8005df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	88fa      	ldrh	r2, [r7, #6]
 8005e08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e3a:	d908      	bls.n	8005e4e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	e007      	b.n	8005e5e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e66:	d10f      	bne.n	8005e88 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d007      	beq.n	8005ea6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eae:	d867      	bhi.n	8005f80 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005eb0:	e030      	b.n	8005f14 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d117      	bne.n	8005ef0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f103 020c 	add.w	r2, r3, #12
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	7812      	ldrb	r2, [r2, #0]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005eee:	e011      	b.n	8005f14 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef0:	f7fb ff62 	bl	8001db8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d803      	bhi.n	8005f08 <HAL_SPI_Receive+0x19c>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d102      	bne.n	8005f0e <HAL_SPI_Receive+0x1a2>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f12:	e04e      	b.n	8005fb2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1c8      	bne.n	8005eb2 <HAL_SPI_Receive+0x146>
 8005f20:	e034      	b.n	8005f8c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d115      	bne.n	8005f5c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	b292      	uxth	r2, r2
 8005f3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	1c9a      	adds	r2, r3, #2
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f5a:	e011      	b.n	8005f80 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5c:	f7fb ff2c 	bl	8001db8 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d803      	bhi.n	8005f74 <HAL_SPI_Receive+0x208>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Receive+0x20e>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f7e:	e018      	b.n	8005fb2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ca      	bne.n	8005f22 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fb4d 	bl	8006630 <SPI_EndRxTransaction>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	75fb      	strb	r3, [r7, #23]
 8005fae:	e000      	b.n	8005fb2 <HAL_SPI_Receive+0x246>
  }

error :
 8005fb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x26>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e1fb      	b.n	80063ea <HAL_SPI_TransmitReceive+0x41e>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ffa:	f7fb fedd 	bl	8001db8 <HAL_GetTick>
 8005ffe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006006:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006012:	887b      	ldrh	r3, [r7, #2]
 8006014:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006016:	7efb      	ldrb	r3, [r7, #27]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d00e      	beq.n	800603a <HAL_SPI_TransmitReceive+0x6e>
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006022:	d106      	bne.n	8006032 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <HAL_SPI_TransmitReceive+0x66>
 800602c:	7efb      	ldrb	r3, [r7, #27]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d003      	beq.n	800603a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006032:	2302      	movs	r3, #2
 8006034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006038:	e1cd      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_SPI_TransmitReceive+0x80>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_SPI_TransmitReceive+0x80>
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d103      	bne.n	8006054 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006052:	e1c0      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b04      	cmp	r3, #4
 800605e:	d003      	beq.n	8006068 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2205      	movs	r2, #5
 8006064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	887a      	ldrh	r2, [r7, #2]
 8006080:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	887a      	ldrh	r2, [r7, #2]
 800608e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	887a      	ldrh	r2, [r7, #2]
 8006094:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060aa:	d802      	bhi.n	80060b2 <HAL_SPI_TransmitReceive+0xe6>
 80060ac:	8a3b      	ldrh	r3, [r7, #16]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d908      	bls.n	80060c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060c0:	605a      	str	r2, [r3, #4]
 80060c2:	e007      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d007      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060fa:	d97c      	bls.n	80061f6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_SPI_TransmitReceive+0x13e>
 8006104:	8a7b      	ldrh	r3, [r7, #18]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d169      	bne.n	80061de <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800612e:	e056      	b.n	80061de <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d11b      	bne.n	8006176 <HAL_SPI_TransmitReceive+0x1aa>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d016      	beq.n	8006176 <HAL_SPI_TransmitReceive+0x1aa>
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	2b01      	cmp	r3, #1
 800614c:	d113      	bne.n	8006176 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	1c9a      	adds	r2, r3, #2
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b01      	cmp	r3, #1
 8006182:	d11c      	bne.n	80061be <HAL_SPI_TransmitReceive+0x1f2>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d016      	beq.n	80061be <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	b292      	uxth	r2, r2
 800619c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	1c9a      	adds	r2, r3, #2
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ba:	2301      	movs	r3, #1
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061be:	f7fb fdfb 	bl	8001db8 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d807      	bhi.n	80061de <HAL_SPI_TransmitReceive+0x212>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d003      	beq.n	80061de <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061dc:	e0fb      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1a3      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x164>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d19d      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x164>
 80061f4:	e0df      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_SPI_TransmitReceive+0x23a>
 80061fe:	8a7b      	ldrh	r3, [r7, #18]
 8006200:	2b01      	cmp	r3, #1
 8006202:	f040 80cb 	bne.w	800639c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d912      	bls.n	8006236 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	881a      	ldrh	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	1c9a      	adds	r2, r3, #2
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b02      	subs	r3, #2
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006234:	e0b2      	b.n	800639c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	330c      	adds	r3, #12
 8006240:	7812      	ldrb	r2, [r2, #0]
 8006242:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800625c:	e09e      	b.n	800639c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d134      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x30a>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d02f      	beq.n	80062d6 <HAL_SPI_TransmitReceive+0x30a>
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	2b01      	cmp	r3, #1
 800627a:	d12c      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d912      	bls.n	80062ac <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	881a      	ldrh	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b02      	subs	r3, #2
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062aa:	e012      	b.n	80062d2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	7812      	ldrb	r2, [r2, #0]
 80062b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d148      	bne.n	8006376 <HAL_SPI_TransmitReceive+0x3aa>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d042      	beq.n	8006376 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d923      	bls.n	8006344 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	b292      	uxth	r2, r2
 8006308:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b02      	subs	r3, #2
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b01      	cmp	r3, #1
 8006330:	d81f      	bhi.n	8006372 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	e016      	b.n	8006372 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f103 020c 	add.w	r2, r3, #12
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	7812      	ldrb	r2, [r2, #0]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006372:	2301      	movs	r3, #1
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006376:	f7fb fd1f 	bl	8001db8 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006382:	429a      	cmp	r2, r3
 8006384:	d803      	bhi.n	800638e <HAL_SPI_TransmitReceive+0x3c2>
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d102      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x3c8>
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800639a:	e01c      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f47f af5b 	bne.w	800625e <HAL_SPI_TransmitReceive+0x292>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f47f af54 	bne.w	800625e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f990 	bl	80066e0 <SPI_EndRxTxTransaction>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d006      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	661a      	str	r2, [r3, #96]	; 0x60
 80063d2:	e000      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80063d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3728      	adds	r7, #40	; 0x28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006404:	f7fb fcd8 	bl	8001db8 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	4413      	add	r3, r2
 8006412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006414:	f7fb fcd0 	bl	8001db8 <HAL_GetTick>
 8006418:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800641a:	4b39      	ldr	r3, [pc, #228]	; (8006500 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	015b      	lsls	r3, r3, #5
 8006420:	0d1b      	lsrs	r3, r3, #20
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	fb02 f303 	mul.w	r3, r2, r3
 8006428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800642a:	e054      	b.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d050      	beq.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006434:	f7fb fcc0 	bl	8001db8 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	429a      	cmp	r2, r3
 8006442:	d902      	bls.n	800644a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d13d      	bne.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006458:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006462:	d111      	bne.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646c:	d004      	beq.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006476:	d107      	bne.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006486:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006490:	d10f      	bne.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e017      	b.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d19b      	bne.n	800642c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	2000001c 	.word	0x2000001c

08006504 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006516:	f7fb fc4f 	bl	8001db8 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	4413      	add	r3, r2
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006526:	f7fb fc47 	bl	8001db8 <HAL_GetTick>
 800652a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006534:	4b3d      	ldr	r3, [pc, #244]	; (800662c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	00da      	lsls	r2, r3, #3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	0d1b      	lsrs	r3, r3, #20
 8006544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800654c:	e060      	b.n	8006610 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006554:	d107      	bne.n	8006566 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006564:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d050      	beq.n	8006610 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800656e:	f7fb fc23 	bl	8001db8 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	429a      	cmp	r2, r3
 800657c:	d902      	bls.n	8006584 <SPI_WaitFifoStateUntilTimeout+0x80>
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	d13d      	bne.n	8006600 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006592:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800659c:	d111      	bne.n	80065c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a6:	d004      	beq.n	80065b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b0:	d107      	bne.n	80065c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ca:	d10f      	bne.n	80065ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e010      	b.n	8006622 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	3b01      	subs	r3, #1
 800660e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4013      	ands	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	d196      	bne.n	800654e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3728      	adds	r7, #40	; 0x28
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	2000001c 	.word	0x2000001c

08006630 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006644:	d111      	bne.n	800666a <SPI_EndRxTransaction+0x3a>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664e:	d004      	beq.n	800665a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006658:	d107      	bne.n	800666a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006668:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2200      	movs	r2, #0
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff febd 	bl	80063f4 <SPI_WaitFlagStateUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e023      	b.n	80066d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006698:	d11d      	bne.n	80066d6 <SPI_EndRxTransaction+0xa6>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a2:	d004      	beq.n	80066ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ac:	d113      	bne.n	80066d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff ff22 	bl	8006504 <SPI_WaitFifoStateUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e000      	b.n	80066d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff ff03 	bl	8006504 <SPI_WaitFifoStateUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006708:	f043 0220 	orr.w	r2, r3, #32
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e027      	b.n	8006764 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2200      	movs	r2, #0
 800671c:	2180      	movs	r1, #128	; 0x80
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff fe68 	bl	80063f4 <SPI_WaitFlagStateUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d007      	beq.n	800673a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e014      	b.n	8006764 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2200      	movs	r2, #0
 8006742:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff fedc 	bl	8006504 <SPI_WaitFifoStateUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006756:	f043 0220 	orr.w	r2, r3, #32
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e000      	b.n	8006764 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e097      	b.n	80068b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fb fa39 	bl	8001c0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80067b0:	f023 0307 	bic.w	r3, r3, #7
 80067b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f000 f907 	bl	80069d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ee:	f023 0303 	bic.w	r3, r3, #3
 80067f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	4313      	orrs	r3, r2
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800680c:	f023 030c 	bic.w	r3, r3, #12
 8006810:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800681c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	021b      	lsls	r3, r3, #8
 8006828:	4313      	orrs	r3, r2
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	011a      	lsls	r2, r3, #4
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	031b      	lsls	r3, r3, #12
 800683c:	4313      	orrs	r3, r2
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800684a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006852:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	4313      	orrs	r3, r2
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d110      	bne.n	800690a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d102      	bne.n	80068f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068ee:	7b7b      	ldrb	r3, [r7, #13]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d001      	beq.n	80068f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e069      	b.n	80069cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006908:	e031      	b.n	800696e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b04      	cmp	r3, #4
 800690e:	d110      	bne.n	8006932 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d102      	bne.n	800691c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006916:	7b3b      	ldrb	r3, [r7, #12]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d001      	beq.n	8006920 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e055      	b.n	80069cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006930:	e01d      	b.n	800696e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d108      	bne.n	800694a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d105      	bne.n	800694a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800693e:	7b7b      	ldrb	r3, [r7, #13]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d102      	bne.n	800694a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006944:	7b3b      	ldrb	r3, [r7, #12]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d001      	beq.n	800694e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e03e      	b.n	80069cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_TIM_Encoder_Start+0xc4>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b04      	cmp	r3, #4
 8006978:	d008      	beq.n	800698c <HAL_TIM_Encoder_Start+0xd4>
 800697a:	e00f      	b.n	800699c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2201      	movs	r2, #1
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f000 f889 	bl	8006a9c <TIM_CCxChannelCmd>
      break;
 800698a:	e016      	b.n	80069ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2201      	movs	r2, #1
 8006992:	2104      	movs	r1, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f000 f881 	bl	8006a9c <TIM_CCxChannelCmd>
      break;
 800699a:	e00e      	b.n	80069ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2201      	movs	r2, #1
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 f879 	bl	8006a9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2201      	movs	r2, #1
 80069b0:	2104      	movs	r1, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 f872 	bl	8006a9c <TIM_CCxChannelCmd>
      break;
 80069b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a2a      	ldr	r2, [pc, #168]	; (8006a90 <TIM_Base_SetConfig+0xbc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_Base_SetConfig+0x20>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d108      	bne.n	8006a06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a21      	ldr	r2, [pc, #132]	; (8006a90 <TIM_Base_SetConfig+0xbc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_Base_SetConfig+0x52>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a14:	d007      	beq.n	8006a26 <TIM_Base_SetConfig+0x52>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a1e      	ldr	r2, [pc, #120]	; (8006a94 <TIM_Base_SetConfig+0xc0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_Base_SetConfig+0x52>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1d      	ldr	r2, [pc, #116]	; (8006a98 <TIM_Base_SetConfig+0xc4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d108      	bne.n	8006a38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <TIM_Base_SetConfig+0xbc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d007      	beq.n	8006a74 <TIM_Base_SetConfig+0xa0>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <TIM_Base_SetConfig+0xc0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_Base_SetConfig+0xa0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a0a      	ldr	r2, [pc, #40]	; (8006a98 <TIM_Base_SetConfig+0xc4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d103      	bne.n	8006a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	615a      	str	r2, [r3, #20]
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40012c00 	.word	0x40012c00
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800

08006a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2201      	movs	r2, #1
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	43db      	mvns	r3, r3
 8006abe:	401a      	ands	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a1a      	ldr	r2, [r3, #32]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e04a      	b.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1f      	ldr	r2, [pc, #124]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d108      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d004      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d10c      	bne.n	8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40012c00 	.word	0x40012c00

08006ba8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bb8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006bbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bde:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006be2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	f107 0014 	add.w	r0, r7, #20
 8006c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	b004      	add	sp, #16
 8006c4c:	4770      	bx	lr
	...

08006c50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b09d      	sub	sp, #116	; 0x74
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	78db      	ldrb	r3, [r3, #3]
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d81f      	bhi.n	8006cc2 <USB_ActivateEndpoint+0x72>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <USB_ActivateEndpoint+0x38>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006c99 	.word	0x08006c99
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006ccb 	.word	0x08006ccb
 8006c94:	08006ca7 	.word	0x08006ca7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ca0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006ca4:	e012      	b.n	8006ccc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006ca6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006caa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006cae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006cb2:	e00b      	b.n	8006ccc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006cb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006cc0:	e004      	b.n	8006ccc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006cc8:	e000      	b.n	8006ccc <USB_ActivateEndpoint+0x7c>
      break;
 8006cca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	441a      	add	r2, r3
 8006cd6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	b21b      	sxth	r3, r3
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	b21a      	sxth	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b21b      	sxth	r3, r3
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	b21b      	sxth	r3, r3
 8006d12:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	441a      	add	r2, r3
 8006d20:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	7b1b      	ldrb	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 8149 	bne.w	8006fd4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8084 	beq.w	8006e54 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	00da      	lsls	r2, r3, #3
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	88db      	ldrh	r3, [r3, #6]
 8006d74:	085b      	lsrs	r3, r3, #1
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	827b      	strh	r3, [r7, #18]
 8006d8e:	8a7b      	ldrh	r3, [r7, #18]
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01b      	beq.n	8006dd0 <USB_ActivateEndpoint+0x180>
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	823b      	strh	r3, [r7, #16]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8a3b      	ldrh	r3, [r7, #16]
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	78db      	ldrb	r3, [r3, #3]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d020      	beq.n	8006e1a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dee:	81bb      	strh	r3, [r7, #12]
 8006df0:	89bb      	ldrh	r3, [r7, #12]
 8006df2:	f083 0320 	eor.w	r3, r3, #32
 8006df6:	81bb      	strh	r3, [r7, #12]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	89bb      	ldrh	r3, [r7, #12]
 8006e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]
 8006e18:	e2a6      	b.n	8007368 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e30:	81fb      	strh	r3, [r7, #14]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	89fb      	ldrh	r3, [r7, #14]
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]
 8006e52:	e289      	b.n	8007368 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	633b      	str	r3, [r7, #48]	; 0x30
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	4413      	add	r3, r2
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00da      	lsls	r2, r3, #3
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	4413      	add	r3, r2
 8006e72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	88db      	ldrh	r3, [r3, #6]
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	4413      	add	r3, r2
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	00da      	lsls	r2, r3, #3
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8006eb2:	d918      	bls.n	8006ee6 <USB_ActivateEndpoint+0x296>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <USB_ActivateEndpoint+0x27e>
 8006ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	029b      	lsls	r3, r3, #10
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e029      	b.n	8006f3a <USB_ActivateEndpoint+0x2ea>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d112      	bne.n	8006f14 <USB_ActivateEndpoint+0x2c4>
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	e012      	b.n	8006f3a <USB_ActivateEndpoint+0x2ea>
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <USB_ActivateEndpoint+0x2de>
 8006f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	029b      	lsls	r3, r3, #10
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01b      	beq.n	8006f8a <USB_ActivateEndpoint+0x33a>
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	843b      	strh	r3, [r7, #32]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	8c3b      	ldrh	r3, [r7, #32]
 8006f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa0:	83fb      	strh	r3, [r7, #30]
 8006fa2:	8bfb      	ldrh	r3, [r7, #30]
 8006fa4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fa8:	83fb      	strh	r3, [r7, #30]
 8006faa:	8bfb      	ldrh	r3, [r7, #30]
 8006fac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fb0:	83fb      	strh	r3, [r7, #30]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	8bfb      	ldrh	r3, [r7, #30]
 8006fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	8013      	strh	r3, [r2, #0]
 8006fd2:	e1c9      	b.n	8007368 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	78db      	ldrb	r3, [r3, #3]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d11e      	bne.n	800701a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	441a      	add	r2, r3
 8007000:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007014:	b29b      	uxth	r3, r3
 8007016:	8013      	strh	r3, [r2, #0]
 8007018:	e01d      	b.n	8007056 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800702c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007030:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	441a      	add	r2, r3
 800703e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007052:	b29b      	uxth	r3, r3
 8007054:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007060:	b29b      	uxth	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007066:	4413      	add	r3, r2
 8007068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	00da      	lsls	r2, r3, #3
 8007070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007072:	4413      	add	r3, r2
 8007074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007078:	65bb      	str	r3, [r7, #88]	; 0x58
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	891b      	ldrh	r3, [r3, #8]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	657b      	str	r3, [r7, #84]	; 0x54
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800709a:	4413      	add	r3, r2
 800709c:	657b      	str	r3, [r7, #84]	; 0x54
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	00da      	lsls	r2, r3, #3
 80070a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070a6:	4413      	add	r3, r2
 80070a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070ac:	653b      	str	r3, [r7, #80]	; 0x50
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	895b      	ldrh	r3, [r3, #10]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070bc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f040 8093 	bne.w	80071ee <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01b      	beq.n	800711c <USB_ActivateEndpoint+0x4cc>
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	441a      	add	r2, r3
 8007106:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	b29b      	uxth	r3, r3
 800711a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800712a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01b      	beq.n	800716c <USB_ActivateEndpoint+0x51c>
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007168:	b29b      	uxth	r3, r3
 800716a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	873b      	strh	r3, [r7, #56]	; 0x38
 8007184:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007186:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800718a:	873b      	strh	r3, [r7, #56]	; 0x38
 800718c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800718e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007192:	873b      	strh	r3, [r7, #56]	; 0x38
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	441a      	add	r2, r3
 800719e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80071a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	441a      	add	r2, r3
 80071d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	8013      	strh	r3, [r2, #0]
 80071ec:	e0bc      	b.n	8007368 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d01d      	beq.n	8007246 <USB_ActivateEndpoint+0x5f6>
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007220:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007256:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800725a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01d      	beq.n	800729e <USB_ActivateEndpoint+0x64e>
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007278:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	441a      	add	r2, r3
 8007286:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800728a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800728e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800729a:	b29b      	uxth	r3, r3
 800729c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d024      	beq.n	80072f0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072c4:	f083 0320 	eor.w	r3, r3, #32
 80072c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	441a      	add	r2, r3
 80072d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]
 80072ee:	e01d      	b.n	800732c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007306:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800731c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007328:	b29b      	uxth	r3, r3
 800732a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	441a      	add	r2, r3
 8007350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007364:	b29b      	uxth	r3, r3
 8007366:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007368:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800736c:	4618      	mov	r0, r3
 800736e:	3774      	adds	r7, #116	; 0x74
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007378:	b480      	push	{r7}
 800737a:	b08d      	sub	sp, #52	; 0x34
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	7b1b      	ldrb	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f040 808e 	bne.w	80074a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d044      	beq.n	800741e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	81bb      	strh	r3, [r7, #12]
 80073a2:	89bb      	ldrh	r3, [r7, #12]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <USB_DeactivateEndpoint+0x6c>
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	817b      	strh	r3, [r7, #10]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	441a      	add	r2, r3
 80073ce:	897b      	ldrh	r3, [r7, #10]
 80073d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fa:	813b      	strh	r3, [r7, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]
 800741c:	e192      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	827b      	strh	r3, [r7, #18]
 800742c:	8a7b      	ldrh	r3, [r7, #18]
 800742e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01b      	beq.n	800746e <USB_DeactivateEndpoint+0xf6>
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744c:	823b      	strh	r3, [r7, #16]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	8a3b      	ldrh	r3, [r7, #16]
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007484:	81fb      	strh	r3, [r7, #14]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	89fb      	ldrh	r3, [r7, #14]
 8007492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	8013      	strh	r3, [r2, #0]
 80074a6:	e14d      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 80a5 	bne.w	80075fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	843b      	strh	r3, [r7, #32]
 80074c0:	8c3b      	ldrh	r3, [r7, #32]
 80074c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01b      	beq.n	8007502 <USB_DeactivateEndpoint+0x18a>
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e0:	83fb      	strh	r3, [r7, #30]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	441a      	add	r2, r3
 80074ec:	8bfb      	ldrh	r3, [r7, #30]
 80074ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	83bb      	strh	r3, [r7, #28]
 8007510:	8bbb      	ldrh	r3, [r7, #28]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01b      	beq.n	8007552 <USB_DeactivateEndpoint+0x1da>
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007530:	837b      	strh	r3, [r7, #26]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	8b7b      	ldrh	r3, [r7, #26]
 800753e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800754a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800754e:	b29b      	uxth	r3, r3
 8007550:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007568:	833b      	strh	r3, [r7, #24]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	8b3b      	ldrh	r3, [r7, #24]
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800759c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a0:	82fb      	strh	r3, [r7, #22]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	8afb      	ldrh	r3, [r7, #22]
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d8:	82bb      	strh	r3, [r7, #20]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	441a      	add	r2, r3
 80075e4:	8abb      	ldrh	r3, [r7, #20]
 80075e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	8013      	strh	r3, [r2, #0]
 80075fa:	e0a3      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800760a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800760c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01b      	beq.n	800764c <USB_DeactivateEndpoint+0x2d4>
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007648:	b29b      	uxth	r3, r3
 800764a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	857b      	strh	r3, [r7, #42]	; 0x2a
 800765a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800765c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <USB_DeactivateEndpoint+0x324>
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	853b      	strh	r3, [r7, #40]	; 0x28
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	441a      	add	r2, r3
 8007686:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007698:	b29b      	uxth	r3, r3
 800769a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	847b      	strh	r3, [r7, #34]	; 0x22
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3734      	adds	r7, #52	; 0x34
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b0c2      	sub	sp, #264	; 0x108
 8007756:	af00      	add	r7, sp, #0
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	6018      	str	r0, [r3, #0]
 800775c:	463b      	mov	r3, r7
 800775e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007760:	463b      	mov	r3, r7
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	785b      	ldrb	r3, [r3, #1]
 8007766:	2b01      	cmp	r3, #1
 8007768:	f040 8509 	bne.w	800817e <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800776c:	463b      	mov	r3, r7
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	463b      	mov	r3, r7
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	429a      	cmp	r2, r3
 800777a:	d905      	bls.n	8007788 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800777c:	463b      	mov	r3, r7
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007786:	e004      	b.n	8007792 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007788:	463b      	mov	r3, r7
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007792:	463b      	mov	r3, r7
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	7b1b      	ldrb	r3, [r3, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d128      	bne.n	80077ee <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800779c:	463b      	mov	r3, r7
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6959      	ldr	r1, [r3, #20]
 80077a2:	463b      	mov	r3, r7
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	88da      	ldrh	r2, [r3, #6]
 80077a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	1d38      	adds	r0, r7, #4
 80077b0:	6800      	ldr	r0, [r0, #0]
 80077b2:	f001 f9da 	bl	8008b6a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077b6:	1d3b      	adds	r3, r7, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	1d3b      	adds	r3, r7, #4
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4413      	add	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	463b      	mov	r3, r7
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	00da      	lsls	r2, r3, #3
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	4413      	add	r3, r2
 80077da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	f000 bc9f 	b.w	800812c <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80077ee:	463b      	mov	r3, r7
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	78db      	ldrb	r3, [r3, #3]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	f040 8347 	bne.w	8007e88 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6a1a      	ldr	r2, [r3, #32]
 8007800:	463b      	mov	r3, r7
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	429a      	cmp	r2, r3
 8007808:	f240 82eb 	bls.w	8007de2 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800780c:	1d3b      	adds	r3, r7, #4
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	463b      	mov	r3, r7
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800782a:	1d3b      	adds	r3, r7, #4
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	463b      	mov	r3, r7
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	441a      	add	r2, r3
 8007838:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800783c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007844:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784c:	b29b      	uxth	r3, r3
 800784e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007850:	463b      	mov	r3, r7
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a1a      	ldr	r2, [r3, #32]
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	463b      	mov	r3, r7
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007862:	1d3b      	adds	r3, r7, #4
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	463b      	mov	r3, r7
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 8159 	beq.w	8007b30 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800787e:	1d3b      	adds	r3, r7, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	633b      	str	r3, [r7, #48]	; 0x30
 8007884:	463b      	mov	r3, r7
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d164      	bne.n	8007958 <USB_EPStartXfer+0x206>
 800788e:	1d3b      	adds	r3, r7, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28
 8007894:	1d3b      	adds	r3, r7, #4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	4413      	add	r3, r2
 80078a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a6:	463b      	mov	r3, r7
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	00da      	lsls	r2, r3, #3
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	4413      	add	r3, r2
 80078b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078bc:	2b3e      	cmp	r3, #62	; 0x3e
 80078be:	d91c      	bls.n	80078fa <USB_EPStartXfer+0x1a8>
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c4:	095b      	lsrs	r3, r3, #5
 80078c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ce:	f003 031f 	and.w	r3, r3, #31
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d104      	bne.n	80078e0 <USB_EPStartXfer+0x18e>
 80078d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078da:	3b01      	subs	r3, #1
 80078dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	e04a      	b.n	8007990 <USB_EPStartXfer+0x23e>
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d112      	bne.n	8007928 <USB_EPStartXfer+0x1d6>
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800790c:	b29a      	uxth	r2, r3
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007920:	b29a      	uxth	r2, r3
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	e033      	b.n	8007990 <USB_EPStartXfer+0x23e>
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <USB_EPStartXfer+0x1f6>
 800793e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007942:	3301      	adds	r3, #1
 8007944:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007948:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800794c:	b29b      	uxth	r3, r3
 800794e:	029b      	lsls	r3, r3, #10
 8007950:	b29a      	uxth	r2, r3
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	e01b      	b.n	8007990 <USB_EPStartXfer+0x23e>
 8007958:	463b      	mov	r3, r7
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d116      	bne.n	8007990 <USB_EPStartXfer+0x23e>
 8007962:	1d3b      	adds	r3, r7, #4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796a:	b29b      	uxth	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	4413      	add	r3, r2
 8007972:	633b      	str	r3, [r7, #48]	; 0x30
 8007974:	463b      	mov	r3, r7
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	00da      	lsls	r2, r3, #3
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	4413      	add	r3, r2
 8007980:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798a:	b29a      	uxth	r2, r3
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007990:	463b      	mov	r3, r7
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	895b      	ldrh	r3, [r3, #10]
 8007996:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800799a:	463b      	mov	r3, r7
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6959      	ldr	r1, [r3, #20]
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079aa:	1d38      	adds	r0, r7, #4
 80079ac:	6800      	ldr	r0, [r0, #0]
 80079ae:	f001 f8dc 	bl	8008b6a <USB_WritePMA>
            ep->xfer_buff += len;
 80079b2:	463b      	mov	r3, r7
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079bc:	441a      	add	r2, r3
 80079be:	463b      	mov	r3, r7
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6a1a      	ldr	r2, [r3, #32]
 80079ca:	463b      	mov	r3, r7
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d909      	bls.n	80079e8 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 80079d4:	463b      	mov	r3, r7
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a1a      	ldr	r2, [r3, #32]
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	1ad2      	subs	r2, r2, r3
 80079e0:	463b      	mov	r3, r7
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	621a      	str	r2, [r3, #32]
 80079e6:	e008      	b.n	80079fa <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 80079e8:	463b      	mov	r3, r7
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80079f2:	463b      	mov	r3, r7
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079fa:	463b      	mov	r3, r7
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d164      	bne.n	8007ace <USB_EPStartXfer+0x37c>
 8007a04:	1d3b      	adds	r3, r7, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	1d3b      	adds	r3, r7, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	4413      	add	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	00da      	lsls	r2, r3, #3
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	4413      	add	r3, r2
 8007a28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a32:	2b3e      	cmp	r3, #62	; 0x3e
 8007a34:	d91c      	bls.n	8007a70 <USB_EPStartXfer+0x31e>
 8007a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <USB_EPStartXfer+0x304>
 8007a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a50:	3b01      	subs	r3, #1
 8007a52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	029b      	lsls	r3, r3, #10
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	801a      	strh	r2, [r3, #0]
 8007a6e:	e04d      	b.n	8007b0c <USB_EPStartXfer+0x3ba>
 8007a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d112      	bne.n	8007a9e <USB_EPStartXfer+0x34c>
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	801a      	strh	r2, [r3, #0]
 8007a9c:	e036      	b.n	8007b0c <USB_EPStartXfer+0x3ba>
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa2:	085b      	lsrs	r3, r3, #1
 8007aa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d004      	beq.n	8007abe <USB_EPStartXfer+0x36c>
 8007ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ab8:	3301      	adds	r3, #1
 8007aba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	029b      	lsls	r3, r3, #10
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	801a      	strh	r2, [r3, #0]
 8007acc:	e01e      	b.n	8007b0c <USB_EPStartXfer+0x3ba>
 8007ace:	463b      	mov	r3, r7
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d119      	bne.n	8007b0c <USB_EPStartXfer+0x3ba>
 8007ad8:	1d3b      	adds	r3, r7, #4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	623b      	str	r3, [r7, #32]
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	4413      	add	r3, r2
 8007aee:	623b      	str	r3, [r7, #32]
 8007af0:	463b      	mov	r3, r7
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	00da      	lsls	r2, r3, #3
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	4413      	add	r3, r2
 8007afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b00:	61fb      	str	r3, [r7, #28]
 8007b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	891b      	ldrh	r3, [r3, #8]
 8007b12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b16:	463b      	mov	r3, r7
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6959      	ldr	r1, [r3, #20]
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b26:	1d38      	adds	r0, r7, #4
 8007b28:	6800      	ldr	r0, [r0, #0]
 8007b2a:	f001 f81e 	bl	8008b6a <USB_WritePMA>
 8007b2e:	e2fd      	b.n	800812c <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b30:	463b      	mov	r3, r7
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d164      	bne.n	8007c04 <USB_EPStartXfer+0x4b2>
 8007b3a:	1d3b      	adds	r3, r7, #4
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b40:	1d3b      	adds	r3, r7, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4e:	4413      	add	r3, r2
 8007b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b52:	463b      	mov	r3, r7
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	00da      	lsls	r2, r3, #3
 8007b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b62:	647b      	str	r3, [r7, #68]	; 0x44
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b68:	2b3e      	cmp	r3, #62	; 0x3e
 8007b6a:	d91c      	bls.n	8007ba6 <USB_EPStartXfer+0x454>
 8007b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d104      	bne.n	8007b8c <USB_EPStartXfer+0x43a>
 8007b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b86:	3b01      	subs	r3, #1
 8007b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	029b      	lsls	r3, r3, #10
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	e04d      	b.n	8007c42 <USB_EPStartXfer+0x4f0>
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d112      	bne.n	8007bd4 <USB_EPStartXfer+0x482>
 8007bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e036      	b.n	8007c42 <USB_EPStartXfer+0x4f0>
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd8:	085b      	lsrs	r3, r3, #1
 8007bda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <USB_EPStartXfer+0x4a2>
 8007bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bee:	3301      	adds	r3, #1
 8007bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	029b      	lsls	r3, r3, #10
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e01e      	b.n	8007c42 <USB_EPStartXfer+0x4f0>
 8007c04:	463b      	mov	r3, r7
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d119      	bne.n	8007c42 <USB_EPStartXfer+0x4f0>
 8007c0e:	1d3b      	adds	r3, r7, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	653b      	str	r3, [r7, #80]	; 0x50
 8007c14:	1d3b      	adds	r3, r7, #4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c22:	4413      	add	r3, r2
 8007c24:	653b      	str	r3, [r7, #80]	; 0x50
 8007c26:	463b      	mov	r3, r7
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	00da      	lsls	r2, r3, #3
 8007c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c30:	4413      	add	r3, r2
 8007c32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c42:	463b      	mov	r3, r7
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	891b      	ldrh	r3, [r3, #8]
 8007c48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6959      	ldr	r1, [r3, #20]
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c5c:	1d38      	adds	r0, r7, #4
 8007c5e:	6800      	ldr	r0, [r0, #0]
 8007c60:	f000 ff83 	bl	8008b6a <USB_WritePMA>
            ep->xfer_buff += len;
 8007c64:	463b      	mov	r3, r7
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695a      	ldr	r2, [r3, #20]
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c6e:	441a      	add	r2, r3
 8007c70:	463b      	mov	r3, r7
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6a1a      	ldr	r2, [r3, #32]
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d909      	bls.n	8007c9a <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8007c86:	463b      	mov	r3, r7
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6a1a      	ldr	r2, [r3, #32]
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c90:	1ad2      	subs	r2, r2, r3
 8007c92:	463b      	mov	r3, r7
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	621a      	str	r2, [r3, #32]
 8007c98:	e008      	b.n	8007cac <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c9a:	463b      	mov	r3, r7
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cac:	1d3b      	adds	r3, r7, #4
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	785b      	ldrb	r3, [r3, #1]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d164      	bne.n	8007d86 <USB_EPStartXfer+0x634>
 8007cbc:	1d3b      	adds	r3, r7, #4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cc2:	1d3b      	adds	r3, r7, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	4413      	add	r3, r2
 8007cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	00da      	lsls	r2, r3, #3
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	4413      	add	r3, r2
 8007ce0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cea:	2b3e      	cmp	r3, #62	; 0x3e
 8007cec:	d91c      	bls.n	8007d28 <USB_EPStartXfer+0x5d6>
 8007cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d104      	bne.n	8007d0e <USB_EPStartXfer+0x5bc>
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	029b      	lsls	r3, r3, #10
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	e04a      	b.n	8007dbe <USB_EPStartXfer+0x66c>
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d112      	bne.n	8007d56 <USB_EPStartXfer+0x604>
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	e033      	b.n	8007dbe <USB_EPStartXfer+0x66c>
 8007d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <USB_EPStartXfer+0x624>
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	3301      	adds	r3, #1
 8007d72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	029b      	lsls	r3, r3, #10
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	801a      	strh	r2, [r3, #0]
 8007d84:	e01b      	b.n	8007dbe <USB_EPStartXfer+0x66c>
 8007d86:	463b      	mov	r3, r7
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d116      	bne.n	8007dbe <USB_EPStartXfer+0x66c>
 8007d90:	1d3b      	adds	r3, r7, #4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9e:	4413      	add	r3, r2
 8007da0:	643b      	str	r3, [r7, #64]	; 0x40
 8007da2:	463b      	mov	r3, r7
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	00da      	lsls	r2, r3, #3
 8007daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dac:	4413      	add	r3, r2
 8007dae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dbe:	463b      	mov	r3, r7
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	895b      	ldrh	r3, [r3, #10]
 8007dc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dc8:	463b      	mov	r3, r7
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6959      	ldr	r1, [r3, #20]
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007dd8:	1d38      	adds	r0, r7, #4
 8007dda:	6800      	ldr	r0, [r0, #0]
 8007ddc:	f000 fec5 	bl	8008b6a <USB_WritePMA>
 8007de0:	e1a4      	b.n	800812c <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007de2:	463b      	mov	r3, r7
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007dec:	1d3b      	adds	r3, r7, #4
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	463b      	mov	r3, r7
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007e0a:	1d3b      	adds	r3, r7, #4
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	463b      	mov	r3, r7
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	441a      	add	r2, r3
 8007e18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e30:	1d3b      	adds	r3, r7, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e36:	1d3b      	adds	r3, r7, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e44:	4413      	add	r3, r2
 8007e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e48:	463b      	mov	r3, r7
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	00da      	lsls	r2, r3, #3
 8007e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e52:	4413      	add	r3, r2
 8007e54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e58:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e64:	463b      	mov	r3, r7
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	891b      	ldrh	r3, [r3, #8]
 8007e6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e6e:	463b      	mov	r3, r7
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6959      	ldr	r1, [r3, #20]
 8007e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e7e:	1d38      	adds	r0, r7, #4
 8007e80:	6800      	ldr	r0, [r0, #0]
 8007e82:	f000 fe72 	bl	8008b6a <USB_WritePMA>
 8007e86:	e151      	b.n	800812c <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e88:	463b      	mov	r3, r7
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6a1a      	ldr	r2, [r3, #32]
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e92:	1ad2      	subs	r2, r2, r3
 8007e94:	463b      	mov	r3, r7
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e9a:	1d3b      	adds	r3, r7, #4
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 809b 	beq.w	8007fec <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007eb6:	1d3b      	adds	r3, r7, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	673b      	str	r3, [r7, #112]	; 0x70
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d164      	bne.n	8007f90 <USB_EPStartXfer+0x83e>
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ecc:	1d3b      	adds	r3, r7, #4
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eda:	4413      	add	r3, r2
 8007edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ede:	463b      	mov	r3, r7
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	00da      	lsls	r2, r3, #3
 8007ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ee8:	4413      	add	r3, r2
 8007eea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eee:	667b      	str	r3, [r7, #100]	; 0x64
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ef6:	d91c      	bls.n	8007f32 <USB_EPStartXfer+0x7e0>
 8007ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f06:	f003 031f 	and.w	r3, r3, #31
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <USB_EPStartXfer+0x7c6>
 8007f0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f12:	3b01      	subs	r3, #1
 8007f14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	029b      	lsls	r3, r3, #10
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	e04a      	b.n	8007fc8 <USB_EPStartXfer+0x876>
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d112      	bne.n	8007f60 <USB_EPStartXfer+0x80e>
 8007f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f48:	801a      	strh	r2, [r3, #0]
 8007f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f5c:	801a      	strh	r2, [r3, #0]
 8007f5e:	e033      	b.n	8007fc8 <USB_EPStartXfer+0x876>
 8007f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f64:	085b      	lsrs	r3, r3, #1
 8007f66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d004      	beq.n	8007f80 <USB_EPStartXfer+0x82e>
 8007f76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	e01b      	b.n	8007fc8 <USB_EPStartXfer+0x876>
 8007f90:	463b      	mov	r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d116      	bne.n	8007fc8 <USB_EPStartXfer+0x876>
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fa8:	4413      	add	r3, r2
 8007faa:	673b      	str	r3, [r7, #112]	; 0x70
 8007fac:	463b      	mov	r3, r7
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	00da      	lsls	r2, r3, #3
 8007fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007fc8:	463b      	mov	r3, r7
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	895b      	ldrh	r3, [r3, #10]
 8007fce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6959      	ldr	r1, [r3, #20]
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fe2:	1d38      	adds	r0, r7, #4
 8007fe4:	6800      	ldr	r0, [r0, #0]
 8007fe6:	f000 fdc0 	bl	8008b6a <USB_WritePMA>
 8007fea:	e09f      	b.n	800812c <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fec:	463b      	mov	r3, r7
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d164      	bne.n	80080c0 <USB_EPStartXfer+0x96e>
 8007ff6:	1d3b      	adds	r3, r7, #4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ffc:	1d3b      	adds	r3, r7, #4
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008004:	b29b      	uxth	r3, r3
 8008006:	461a      	mov	r2, r3
 8008008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800800a:	4413      	add	r3, r2
 800800c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800800e:	463b      	mov	r3, r7
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	00da      	lsls	r2, r3, #3
 8008016:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008018:	4413      	add	r3, r2
 800801a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800801e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008024:	2b3e      	cmp	r3, #62	; 0x3e
 8008026:	d91c      	bls.n	8008062 <USB_EPStartXfer+0x910>
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	2b00      	cmp	r3, #0
 800803c:	d104      	bne.n	8008048 <USB_EPStartXfer+0x8f6>
 800803e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008042:	3b01      	subs	r3, #1
 8008044:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800804c:	b29b      	uxth	r3, r3
 800804e:	029b      	lsls	r3, r3, #10
 8008050:	b29b      	uxth	r3, r3
 8008052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800805a:	b29a      	uxth	r2, r3
 800805c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	e053      	b.n	800810a <USB_EPStartXfer+0x9b8>
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008066:	2b00      	cmp	r3, #0
 8008068:	d112      	bne.n	8008090 <USB_EPStartXfer+0x93e>
 800806a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008074:	b29a      	uxth	r2, r3
 8008076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008088:	b29a      	uxth	r2, r3
 800808a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800808c:	801a      	strh	r2, [r3, #0]
 800808e:	e03c      	b.n	800810a <USB_EPStartXfer+0x9b8>
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d004      	beq.n	80080b0 <USB_EPStartXfer+0x95e>
 80080a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080aa:	3301      	adds	r3, #1
 80080ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	029b      	lsls	r3, r3, #10
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e024      	b.n	800810a <USB_EPStartXfer+0x9b8>
 80080c0:	463b      	mov	r3, r7
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d11f      	bne.n	800810a <USB_EPStartXfer+0x9b8>
 80080ca:	1d3b      	adds	r3, r7, #4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080d2:	1d3b      	adds	r3, r7, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080da:	b29b      	uxth	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080e2:	4413      	add	r3, r2
 80080e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080e8:	463b      	mov	r3, r7
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	00da      	lsls	r2, r3, #3
 80080f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080f4:	4413      	add	r3, r2
 80080f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008102:	b29a      	uxth	r2, r3
 8008104:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008108:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800810a:	463b      	mov	r3, r7
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	891b      	ldrh	r3, [r3, #8]
 8008110:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008114:	463b      	mov	r3, r7
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6959      	ldr	r1, [r3, #20]
 800811a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811e:	b29b      	uxth	r3, r3
 8008120:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008124:	1d38      	adds	r0, r7, #4
 8008126:	6800      	ldr	r0, [r0, #0]
 8008128:	f000 fd1f 	bl	8008b6a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800812c:	1d3b      	adds	r3, r7, #4
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	463b      	mov	r3, r7
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008146:	817b      	strh	r3, [r7, #10]
 8008148:	897b      	ldrh	r3, [r7, #10]
 800814a:	f083 0310 	eor.w	r3, r3, #16
 800814e:	817b      	strh	r3, [r7, #10]
 8008150:	897b      	ldrh	r3, [r7, #10]
 8008152:	f083 0320 	eor.w	r3, r3, #32
 8008156:	817b      	strh	r3, [r7, #10]
 8008158:	1d3b      	adds	r3, r7, #4
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	463b      	mov	r3, r7
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	441a      	add	r2, r3
 8008166:	897b      	ldrh	r3, [r7, #10]
 8008168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	b29b      	uxth	r3, r3
 800817a:	8013      	strh	r3, [r2, #0]
 800817c:	e3b5      	b.n	80088ea <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800817e:	463b      	mov	r3, r7
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	7b1b      	ldrb	r3, [r3, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	f040 8090 	bne.w	80082aa <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800818a:	463b      	mov	r3, r7
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	699a      	ldr	r2, [r3, #24]
 8008190:	463b      	mov	r3, r7
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	429a      	cmp	r2, r3
 8008198:	d90e      	bls.n	80081b8 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800819a:	463b      	mov	r3, r7
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80081a4:	463b      	mov	r3, r7
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	463b      	mov	r3, r7
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	619a      	str	r2, [r3, #24]
 80081b6:	e008      	b.n	80081ca <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 80081b8:	463b      	mov	r3, r7
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80081c2:	463b      	mov	r3, r7
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2200      	movs	r2, #0
 80081c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081ca:	1d3b      	adds	r3, r7, #4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081d2:	1d3b      	adds	r3, r7, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081da:	b29b      	uxth	r3, r3
 80081dc:	461a      	mov	r2, r3
 80081de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081e2:	4413      	add	r3, r2
 80081e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081e8:	463b      	mov	r3, r7
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	00da      	lsls	r2, r3, #3
 80081f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081f4:	4413      	add	r3, r2
 80081f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008202:	2b3e      	cmp	r3, #62	; 0x3e
 8008204:	d91d      	bls.n	8008242 <USB_EPStartXfer+0xaf0>
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008214:	f003 031f 	and.w	r3, r3, #31
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <USB_EPStartXfer+0xad4>
 800821c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008220:	3b01      	subs	r3, #1
 8008222:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008226:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800822a:	b29b      	uxth	r3, r3
 800822c:	029b      	lsls	r3, r3, #10
 800822e:	b29b      	uxth	r3, r3
 8008230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008238:	b29a      	uxth	r2, r3
 800823a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	e325      	b.n	800888e <USB_EPStartXfer+0x113c>
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008246:	2b00      	cmp	r3, #0
 8008248:	d116      	bne.n	8008278 <USB_EPStartXfer+0xb26>
 800824a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008256:	b29a      	uxth	r2, r3
 8008258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800825c:	801a      	strh	r2, [r3, #0]
 800825e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800826a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826e:	b29a      	uxth	r2, r3
 8008270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	e30a      	b.n	800888e <USB_EPStartXfer+0x113c>
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827c:	085b      	lsrs	r3, r3, #1
 800827e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <USB_EPStartXfer+0xb46>
 800828e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008292:	3301      	adds	r3, #1
 8008294:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008298:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	e2f1      	b.n	800888e <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082aa:	463b      	mov	r3, r7
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	78db      	ldrb	r3, [r3, #3]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	f040 818f 	bne.w	80085d4 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082b6:	463b      	mov	r3, r7
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d175      	bne.n	80083ac <USB_EPStartXfer+0xc5a>
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082c8:	1d3b      	adds	r3, r7, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082d8:	4413      	add	r3, r2
 80082da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082de:	463b      	mov	r3, r7
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	00da      	lsls	r2, r3, #3
 80082e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082ea:	4413      	add	r3, r2
 80082ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082f4:	463b      	mov	r3, r7
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b3e      	cmp	r3, #62	; 0x3e
 80082fc:	d91f      	bls.n	800833e <USB_EPStartXfer+0xbec>
 80082fe:	463b      	mov	r3, r7
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	095b      	lsrs	r3, r3, #5
 8008306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800830a:	463b      	mov	r3, r7
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	2b00      	cmp	r3, #0
 8008316:	d104      	bne.n	8008322 <USB_EPStartXfer+0xbd0>
 8008318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800831c:	3b01      	subs	r3, #1
 800831e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008326:	b29b      	uxth	r3, r3
 8008328:	029b      	lsls	r3, r3, #10
 800832a:	b29b      	uxth	r3, r3
 800832c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	e05c      	b.n	80083f8 <USB_EPStartXfer+0xca6>
 800833e:	463b      	mov	r3, r7
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d116      	bne.n	8008376 <USB_EPStartXfer+0xc24>
 8008348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008354:	b29a      	uxth	r2, r3
 8008356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800835a:	801a      	strh	r2, [r3, #0]
 800835c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836c:	b29a      	uxth	r2, r3
 800836e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	e040      	b.n	80083f8 <USB_EPStartXfer+0xca6>
 8008376:	463b      	mov	r3, r7
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	085b      	lsrs	r3, r3, #1
 800837e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008382:	463b      	mov	r3, r7
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <USB_EPStartXfer+0xc48>
 8008390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008394:	3301      	adds	r3, #1
 8008396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839e:	b29b      	uxth	r3, r3
 80083a0:	029b      	lsls	r3, r3, #10
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	e025      	b.n	80083f8 <USB_EPStartXfer+0xca6>
 80083ac:	463b      	mov	r3, r7
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d120      	bne.n	80083f8 <USB_EPStartXfer+0xca6>
 80083b6:	1d3b      	adds	r3, r7, #4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083ce:	4413      	add	r3, r2
 80083d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083d4:	463b      	mov	r3, r7
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	00da      	lsls	r2, r3, #3
 80083dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083e0:	4413      	add	r3, r2
 80083e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083ea:	463b      	mov	r3, r7
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083f6:	801a      	strh	r2, [r3, #0]
 80083f8:	1d3b      	adds	r3, r7, #4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008400:	463b      	mov	r3, r7
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d175      	bne.n	80084f6 <USB_EPStartXfer+0xda4>
 800840a:	1d3b      	adds	r3, r7, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008412:	1d3b      	adds	r3, r7, #4
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800841a:	b29b      	uxth	r3, r3
 800841c:	461a      	mov	r2, r3
 800841e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008422:	4413      	add	r3, r2
 8008424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008428:	463b      	mov	r3, r7
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	00da      	lsls	r2, r3, #3
 8008430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008434:	4413      	add	r3, r2
 8008436:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800843a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800843e:	463b      	mov	r3, r7
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b3e      	cmp	r3, #62	; 0x3e
 8008446:	d91f      	bls.n	8008488 <USB_EPStartXfer+0xd36>
 8008448:	463b      	mov	r3, r7
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008454:	463b      	mov	r3, r7
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 031f 	and.w	r3, r3, #31
 800845e:	2b00      	cmp	r3, #0
 8008460:	d104      	bne.n	800846c <USB_EPStartXfer+0xd1a>
 8008462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008466:	3b01      	subs	r3, #1
 8008468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800846c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008470:	b29b      	uxth	r3, r3
 8008472:	029b      	lsls	r3, r3, #10
 8008474:	b29b      	uxth	r3, r3
 8008476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800847e:	b29a      	uxth	r2, r3
 8008480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	e058      	b.n	800853a <USB_EPStartXfer+0xde8>
 8008488:	463b      	mov	r3, r7
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d116      	bne.n	80084c0 <USB_EPStartXfer+0xd6e>
 8008492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800849e:	b29a      	uxth	r2, r3
 80084a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084a4:	801a      	strh	r2, [r3, #0]
 80084a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084bc:	801a      	strh	r2, [r3, #0]
 80084be:	e03c      	b.n	800853a <USB_EPStartXfer+0xde8>
 80084c0:	463b      	mov	r3, r7
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084cc:	463b      	mov	r3, r7
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <USB_EPStartXfer+0xd92>
 80084da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084de:	3301      	adds	r3, #1
 80084e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	029b      	lsls	r3, r3, #10
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	e021      	b.n	800853a <USB_EPStartXfer+0xde8>
 80084f6:	463b      	mov	r3, r7
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d11c      	bne.n	800853a <USB_EPStartXfer+0xde8>
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008508:	b29b      	uxth	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008510:	4413      	add	r3, r2
 8008512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008516:	463b      	mov	r3, r7
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	00da      	lsls	r2, r3, #3
 800851e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008522:	4413      	add	r3, r2
 8008524:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008528:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800852c:	463b      	mov	r3, r7
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	b29a      	uxth	r2, r3
 8008534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008538:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800853a:	463b      	mov	r3, r7
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 81a4 	beq.w	800888e <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008546:	1d3b      	adds	r3, r7, #4
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	463b      	mov	r3, r7
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800855a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800855e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <USB_EPStartXfer+0xe20>
 8008566:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800856a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10d      	bne.n	800858e <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008572:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800857a:	2b00      	cmp	r3, #0
 800857c:	f040 8187 	bne.w	800888e <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008580:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	f040 8180 	bne.w	800888e <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800858e:	1d3b      	adds	r3, r7, #4
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	463b      	mov	r3, r7
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80085ac:	1d3b      	adds	r3, r7, #4
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	463b      	mov	r3, r7
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	441a      	add	r2, r3
 80085ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]
 80085d2:	e15c      	b.n	800888e <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80085d4:	463b      	mov	r3, r7
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	78db      	ldrb	r3, [r3, #3]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	f040 8155 	bne.w	800888a <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80085e0:	463b      	mov	r3, r7
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699a      	ldr	r2, [r3, #24]
 80085e6:	463b      	mov	r3, r7
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d90e      	bls.n	800860e <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 80085f0:	463b      	mov	r3, r7
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80085fa:	463b      	mov	r3, r7
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008604:	1ad2      	subs	r2, r2, r3
 8008606:	463b      	mov	r3, r7
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	619a      	str	r2, [r3, #24]
 800860c:	e008      	b.n	8008620 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800860e:	463b      	mov	r3, r7
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008618:	463b      	mov	r3, r7
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2200      	movs	r2, #0
 800861e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008620:	463b      	mov	r3, r7
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d16f      	bne.n	800870a <USB_EPStartXfer+0xfb8>
 800862a:	1d3b      	adds	r3, r7, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008632:	1d3b      	adds	r3, r7, #4
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863a:	b29b      	uxth	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008642:	4413      	add	r3, r2
 8008644:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	00da      	lsls	r2, r3, #3
 8008650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008654:	4413      	add	r3, r2
 8008656:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800865a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800865e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008662:	2b3e      	cmp	r3, #62	; 0x3e
 8008664:	d91d      	bls.n	80086a2 <USB_EPStartXfer+0xf50>
 8008666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008674:	f003 031f 	and.w	r3, r3, #31
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <USB_EPStartXfer+0xf34>
 800867c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008680:	3b01      	subs	r3, #1
 8008682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800868a:	b29b      	uxth	r3, r3
 800868c:	029b      	lsls	r3, r3, #10
 800868e:	b29b      	uxth	r3, r3
 8008690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008698:	b29a      	uxth	r2, r3
 800869a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	e058      	b.n	8008754 <USB_EPStartXfer+0x1002>
 80086a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d116      	bne.n	80086d8 <USB_EPStartXfer+0xf86>
 80086aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e03d      	b.n	8008754 <USB_EPStartXfer+0x1002>
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <USB_EPStartXfer+0xfa6>
 80086ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f2:	3301      	adds	r3, #1
 80086f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	029b      	lsls	r3, r3, #10
 8008700:	b29a      	uxth	r2, r3
 8008702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008706:	801a      	strh	r2, [r3, #0]
 8008708:	e024      	b.n	8008754 <USB_EPStartXfer+0x1002>
 800870a:	463b      	mov	r3, r7
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	785b      	ldrb	r3, [r3, #1]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d11f      	bne.n	8008754 <USB_EPStartXfer+0x1002>
 8008714:	1d3b      	adds	r3, r7, #4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800871c:	1d3b      	adds	r3, r7, #4
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008724:	b29b      	uxth	r3, r3
 8008726:	461a      	mov	r2, r3
 8008728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800872c:	4413      	add	r3, r2
 800872e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008732:	463b      	mov	r3, r7
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	00da      	lsls	r2, r3, #3
 800873a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800873e:	4413      	add	r3, r2
 8008740:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800874c:	b29a      	uxth	r2, r3
 800874e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800875c:	463b      	mov	r3, r7
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d16f      	bne.n	8008846 <USB_EPStartXfer+0x10f4>
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800876e:	1d3b      	adds	r3, r7, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008776:	b29b      	uxth	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800877e:	4413      	add	r3, r2
 8008780:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008784:	463b      	mov	r3, r7
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	00da      	lsls	r2, r3, #3
 800878c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008790:	4413      	add	r3, r2
 8008792:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800879a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800879e:	2b3e      	cmp	r3, #62	; 0x3e
 80087a0:	d91d      	bls.n	80087de <USB_EPStartXfer+0x108c>
 80087a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a6:	095b      	lsrs	r3, r3, #5
 80087a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d104      	bne.n	80087c2 <USB_EPStartXfer+0x1070>
 80087b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087bc:	3b01      	subs	r3, #1
 80087be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	029b      	lsls	r3, r3, #10
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	e057      	b.n	800888e <USB_EPStartXfer+0x113c>
 80087de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d116      	bne.n	8008814 <USB_EPStartXfer+0x10c2>
 80087e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800880a:	b29a      	uxth	r2, r3
 800880c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008810:	801a      	strh	r2, [r3, #0]
 8008812:	e03c      	b.n	800888e <USB_EPStartXfer+0x113c>
 8008814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008818:	085b      	lsrs	r3, r3, #1
 800881a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <USB_EPStartXfer+0x10e2>
 800882a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800882e:	3301      	adds	r3, #1
 8008830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008838:	b29b      	uxth	r3, r3
 800883a:	029b      	lsls	r3, r3, #10
 800883c:	b29a      	uxth	r2, r3
 800883e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	e023      	b.n	800888e <USB_EPStartXfer+0x113c>
 8008846:	463b      	mov	r3, r7
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d11e      	bne.n	800888e <USB_EPStartXfer+0x113c>
 8008850:	1d3b      	adds	r3, r7, #4
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008858:	b29b      	uxth	r3, r3
 800885a:	461a      	mov	r2, r3
 800885c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008860:	4413      	add	r3, r2
 8008862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008866:	463b      	mov	r3, r7
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	00da      	lsls	r2, r3, #3
 800886e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008872:	4413      	add	r3, r2
 8008874:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008878:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008880:	b29a      	uxth	r2, r3
 8008882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008886:	801a      	strh	r2, [r3, #0]
 8008888:	e001      	b.n	800888e <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e02e      	b.n	80088ec <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800888e:	1d3b      	adds	r3, r7, #4
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	463b      	mov	r3, r7
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088c4:	1d3b      	adds	r3, r7, #4
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	463b      	mov	r3, r7
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	441a      	add	r2, r3
 80088d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	785b      	ldrb	r3, [r3, #1]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d020      	beq.n	800894a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	b29b      	uxth	r3, r3
 8008916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800891e:	81bb      	strh	r3, [r7, #12]
 8008920:	89bb      	ldrh	r3, [r7, #12]
 8008922:	f083 0310 	eor.w	r3, r3, #16
 8008926:	81bb      	strh	r3, [r7, #12]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	441a      	add	r2, r3
 8008932:	89bb      	ldrh	r3, [r7, #12]
 8008934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800893c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008944:	b29b      	uxth	r3, r3
 8008946:	8013      	strh	r3, [r2, #0]
 8008948:	e01f      	b.n	800898a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800895c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008960:	81fb      	strh	r3, [r7, #14]
 8008962:	89fb      	ldrh	r3, [r7, #14]
 8008964:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008968:	81fb      	strh	r3, [r7, #14]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	441a      	add	r2, r3
 8008974:	89fb      	ldrh	r3, [r7, #14]
 8008976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800897a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008986:	b29b      	uxth	r3, r3
 8008988:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	7b1b      	ldrb	r3, [r3, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 809d 	bne.w	8008ae6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d04c      	beq.n	8008a4e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	823b      	strh	r3, [r7, #16]
 80089c2:	8a3b      	ldrh	r3, [r7, #16]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01b      	beq.n	8008a04 <USB_EPClearStall+0x6c>
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e2:	81fb      	strh	r3, [r7, #14]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	441a      	add	r2, r3
 80089ee:	89fb      	ldrh	r3, [r7, #14]
 80089f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	78db      	ldrb	r3, [r3, #3]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d06c      	beq.n	8008ae6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a22:	81bb      	strh	r3, [r7, #12]
 8008a24:	89bb      	ldrh	r3, [r7, #12]
 8008a26:	f083 0320 	eor.w	r3, r3, #32
 8008a2a:	81bb      	strh	r3, [r7, #12]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	441a      	add	r2, r3
 8008a36:	89bb      	ldrh	r3, [r7, #12]
 8008a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	8013      	strh	r3, [r2, #0]
 8008a4c:	e04b      	b.n	8008ae6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	82fb      	strh	r3, [r7, #22]
 8008a5c:	8afb      	ldrh	r3, [r7, #22]
 8008a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01b      	beq.n	8008a9e <USB_EPClearStall+0x106>
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7c:	82bb      	strh	r3, [r7, #20]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	441a      	add	r2, r3
 8008a88:	8abb      	ldrh	r3, [r7, #20]
 8008a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab4:	827b      	strh	r3, [r7, #18]
 8008ab6:	8a7b      	ldrh	r3, [r7, #18]
 8008ab8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008abc:	827b      	strh	r3, [r7, #18]
 8008abe:	8a7b      	ldrh	r3, [r7, #18]
 8008ac0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ac4:	827b      	strh	r3, [r7, #18]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	441a      	add	r2, r3
 8008ad0:	8a7b      	ldrh	r3, [r7, #18]
 8008ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d103      	bne.n	8008b0e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2280      	movs	r2, #128	; 0x80
 8008b0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b08d      	sub	sp, #52	; 0x34
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4611      	mov	r1, r2
 8008b76:	461a      	mov	r2, r3
 8008b78:	460b      	mov	r3, r1
 8008b7a:	80fb      	strh	r3, [r7, #6]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b80:	88bb      	ldrh	r3, [r7, #4]
 8008b82:	3301      	adds	r3, #1
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b90:	88fa      	ldrh	r2, [r7, #6]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba0:	e01b      	b.n	8008bda <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	3301      	adds	r3, #1
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	021b      	lsls	r3, r3, #8
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	3302      	adds	r3, #2
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e0      	bne.n	8008ba2 <USB_WritePMA+0x38>
  }
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	3734      	adds	r7, #52	; 0x34
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b08b      	sub	sp, #44	; 0x2c
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	80fb      	strh	r3, [r7, #6]
 8008c00:	4613      	mov	r3, r2
 8008c02:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c04:	88bb      	ldrh	r3, [r7, #4]
 8008c06:	085b      	lsrs	r3, r3, #1
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c14:	88fa      	ldrh	r2, [r7, #6]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c1e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
 8008c24:	e018      	b.n	8008c58 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	3302      	adds	r3, #2
 8008c32:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	0a1b      	lsrs	r3, r3, #8
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	3b01      	subs	r3, #1
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1e3      	bne.n	8008c26 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c5e:	88bb      	ldrh	r3, [r7, #4]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	701a      	strb	r2, [r3, #0]
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	372c      	adds	r7, #44	; 0x2c
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008c92:	2010      	movs	r0, #16
 8008c94:	f001 fef0 	bl	800aa78 <USBD_static_malloc>
 8008c98:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d105      	bne.n	8008cac <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e01b      	b.n	8008ce4 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7c1b      	ldrb	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d103      	bne.n	8008cc4 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2207      	movs	r2, #7
 8008cc0:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008cc2:	e002      	b.n	8008cca <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	220a      	movs	r2, #10
 8008cc8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008cca:	2304      	movs	r3, #4
 8008ccc:	2203      	movs	r2, #3
 8008cce:	2181      	movs	r1, #129	; 0x81
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 fd8a 	bl	800a7ea <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008cf8:	2181      	movs	r1, #129	; 0x81
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fd9b 	bl	800a836 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 feb9 	bl	800aa94 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d44:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e0e8      	b.n	8008f2a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d046      	beq.n	8008df2 <USBD_HID_Setup+0xbe>
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	f040 80d8 	bne.w	8008f1a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	3b02      	subs	r3, #2
 8008d70:	2b09      	cmp	r3, #9
 8008d72:	d836      	bhi.n	8008de2 <USBD_HID_Setup+0xae>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <USBD_HID_Setup+0x48>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008dd3 	.word	0x08008dd3
 8008d80:	08008db3 	.word	0x08008db3
 8008d84:	08008de3 	.word	0x08008de3
 8008d88:	08008de3 	.word	0x08008de3
 8008d8c:	08008de3 	.word	0x08008de3
 8008d90:	08008de3 	.word	0x08008de3
 8008d94:	08008de3 	.word	0x08008de3
 8008d98:	08008de3 	.word	0x08008de3
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008da5 	.word	0x08008da5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	885b      	ldrh	r3, [r3, #2]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	461a      	mov	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	601a      	str	r2, [r3, #0]
          break;
 8008db0:	e01e      	b.n	8008df0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2201      	movs	r2, #1
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 f9d8 	bl	800a16e <USBD_CtlSendData>
          break;
 8008dbe:	e017      	b.n	8008df0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	885b      	ldrh	r3, [r3, #2]
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	461a      	mov	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	605a      	str	r2, [r3, #4]
          break;
 8008dd0:	e00e      	b.n	8008df0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 f9c7 	bl	800a16e <USBD_CtlSendData>
          break;
 8008de0:	e006      	b.n	8008df0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f001 f951 	bl	800a08c <USBD_CtlError>
          ret = USBD_FAIL;
 8008dea:	2303      	movs	r3, #3
 8008dec:	75fb      	strb	r3, [r7, #23]
          break;
 8008dee:	bf00      	nop
      }
      break;
 8008df0:	e09a      	b.n	8008f28 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	785b      	ldrb	r3, [r3, #1]
 8008df6:	2b0b      	cmp	r3, #11
 8008df8:	f200 8086 	bhi.w	8008f08 <USBD_HID_Setup+0x1d4>
 8008dfc:	a201      	add	r2, pc, #4	; (adr r2, 8008e04 <USBD_HID_Setup+0xd0>)
 8008dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e02:	bf00      	nop
 8008e04:	08008e35 	.word	0x08008e35
 8008e08:	08008f17 	.word	0x08008f17
 8008e0c:	08008f09 	.word	0x08008f09
 8008e10:	08008f09 	.word	0x08008f09
 8008e14:	08008f09 	.word	0x08008f09
 8008e18:	08008f09 	.word	0x08008f09
 8008e1c:	08008e5f 	.word	0x08008e5f
 8008e20:	08008f09 	.word	0x08008f09
 8008e24:	08008f09 	.word	0x08008f09
 8008e28:	08008f09 	.word	0x08008f09
 8008e2c:	08008eb7 	.word	0x08008eb7
 8008e30:	08008ee1 	.word	0x08008ee1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d107      	bne.n	8008e50 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e40:	f107 030a 	add.w	r3, r7, #10
 8008e44:	2202      	movs	r2, #2
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 f990 	bl	800a16e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e4e:	e063      	b.n	8008f18 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 f91a 	bl	800a08c <USBD_CtlError>
            ret = USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e5c:	e05c      	b.n	8008f18 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	0a1b      	lsrs	r3, r3, #8
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b22      	cmp	r3, #34	; 0x22
 8008e68:	d108      	bne.n	8008e7c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	2b4a      	cmp	r3, #74	; 0x4a
 8008e70:	bf28      	it	cs
 8008e72:	234a      	movcs	r3, #74	; 0x4a
 8008e74:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008e76:	4b2f      	ldr	r3, [pc, #188]	; (8008f34 <USBD_HID_Setup+0x200>)
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	e015      	b.n	8008ea8 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	885b      	ldrh	r3, [r3, #2]
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	2b21      	cmp	r3, #33	; 0x21
 8008e86:	d108      	bne.n	8008e9a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008e88:	4b2b      	ldr	r3, [pc, #172]	; (8008f38 <USBD_HID_Setup+0x204>)
 8008e8a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	88db      	ldrh	r3, [r3, #6]
 8008e90:	2b09      	cmp	r3, #9
 8008e92:	bf28      	it	cs
 8008e94:	2309      	movcs	r3, #9
 8008e96:	82bb      	strh	r3, [r7, #20]
 8008e98:	e006      	b.n	8008ea8 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 f8f5 	bl	800a08c <USBD_CtlError>
            ret = USBD_FAIL;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	75fb      	strb	r3, [r7, #23]
            break;
 8008ea6:	e037      	b.n	8008f18 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ea8:	8abb      	ldrh	r3, [r7, #20]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6939      	ldr	r1, [r7, #16]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 f95d 	bl	800a16e <USBD_CtlSendData>
          break;
 8008eb4:	e030      	b.n	8008f18 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d107      	bne.n	8008ed2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f001 f94f 	bl	800a16e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ed0:	e022      	b.n	8008f18 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f8d9 	bl	800a08c <USBD_CtlError>
            ret = USBD_FAIL;
 8008eda:	2303      	movs	r3, #3
 8008edc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ede:	e01b      	b.n	8008f18 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d106      	bne.n	8008efa <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	885b      	ldrh	r3, [r3, #2]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ef8:	e00e      	b.n	8008f18 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 f8c5 	bl	800a08c <USBD_CtlError>
            ret = USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	75fb      	strb	r3, [r7, #23]
          break;
 8008f06:	e007      	b.n	8008f18 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 f8be 	bl	800a08c <USBD_CtlError>
          ret = USBD_FAIL;
 8008f10:	2303      	movs	r3, #3
 8008f12:	75fb      	strb	r3, [r7, #23]
          break;
 8008f14:	e000      	b.n	8008f18 <USBD_HID_Setup+0x1e4>
          break;
 8008f16:	bf00      	nop
      }
      break;
 8008f18:	e006      	b.n	8008f28 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f8b5 	bl	800a08c <USBD_CtlError>
      ret = USBD_FAIL;
 8008f22:	2303      	movs	r3, #3
 8008f24:	75fb      	strb	r3, [r7, #23]
      break;
 8008f26:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200000e4 	.word	0x200000e4
 8008f38:	200000cc 	.word	0x200000cc

08008f3c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f50:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e013      	b.n	8008f84 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d10c      	bne.n	8008f82 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	7b1b      	ldrb	r3, [r3, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d108      	bne.n	8008f82 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2201      	movs	r2, #1
 8008f74:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	2181      	movs	r1, #129	; 0x81
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f001 fd03 	bl	800a988 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2222      	movs	r2, #34	; 0x22
 8008f98:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008f9a:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	20000060 	.word	0x20000060

08008fac <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2222      	movs	r2, #34	; 0x22
 8008fb8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008fba:	4b03      	ldr	r3, [pc, #12]	; (8008fc8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	20000084 	.word	0x20000084

08008fcc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2222      	movs	r2, #34	; 0x22
 8008fd8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008fda:	4b03      	ldr	r3, [pc, #12]	; (8008fe8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	200000a8 	.word	0x200000a8

08008fec <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ffe:	2200      	movs	r2, #0
 8009000:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	220a      	movs	r2, #10
 800901c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800901e:	4b03      	ldr	r3, [pc, #12]	; (800902c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	200000d8 	.word	0x200000d8

08009030 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009044:	2303      	movs	r3, #3
 8009046:	e01f      	b.n	8009088 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	79fa      	ldrb	r2, [r7, #7]
 800907a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f001 fb49 	bl	800a714 <USBD_LL_Init>
 8009082:	4603      	mov	r3, r0
 8009084:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e016      	b.n	80090d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	f107 020e 	add.w	r2, r7, #14
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	4602      	mov	r2, r0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 fb64 	bl	800a7b4 <USBD_LL_Start>
 80090ec:	4603      	mov	r3, r0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009118:	2303      	movs	r3, #3
 800911a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	4611      	mov	r1, r2
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	4798      	blx	r3
 8009136:	4603      	mov	r3, r0
 8009138:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d007      	beq.n	800916a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	4611      	mov	r1, r2
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	4798      	blx	r3
  }

  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 ff46 	bl	800a018 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091a8:	f003 031f 	and.w	r3, r3, #31
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d01a      	beq.n	80091e6 <USBD_LL_SetupStage+0x72>
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d822      	bhi.n	80091fa <USBD_LL_SetupStage+0x86>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <USBD_LL_SetupStage+0x4a>
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d00a      	beq.n	80091d2 <USBD_LL_SetupStage+0x5e>
 80091bc:	e01d      	b.n	80091fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f9ee 	bl	80095a8 <USBD_StdDevReq>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]
      break;
 80091d0:	e020      	b.n	8009214 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa52 	bl	8009684 <USBD_StdItfReq>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
      break;
 80091e4:	e016      	b.n	8009214 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa91 	bl	8009716 <USBD_StdEPReq>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
      break;
 80091f8:	e00c      	b.n	8009214 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009200:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009204:	b2db      	uxtb	r3, r3
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fb33 	bl	800a874 <USBD_LL_StallEP>
 800920e:	4603      	mov	r3, r0
 8009210:	73fb      	strb	r3, [r7, #15]
      break;
 8009212:	bf00      	nop
  }

  return ret;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b086      	sub	sp, #24
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	460b      	mov	r3, r1
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d138      	bne.n	80092a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009238:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009240:	2b03      	cmp	r3, #3
 8009242:	d14a      	bne.n	80092da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	429a      	cmp	r2, r3
 800924e:	d913      	bls.n	8009278 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	1ad2      	subs	r2, r2, r3
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	4293      	cmp	r3, r2
 8009268:	bf28      	it	cs
 800926a:	4613      	movcs	r3, r2
 800926c:	461a      	mov	r2, r3
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 ffa8 	bl	800a1c6 <USBD_CtlContinueRx>
 8009276:	e030      	b.n	80092da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b03      	cmp	r3, #3
 8009282:	d10b      	bne.n	800929c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 ffa3 	bl	800a1e8 <USBD_CtlSendStatus>
 80092a2:	e01a      	b.n	80092da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	d114      	bne.n	80092da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00e      	beq.n	80092da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	7afa      	ldrb	r2, [r7, #11]
 80092c6:	4611      	mov	r1, r2
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	4798      	blx	r3
 80092cc:	4603      	mov	r3, r0
 80092ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	e000      	b.n	80092dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	460b      	mov	r3, r1
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092f2:	7afb      	ldrb	r3, [r7, #11]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d16b      	bne.n	80093d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3314      	adds	r3, #20
 80092fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009304:	2b02      	cmp	r3, #2
 8009306:	d156      	bne.n	80093b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	429a      	cmp	r2, r3
 8009312:	d914      	bls.n	800933e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	1ad2      	subs	r2, r2, r3
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	461a      	mov	r2, r3
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 ff3a 	bl	800a1a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009330:	2300      	movs	r3, #0
 8009332:	2200      	movs	r2, #0
 8009334:	2100      	movs	r1, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f001 fb47 	bl	800a9ca <USBD_LL_PrepareReceive>
 800933c:	e03b      	b.n	80093b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	429a      	cmp	r2, r3
 8009348:	d11c      	bne.n	8009384 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009352:	429a      	cmp	r2, r3
 8009354:	d316      	bcc.n	8009384 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009360:	429a      	cmp	r2, r3
 8009362:	d20f      	bcs.n	8009384 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009364:	2200      	movs	r2, #0
 8009366:	2100      	movs	r1, #0
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 ff1b 	bl	800a1a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009376:	2300      	movs	r3, #0
 8009378:	2200      	movs	r2, #0
 800937a:	2100      	movs	r1, #0
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f001 fb24 	bl	800a9ca <USBD_LL_PrepareReceive>
 8009382:	e018      	b.n	80093b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b03      	cmp	r3, #3
 800938e:	d10b      	bne.n	80093a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093a8:	2180      	movs	r1, #128	; 0x80
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f001 fa62 	bl	800a874 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 ff2c 	bl	800a20e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d122      	bne.n	8009406 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff fe98 	bl	80090f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80093ce:	e01a      	b.n	8009406 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d114      	bne.n	8009406 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00e      	beq.n	8009406 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	7afa      	ldrb	r2, [r7, #11]
 80093f2:	4611      	mov	r1, r2
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	4798      	blx	r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	e000      	b.n	8009408 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	e02f      	b.n	80094a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00f      	beq.n	800946e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d009      	beq.n	800946e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6852      	ldr	r2, [r2, #4]
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	4611      	mov	r1, r2
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800946e:	2340      	movs	r3, #64	; 0x40
 8009470:	2200      	movs	r2, #0
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 f9b8 	bl	800a7ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2240      	movs	r2, #64	; 0x40
 8009486:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800948a:	2340      	movs	r3, #64	; 0x40
 800948c:	2200      	movs	r2, #0
 800948e:	2180      	movs	r1, #128	; 0x80
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 f9aa 	bl	800a7ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2240      	movs	r2, #64	; 0x40
 80094a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2204      	movs	r2, #4
 80094e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b04      	cmp	r3, #4
 800950a:	d106      	bne.n	800951a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	e012      	b.n	8009564 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d10b      	bne.n	8009562 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	3301      	adds	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800958a:	8a3b      	ldrh	r3, [r7, #16]
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	b21a      	sxth	r2, r3
 8009590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009594:	4313      	orrs	r3, r2
 8009596:	b21b      	sxth	r3, r3
 8009598:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800959a:	89fb      	ldrh	r3, [r7, #14]
}
 800959c:	4618      	mov	r0, r3
 800959e:	371c      	adds	r7, #28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095be:	2b40      	cmp	r3, #64	; 0x40
 80095c0:	d005      	beq.n	80095ce <USBD_StdDevReq+0x26>
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d853      	bhi.n	800966e <USBD_StdDevReq+0xc6>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00b      	beq.n	80095e2 <USBD_StdDevReq+0x3a>
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d14f      	bne.n	800966e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	4798      	blx	r3
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]
      break;
 80095e0:	e04a      	b.n	8009678 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	785b      	ldrb	r3, [r3, #1]
 80095e6:	2b09      	cmp	r3, #9
 80095e8:	d83b      	bhi.n	8009662 <USBD_StdDevReq+0xba>
 80095ea:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <USBD_StdDevReq+0x48>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009645 	.word	0x08009645
 80095f4:	08009659 	.word	0x08009659
 80095f8:	08009663 	.word	0x08009663
 80095fc:	0800964f 	.word	0x0800964f
 8009600:	08009663 	.word	0x08009663
 8009604:	08009623 	.word	0x08009623
 8009608:	08009619 	.word	0x08009619
 800960c:	08009663 	.word	0x08009663
 8009610:	0800963b 	.word	0x0800963b
 8009614:	0800962d 	.word	0x0800962d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f9de 	bl	80099dc <USBD_GetDescriptor>
          break;
 8009620:	e024      	b.n	800966c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fb6d 	bl	8009d04 <USBD_SetAddress>
          break;
 800962a:	e01f      	b.n	800966c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fbac 	bl	8009d8c <USBD_SetConfig>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]
          break;
 8009638:	e018      	b.n	800966c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fc4b 	bl	8009ed8 <USBD_GetConfig>
          break;
 8009642:	e013      	b.n	800966c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fc7c 	bl	8009f44 <USBD_GetStatus>
          break;
 800964c:	e00e      	b.n	800966c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fcab 	bl	8009fac <USBD_SetFeature>
          break;
 8009656:	e009      	b.n	800966c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fcba 	bl	8009fd4 <USBD_ClrFeature>
          break;
 8009660:	e004      	b.n	800966c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fd11 	bl	800a08c <USBD_CtlError>
          break;
 800966a:	bf00      	nop
      }
      break;
 800966c:	e004      	b.n	8009678 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fd0b 	bl	800a08c <USBD_CtlError>
      break;
 8009676:	bf00      	nop
  }

  return ret;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop

08009684 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800969a:	2b40      	cmp	r3, #64	; 0x40
 800969c:	d005      	beq.n	80096aa <USBD_StdItfReq+0x26>
 800969e:	2b40      	cmp	r3, #64	; 0x40
 80096a0:	d82f      	bhi.n	8009702 <USBD_StdItfReq+0x7e>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <USBD_StdItfReq+0x26>
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d12b      	bne.n	8009702 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	3b01      	subs	r3, #1
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d81d      	bhi.n	80096f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	889b      	ldrh	r3, [r3, #4]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d813      	bhi.n	80096ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	88db      	ldrh	r3, [r3, #6]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d110      	bne.n	80096fe <USBD_StdItfReq+0x7a>
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10d      	bne.n	80096fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fd80 	bl	800a1e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80096e8:	e009      	b.n	80096fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fccd 	bl	800a08c <USBD_CtlError>
          break;
 80096f2:	e004      	b.n	80096fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fcc8 	bl	800a08c <USBD_CtlError>
          break;
 80096fc:	e000      	b.n	8009700 <USBD_StdItfReq+0x7c>
          break;
 80096fe:	bf00      	nop
      }
      break;
 8009700:	e004      	b.n	800970c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fcc1 	bl	800a08c <USBD_CtlError>
      break;
 800970a:	bf00      	nop
  }

  return ret;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	889b      	ldrh	r3, [r3, #4]
 8009728:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d007      	beq.n	8009746 <USBD_StdEPReq+0x30>
 8009736:	2b40      	cmp	r3, #64	; 0x40
 8009738:	f200 8145 	bhi.w	80099c6 <USBD_StdEPReq+0x2b0>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00c      	beq.n	800975a <USBD_StdEPReq+0x44>
 8009740:	2b20      	cmp	r3, #32
 8009742:	f040 8140 	bne.w	80099c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	4798      	blx	r3
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
      break;
 8009758:	e13a      	b.n	80099d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	2b03      	cmp	r3, #3
 8009760:	d007      	beq.n	8009772 <USBD_StdEPReq+0x5c>
 8009762:	2b03      	cmp	r3, #3
 8009764:	f300 8129 	bgt.w	80099ba <USBD_StdEPReq+0x2a4>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d07f      	beq.n	800986c <USBD_StdEPReq+0x156>
 800976c:	2b01      	cmp	r3, #1
 800976e:	d03c      	beq.n	80097ea <USBD_StdEPReq+0xd4>
 8009770:	e123      	b.n	80099ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d002      	beq.n	8009784 <USBD_StdEPReq+0x6e>
 800977e:	2b03      	cmp	r3, #3
 8009780:	d016      	beq.n	80097b0 <USBD_StdEPReq+0x9a>
 8009782:	e02c      	b.n	80097de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00d      	beq.n	80097a6 <USBD_StdEPReq+0x90>
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	2b80      	cmp	r3, #128	; 0x80
 800978e:	d00a      	beq.n	80097a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009790:	7bbb      	ldrb	r3, [r7, #14]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 f86d 	bl	800a874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800979a:	2180      	movs	r1, #128	; 0x80
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f001 f869 	bl	800a874 <USBD_LL_StallEP>
 80097a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097a4:	e020      	b.n	80097e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fc6f 	bl	800a08c <USBD_CtlError>
              break;
 80097ae:	e01b      	b.n	80097e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	885b      	ldrh	r3, [r3, #2]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10e      	bne.n	80097d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00b      	beq.n	80097d6 <USBD_StdEPReq+0xc0>
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	2b80      	cmp	r3, #128	; 0x80
 80097c2:	d008      	beq.n	80097d6 <USBD_StdEPReq+0xc0>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	88db      	ldrh	r3, [r3, #6]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 f84f 	bl	800a874 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fd06 	bl	800a1e8 <USBD_CtlSendStatus>

              break;
 80097dc:	e004      	b.n	80097e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fc53 	bl	800a08c <USBD_CtlError>
              break;
 80097e6:	bf00      	nop
          }
          break;
 80097e8:	e0ec      	b.n	80099c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d002      	beq.n	80097fc <USBD_StdEPReq+0xe6>
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d016      	beq.n	8009828 <USBD_StdEPReq+0x112>
 80097fa:	e030      	b.n	800985e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00d      	beq.n	800981e <USBD_StdEPReq+0x108>
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	2b80      	cmp	r3, #128	; 0x80
 8009806:	d00a      	beq.n	800981e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 f831 	bl	800a874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009812:	2180      	movs	r1, #128	; 0x80
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 f82d 	bl	800a874 <USBD_LL_StallEP>
 800981a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800981c:	e025      	b.n	800986a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fc33 	bl	800a08c <USBD_CtlError>
              break;
 8009826:	e020      	b.n	800986a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	885b      	ldrh	r3, [r3, #2]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d11b      	bne.n	8009868 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009830:	7bbb      	ldrb	r3, [r7, #14]
 8009832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 f837 	bl	800a8b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fccf 	bl	800a1e8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	4798      	blx	r3
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800985c:	e004      	b.n	8009868 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fc13 	bl	800a08c <USBD_CtlError>
              break;
 8009866:	e000      	b.n	800986a <USBD_StdEPReq+0x154>
              break;
 8009868:	bf00      	nop
          }
          break;
 800986a:	e0ab      	b.n	80099c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	d002      	beq.n	800987e <USBD_StdEPReq+0x168>
 8009878:	2b03      	cmp	r3, #3
 800987a:	d032      	beq.n	80098e2 <USBD_StdEPReq+0x1cc>
 800987c:	e097      	b.n	80099ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800987e:	7bbb      	ldrb	r3, [r7, #14]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d007      	beq.n	8009894 <USBD_StdEPReq+0x17e>
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	2b80      	cmp	r3, #128	; 0x80
 8009888:	d004      	beq.n	8009894 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fbfd 	bl	800a08c <USBD_CtlError>
                break;
 8009892:	e091      	b.n	80099b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009898:	2b00      	cmp	r3, #0
 800989a:	da0b      	bge.n	80098b4 <USBD_StdEPReq+0x19e>
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	3310      	adds	r3, #16
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4413      	add	r3, r2
 80098b0:	3304      	adds	r3, #4
 80098b2:	e00b      	b.n	80098cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	4413      	add	r3, r2
 80098ca:	3304      	adds	r3, #4
 80098cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2202      	movs	r2, #2
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fc47 	bl	800a16e <USBD_CtlSendData>
              break;
 80098e0:	e06a      	b.n	80099b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da11      	bge.n	800990e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	f003 020f 	and.w	r2, r3, #15
 80098f0:	6879      	ldr	r1, [r7, #4]
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	440b      	add	r3, r1
 80098fc:	3324      	adds	r3, #36	; 0x24
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d117      	bne.n	8009934 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fbc0 	bl	800a08c <USBD_CtlError>
                  break;
 800990c:	e054      	b.n	80099b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	f003 020f 	and.w	r2, r3, #15
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d104      	bne.n	8009934 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fbad 	bl	800a08c <USBD_CtlError>
                  break;
 8009932:	e041      	b.n	80099b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009938:	2b00      	cmp	r3, #0
 800993a:	da0b      	bge.n	8009954 <USBD_StdEPReq+0x23e>
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	3310      	adds	r3, #16
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	4413      	add	r3, r2
 8009950:	3304      	adds	r3, #4
 8009952:	e00b      	b.n	800996c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	3304      	adds	r3, #4
 800996c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <USBD_StdEPReq+0x264>
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	2b80      	cmp	r3, #128	; 0x80
 8009978:	d103      	bne.n	8009982 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	e00e      	b.n	80099a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009982:	7bbb      	ldrb	r3, [r7, #14]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 ffb2 	bl	800a8f0 <USBD_LL_IsStallEP>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2201      	movs	r2, #1
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	e002      	b.n	80099a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2202      	movs	r2, #2
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fbe1 	bl	800a16e <USBD_CtlSendData>
              break;
 80099ac:	e004      	b.n	80099b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fb6b 	bl	800a08c <USBD_CtlError>
              break;
 80099b6:	bf00      	nop
          }
          break;
 80099b8:	e004      	b.n	80099c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fb65 	bl	800a08c <USBD_CtlError>
          break;
 80099c2:	bf00      	nop
      }
      break;
 80099c4:	e004      	b.n	80099d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fb5f 	bl	800a08c <USBD_CtlError>
      break;
 80099ce:	bf00      	nop
  }

  return ret;
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	885b      	ldrh	r3, [r3, #2]
 80099f6:	0a1b      	lsrs	r3, r3, #8
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	3b01      	subs	r3, #1
 80099fc:	2b0e      	cmp	r3, #14
 80099fe:	f200 8152 	bhi.w	8009ca6 <USBD_GetDescriptor+0x2ca>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <USBD_GetDescriptor+0x2c>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a79 	.word	0x08009a79
 8009a0c:	08009a91 	.word	0x08009a91
 8009a10:	08009ad1 	.word	0x08009ad1
 8009a14:	08009ca7 	.word	0x08009ca7
 8009a18:	08009ca7 	.word	0x08009ca7
 8009a1c:	08009c47 	.word	0x08009c47
 8009a20:	08009c73 	.word	0x08009c73
 8009a24:	08009ca7 	.word	0x08009ca7
 8009a28:	08009ca7 	.word	0x08009ca7
 8009a2c:	08009ca7 	.word	0x08009ca7
 8009a30:	08009ca7 	.word	0x08009ca7
 8009a34:	08009ca7 	.word	0x08009ca7
 8009a38:	08009ca7 	.word	0x08009ca7
 8009a3c:	08009ca7 	.word	0x08009ca7
 8009a40:	08009a45 	.word	0x08009a45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00b      	beq.n	8009a68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	7c12      	ldrb	r2, [r2, #16]
 8009a5c:	f107 0108 	add.w	r1, r7, #8
 8009a60:	4610      	mov	r0, r2
 8009a62:	4798      	blx	r3
 8009a64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a66:	e126      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fb0e 	bl	800a08c <USBD_CtlError>
        err++;
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	3301      	adds	r3, #1
 8009a74:	72fb      	strb	r3, [r7, #11]
      break;
 8009a76:	e11e      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7c12      	ldrb	r2, [r2, #16]
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	60f8      	str	r0, [r7, #12]
      break;
 8009a8e:	e112      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7c1b      	ldrb	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10d      	bne.n	8009ab4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa0:	f107 0208 	add.w	r2, r7, #8
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4798      	blx	r3
 8009aa8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	2202      	movs	r2, #2
 8009ab0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ab2:	e100      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	f107 0208 	add.w	r2, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	2202      	movs	r2, #2
 8009acc:	701a      	strb	r2, [r3, #0]
      break;
 8009ace:	e0f2      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	885b      	ldrh	r3, [r3, #2]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	f200 80ac 	bhi.w	8009c34 <USBD_GetDescriptor+0x258>
 8009adc:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <USBD_GetDescriptor+0x108>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009afd 	.word	0x08009afd
 8009ae8:	08009b31 	.word	0x08009b31
 8009aec:	08009b65 	.word	0x08009b65
 8009af0:	08009b99 	.word	0x08009b99
 8009af4:	08009bcd 	.word	0x08009bcd
 8009af8:	08009c01 	.word	0x08009c01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7c12      	ldrb	r2, [r2, #16]
 8009b14:	f107 0108 	add.w	r1, r7, #8
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b1e:	e091      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fab2 	bl	800a08c <USBD_CtlError>
            err++;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b2e:	e089      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7c12      	ldrb	r2, [r2, #16]
 8009b48:	f107 0108 	add.w	r1, r7, #8
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
 8009b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b52:	e077      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa98 	bl	800a08c <USBD_CtlError>
            err++;
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	72fb      	strb	r3, [r7, #11]
          break;
 8009b62:	e06f      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7c12      	ldrb	r2, [r2, #16]
 8009b7c:	f107 0108 	add.w	r1, r7, #8
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b86:	e05d      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa7e 	bl	800a08c <USBD_CtlError>
            err++;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	3301      	adds	r3, #1
 8009b94:	72fb      	strb	r3, [r7, #11]
          break;
 8009b96:	e055      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bba:	e043      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa64 	bl	800a08c <USBD_CtlError>
            err++;
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bca:	e03b      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bee:	e029      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa4a 	bl	800a08c <USBD_CtlError>
            err++;
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bfe:	e021      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c22:	e00f      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa30 	bl	800a08c <USBD_CtlError>
            err++;
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	72fb      	strb	r3, [r7, #11]
          break;
 8009c32:	e007      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa28 	bl	800a08c <USBD_CtlError>
          err++;
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009c42:	bf00      	nop
      }
      break;
 8009c44:	e037      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7c1b      	ldrb	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d109      	bne.n	8009c62 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c56:	f107 0208 	add.w	r2, r7, #8
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	4798      	blx	r3
 8009c5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c60:	e029      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fa11 	bl	800a08c <USBD_CtlError>
        err++;
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c70:	e021      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7c1b      	ldrb	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10d      	bne.n	8009c96 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c82:	f107 0208 	add.w	r2, r7, #8
 8009c86:	4610      	mov	r0, r2
 8009c88:	4798      	blx	r3
 8009c8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	2207      	movs	r2, #7
 8009c92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c94:	e00f      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f9f7 	bl	800a08c <USBD_CtlError>
        err++;
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ca4:	e007      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f9ef 	bl	800a08c <USBD_CtlError>
      err++;
 8009cae:	7afb      	ldrb	r3, [r7, #11]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8009cb4:	bf00      	nop
  }

  if (err != 0U)
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d11e      	bne.n	8009cfa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	88db      	ldrh	r3, [r3, #6]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d016      	beq.n	8009cf2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009cc4:	893b      	ldrh	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00e      	beq.n	8009ce8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	88da      	ldrh	r2, [r3, #6]
 8009cce:	893b      	ldrh	r3, [r7, #8]
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	bf28      	it	cs
 8009cd4:	4613      	movcs	r3, r2
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cda:	893b      	ldrh	r3, [r7, #8]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fa44 	bl	800a16e <USBD_CtlSendData>
 8009ce6:	e009      	b.n	8009cfc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f9ce 	bl	800a08c <USBD_CtlError>
 8009cf0:	e004      	b.n	8009cfc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa78 	bl	800a1e8 <USBD_CtlSendStatus>
 8009cf8:	e000      	b.n	8009cfc <USBD_GetDescriptor+0x320>
    return;
 8009cfa:	bf00      	nop
  }
}
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop

08009d04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	889b      	ldrh	r3, [r3, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d131      	bne.n	8009d7a <USBD_SetAddress+0x76>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	88db      	ldrh	r3, [r3, #6]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d12d      	bne.n	8009d7a <USBD_SetAddress+0x76>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	885b      	ldrh	r3, [r3, #2]
 8009d22:	2b7f      	cmp	r3, #127	; 0x7f
 8009d24:	d829      	bhi.n	8009d7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	885b      	ldrh	r3, [r3, #2]
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d104      	bne.n	8009d48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f9a3 	bl	800a08c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d46:	e01d      	b.n	8009d84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7bfa      	ldrb	r2, [r7, #15]
 8009d4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fdf8 	bl	800a94a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa44 	bl	800a1e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d004      	beq.n	8009d70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6e:	e009      	b.n	8009d84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d78:	e004      	b.n	8009d84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f985 	bl	800a08c <USBD_CtlError>
  }
}
 8009d82:	bf00      	nop
 8009d84:	bf00      	nop
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	885b      	ldrh	r3, [r3, #2]
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	4b4c      	ldr	r3, [pc, #304]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009da2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009da4:	4b4b      	ldr	r3, [pc, #300]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d905      	bls.n	8009db8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f96c 	bl	800a08c <USBD_CtlError>
    return USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e088      	b.n	8009eca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d002      	beq.n	8009dca <USBD_SetConfig+0x3e>
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d025      	beq.n	8009e14 <USBD_SetConfig+0x88>
 8009dc8:	e071      	b.n	8009eae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009dca:	4b42      	ldr	r3, [pc, #264]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d01c      	beq.n	8009e0c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009dd2:	4b40      	ldr	r3, [pc, #256]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ddc:	4b3d      	ldr	r3, [pc, #244]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7ff f992 	bl	800910c <USBD_SetClassConfig>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d004      	beq.n	8009dfc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f949 	bl	800a08c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dfa:	e065      	b.n	8009ec8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f9f3 	bl	800a1e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2203      	movs	r2, #3
 8009e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e0a:	e05d      	b.n	8009ec8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f9eb 	bl	800a1e8 <USBD_CtlSendStatus>
      break;
 8009e12:	e059      	b.n	8009ec8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e14:	4b2f      	ldr	r3, [pc, #188]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d112      	bne.n	8009e42 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e24:	4b2b      	ldr	r3, [pc, #172]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e2e:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff f985 	bl	8009144 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f9d4 	bl	800a1e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e40:	e042      	b.n	8009ec8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009e42:	4b24      	ldr	r3, [pc, #144]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	461a      	mov	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d02a      	beq.n	8009ea6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff f973 	bl	8009144 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e5e:	4b1d      	ldr	r3, [pc, #116]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e68:	4b1a      	ldr	r3, [pc, #104]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff f94c 	bl	800910c <USBD_SetClassConfig>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00f      	beq.n	8009e9e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f903 	bl	800a08c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff f958 	bl	8009144 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e9c:	e014      	b.n	8009ec8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f9a2 	bl	800a1e8 <USBD_CtlSendStatus>
      break;
 8009ea4:	e010      	b.n	8009ec8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f99e 	bl	800a1e8 <USBD_CtlSendStatus>
      break;
 8009eac:	e00c      	b.n	8009ec8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f8eb 	bl	800a08c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009eb6:	4b07      	ldr	r3, [pc, #28]	; (8009ed4 <USBD_SetConfig+0x148>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff f941 	bl	8009144 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec6:	bf00      	nop
  }

  return ret;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	2000021c 	.word	0x2000021c

08009ed8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	88db      	ldrh	r3, [r3, #6]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d004      	beq.n	8009ef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f8cd 	bl	800a08c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ef2:	e023      	b.n	8009f3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	dc02      	bgt.n	8009f06 <USBD_GetConfig+0x2e>
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dc03      	bgt.n	8009f0c <USBD_GetConfig+0x34>
 8009f04:	e015      	b.n	8009f32 <USBD_GetConfig+0x5a>
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d00b      	beq.n	8009f22 <USBD_GetConfig+0x4a>
 8009f0a:	e012      	b.n	8009f32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3308      	adds	r3, #8
 8009f16:	2201      	movs	r2, #1
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f927 	bl	800a16e <USBD_CtlSendData>
        break;
 8009f20:	e00c      	b.n	8009f3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3304      	adds	r3, #4
 8009f26:	2201      	movs	r2, #1
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f91f 	bl	800a16e <USBD_CtlSendData>
        break;
 8009f30:	e004      	b.n	8009f3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f8a9 	bl	800a08c <USBD_CtlError>
        break;
 8009f3a:	bf00      	nop
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	3b01      	subs	r3, #1
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d81e      	bhi.n	8009f9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	88db      	ldrh	r3, [r3, #6]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d004      	beq.n	8009f6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f890 	bl	800a08c <USBD_CtlError>
        break;
 8009f6c:	e01a      	b.n	8009fa4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d005      	beq.n	8009f8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f043 0202 	orr.w	r2, r3, #2
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	330c      	adds	r3, #12
 8009f8e:	2202      	movs	r2, #2
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f8eb 	bl	800a16e <USBD_CtlSendData>
      break;
 8009f98:	e004      	b.n	8009fa4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f875 	bl	800a08c <USBD_CtlError>
      break;
 8009fa2:	bf00      	nop
  }
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	885b      	ldrh	r3, [r3, #2]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d106      	bne.n	8009fcc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f90e 	bl	800a1e8 <USBD_CtlSendStatus>
  }
}
 8009fcc:	bf00      	nop
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d80b      	bhi.n	800a004 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	885b      	ldrh	r3, [r3, #2]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d10c      	bne.n	800a00e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f8f3 	bl	800a1e8 <USBD_CtlSendStatus>
      }
      break;
 800a002:	e004      	b.n	800a00e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f840 	bl	800a08c <USBD_CtlError>
      break;
 800a00c:	e000      	b.n	800a010 <USBD_ClrFeature+0x3c>
      break;
 800a00e:	bf00      	nop
  }
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	781a      	ldrb	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	781a      	ldrb	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7ff fa92 	bl	800956c <SWAPBYTE>
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3301      	adds	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3301      	adds	r3, #1
 800a05a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f7ff fa85 	bl	800956c <SWAPBYTE>
 800a062:	4603      	mov	r3, r0
 800a064:	461a      	mov	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3301      	adds	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3301      	adds	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff fa78 	bl	800956c <SWAPBYTE>
 800a07c:	4603      	mov	r3, r0
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	80da      	strh	r2, [r3, #6]
}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a096:	2180      	movs	r1, #128	; 0x80
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fbeb 	bl	800a874 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a09e:	2100      	movs	r1, #0
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fbe7 	bl	800a874 <USBD_LL_StallEP>
}
 800a0a6:	bf00      	nop
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b086      	sub	sp, #24
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d036      	beq.n	800a132 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0c8:	6938      	ldr	r0, [r7, #16]
 800a0ca:	f000 f836 	bl	800a13a <USBD_GetLen>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	005b      	lsls	r3, r3, #1
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	7812      	ldrb	r2, [r2, #0]
 800a0e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0fe:	e013      	b.n	800a128 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	4413      	add	r3, r2
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	7812      	ldrb	r2, [r2, #0]
 800a10a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	3301      	adds	r3, #1
 800a110:	613b      	str	r3, [r7, #16]
    idx++;
 800a112:	7dfb      	ldrb	r3, [r7, #23]
 800a114:	3301      	adds	r3, #1
 800a116:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	4413      	add	r3, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
    idx++;
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	3301      	adds	r3, #1
 800a126:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e7      	bne.n	800a100 <USBD_GetString+0x52>
 800a130:	e000      	b.n	800a134 <USBD_GetString+0x86>
    return;
 800a132:	bf00      	nop
  }
}
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a14a:	e005      	b.n	800a158 <USBD_GetLen+0x1e>
  {
    len++;
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	3301      	adds	r3, #1
 800a150:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	3301      	adds	r3, #1
 800a156:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1f5      	bne.n	800a14c <USBD_GetLen+0x12>
  }

  return len;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2202      	movs	r2, #2
 800a17e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	2100      	movs	r1, #0
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 fbf7 	bl	800a988 <USBD_LL_Transmit>

  return USBD_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fbe6 	bl	800a988 <USBD_LL_Transmit>

  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 fbf6 	bl	800a9ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2204      	movs	r2, #4
 800a1f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fbc2 	bl	800a988 <USBD_LL_Transmit>

  return USBD_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2205      	movs	r2, #5
 800a21a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a21e:	2300      	movs	r3, #0
 800a220:	2200      	movs	r2, #0
 800a222:	2100      	movs	r1, #0
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fbd0 	bl	800a9ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800a238:	2200      	movs	r2, #0
 800a23a:	490e      	ldr	r1, [pc, #56]	; (800a274 <MX_USB_Device_Init+0x40>)
 800a23c:	480e      	ldr	r0, [pc, #56]	; (800a278 <MX_USB_Device_Init+0x44>)
 800a23e:	f7fe fef7 	bl	8009030 <USBD_Init>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a248:	f7f7 fb05 	bl	8001856 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800a24c:	490b      	ldr	r1, [pc, #44]	; (800a27c <MX_USB_Device_Init+0x48>)
 800a24e:	480a      	ldr	r0, [pc, #40]	; (800a278 <MX_USB_Device_Init+0x44>)
 800a250:	f7fe ff1e 	bl	8009090 <USBD_RegisterClass>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a25a:	f7f7 fafc 	bl	8001856 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a25e:	4806      	ldr	r0, [pc, #24]	; (800a278 <MX_USB_Device_Init+0x44>)
 800a260:	f7fe ff3d 	bl	80090de <USBD_Start>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800a26a:	f7f7 faf4 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a26e:	bf00      	nop
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20000130 	.word	0x20000130
 800a278:	200002f4 	.word	0x200002f4
 800a27c:	20000028 	.word	0x20000028

0800a280 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	4603      	mov	r3, r0
 800a288:	6039      	str	r1, [r7, #0]
 800a28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2212      	movs	r2, #18
 800a290:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800a292:	4b03      	ldr	r3, [pc, #12]	; (800a2a0 <USBD_HID_DeviceDescriptor+0x20>)
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	20000150 	.word	0x20000150

0800a2a4 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2204      	movs	r2, #4
 800a2b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2b6:	4b03      	ldr	r3, [pc, #12]	; (800a2c4 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	20000164 	.word	0x20000164

0800a2c8 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4907      	ldr	r1, [pc, #28]	; (800a2fc <USBD_HID_ProductStrDescriptor+0x34>)
 800a2de:	4808      	ldr	r0, [pc, #32]	; (800a300 <USBD_HID_ProductStrDescriptor+0x38>)
 800a2e0:	f7ff fee5 	bl	800a0ae <USBD_GetString>
 800a2e4:	e004      	b.n	800a2f0 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	4904      	ldr	r1, [pc, #16]	; (800a2fc <USBD_HID_ProductStrDescriptor+0x34>)
 800a2ea:	4805      	ldr	r0, [pc, #20]	; (800a300 <USBD_HID_ProductStrDescriptor+0x38>)
 800a2ec:	f7ff fedf 	bl	800a0ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f0:	4b02      	ldr	r3, [pc, #8]	; (800a2fc <USBD_HID_ProductStrDescriptor+0x34>)
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	200005c4 	.word	0x200005c4
 800a300:	0800aba8 	.word	0x0800aba8

0800a304 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	4904      	ldr	r1, [pc, #16]	; (800a324 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800a314:	4804      	ldr	r0, [pc, #16]	; (800a328 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800a316:	f7ff feca 	bl	800a0ae <USBD_GetString>
  return USBD_StrDesc;
 800a31a:	4b02      	ldr	r3, [pc, #8]	; (800a324 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	200005c4 	.word	0x200005c4
 800a328:	0800abc0 	.word	0x0800abc0

0800a32c <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	4603      	mov	r3, r0
 800a334:	6039      	str	r1, [r7, #0]
 800a336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	221a      	movs	r2, #26
 800a33c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a33e:	f000 f843 	bl	800a3c8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a342:	4b02      	ldr	r3, [pc, #8]	; (800a34c <USBD_HID_SerialStrDescriptor+0x20>)
}
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20000168 	.word	0x20000168

0800a350 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d105      	bne.n	800a36e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4907      	ldr	r1, [pc, #28]	; (800a384 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a366:	4808      	ldr	r0, [pc, #32]	; (800a388 <USBD_HID_ConfigStrDescriptor+0x38>)
 800a368:	f7ff fea1 	bl	800a0ae <USBD_GetString>
 800a36c:	e004      	b.n	800a378 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4904      	ldr	r1, [pc, #16]	; (800a384 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a372:	4805      	ldr	r0, [pc, #20]	; (800a388 <USBD_HID_ConfigStrDescriptor+0x38>)
 800a374:	f7ff fe9b 	bl	800a0ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	200005c4 	.word	0x200005c4
 800a388:	0800abd4 	.word	0x0800abd4

0800a38c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d105      	bne.n	800a3aa <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4907      	ldr	r1, [pc, #28]	; (800a3c0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a3a2:	4808      	ldr	r0, [pc, #32]	; (800a3c4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a3a4:	f7ff fe83 	bl	800a0ae <USBD_GetString>
 800a3a8:	e004      	b.n	800a3b4 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4904      	ldr	r1, [pc, #16]	; (800a3c0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a3ae:	4805      	ldr	r0, [pc, #20]	; (800a3c4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a3b0:	f7ff fe7d 	bl	800a0ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3b4:	4b02      	ldr	r3, [pc, #8]	; (800a3c0 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	200005c4 	.word	0x200005c4
 800a3c4:	0800abe0 	.word	0x0800abe0

0800a3c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3ce:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <Get_SerialNum+0x44>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3d4:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <Get_SerialNum+0x48>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3da:	4b0e      	ldr	r3, [pc, #56]	; (800a414 <Get_SerialNum+0x4c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	4909      	ldr	r1, [pc, #36]	; (800a418 <Get_SerialNum+0x50>)
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f814 	bl	800a420 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	4908      	ldr	r1, [pc, #32]	; (800a41c <Get_SerialNum+0x54>)
 800a3fc:	68b8      	ldr	r0, [r7, #8]
 800a3fe:	f000 f80f 	bl	800a420 <IntToUnicode>
  }
}
 800a402:	bf00      	nop
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	1fff7590 	.word	0x1fff7590
 800a410:	1fff7594 	.word	0x1fff7594
 800a414:	1fff7598 	.word	0x1fff7598
 800a418:	2000016a 	.word	0x2000016a
 800a41c:	2000017a 	.word	0x2000017a

0800a420 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	4613      	mov	r3, r2
 800a42c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a432:	2300      	movs	r3, #0
 800a434:	75fb      	strb	r3, [r7, #23]
 800a436:	e027      	b.n	800a488 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0f1b      	lsrs	r3, r3, #28
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	d80b      	bhi.n	800a458 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	0f1b      	lsrs	r3, r3, #28
 800a444:	b2da      	uxtb	r2, r3
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	4619      	mov	r1, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	440b      	add	r3, r1
 800a450:	3230      	adds	r2, #48	; 0x30
 800a452:	b2d2      	uxtb	r2, r2
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	e00a      	b.n	800a46e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	0f1b      	lsrs	r3, r3, #28
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	4619      	mov	r1, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	440b      	add	r3, r1
 800a468:	3237      	adds	r2, #55	; 0x37
 800a46a:	b2d2      	uxtb	r2, r2
 800a46c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	005b      	lsls	r3, r3, #1
 800a478:	3301      	adds	r3, #1
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	3301      	adds	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
 800a488:	7dfa      	ldrb	r2, [r7, #23]
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d3d3      	bcc.n	800a438 <IntToUnicode+0x18>
  }
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	371c      	adds	r7, #28
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <LL_AHB2_GRP1_EnableClock>:
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b085      	sub	sp, #20
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a4a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a4b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
}
 800a4c4:	bf00      	nop
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <LL_APB1_GRP1_EnableClock>:
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a4d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a4e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
}
 800a4f6:	bf00      	nop
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
	...

0800a504 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b09c      	sub	sp, #112	; 0x70
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a50c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	609a      	str	r2, [r3, #8]
 800a518:	60da      	str	r2, [r3, #12]
 800a51a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a51c:	f107 030c 	add.w	r3, r7, #12
 800a520:	2250      	movs	r2, #80	; 0x50
 800a522:	2100      	movs	r1, #0
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fb15 	bl	800ab54 <memset>
  if(pcdHandle->Instance==USB)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a23      	ldr	r2, [pc, #140]	; (800a5bc <HAL_PCD_MspInit+0xb8>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d13e      	bne.n	800a5b2 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a534:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a538:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800a53a:	2318      	movs	r3, #24
 800a53c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800a53e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a542:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800a544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a548:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800a54a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a54e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800a550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a554:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a556:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a55a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a55c:	f107 030c 	add.w	r3, r7, #12
 800a560:	4618      	mov	r0, r3
 800a562:	f7fa ff65 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800a56c:	f7f7 f973 	bl	8001856 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a570:	2001      	movs	r0, #1
 800a572:	f7ff ff94 	bl	800a49e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a576:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a57a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a57c:	2302      	movs	r3, #2
 800a57e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a580:	2300      	movs	r3, #0
 800a582:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a584:	2300      	movs	r3, #0
 800a586:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a588:	230a      	movs	r3, #10
 800a58a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a58c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a590:	4619      	mov	r1, r3
 800a592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a596:	f7f7 fd5b 	bl	8002050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a59a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a59e:	f7ff ff97 	bl	800a4d0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	2014      	movs	r0, #20
 800a5a8:	f7f7 fd1d 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a5ac:	2014      	movs	r0, #20
 800a5ae:	f7f7 fd34 	bl	800201a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a5b2:	bf00      	nop
 800a5b4:	3770      	adds	r7, #112	; 0x70
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	40006800 	.word	0x40006800

0800a5c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f7fe fdcc 	bl	8009174 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a5f6:	78fa      	ldrb	r2, [r7, #3]
 800a5f8:	6879      	ldr	r1, [r7, #4]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	440b      	add	r3, r1
 800a604:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	4619      	mov	r1, r3
 800a60e:	f7fe fe06 	bl	800921e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a62c:	78fa      	ldrb	r2, [r7, #3]
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	4613      	mov	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4413      	add	r3, r2
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	440b      	add	r3, r1
 800a63a:	333c      	adds	r3, #60	; 0x3c
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	4619      	mov	r1, r3
 800a642:	f7fe fe4f 	bl	80092e4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe ff63 	bl	8009528 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a672:	2301      	movs	r3, #1
 800a674:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d001      	beq.n	800a682 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a67e:	f7f7 f8ea 	bl	8001856 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a688:	7bfa      	ldrb	r2, [r7, #15]
 800a68a:	4611      	mov	r1, r2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe ff0d 	bl	80094ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe feb9 	bl	8009410 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a69e:	bf00      	nop
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
	...

0800a6a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe ff08 	bl	80094cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6c4:	4b04      	ldr	r3, [pc, #16]	; (800a6d8 <HAL_PCD_SuspendCallback+0x30>)
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	4a03      	ldr	r2, [pc, #12]	; (800a6d8 <HAL_PCD_SuspendCallback+0x30>)
 800a6ca:	f043 0306 	orr.w	r3, r3, #6
 800a6ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	e000ed00 	.word	0xe000ed00

0800a6dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d007      	beq.n	800a6fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6ec:	4b08      	ldr	r3, [pc, #32]	; (800a710 <HAL_PCD_ResumeCallback+0x34>)
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	4a07      	ldr	r2, [pc, #28]	; (800a710 <HAL_PCD_ResumeCallback+0x34>)
 800a6f2:	f023 0306 	bic.w	r3, r3, #6
 800a6f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a6f8:	f000 f9d6 	bl	800aaa8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fef8 	bl	80094f8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	e000ed00 	.word	0xe000ed00

0800a714 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a71c:	4a23      	ldr	r2, [pc, #140]	; (800a7ac <USBD_LL_Init+0x98>)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a21      	ldr	r2, [pc, #132]	; (800a7ac <USBD_LL_Init+0x98>)
 800a728:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a72c:	f7f9 fb62 	bl	8003df4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800a730:	4b1e      	ldr	r3, [pc, #120]	; (800a7ac <USBD_LL_Init+0x98>)
 800a732:	4a1f      	ldr	r2, [pc, #124]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a734:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a736:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <USBD_LL_Init+0x98>)
 800a738:	2208      	movs	r2, #8
 800a73a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a73c:	4b1b      	ldr	r3, [pc, #108]	; (800a7ac <USBD_LL_Init+0x98>)
 800a73e:	2202      	movs	r2, #2
 800a740:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a742:	4b1a      	ldr	r3, [pc, #104]	; (800a7ac <USBD_LL_Init+0x98>)
 800a744:	2202      	movs	r2, #2
 800a746:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a748:	4b18      	ldr	r3, [pc, #96]	; (800a7ac <USBD_LL_Init+0x98>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a74e:	4b17      	ldr	r3, [pc, #92]	; (800a7ac <USBD_LL_Init+0x98>)
 800a750:	2200      	movs	r2, #0
 800a752:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a754:	4b15      	ldr	r3, [pc, #84]	; (800a7ac <USBD_LL_Init+0x98>)
 800a756:	2200      	movs	r2, #0
 800a758:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a75a:	4b14      	ldr	r3, [pc, #80]	; (800a7ac <USBD_LL_Init+0x98>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a760:	4812      	ldr	r0, [pc, #72]	; (800a7ac <USBD_LL_Init+0x98>)
 800a762:	f7f7 fe0d 	bl	8002380 <HAL_PCD_Init>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a76c:	f7f7 f873 	bl	8001856 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a776:	2318      	movs	r3, #24
 800a778:	2200      	movs	r2, #0
 800a77a:	2100      	movs	r1, #0
 800a77c:	f7f9 faae 	bl	8003cdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a786:	2358      	movs	r3, #88	; 0x58
 800a788:	2200      	movs	r2, #0
 800a78a:	2180      	movs	r1, #128	; 0x80
 800a78c:	f7f9 faa6 	bl	8003cdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a79a:	2200      	movs	r2, #0
 800a79c:	2181      	movs	r1, #129	; 0x81
 800a79e:	f7f9 fa9d 	bl	8003cdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	200007c4 	.word	0x200007c4
 800a7b0:	40006800 	.word	0x40006800

0800a7b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7f7 febd 	bl	800254a <HAL_PCD_Start>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 f96c 	bl	800aab4 <USBD_Get_USB_Status>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	4608      	mov	r0, r1
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	70fb      	strb	r3, [r7, #3]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70bb      	strb	r3, [r7, #2]
 800a800:	4613      	mov	r3, r2
 800a802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a812:	78bb      	ldrb	r3, [r7, #2]
 800a814:	883a      	ldrh	r2, [r7, #0]
 800a816:	78f9      	ldrb	r1, [r7, #3]
 800a818:	f7f8 f805 	bl	8002826 <HAL_PCD_EP_Open>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	4618      	mov	r0, r3
 800a824:	f000 f946 	bl	800aab4 <USBD_Get_USB_Status>
 800a828:	4603      	mov	r3, r0
 800a82a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	460b      	mov	r3, r1
 800a840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	4611      	mov	r1, r2
 800a854:	4618      	mov	r0, r3
 800a856:	f7f8 f84c 	bl	80028f2 <HAL_PCD_EP_Close>
 800a85a:	4603      	mov	r3, r0
 800a85c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	4618      	mov	r0, r3
 800a862:	f000 f927 	bl	800aab4 <USBD_Get_USB_Status>
 800a866:	4603      	mov	r3, r0
 800a868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a88e:	78fa      	ldrb	r2, [r7, #3]
 800a890:	4611      	mov	r1, r2
 800a892:	4618      	mov	r0, r3
 800a894:	f7f8 f8f5 	bl	8002a82 <HAL_PCD_EP_SetStall>
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 f908 	bl	800aab4 <USBD_Get_USB_Status>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8cc:	78fa      	ldrb	r2, [r7, #3]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7f8 f928 	bl	8002b26 <HAL_PCD_EP_ClrStall>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 f8e9 	bl	800aab4 <USBD_Get_USB_Status>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	da0c      	bge.n	800a926 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a90c:	78fb      	ldrb	r3, [r7, #3]
 800a90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a912:	68f9      	ldr	r1, [r7, #12]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	00db      	lsls	r3, r3, #3
 800a91e:	440b      	add	r3, r1
 800a920:	3302      	adds	r3, #2
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	e00b      	b.n	800a93e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a926:	78fb      	ldrb	r3, [r7, #3]
 800a928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a92c:	68f9      	ldr	r1, [r7, #12]
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	440b      	add	r3, r1
 800a938:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a93c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	460b      	mov	r3, r1
 800a954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a964:	78fa      	ldrb	r2, [r7, #3]
 800a966:	4611      	mov	r1, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f7f7 ff37 	bl	80027dc <HAL_PCD_SetAddress>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	4618      	mov	r0, r3
 800a976:	f000 f89d 	bl	800aab4 <USBD_Get_USB_Status>
 800a97a:	4603      	mov	r3, r0
 800a97c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	607a      	str	r2, [r7, #4]
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	460b      	mov	r3, r1
 800a996:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9a6:	7af9      	ldrb	r1, [r7, #11]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	f7f8 f826 	bl	80029fc <HAL_PCD_EP_Transmit>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f87c 	bl	800aab4 <USBD_Get_USB_Status>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b086      	sub	sp, #24
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9e8:	7af9      	ldrb	r1, [r7, #11]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	f7f7 ffc8 	bl	8002982 <HAL_PCD_EP_Receive>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 f85b 	bl	800aab4 <USBD_Get_USB_Status>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa02:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	460b      	mov	r3, r1
 800aa16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <HAL_PCDEx_LPM_Callback+0x18>
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d013      	beq.n	800aa4a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aa22:	e023      	b.n	800aa6c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d007      	beq.n	800aa3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aa2c:	f000 f83c 	bl	800aaa8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa30:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	4a0f      	ldr	r2, [pc, #60]	; (800aa74 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa36:	f023 0306 	bic.w	r3, r3, #6
 800aa3a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fd58 	bl	80094f8 <USBD_LL_Resume>
    break;
 800aa48:	e010      	b.n	800aa6c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fe fd3b 	bl	80094cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d005      	beq.n	800aa6a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	4a04      	ldr	r2, [pc, #16]	; (800aa74 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa64:	f043 0306 	orr.w	r3, r3, #6
 800aa68:	6113      	str	r3, [r2, #16]
    break;
 800aa6a:	bf00      	nop
}
 800aa6c:	bf00      	nop
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	e000ed00 	.word	0xe000ed00

0800aa78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa80:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <USBD_static_malloc+0x18>)
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	20000220 	.word	0x20000220

0800aa94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]

}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aaac:	f7f6 fe4a 	bl	8001744 <SystemClock_Config>
}
 800aab0:	bf00      	nop
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d817      	bhi.n	800aaf8 <USBD_Get_USB_Status+0x44>
 800aac8:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <USBD_Get_USB_Status+0x1c>)
 800aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aace:	bf00      	nop
 800aad0:	0800aae1 	.word	0x0800aae1
 800aad4:	0800aae7 	.word	0x0800aae7
 800aad8:	0800aaed 	.word	0x0800aaed
 800aadc:	0800aaf3 	.word	0x0800aaf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]
    break;
 800aae4:	e00b      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aae6:	2303      	movs	r3, #3
 800aae8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaea:	e008      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaec:	2301      	movs	r3, #1
 800aaee:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf0:	e005      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf6:	e002      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	73fb      	strb	r3, [r7, #15]
    break;
 800aafc:	bf00      	nop
  }
  return usb_status;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <__libc_init_array>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	4d0d      	ldr	r5, [pc, #52]	; (800ab44 <__libc_init_array+0x38>)
 800ab10:	4c0d      	ldr	r4, [pc, #52]	; (800ab48 <__libc_init_array+0x3c>)
 800ab12:	1b64      	subs	r4, r4, r5
 800ab14:	10a4      	asrs	r4, r4, #2
 800ab16:	2600      	movs	r6, #0
 800ab18:	42a6      	cmp	r6, r4
 800ab1a:	d109      	bne.n	800ab30 <__libc_init_array+0x24>
 800ab1c:	4d0b      	ldr	r5, [pc, #44]	; (800ab4c <__libc_init_array+0x40>)
 800ab1e:	4c0c      	ldr	r4, [pc, #48]	; (800ab50 <__libc_init_array+0x44>)
 800ab20:	f000 f820 	bl	800ab64 <_init>
 800ab24:	1b64      	subs	r4, r4, r5
 800ab26:	10a4      	asrs	r4, r4, #2
 800ab28:	2600      	movs	r6, #0
 800ab2a:	42a6      	cmp	r6, r4
 800ab2c:	d105      	bne.n	800ab3a <__libc_init_array+0x2e>
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
 800ab30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab34:	4798      	blx	r3
 800ab36:	3601      	adds	r6, #1
 800ab38:	e7ee      	b.n	800ab18 <__libc_init_array+0xc>
 800ab3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab3e:	4798      	blx	r3
 800ab40:	3601      	adds	r6, #1
 800ab42:	e7f2      	b.n	800ab2a <__libc_init_array+0x1e>
 800ab44:	0800ac70 	.word	0x0800ac70
 800ab48:	0800ac70 	.word	0x0800ac70
 800ab4c:	0800ac70 	.word	0x0800ac70
 800ab50:	0800ac74 	.word	0x0800ac74

0800ab54 <memset>:
 800ab54:	4402      	add	r2, r0
 800ab56:	4603      	mov	r3, r0
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d100      	bne.n	800ab5e <memset+0xa>
 800ab5c:	4770      	bx	lr
 800ab5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab62:	e7f9      	b.n	800ab58 <memset+0x4>

0800ab64 <_init>:
 800ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab66:	bf00      	nop
 800ab68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6a:	bc08      	pop	{r3}
 800ab6c:	469e      	mov	lr, r3
 800ab6e:	4770      	bx	lr

0800ab70 <_fini>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	bf00      	nop
 800ab74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab76:	bc08      	pop	{r3}
 800ab78:	469e      	mov	lr, r3
 800ab7a:	4770      	bx	lr


rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000966c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080097a8  080097a8  000197a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800989c  0800989c  0001989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000004  080098a4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a74  20000188  08009a28  00020188  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001bfc  08009a28  00021bfc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cade  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ea4  00000000  00000000  0003cc96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001758  00000000  00000000  00040b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000015b0  00000000  00000000  00042298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00022f0e  00000000  00000000  00043848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016dcf  00000000  00000000  00066756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cd868  00000000  00000000  0007d525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0014ad8d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005e98  00000000  00000000  0014ade0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000188 	.word	0x20000188
 8000158:	00000000 	.word	0x00000000
 800015c:	08009790 	.word	0x08009790

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000018c 	.word	0x2000018c
 8000178:	08009790 	.word	0x08009790

0800017c <read_register>:
#include "imu.h"

uint8_t read_register(uint8_t r) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800018c:	b2db      	uxtb	r3, r3
 800018e:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000190:	2300      	movs	r3, #0
 8000192:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000194:	2200      	movs	r2, #0
 8000196:	2110      	movs	r1, #16
 8000198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800019c:	f000 fe90 	bl	8000ec0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 80001a0:	f107 010c 	add.w	r1, r7, #12
 80001a4:	f04f 33ff 	mov.w	r3, #4294967295
 80001a8:	2201      	movs	r2, #1
 80001aa:	480b      	ldr	r0, [pc, #44]	; (80001d8 <read_register+0x5c>)
 80001ac:	f004 fa40 	bl	8004630 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 80001b0:	f107 0108 	add.w	r1, r7, #8
 80001b4:	f04f 33ff 	mov.w	r3, #4294967295
 80001b8:	2201      	movs	r2, #1
 80001ba:	4807      	ldr	r0, [pc, #28]	; (80001d8 <read_register+0x5c>)
 80001bc:	f004 fba6 	bl	800490c <HAL_SPI_Receive>
	CS_END();
 80001c0:	2201      	movs	r2, #1
 80001c2:	2110      	movs	r1, #16
 80001c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001c8:	f000 fe7a 	bl	8000ec0 <HAL_GPIO_WritePin>
	return pRxData[0];
 80001cc:	7a3b      	ldrb	r3, [r7, #8]
}
 80001ce:	4618      	mov	r0, r3
 80001d0:	3710      	adds	r7, #16
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	200003d0 	.word	0x200003d0

080001dc <write_register>:

void write_register(uint8_t r, uint8_t value) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	460a      	mov	r2, r1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	4613      	mov	r3, r2
 80001ea:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	733b      	strb	r3, [r7, #12]
 80001f0:	79bb      	ldrb	r3, [r7, #6]
 80001f2:	737b      	strb	r3, [r7, #13]
	CS_START();
 80001f4:	2200      	movs	r2, #0
 80001f6:	2110      	movs	r1, #16
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fc:	f000 fe60 	bl	8000ec0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 8000200:	f107 010c 	add.w	r1, r7, #12
 8000204:	f04f 33ff 	mov.w	r3, #4294967295
 8000208:	2202      	movs	r2, #2
 800020a:	4806      	ldr	r0, [pc, #24]	; (8000224 <write_register+0x48>)
 800020c:	f004 fa10 	bl	8004630 <HAL_SPI_Transmit>
	CS_END();
 8000210:	2201      	movs	r2, #1
 8000212:	2110      	movs	r1, #16
 8000214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000218:	f000 fe52 	bl	8000ec0 <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	200003d0 	.word	0x200003d0

08000228 <read_x>:

uint16_t read_x() {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_XOUT_H);
 800022e:	203b      	movs	r0, #59	; 0x3b
 8000230:	f7ff ffa4 	bl	800017c <read_register>
 8000234:	4603      	mov	r3, r0
 8000236:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_XOUT_L);
 8000238:	203c      	movs	r0, #60	; 0x3c
 800023a:	f7ff ff9f 	bl	800017c <read_register>
 800023e:	4603      	mov	r3, r0
 8000240:	71bb      	strb	r3, [r7, #6]
	int16_t x = (h << 8) | l;
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	b21a      	sxth	r2, r3
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	b21b      	sxth	r3, r3
 800024c:	4313      	orrs	r3, r2
 800024e:	80bb      	strh	r3, [r7, #4]
	return x;
 8000250:	88bb      	ldrh	r3, [r7, #4]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}

0800025a <read_y>:

uint16_t read_y() {
 800025a:	b580      	push	{r7, lr}
 800025c:	b082      	sub	sp, #8
 800025e:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_YOUT_H);
 8000260:	203d      	movs	r0, #61	; 0x3d
 8000262:	f7ff ff8b 	bl	800017c <read_register>
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_YOUT_L);
 800026a:	203e      	movs	r0, #62	; 0x3e
 800026c:	f7ff ff86 	bl	800017c <read_register>
 8000270:	4603      	mov	r3, r0
 8000272:	71bb      	strb	r3, [r7, #6]
	int16_t y = (h << 8) | l;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	021b      	lsls	r3, r3, #8
 8000278:	b21a      	sxth	r2, r3
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	b21b      	sxth	r3, r3
 800027e:	4313      	orrs	r3, r2
 8000280:	80bb      	strh	r3, [r7, #4]
	return y;
 8000282:	88bb      	ldrh	r3, [r7, #4]
}
 8000284:	4618      	mov	r0, r3
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <read_z>:

uint16_t read_z() {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_ZOUT_H);
 8000292:	203f      	movs	r0, #63	; 0x3f
 8000294:	f7ff ff72 	bl	800017c <read_register>
 8000298:	4603      	mov	r3, r0
 800029a:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_ZOUT_L);
 800029c:	2040      	movs	r0, #64	; 0x40
 800029e:	f7ff ff6d 	bl	800017c <read_register>
 80002a2:	4603      	mov	r3, r0
 80002a4:	71bb      	strb	r3, [r7, #6]
	int16_t z = (h << 8) | l;
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	b21a      	sxth	r2, r3
 80002ac:	79bb      	ldrb	r3, [r7, #6]
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	4313      	orrs	r3, r2
 80002b2:	80bb      	strh	r3, [r7, #4]
	return z;
 80002b4:	88bb      	ldrh	r3, [r7, #4]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002be:	b480      	push	{r7}
 80002c0:	b085      	sub	sp, #20
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4313      	orrs	r3, r2
 80002d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80002d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4013      	ands	r3, r2
 80002e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002e2:	68fb      	ldr	r3, [r7, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	2002      	movs	r0, #2
 8000306:	f7ff ffda 	bl	80002be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030a:	2001      	movs	r0, #1
 800030c:	f7ff ffd7 	bl	80002be <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000316:	4814      	ldr	r0, [pc, #80]	; (8000368 <MX_GPIO_Init+0x78>)
 8000318:	f000 fdd2 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2110      	movs	r1, #16
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f000 fdcc 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800032c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4619      	mov	r1, r3
 800033e:	480a      	ldr	r0, [pc, #40]	; (8000368 <MX_GPIO_Init+0x78>)
 8000340:	f000 fc56 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000344:	2310      	movs	r3, #16
 8000346:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035c:	f000 fc48 	bl	8000bf0 <HAL_GPIO_Init>

}
 8000360:	bf00      	nop
 8000362:	3718      	adds	r7, #24
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	48000400 	.word	0x48000400

0800036c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000372:	f000 fa83 	bl	800087c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000376:	f000 f871 	bl	800045c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800037a:	f000 f8db 	bl	8000534 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800037e:	f7ff ffb7 	bl	80002f0 <MX_GPIO_Init>
	MX_USB_Device_Init();
 8000382:	f008 fc77 	bl	8008c74 <MX_USB_Device_Init>
	MX_SPI1_Init();
 8000386:	f000 f929 	bl	80005dc <MX_SPI1_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 800038a:	2180      	movs	r1, #128	; 0x80
 800038c:	206b      	movs	r0, #107	; 0x6b
 800038e:	f7ff ff25 	bl	80001dc <write_register>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000392:	206b      	movs	r0, #107	; 0x6b
 8000394:	f7ff fef2 	bl	800017c <read_register>
 8000398:	4603      	mov	r3, r0
 800039a:	73fb      	strb	r3, [r7, #15]
		if (reg & (1UL << 6)) {
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f1      	beq.n	800038a <main+0x1e>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 80003a6:	2101      	movs	r1, #1
 80003a8:	206b      	movs	r0, #107	; 0x6b
 80003aa:	f7ff ff17 	bl	80001dc <write_register>
		uint8_t reg = read_register(PWR_MGMT_1);
 80003ae:	206b      	movs	r0, #107	; 0x6b
 80003b0:	f7ff fee4 	bl	800017c <read_register>
 80003b4:	4603      	mov	r3, r0
 80003b6:	73bb      	strb	r3, [r7, #14]
		if (reg & (1 << 0)) {
 80003b8:	7bbb      	ldrb	r3, [r7, #14]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0f1      	beq.n	80003a6 <main+0x3a>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 80003c2:	2110      	movs	r1, #16
 80003c4:	206a      	movs	r0, #106	; 0x6a
 80003c6:	f7ff ff09 	bl	80001dc <write_register>
		uint8_t reg = read_register(USER_CTRL);
 80003ca:	206a      	movs	r0, #106	; 0x6a
 80003cc:	f7ff fed6 	bl	800017c <read_register>
 80003d0:	4603      	mov	r3, r0
 80003d2:	737b      	strb	r3, [r7, #13]
		if (reg & (1 << 4)) {
 80003d4:	7b7b      	ldrb	r3, [r7, #13]
 80003d6:	f003 0310 	and.w	r3, r3, #16
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f1      	beq.n	80003c2 <main+0x56>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 80003de:	2118      	movs	r1, #24
 80003e0:	201c      	movs	r0, #28
 80003e2:	f7ff fefb 	bl	80001dc <write_register>
		uint8_t reg = read_register(ACCEL_CONFIG);
 80003e6:	201c      	movs	r0, #28
 80003e8:	f7ff fec8 	bl	800017c <read_register>
 80003ec:	4603      	mov	r3, r0
 80003ee:	733b      	strb	r3, [r7, #12]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 80003f0:	7b3b      	ldrb	r3, [r7, #12]
 80003f2:	f003 0310 	and.w	r3, r3, #16
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f1      	beq.n	80003de <main+0x72>
 80003fa:	7b3b      	ldrb	r3, [r7, #12]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0ec      	beq.n	80003de <main+0x72>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 0);
 8000404:	2100      	movs	r1, #0
 8000406:	201d      	movs	r0, #29
 8000408:	f7ff fee8 	bl	80001dc <write_register>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 800040c:	201d      	movs	r0, #29
 800040e:	f7ff feb5 	bl	800017c <read_register>
 8000412:	4603      	mov	r3, r0
 8000414:	72fb      	strb	r3, [r7, #11]
		if (reg == 0) {
 8000416:	7afb      	ldrb	r3, [r7, #11]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1f3      	bne.n	8000404 <main+0x98>
//
//		int16_t x = 0;
//		int16_t y = 0;
//		int16_t z = 0;

		int16_t x = read_x();
 800041c:	f7ff ff04 	bl	8000228 <read_x>
 8000420:	4603      	mov	r3, r0
 8000422:	813b      	strh	r3, [r7, #8]
		int16_t y = read_y();
 8000424:	f7ff ff19 	bl	800025a <read_y>
 8000428:	4603      	mov	r3, r0
 800042a:	80fb      	strh	r3, [r7, #6]
		int16_t z = read_z();
 800042c:	f7ff ff2e 	bl	800028c <read_z>
 8000430:	4603      	mov	r3, r0
 8000432:	80bb      	strh	r3, [r7, #4]

//		read_xyz(&x, &y, &z);q

		feedback.x = x;
 8000434:	4a08      	ldr	r2, [pc, #32]	; (8000458 <main+0xec>)
 8000436:	893b      	ldrh	r3, [r7, #8]
 8000438:	8013      	strh	r3, [r2, #0]
		feedback.y = y;
 800043a:	4a07      	ldr	r2, [pc, #28]	; (8000458 <main+0xec>)
 800043c:	88fb      	ldrh	r3, [r7, #6]
 800043e:	8053      	strh	r3, [r2, #2]
		feedback.z = z;
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <main+0xec>)
 8000442:	88bb      	ldrh	r3, [r7, #4]
 8000444:	8093      	strh	r3, [r2, #4]
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000446:	2106      	movs	r1, #6
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <main+0xec>)
 800044a:	f008 fcd1 	bl	8008df0 <CDC_Transmit_FS>
		HAL_Delay(1);
 800044e:	2001      	movs	r0, #1
 8000450:	f000 fa9a 	bl	8000988 <HAL_Delay>
	while (1) {
 8000454:	e7e2      	b.n	800041c <main+0xb0>
 8000456:	bf00      	nop
 8000458:	200003c8 	.word	0x200003c8

0800045c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b09a      	sub	sp, #104	; 0x68
 8000460:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000462:	f107 0320 	add.w	r3, r7, #32
 8000466:	2248      	movs	r2, #72	; 0x48
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f009 f988 	bl	8009780 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000482:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <SystemClock_Config+0xd4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800048a:	4a29      	ldr	r2, [pc, #164]	; (8000530 <SystemClock_Config+0xd4>)
 800048c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <SystemClock_Config+0xd4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800049e:	2326      	movs	r3, #38	; 0x26
 80004a0:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80004a2:	2300      	movs	r3, #0
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004ac:	2301      	movs	r3, #1
 80004ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b0:	2340      	movs	r3, #64	; 0x40
 80004b2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004b4:	2300      	movs	r3, #0
 80004b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004b8:	2360      	movs	r3, #96	; 0x60
 80004ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	2302      	movs	r3, #2
 80004be:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004c0:	2301      	movs	r3, #1
 80004c2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 80004c8:	2320      	movs	r3, #32
 80004ca:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004d0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80004d6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004dc:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fdc4 	bl	8003070 <HAL_RCC_OscConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x96>
		Error_Handler();
 80004ee:	f000 f83e 	bl	800056e <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80004f2:	236f      	movs	r3, #111	; 0x6f
 80004f4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f6:	2303      	movs	r3, #3
 80004f8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2103      	movs	r1, #3
 8000512:	4618      	mov	r0, r3
 8000514:	f003 f938 	bl	8003788 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0xc6>
		Error_Handler();
 800051e:	f000 f826 	bl	800056e <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000522:	f003 fecb 	bl	80042bc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000526:	bf00      	nop
 8000528:	3768      	adds	r7, #104	; 0x68
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	58000400 	.word	0x58000400

08000534 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800053a:	463b      	mov	r3, r7
 800053c:	2250      	movs	r2, #80	; 0x50
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f009 f91d 	bl	8009780 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800054c:	2300      	movs	r3, #0
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000550:	2310      	movs	r3, #16
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000554:	463b      	mov	r3, r7
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fd3a 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <PeriphCommonClock_Config+0x32>
		Error_Handler();
 8000562:	f000 f804 	bl	800056e <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8000566:	bf00      	nop
 8000568:	3750      	adds	r7, #80	; 0x50
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000572:	b672      	cpsid	i
}
 8000574:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000576:	e7fe      	b.n	8000576 <Error_Handler+0x8>

08000578 <LL_AHB2_GRP1_EnableClock>:
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4013      	ands	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059c:	68fb      	ldr	r3, [r7, #12]
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b085      	sub	sp, #20
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4013      	ands	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_SPI1_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MX_SPI1_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_SPI1_Init+0x74>)
 80005e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_SPI1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_SPI1_Init+0x74>)
 80005f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_SPI1_Init+0x74>)
 80005fe:	2202      	movs	r2, #2
 8000600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_SPI1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_SPI1_Init+0x74>)
 800060a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_SPI1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_SPI1_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_SPI1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_SPI1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_SPI1_Init+0x74>)
 800062a:	2207      	movs	r2, #7
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_SPI1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_SPI1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_SPI1_Init+0x74>)
 800063c:	f003 ff55 	bl	80044ea <HAL_SPI_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000646:	f7ff ff92 	bl	800056e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200003d0 	.word	0x200003d0
 8000654:	40013000 	.word	0x40013000

08000658 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_SPI_MspInit+0x5c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d117      	bne.n	80006aa <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800067a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800067e:	f7ff ff94 	bl	80005aa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff78 	bl	8000578 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000688:	23c2      	movs	r3, #194	; 0xc2
 800068a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000698:	2305      	movs	r3, #5
 800069a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f000 faa3 	bl	8000bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3720      	adds	r7, #32
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40013000 	.word	0x40013000

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2101      	movs	r1, #1
 80006c0:	f06f 000b 	mvn.w	r0, #11
 80006c4:	f000 fa5f 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2101      	movs	r1, #1
 80006cc:	f06f 000a 	mvn.w	r0, #10
 80006d0:	f000 fa59 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	f06f 0009 	mvn.w	r0, #9
 80006dc:	f000 fa53 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	f06f 0004 	mvn.w	r0, #4
 80006e8:	f000 fa4d 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	f06f 0003 	mvn.w	r0, #3
 80006f4:	f000 fa47 	bl	8000b86 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	f06f 0001 	mvn.w	r0, #1
 8000700:	f000 fa41 	bl	8000b86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x4>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000754:	f000 f8ec 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <USB_LP_IRQHandler+0x10>)
 8000762:	f000 fccc 	bl	80010fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20001908 	.word	0x20001908

08000770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemInit+0x90>)
 8000776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077a:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemInit+0x90>)
 800077c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000798:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800079c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800079e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <SystemInit+0x94>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80007ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ba:	f023 0305 	bic.w	r3, r3, #5
 80007be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ce:	f023 0301 	bic.w	r3, r3, #1
 80007d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <SystemInit+0x98>)
 80007dc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00
 8000804:	faf6fefb 	.word	0xfaf6fefb
 8000808:	22041000 	.word	0x22041000

0800080c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800080c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000810:	3304      	adds	r3, #4

08000812 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000812:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000814:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000816:	d3f9      	bcc.n	800080c <CopyDataInit>
  bx lr
 8000818:	4770      	bx	lr

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800081a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800081c:	3004      	adds	r0, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800081e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>
  bx lr
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000828:	f7ff ffa2 	bl	8000770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <LoopForever+0x8>)
 800082e:	490c      	ldr	r1, [pc, #48]	; (8000860 <LoopForever+0xc>)
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <LoopForever+0x10>)
 8000832:	2300      	movs	r3, #0
 8000834:	f7ff ffed 	bl	8000812 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <LoopForever+0x14>)
 800083a:	490c      	ldr	r1, [pc, #48]	; (800086c <LoopForever+0x18>)
 800083c:	2300      	movs	r3, #0
 800083e:	f7ff ffee 	bl	800081e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopForever+0x1c>)
 8000844:	490b      	ldr	r1, [pc, #44]	; (8000874 <LoopForever+0x20>)
 8000846:	2300      	movs	r3, #0
 8000848:	f7ff ffe9 	bl	800081e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084c:	f008 ff74 	bl	8009738 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000850:	f7ff fd8c 	bl	800036c <main>

08000854 <LoopForever>:

LoopForever:
  b LoopForever
 8000854:	e7fe      	b.n	8000854 <LoopForever>
 8000856:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000858:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 800085c:	20000004 	.word	0x20000004
 8000860:	20000188 	.word	0x20000188
 8000864:	080098a4 	.word	0x080098a4
  INIT_BSS _sbss, _ebss
 8000868:	20000188 	.word	0x20000188
 800086c:	20001bfc 	.word	0x20001bfc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000870:	20030000 	.word	0x20030000
 8000874:	20030000 	.word	0x20030000

08000878 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_Init+0x3c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <HAL_Init+0x3c>)
 800088c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000890:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000892:	2003      	movs	r0, #3
 8000894:	f000 f96c 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000898:	2000      	movs	r0, #0
 800089a:	f000 f80f 	bl	80008bc <HAL_InitTick>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	e001      	b.n	80008ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008aa:	f7ff ff05 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58004000 	.word	0x58004000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_InitTick+0x6c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d024      	beq.n	800091a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008d0:	f003 f906 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 80008d4:	4602      	mov	r2, r0
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_InitTick+0x6c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f974 	bl	8000bd6 <HAL_SYSTICK_Config>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10f      	bne.n	8000914 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d809      	bhi.n	800090e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000902:	f000 f940 	bl	8000b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <HAL_InitTick+0x70>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	e007      	b.n	800091e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e004      	b.n	800091e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e001      	b.n	800091e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000000c 	.word	0x2000000c
 800092c:	20000008 	.word	0x20000008

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2000000c 	.word	0x2000000c
 8000954:	20000434 	.word	0x20000434

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000434 	.word	0x20000434

08000970 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetTickPrio+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff ffe2 	bl	8000958 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_Delay+0x44>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffd2 	bl	8000958 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
    {
    }
  }
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000000c 	.word	0x2000000c

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4907      	ldr	r1, [pc, #28]	; (8000a6c <__NVIC_EnableIRQ+0x38>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff29 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff40 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff33 	bl	8000a34 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa4 	bl	8000b2c <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	e146      	b.n	8000e8e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 8138 	beq.w	8000e88 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_GPIO_Init+0x40>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d130      	bne.n	8000c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	f003 0201 	and.w	r2, r3, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	6939      	ldr	r1, [r7, #16]
 8000d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0203 	and.w	r2, r3, #3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8092 	beq.w	8000e88 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d64:	4a51      	ldr	r2, [pc, #324]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d8e:	d013      	beq.n	8000db8 <HAL_GPIO_Init+0x1c8>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a47      	ldr	r2, [pc, #284]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d00d      	beq.n	8000db4 <HAL_GPIO_Init+0x1c4>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d007      	beq.n	8000db0 <HAL_GPIO_Init+0x1c0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d101      	bne.n	8000dac <HAL_GPIO_Init+0x1bc>
 8000da8:	2304      	movs	r3, #4
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000dac:	2307      	movs	r3, #7
 8000dae:	e004      	b.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <HAL_GPIO_Init+0x1ca>
 8000db8:	2300      	movs	r3, #0
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	f002 0203 	and.w	r2, r2, #3
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	4093      	lsls	r3, r2
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dca:	4938      	ldr	r1, [pc, #224]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dfc:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e26:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e52:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa22 f303 	lsr.w	r3, r2, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f47f aeb1 	bne.w	8000c00 <HAL_GPIO_Init+0x10>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48001000 	.word	0x48001000
 8000ebc:	58000800 	.word	0x58000800

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af06      	add	r7, sp, #24
 8000ef6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e0d7      	b.n	80010b2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d106      	bne.n	8000f1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f008 f8e4 	bl	80090e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fa06 	bl	800533a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e04c      	b.n	8000fce <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	440b      	add	r3, r1
 8000f44:	3301      	adds	r3, #1
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	b298      	uxth	r0, r3
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	3336      	adds	r3, #54	; 0x36
 8000f72:	4602      	mov	r2, r0
 8000f74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	3303      	adds	r3, #3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3338      	adds	r3, #56	; 0x38
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	333c      	adds	r3, #60	; 0x3c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	3340      	adds	r3, #64	; 0x40
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3ad      	bcc.n	8000f34 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e044      	b.n	8001068 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	440b      	add	r3, r1
 8001018:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3301      	adds	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3b5      	bcc.n	8000fde <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	687e      	ldr	r6, [r7, #4]
 800107a:	466d      	mov	r5, sp
 800107c:	f106 0410 	add.w	r4, r6, #16
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	602b      	str	r3, [r5, #0]
 8001088:	1d33      	adds	r3, r6, #4
 800108a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f004 f96f 	bl	8005370 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f001 fc29 	bl	8002902 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_PCD_Start+0x16>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e012      	b.n	80010f6 <HAL_PCD_Start+0x3c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 f915 	bl	800530c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 f8ca 	bl	8007280 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f8cf 	bl	80072ae <USB_ReadInterrupts>
 8001110:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fb26 	bl	800176e <PCD_EP_ISR_Handler>

    return;
 8001122:	e110      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112a:	2b00      	cmp	r3, #0
 800112c:	d013      	beq.n	8001156 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001140:	b292      	uxth	r2, r2
 8001142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f008 f87f 	bl	800924a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800114c:	2100      	movs	r1, #0
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f8fc 	bl	800134c <HAL_PCD_SetAddress>

    return;
 8001154:	e0f7      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00c      	beq.n	800117a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001172:	b292      	uxth	r2, r2
 8001174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001178:	e0e5      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00c      	beq.n	800119e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800118c:	b29a      	uxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001196:	b292      	uxth	r2, r2
 8001198:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800119c:	e0d3      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d034      	beq.n	8001212 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0204 	bic.w	r2, r2, #4
 80011ba:	b292      	uxth	r2, r2
 80011bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0208 	bic.w	r2, r2, #8
 80011d2:	b292      	uxth	r2, r2
 80011d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d107      	bne.n	80011f2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011ea:	2100      	movs	r1, #0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f008 fa23 	bl	8009638 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f008 f862 	bl	80092bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800120a:	b292      	uxth	r2, r2
 800120c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001210:	e099      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001218:	2b00      	cmp	r3, #0
 800121a:	d027      	beq.n	800126c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0208 	orr.w	r2, r2, #8
 800122e:	b292      	uxth	r2, r2
 8001230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001246:	b292      	uxth	r2, r2
 8001248:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0204 	orr.w	r2, r2, #4
 800125e:	b292      	uxth	r2, r2
 8001260:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f008 f80f 	bl	8009288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800126a:	e06c      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	2b00      	cmp	r3, #0
 8001274:	d040      	beq.n	80012f8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001288:	b292      	uxth	r2, r2
 800128a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d12b      	bne.n	80012f0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0204 	orr.w	r2, r2, #4
 80012aa:	b292      	uxth	r2, r2
 80012ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0208 	orr.w	r2, r2, #8
 80012c2:	b292      	uxth	r2, r2
 80012c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012d8:	b29b      	uxth	r3, r3
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012e6:	2101      	movs	r1, #1
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f008 f9a5 	bl	8009638 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80012ee:	e02a      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f007 ffc9 	bl	8009288 <HAL_PCD_SuspendCallback>
    return;
 80012f6:	e026      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00f      	beq.n	8001322 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001314:	b292      	uxth	r2, r2
 8001316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f007 ff87 	bl	800922e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001320:	e011      	b.n	8001346 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133e:	b292      	uxth	r2, r2
 8001340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001344:	bf00      	nop
  }
}
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_PCD_SetAddress+0x1a>
 8001362:	2302      	movs	r3, #2
 8001364:	e013      	b.n	800138e <HAL_PCD_SetAddress+0x42>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	78fa      	ldrb	r2, [r7, #3]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f005 ff6a 	bl	8007258 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	4608      	mov	r0, r1
 80013a0:	4611      	mov	r1, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	4603      	mov	r3, r0
 80013a6:	70fb      	strb	r3, [r7, #3]
 80013a8:	460b      	mov	r3, r1
 80013aa:	803b      	strh	r3, [r7, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da0e      	bge.n	80013da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2201      	movs	r2, #1
 80013d6:	705a      	strb	r2, [r3, #1]
 80013d8:	e00e      	b.n	80013f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	f003 0207 	and.w	r2, r3, #7
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001404:	883a      	ldrh	r2, [r7, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	78ba      	ldrb	r2, [r7, #2]
 800140e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001422:	78bb      	ldrb	r3, [r7, #2]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d102      	bne.n	800142e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_PCD_EP_Open+0xa6>
 8001438:	2302      	movs	r3, #2
 800143a:	e00e      	b.n	800145a <HAL_PCD_EP_Open+0xc4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68f9      	ldr	r1, [r7, #12]
 800144a:	4618      	mov	r0, r3
 800144c:	f003 ffb2 	bl	80053b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001458:	7afb      	ldrb	r3, [r7, #11]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800146e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da0e      	bge.n	8001494 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	705a      	strb	r2, [r3, #1]
 8001492:	e00e      	b.n	80014b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	f003 0207 	and.w	r2, r3, #7
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_PCD_EP_Close+0x6a>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e00e      	b.n	80014ea <HAL_PCD_EP_Close+0x88>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fafe 	bl	8005adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	460b      	mov	r3, r1
 8001500:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	f003 0207 	and.w	r2, r3, #7
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2200      	movs	r2, #0
 8001530:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	b2da      	uxtb	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6979      	ldr	r1, [r7, #20]
 800154e:	4618      	mov	r0, r3
 8001550:	f004 fcb1 	bl	8005eb6 <USB_EPStartXfer>
 8001554:	e005      	b.n	8001562 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6979      	ldr	r1, [r7, #20]
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fcaa 	bl	8005eb6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f003 0207 	and.w	r2, r3, #7
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	440b      	add	r3, r1
 800158a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	460b      	mov	r3, r1
 80015aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2201      	movs	r2, #1
 80015e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015f4:	7afb      	ldrb	r3, [r7, #11]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6979      	ldr	r1, [r7, #20]
 8001604:	4618      	mov	r0, r3
 8001606:	f004 fc56 	bl	8005eb6 <USB_EPStartXfer>
 800160a:	e005      	b.n	8001618 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6979      	ldr	r1, [r7, #20]
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fc4f 	bl	8005eb6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	f003 0207 	and.w	r2, r3, #7
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d901      	bls.n	8001640 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e03e      	b.n	80016be <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da0e      	bge.n	8001666 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	705a      	strb	r2, [r3, #1]
 8001664:	e00c      	b.n	8001680 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001666:	78fa      	ldrb	r2, [r7, #3]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	b2da      	uxtb	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_PCD_EP_SetStall+0x7e>
 800169c:	2302      	movs	r3, #2
 800169e:	e00e      	b.n	80016be <HAL_PCD_EP_SetStall+0x9c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f005 fcd3 	bl	800705a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	f003 020f 	and.w	r2, r3, #15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d901      	bls.n	80016e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e040      	b.n	8001766 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da0e      	bge.n	800170a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	705a      	strb	r2, [r3, #1]
 8001708:	e00e      	b.n	8001728 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 0207 	and.w	r2, r3, #7
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	b2da      	uxtb	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_PCD_EP_ClrStall+0x82>
 8001744:	2302      	movs	r3, #2
 8001746:	e00e      	b.n	8001766 <HAL_PCD_EP_ClrStall+0xa0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f005 fcd0 	bl	80070fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b096      	sub	sp, #88	; 0x58
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001776:	e39c      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001780:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001784:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001792:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 815e 	bne.w	8001a58 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800179c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d150      	bne.n	800184a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b8:	81fb      	strh	r3, [r7, #14]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	89fb      	ldrh	r3, [r7, #14]
 80017c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3328      	adds	r3, #40	; 0x28
 80017d0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017da:	b29b      	uxth	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	441a      	add	r2, r3
 8001804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001806:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001808:	2100      	movs	r1, #0
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f007 fcf5 	bl	80091fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 834a 	beq.w	8001eb2 <PCD_EP_ISR_Handler+0x744>
 800181e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8345 	bne.w	8001eb2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001834:	b2da      	uxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b292      	uxth	r2, r2
 800183c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001848:	e333      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001850:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800185c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001864:	2b00      	cmp	r3, #0
 8001866:	d032      	beq.n	80018ce <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001870:	b29b      	uxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4413      	add	r3, r2
 8001882:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800188c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800188e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800189e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	f005 fd55 	bl	8007352 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018b4:	4013      	ands	r3, r2
 80018b6:	823b      	strh	r3, [r7, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	8a3a      	ldrh	r2, [r7, #16]
 80018be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c2:	b292      	uxth	r2, r2
 80018c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f007 fc6a 	bl	80091a0 <HAL_PCD_SetupStageCallback>
 80018cc:	e2f1      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018ce:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f280 82ed 	bge.w	8001eb2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018e4:	4013      	ands	r3, r2
 80018e6:	83fb      	strh	r3, [r7, #30]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	8bfa      	ldrh	r2, [r7, #30]
 80018ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f2:	b292      	uxth	r2, r2
 80018f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fe:	b29b      	uxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	4413      	add	r3, r2
 8001910:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800191e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d019      	beq.n	800195a <PCD_EP_ISR_Handler+0x1ec>
 8001926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d015      	beq.n	800195a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001934:	6959      	ldr	r1, [r3, #20]
 8001936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001938:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800193a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800193c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800193e:	b29b      	uxth	r3, r3
 8001940:	f005 fd07 	bl	8007352 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	441a      	add	r2, r3
 800194e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001950:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f007 fc35 	bl	80091c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 82a3 	bne.w	8001eb2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4413      	add	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b3e      	cmp	r3, #62	; 0x3e
 8001992:	d918      	bls.n	80019c6 <PCD_EP_ISR_Handler+0x258>
 8001994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	095b      	lsrs	r3, r3, #5
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
 800199c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <PCD_EP_ISR_Handler+0x240>
 80019a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019aa:	3b01      	subs	r3, #1
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
 80019ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	029b      	lsls	r3, r3, #10
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019be:	b29a      	uxth	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	801a      	strh	r2, [r3, #0]
 80019c4:	e029      	b.n	8001a1a <PCD_EP_ISR_Handler+0x2ac>
 80019c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d112      	bne.n	80019f4 <PCD_EP_ISR_Handler+0x286>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019d8:	b29a      	uxth	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	e012      	b.n	8001a1a <PCD_EP_ISR_Handler+0x2ac>
 80019f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
 80019fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <PCD_EP_ISR_Handler+0x2a0>
 8001a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2a:	827b      	strh	r3, [r7, #18]
 8001a2c:	8a7b      	ldrh	r3, [r7, #18]
 8001a2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a32:	827b      	strh	r3, [r7, #18]
 8001a34:	8a7b      	ldrh	r3, [r7, #18]
 8001a36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a3a:	827b      	strh	r3, [r7, #18]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	8a7b      	ldrh	r3, [r7, #18]
 8001a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	8013      	strh	r3, [r2, #0]
 8001a56:	e22c      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a6c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f280 80f6 	bge.w	8001c62 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001aa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa8:	b292      	uxth	r2, r2
 8001aaa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001aac:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac4:	7b1b      	ldrb	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d123      	bne.n	8001b12 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001af2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 808e 	beq.w	8001c18 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b02:	6959      	ldr	r1, [r3, #20]
 8001b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b06:	88da      	ldrh	r2, [r3, #6]
 8001b08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b0c:	f005 fc21 	bl	8007352 <USB_ReadPMA>
 8001b10:	e082      	b.n	8001c18 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b14:	78db      	ldrb	r3, [r3, #3]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d10a      	bne.n	8001b30 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b1a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f9d3 	bl	8001ece <HAL_PCD_EP_DB_Receive>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b2e:	e073      	b.n	8001c18 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	441a      	add	r2, r3
 8001b5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d022      	beq.n	8001bd4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001bb6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d02c      	beq.n	8001c18 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc4:	6959      	ldr	r1, [r3, #20]
 8001bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc8:	891a      	ldrh	r2, [r3, #8]
 8001bca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bce:	f005 fbc0 	bl	8007352 <USB_ReadPMA>
 8001bd2:	e021      	b.n	8001c18 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001bfc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0a:	6959      	ldr	r1, [r3, #20]
 8001c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0e:	895a      	ldrh	r2, [r3, #10]
 8001c10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c14:	f005 fb9d 	bl	8007352 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1a:	69da      	ldr	r2, [r3, #28]
 8001c1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c20:	441a      	add	r2, r3
 8001c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c2e:	441a      	add	r2, r3
 8001c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <PCD_EP_ISR_Handler+0x4da>
 8001c3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d206      	bcs.n	8001c56 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f007 fab8 	bl	80091c4 <HAL_PCD_DataOutStageCallback>
 8001c54:	e005      	b.n	8001c62 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 f92a 	bl	8005eb6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8121 	beq.w	8001eb2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c70:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	441a      	add	r2, r3
 8001cb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	f000 80a2 	beq.w	8001e0e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8001cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd2:	7b1b      	ldrb	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8093 	beq.w	8001e00 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d046      	beq.n	8001d74 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d126      	bne.n	8001d3c <PCD_EP_ISR_Handler+0x5ce>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	4413      	add	r3, r2
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	00da      	lsls	r2, r3, #3
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	4413      	add	r3, r2
 8001d10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d14:	623b      	str	r3, [r7, #32]
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	801a      	strh	r2, [r3, #0]
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	e061      	b.n	8001e00 <PCD_EP_ISR_Handler+0x692>
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d15d      	bne.n	8001e00 <PCD_EP_ISR_Handler+0x692>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	4413      	add	r3, r2
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	00da      	lsls	r2, r3, #3
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	4413      	add	r3, r2
 8001d66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	e045      	b.n	8001e00 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d126      	bne.n	8001dd0 <PCD_EP_ISR_Handler+0x662>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	4413      	add	r3, r2
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
 8001d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	00da      	lsls	r2, r3, #3
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	4413      	add	r3, r2
 8001da4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	e017      	b.n	8001e00 <PCD_EP_ISR_Handler+0x692>
 8001dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd2:	785b      	ldrb	r3, [r3, #1]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d113      	bne.n	8001e00 <PCD_EP_ISR_Handler+0x692>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de6:	4413      	add	r3, r2
 8001de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	00da      	lsls	r2, r3, #3
 8001df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df2:	4413      	add	r3, r2
 8001df4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f007 f9f7 	bl	80091fa <HAL_PCD_DataInStageCallback>
 8001e0c:	e051      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d144      	bne.n	8001ea4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d907      	bls.n	8001e5e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8001e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e5a:	619a      	str	r2, [r3, #24]
 8001e5c:	e002      	b.n	8001e64 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d106      	bne.n	8001e7a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f007 f9c1 	bl	80091fa <HAL_PCD_DataInStageCallback>
 8001e78:	e01b      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e82:	441a      	add	r2, r3
 8001e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e86:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e90:	441a      	add	r2, r3
 8001e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e94:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 f80a 	bl	8005eb6 <USB_EPStartXfer>
 8001ea2:	e006      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ea4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f917 	bl	80020e0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f6ff ac5a 	blt.w	8001778 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3758      	adds	r7, #88	; 0x58
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b088      	sub	sp, #32
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d07c      	beq.n	8001fe0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	8b7b      	ldrh	r3, [r7, #26]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d306      	bcc.n	8001f24 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	8b7b      	ldrh	r3, [r7, #26]
 8001f1c:	1ad2      	subs	r2, r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	619a      	str	r2, [r3, #24]
 8001f22:	e002      	b.n	8001f2a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d123      	bne.n	8001f7a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4c:	833b      	strh	r3, [r7, #24]
 8001f4e:	8b3b      	ldrh	r3, [r7, #24]
 8001f50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f54:	833b      	strh	r3, [r7, #24]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	441a      	add	r2, r3
 8001f64:	8b3b      	ldrh	r3, [r7, #24]
 8001f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01f      	beq.n	8001fc4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9e:	82fb      	strh	r3, [r7, #22]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	441a      	add	r2, r3
 8001fae:	8afb      	ldrh	r3, [r7, #22]
 8001fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fc4:	8b7b      	ldrh	r3, [r7, #26]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8085 	beq.w	80020d6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	6959      	ldr	r1, [r3, #20]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	891a      	ldrh	r2, [r3, #8]
 8001fd8:	8b7b      	ldrh	r3, [r7, #26]
 8001fda:	f005 f9ba 	bl	8007352 <USB_ReadPMA>
 8001fde:	e07a      	b.n	80020d6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002004:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	8b7b      	ldrh	r3, [r7, #26]
 800200c:	429a      	cmp	r2, r3
 800200e:	d306      	bcc.n	800201e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	8b7b      	ldrh	r3, [r7, #26]
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	e002      	b.n	8002024 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d123      	bne.n	8002074 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	83fb      	strh	r3, [r7, #30]
 8002048:	8bfb      	ldrh	r3, [r7, #30]
 800204a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800204e:	83fb      	strh	r3, [r7, #30]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	441a      	add	r2, r3
 800205e:	8bfb      	ldrh	r3, [r7, #30]
 8002060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	b29b      	uxth	r3, r3
 8002072:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11f      	bne.n	80020be <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002098:	83bb      	strh	r3, [r7, #28]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	441a      	add	r2, r3
 80020a8:	8bbb      	ldrh	r3, [r7, #28]
 80020aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020be:	8b7b      	ldrh	r3, [r7, #26]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6959      	ldr	r1, [r3, #20]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	895a      	ldrh	r2, [r3, #10]
 80020d0:	8b7b      	ldrh	r3, [r7, #26]
 80020d2:	f005 f93e 	bl	8007352 <USB_ReadPMA>
    }
  }

  return count;
 80020d6:	8b7b      	ldrh	r3, [r7, #26]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0a2      	sub	sp, #136	; 0x88
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 81c5 	beq.w	8002484 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	4413      	add	r3, r2
 8002114:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800212a:	429a      	cmp	r2, r3
 800212c:	d907      	bls.n	800213e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	619a      	str	r2, [r3, #24]
 800213c:	e002      	b.n	8002144 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 80b9 	bne.w	80022c0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d126      	bne.n	80021a4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	4413      	add	r3, r2
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	00da      	lsls	r2, r3, #3
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	4413      	add	r3, r2
 8002178:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002188:	b29a      	uxth	r2, r3
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219c:	b29a      	uxth	r2, r3
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	e01a      	b.n	80021da <HAL_PCD_EP_DB_Transmit+0xfa>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	785b      	ldrb	r3, [r3, #1]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d116      	bne.n	80021da <HAL_PCD_EP_DB_Transmit+0xfa>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	4413      	add	r3, r2
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	00da      	lsls	r2, r3, #3
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	4413      	add	r3, r2
 80021ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	2200      	movs	r2, #0
 80021d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d126      	bne.n	8002236 <HAL_PCD_EP_DB_Transmit+0x156>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4413      	add	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	00da      	lsls	r2, r3, #3
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4413      	add	r3, r2
 800220a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800221a:	b29a      	uxth	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	801a      	strh	r2, [r3, #0]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800222e:	b29a      	uxth	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	e017      	b.n	8002266 <HAL_PCD_EP_DB_Transmit+0x186>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d113      	bne.n	8002266 <HAL_PCD_EP_DB_Transmit+0x186>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	4413      	add	r3, r2
 800224e:	623b      	str	r3, [r7, #32]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	00da      	lsls	r2, r3, #3
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	4413      	add	r3, r2
 800225a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2200      	movs	r2, #0
 8002264:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	4619      	mov	r1, r3
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f006 ffc4 	bl	80091fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 82d2 	beq.w	8002822 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002298:	827b      	strh	r3, [r7, #18]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	8a7b      	ldrh	r3, [r7, #18]
 80022aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	8013      	strh	r3, [r2, #0]
 80022be:	e2b0      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d021      	beq.n	800230e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	441a      	add	r2, r3
 80022f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80022fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230a:	b29b      	uxth	r3, r3
 800230c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002314:	2b01      	cmp	r3, #1
 8002316:	f040 8284 	bne.w	8002822 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002322:	441a      	add	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	441a      	add	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6a1a      	ldr	r2, [r3, #32]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d309      	bcc.n	8002356 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	621a      	str	r2, [r3, #32]
 8002354:	e015      	b.n	8002382 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d107      	bne.n	800236e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800235e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002362:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800236c:	e009      	b.n	8002382 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d155      	bne.n	8002436 <HAL_PCD_EP_DB_Transmit+0x356>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239e:	4413      	add	r3, r2
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	00da      	lsls	r2, r3, #3
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	4413      	add	r3, r2
 80023ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
 80023b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b4:	2b3e      	cmp	r3, #62	; 0x3e
 80023b6:	d916      	bls.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x306>
 80023b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80023be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <HAL_PCD_EP_DB_Transmit+0x2ee>
 80023c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ca:	3b01      	subs	r3, #1
 80023cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	029b      	lsls	r3, r3, #10
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023de:	b29a      	uxth	r2, r3
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	801a      	strh	r2, [r3, #0]
 80023e4:	e043      	b.n	800246e <HAL_PCD_EP_DB_Transmit+0x38e>
 80023e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d112      	bne.n	8002412 <HAL_PCD_EP_DB_Transmit+0x332>
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fa:	801a      	strh	r2, [r3, #0]
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240a:	b29a      	uxth	r2, r3
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	801a      	strh	r2, [r3, #0]
 8002410:	e02d      	b.n	800246e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	64bb      	str	r3, [r7, #72]	; 0x48
 8002418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_PCD_EP_DB_Transmit+0x348>
 8002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002424:	3301      	adds	r3, #1
 8002426:	64bb      	str	r3, [r7, #72]	; 0x48
 8002428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242a:	b29b      	uxth	r3, r3
 800242c:	029b      	lsls	r3, r3, #10
 800242e:	b29a      	uxth	r2, r3
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	801a      	strh	r2, [r3, #0]
 8002434:	e01b      	b.n	800246e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d117      	bne.n	800246e <HAL_PCD_EP_DB_Transmit+0x38e>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	643b      	str	r3, [r7, #64]	; 0x40
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002452:	4413      	add	r3, r2
 8002454:	643b      	str	r3, [r7, #64]	; 0x40
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	00da      	lsls	r2, r3, #3
 800245c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245e:	4413      	add	r3, r2
 8002460:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002468:	b29a      	uxth	r2, r3
 800246a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6959      	ldr	r1, [r3, #20]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	891a      	ldrh	r2, [r3, #8]
 800247a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800247c:	b29b      	uxth	r3, r3
 800247e:	f004 ff26 	bl	80072ce <USB_WritePMA>
 8002482:	e1ce      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	4413      	add	r3, r2
 800249e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d307      	bcc.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c0:	1ad2      	subs	r2, r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	619a      	str	r2, [r3, #24]
 80024c6:	e002      	b.n	80024ce <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 80c4 	bne.w	8002660 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	785b      	ldrb	r3, [r3, #1]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d126      	bne.n	800252e <HAL_PCD_EP_DB_Transmit+0x44e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f4:	4413      	add	r3, r2
 80024f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	00da      	lsls	r2, r3, #3
 80024fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002500:	4413      	add	r3, r2
 8002502:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002506:	667b      	str	r3, [r7, #100]	; 0x64
 8002508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002512:	b29a      	uxth	r2, r3
 8002514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002526:	b29a      	uxth	r2, r3
 8002528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	e01a      	b.n	8002564 <HAL_PCD_EP_DB_Transmit+0x484>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d116      	bne.n	8002564 <HAL_PCD_EP_DB_Transmit+0x484>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	673b      	str	r3, [r7, #112]	; 0x70
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800254a:	4413      	add	r3, r2
 800254c:	673b      	str	r3, [r7, #112]	; 0x70
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	00da      	lsls	r2, r3, #3
 8002554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002556:	4413      	add	r3, r2
 8002558:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800255c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002560:	2200      	movs	r2, #0
 8002562:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	67fb      	str	r3, [r7, #124]	; 0x7c
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	785b      	ldrb	r3, [r3, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d12f      	bne.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800258a:	4413      	add	r3, r2
 800258c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	00da      	lsls	r2, r3, #3
 8002596:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800259a:	4413      	add	r3, r2
 800259c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	e017      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x522>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d113      	bne.n	8002602 <HAL_PCD_EP_DB_Transmit+0x522>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025e8:	4413      	add	r3, r2
 80025ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	00da      	lsls	r2, r3, #3
 80025f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025f4:	4413      	add	r3, r2
 80025f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80025fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fe:	2200      	movs	r2, #0
 8002600:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	4619      	mov	r1, r3
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f006 fdf6 	bl	80091fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 8104 	bne.w	8002822 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002634:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	441a      	add	r2, r3
 8002646:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800264a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800264e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265a:	b29b      	uxth	r3, r3
 800265c:	8013      	strh	r3, [r2, #0]
 800265e:	e0e0      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d121      	bne.n	80026ae <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002684:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	441a      	add	r2, r3
 8002696:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800269a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800269e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	f040 80b4 	bne.w	8002822 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c2:	441a      	add	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d0:	441a      	add	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6a1a      	ldr	r2, [r3, #32]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d309      	bcc.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	621a      	str	r2, [r3, #32]
 80026f4:	e015      	b.n	8002722 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d107      	bne.n	800270e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80026fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002702:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800270c:	e009      	b.n	8002722 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2200      	movs	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	663b      	str	r3, [r7, #96]	; 0x60
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d155      	bne.n	80027dc <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	65bb      	str	r3, [r7, #88]	; 0x58
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002744:	4413      	add	r3, r2
 8002746:	65bb      	str	r3, [r7, #88]	; 0x58
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	00da      	lsls	r2, r3, #3
 800274e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002750:	4413      	add	r3, r2
 8002752:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002756:	657b      	str	r3, [r7, #84]	; 0x54
 8002758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275a:	2b3e      	cmp	r3, #62	; 0x3e
 800275c:	d916      	bls.n	800278c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800275e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	677b      	str	r3, [r7, #116]	; 0x74
 8002764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_PCD_EP_DB_Transmit+0x694>
 800276e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002770:	3b01      	subs	r3, #1
 8002772:	677b      	str	r3, [r7, #116]	; 0x74
 8002774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002776:	b29b      	uxth	r3, r3
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	b29b      	uxth	r3, r3
 800277c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002784:	b29a      	uxth	r2, r3
 8002786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	e040      	b.n	800280e <HAL_PCD_EP_DB_Transmit+0x72e>
 800278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278e:	2b00      	cmp	r3, #0
 8002790:	d112      	bne.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800279c:	b29a      	uxth	r2, r3
 800279e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a0:	801a      	strh	r2, [r3, #0]
 80027a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	e02a      	b.n	800280e <HAL_PCD_EP_DB_Transmit+0x72e>
 80027b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	677b      	str	r3, [r7, #116]	; 0x74
 80027be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_PCD_EP_DB_Transmit+0x6ee>
 80027c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ca:	3301      	adds	r3, #1
 80027cc:	677b      	str	r3, [r7, #116]	; 0x74
 80027ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	e018      	b.n	800280e <HAL_PCD_EP_DB_Transmit+0x72e>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	785b      	ldrb	r3, [r3, #1]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d114      	bne.n	800280e <HAL_PCD_EP_DB_Transmit+0x72e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027f2:	4413      	add	r3, r2
 80027f4:	663b      	str	r3, [r7, #96]	; 0x60
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	00da      	lsls	r2, r3, #3
 80027fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027fe:	4413      	add	r3, r2
 8002800:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002808:	b29a      	uxth	r2, r3
 800280a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	6959      	ldr	r1, [r3, #20]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	895a      	ldrh	r2, [r3, #10]
 800281a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	f004 fd56 	bl	80072ce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283c:	823b      	strh	r3, [r7, #16]
 800283e:	8a3b      	ldrh	r3, [r7, #16]
 8002840:	f083 0310 	eor.w	r3, r3, #16
 8002844:	823b      	strh	r3, [r7, #16]
 8002846:	8a3b      	ldrh	r3, [r7, #16]
 8002848:	f083 0320 	eor.w	r3, r3, #32
 800284c:	823b      	strh	r3, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	441a      	add	r2, r3
 800285c:	8a3b      	ldrh	r3, [r7, #16]
 800285e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286e:	b29b      	uxth	r3, r3
 8002870:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3788      	adds	r7, #136	; 0x88
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	4613      	mov	r3, r2
 800288c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e009      	b.n	80028c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028b2:	897a      	ldrh	r2, [r7, #10]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2200      	movs	r2, #0
 80028d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	80da      	strh	r2, [r3, #6]
 80028da:	e00b      	b.n	80028f4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2201      	movs	r2, #1
 80028e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002926:	b29b      	uxth	r3, r3
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800293a:	b29b      	uxth	r3, r3
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a04      	ldr	r2, [pc, #16]	; (8002974 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	58000400 	.word	0x58000400

08002978 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <HAL_PWREx_GetVoltageRange+0x18>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	58000400 	.word	0x58000400

08002994 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800299e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a2:	6053      	str	r3, [r2, #4]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	58000400 	.word	0x58000400

080029b4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c6:	d101      	bne.n	80029cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a26:	d101      	bne.n	8002a2c <LL_RCC_HSE_IsReady+0x18>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <LL_RCC_HSE_IsReady+0x1a>
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	6013      	str	r3, [r2, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d101      	bne.n	8002a8c <LL_RCC_HSI_IsReady+0x18>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <LL_RCC_HSI_IsReady+0x1a>
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d101      	bne.n	8002b1e <LL_RCC_HSI48_IsReady+0x18>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_RCC_HSI48_IsReady+0x1a>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d101      	bne.n	8002bca <LL_RCC_LSE_IsReady+0x18>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_RCC_LSE_IsReady+0x1a>
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d101      	bne.n	8002c32 <LL_RCC_LSI1_IsReady+0x18>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_RCC_LSI1_IsReady+0x1a>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d101      	bne.n	8002c9a <LL_RCC_LSI2_IsReady+0x18>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <LL_RCC_LSI2_IsReady+0x1a>
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d101      	bne.n	8002d26 <LL_RCC_MSI_IsReady+0x16>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <LL_RCC_MSI_IsReady+0x18>
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2bb0      	cmp	r3, #176	; 0xb0
 8002d70:	d901      	bls.n	8002d76 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002d72:	23b0      	movs	r3, #176	; 0xb0
 8002d74:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002d76:	687b      	ldr	r3, [r7, #4]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 0203 	bic.w	r2, r3, #3
 8002dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e52:	f023 020f 	bic.w	r2, r3, #15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f24:	6013      	str	r3, [r2, #0]
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f42:	d101      	bne.n	8002f48 <LL_RCC_PLL_IsReady+0x18>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <LL_RCC_PLL_IsReady+0x1a>
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d101      	bne.n	8002fce <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fee:	d101      	bne.n	8002ff4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003008:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800300c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d101      	bne.n	800301a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003038:	d101      	bne.n	800303e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003058:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800305c:	d101      	bne.n	8003062 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b08d      	sub	sp, #52	; 0x34
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e37e      	b.n	8003780 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8092 	beq.w	80031b4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003090:	f7ff fea1 	bl	8002dd6 <LL_RCC_GetSysClkSource>
 8003094:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003096:	f7ff ff82 	bl	8002f9e <LL_RCC_PLL_GetMainSource>
 800309a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_RCC_OscConfig+0x3e>
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d14c      	bne.n	8003142 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d149      	bne.n	8003142 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ae:	f7ff fe2f 	bl	8002d10 <LL_RCC_MSI_IsReady>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_OscConfig+0x54>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e35d      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80030c8:	f7ff fe47 	bl	8002d5a <LL_RCC_MSI_GetRange>
 80030cc:	4603      	mov	r3, r0
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d914      	bls.n	80030fc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fd16 	bl	8003b08 <RCC_SetFlashLatencyFromMSIRange>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e34c      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fe21 	bl	8002d32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe45 	bl	8002d84 <LL_RCC_MSI_SetCalibTrimming>
 80030fa:	e013      	b.n	8003124 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fe16 	bl	8002d32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe3a 	bl	8002d84 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fcf7 	bl	8003b08 <RCC_SetFlashLatencyFromMSIRange>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e32d      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003124:	f000 fcdc 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003128:	4603      	mov	r3, r0
 800312a:	4ab3      	ldr	r2, [pc, #716]	; (80033f8 <HAL_RCC_OscConfig+0x388>)
 800312c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800312e:	4bb3      	ldr	r3, [pc, #716]	; (80033fc <HAL_RCC_OscConfig+0x38c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fbc2 	bl	80008bc <HAL_InitTick>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d039      	beq.n	80031b2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e31e      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01e      	beq.n	8003188 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800314a:	f7ff fdc3 	bl	8002cd4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314e:	f7fd fc03 	bl	8000958 <HAL_GetTick>
 8003152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003156:	f7fd fbff 	bl	8000958 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e30b      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003168:	f7ff fdd2 	bl	8002d10 <LL_RCC_MSI_IsReady>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f1      	beq.n	8003156 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fddb 	bl	8002d32 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fdff 	bl	8002d84 <LL_RCC_MSI_SetCalibTrimming>
 8003186:	e015      	b.n	80031b4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003188:	f7ff fdb3 	bl	8002cf2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800318c:	f7fd fbe4 	bl	8000958 <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003194:	f7fd fbe0 	bl	8000958 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e2ec      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031a6:	f7ff fdb3 	bl	8002d10 <LL_RCC_MSI_IsReady>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f1      	bne.n	8003194 <HAL_RCC_OscConfig+0x124>
 80031b0:	e000      	b.n	80031b4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d04e      	beq.n	800325e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c0:	f7ff fe09 	bl	8002dd6 <LL_RCC_GetSysClkSource>
 80031c4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c6:	f7ff feea 	bl	8002f9e <LL_RCC_PLL_GetMainSource>
 80031ca:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d005      	beq.n	80031de <HAL_RCC_OscConfig+0x16e>
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d10a      	bne.n	80031f4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	f7ff fc19 	bl	8002a14 <LL_RCC_HSE_IsReady>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d039      	beq.n	800325c <HAL_RCC_OscConfig+0x1ec>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d135      	bne.n	800325c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e2c5      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d102      	bne.n	8003204 <HAL_RCC_OscConfig+0x194>
 80031fe:	f7ff fbeb 	bl	80029d8 <LL_RCC_HSE_Enable>
 8003202:	e001      	b.n	8003208 <HAL_RCC_OscConfig+0x198>
 8003204:	f7ff fbf7 	bl	80029f6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fd fba2 	bl	8000958 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fd fb9e 	bl	8000958 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e2aa      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800322a:	f7ff fbf3 	bl	8002a14 <LL_RCC_HSE_IsReady>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f1      	beq.n	8003218 <HAL_RCC_OscConfig+0x1a8>
 8003234:	e013      	b.n	800325e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fd fb8f 	bl	8000958 <HAL_GetTick>
 800323a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323e:	f7fd fb8b 	bl	8000958 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	; 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e297      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003250:	f7ff fbe0 	bl	8002a14 <LL_RCC_HSE_IsReady>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f1      	bne.n	800323e <HAL_RCC_OscConfig+0x1ce>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d051      	beq.n	800330e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326a:	f7ff fdb4 	bl	8002dd6 <LL_RCC_GetSysClkSource>
 800326e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003270:	f7ff fe95 	bl	8002f9e <LL_RCC_PLL_GetMainSource>
 8003274:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d005      	beq.n	8003288 <HAL_RCC_OscConfig+0x218>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d113      	bne.n	80032aa <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d110      	bne.n	80032aa <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003288:	f7ff fbf4 	bl	8002a74 <LL_RCC_HSI_IsReady>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_RCC_OscConfig+0x22e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e270      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fbf8 	bl	8002a98 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a8:	e031      	b.n	800330e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d019      	beq.n	80032e6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b2:	f7ff fbc1 	bl	8002a38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fd fb4f 	bl	8000958 <HAL_GetTick>
 80032ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032be:	f7fd fb4b 	bl	8000958 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e257      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032d0:	f7ff fbd0 	bl	8002a74 <LL_RCC_HSI_IsReady>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f1      	beq.n	80032be <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fbda 	bl	8002a98 <LL_RCC_HSI_SetCalibTrimming>
 80032e4:	e013      	b.n	800330e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	f7ff fbb6 	bl	8002a56 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd fb35 	bl	8000958 <HAL_GetTick>
 80032ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fd fb31 	bl	8000958 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e23d      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003304:	f7ff fbb6 	bl	8002a74 <LL_RCC_HSI_IsReady>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f1      	bne.n	80032f2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a3 	beq.w	800346e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d076      	beq.n	800341e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d046      	beq.n	80033ca <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800333c:	f7ff fc6d 	bl	8002c1a <LL_RCC_LSI1_IsReady>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d113      	bne.n	800336e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003346:	f7ff fc46 	bl	8002bd6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800334a:	f7fd fb05 	bl	8000958 <HAL_GetTick>
 800334e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003352:	f7fd fb01 	bl	8000958 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e20d      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003364:	f7ff fc59 	bl	8002c1a <LL_RCC_LSI1_IsReady>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f1      	beq.n	8003352 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800336e:	f7ff fc66 	bl	8002c3e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fd faf1 	bl	8000958 <HAL_GetTick>
 8003376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800337a:	f7fd faed 	bl	8000958 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b03      	cmp	r3, #3
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1f9      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800338c:	f7ff fc79 	bl	8002c82 <LL_RCC_LSI2_IsReady>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f1      	beq.n	800337a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fc83 	bl	8002ca6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80033a0:	f7ff fc2a 	bl	8002bf8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fd fad8 	bl	8000958 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033ac:	f7fd fad4 	bl	8000958 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1e0      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033be:	f7ff fc2c 	bl	8002c1a <LL_RCC_LSI1_IsReady>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f1      	bne.n	80033ac <HAL_RCC_OscConfig+0x33c>
 80033c8:	e051      	b.n	800346e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033ca:	f7ff fc04 	bl	8002bd6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fd fac3 	bl	8000958 <HAL_GetTick>
 80033d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033d6:	f7fd fabf 	bl	8000958 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1cb      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033e8:	f7ff fc17 	bl	8002c1a <LL_RCC_LSI1_IsReady>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f1      	beq.n	80033d6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033f2:	f7ff fc35 	bl	8002c60 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033f6:	e00c      	b.n	8003412 <HAL_RCC_OscConfig+0x3a2>
 80033f8:	20000004 	.word	0x20000004
 80033fc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003400:	f7fd faaa 	bl	8000958 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b03      	cmp	r3, #3
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1b6      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003412:	f7ff fc36 	bl	8002c82 <LL_RCC_LSI2_IsReady>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f1      	bne.n	8003400 <HAL_RCC_OscConfig+0x390>
 800341c:	e027      	b.n	800346e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800341e:	f7ff fc1f 	bl	8002c60 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fd fa99 	bl	8000958 <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800342a:	f7fd fa95 	bl	8000958 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b03      	cmp	r3, #3
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1a1      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800343c:	f7ff fc21 	bl	8002c82 <LL_RCC_LSI2_IsReady>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f1      	bne.n	800342a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003446:	f7ff fbd7 	bl	8002bf8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344a:	f7fd fa85 	bl	8000958 <HAL_GetTick>
 800344e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003452:	f7fd fa81 	bl	8000958 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e18d      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003464:	f7ff fbd9 	bl	8002c1a <LL_RCC_LSI1_IsReady>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f1      	bne.n	8003452 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d05b      	beq.n	8003532 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347a:	4bb5      	ldr	r3, [pc, #724]	; (8003750 <HAL_RCC_OscConfig+0x6e0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d114      	bne.n	80034b0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003486:	f7ff fa67 	bl	8002958 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348a:	f7fd fa65 	bl	8000958 <HAL_GetTick>
 800348e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003492:	f7fd fa61 	bl	8000958 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e16d      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a4:	4baa      	ldr	r3, [pc, #680]	; (8003750 <HAL_RCC_OscConfig+0x6e0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d102      	bne.n	80034be <HAL_RCC_OscConfig+0x44e>
 80034b8:	f7ff fb37 	bl	8002b2a <LL_RCC_LSE_Enable>
 80034bc:	e00c      	b.n	80034d8 <HAL_RCC_OscConfig+0x468>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d104      	bne.n	80034d0 <HAL_RCC_OscConfig+0x460>
 80034c6:	f7ff fb52 	bl	8002b6e <LL_RCC_LSE_EnableBypass>
 80034ca:	f7ff fb2e 	bl	8002b2a <LL_RCC_LSE_Enable>
 80034ce:	e003      	b.n	80034d8 <HAL_RCC_OscConfig+0x468>
 80034d0:	f7ff fb3c 	bl	8002b4c <LL_RCC_LSE_Disable>
 80034d4:	f7ff fb5c 	bl	8002b90 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d014      	beq.n	800350a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fd fa3a 	bl	8000958 <HAL_GetTick>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fd fa36 	bl	8000958 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e140      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034fe:	f7ff fb58 	bl	8002bb2 <LL_RCC_LSE_IsReady>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ef      	beq.n	80034e8 <HAL_RCC_OscConfig+0x478>
 8003508:	e013      	b.n	8003532 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fd fa25 	bl	8000958 <HAL_GetTick>
 800350e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fd fa21 	bl	8000958 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e12b      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003528:	f7ff fb43 	bl	8002bb2 <LL_RCC_LSE_IsReady>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ef      	bne.n	8003512 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02c      	beq.n	8003598 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d014      	beq.n	8003570 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003546:	f7ff fabc 	bl	8002ac2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fd fa05 	bl	8000958 <HAL_GetTick>
 800354e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003552:	f7fd fa01 	bl	8000958 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e10d      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003564:	f7ff facf 	bl	8002b06 <LL_RCC_HSI48_IsReady>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f1      	beq.n	8003552 <HAL_RCC_OscConfig+0x4e2>
 800356e:	e013      	b.n	8003598 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003570:	f7ff fab8 	bl	8002ae4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd f9f0 	bl	8000958 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357c:	f7fd f9ec 	bl	8000958 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e0f8      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800358e:	f7ff faba 	bl	8002b06 <LL_RCC_HSI48_IsReady>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f1      	bne.n	800357c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ee 	beq.w	800377e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	f7ff fc18 	bl	8002dd6 <LL_RCC_GetSysClkSource>
 80035a6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	f040 80af 	bne.w	8003718 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0203 	and.w	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d123      	bne.n	8003610 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d11c      	bne.n	8003610 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d114      	bne.n	8003610 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d10d      	bne.n	8003610 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d106      	bne.n	8003610 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d05d      	beq.n	80036cc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	d058      	beq.n	80036c8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0ab      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003628:	f7ff fc73 	bl	8002f12 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800362c:	f7fd f994 	bl	8000958 <HAL_GetTick>
 8003630:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fd f990 	bl	8000958 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e09c      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ef      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_RCC_OscConfig+0x6e4>)
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800366c:	0212      	lsls	r2, r2, #8
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003674:	4311      	orrs	r1, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003680:	430a      	orrs	r2, r1
 8003682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003686:	4313      	orrs	r3, r2
 8003688:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800368a:	f7ff fc33 	bl	8002ef4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800369e:	f7fd f95b 	bl	8000958 <HAL_GetTick>
 80036a2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fd f957 	bl	8000958 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e063      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ef      	beq.n	80036a6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c6:	e05a      	b.n	800377e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e059      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d151      	bne.n	800377e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036da:	f7ff fc0b 	bl	8002ef4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ec:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036ee:	f7fd f933 	bl	8000958 <HAL_GetTick>
 80036f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fd f92f 	bl	8000958 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e03b      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ef      	beq.n	80036f6 <HAL_RCC_OscConfig+0x686>
 8003716:	e032      	b.n	800377e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d02d      	beq.n	800377a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	f7ff fbf8 	bl	8002f12 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372c:	f023 0303 	bic.w	r3, r3, #3
 8003730:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800373c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003744:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd f907 	bl	8000958 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374c:	e00d      	b.n	800376a <HAL_RCC_OscConfig+0x6fa>
 800374e:	bf00      	nop
 8003750:	58000400 	.word	0x58000400
 8003754:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fd f8fe 	bl	8000958 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e00a      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ef      	bne.n	8003758 <HAL_RCC_OscConfig+0x6e8>
 8003778:	e001      	b.n	800377e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3734      	adds	r7, #52	; 0x34
 8003784:	46bd      	mov	sp, r7
 8003786:	bd90      	pop	{r4, r7, pc}

08003788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e12d      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b98      	ldr	r3, [pc, #608]	; (8003a00 <HAL_RCC_ClockConfig+0x278>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d91b      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b95      	ldr	r3, [pc, #596]	; (8003a00 <HAL_RCC_ClockConfig+0x278>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4993      	ldr	r1, [pc, #588]	; (8003a00 <HAL_RCC_ClockConfig+0x278>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ba:	f7fd f8cd 	bl	8000958 <HAL_GetTick>
 80037be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037c2:	f7fd f8c9 	bl	8000958 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e111      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d4:	4b8a      	ldr	r3, [pc, #552]	; (8003a00 <HAL_RCC_ClockConfig+0x278>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d1ef      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fafb 	bl	8002dee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037f8:	f7fd f8ae 	bl	8000958 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003800:	f7fd f8aa 	bl	8000958 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0f2      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003812:	f7ff fbd0 	bl	8002fb6 <LL_RCC_IsActiveFlag_HPRE>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f1      	beq.n	8003800 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d016      	beq.n	8003856 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff faf2 	bl	8002e16 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003832:	f7fd f891 	bl	8000958 <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800383a:	f7fd f88d 	bl	8000958 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0d5      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800384c:	f7ff fbc5 	bl	8002fda <LL_RCC_IsActiveFlag_C2HPRE>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f1      	beq.n	800383a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff faeb 	bl	8002e42 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800386c:	f7fd f874 	bl	8000958 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003874:	f7fd f870 	bl	8000958 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0b8      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003886:	f7ff fbbb 	bl	8003000 <LL_RCC_IsActiveFlag_SHDHPRE>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f1      	beq.n	8003874 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d016      	beq.n	80038ca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fae5 	bl	8002e70 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038a6:	f7fd f857 	bl	8000958 <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038ae:	f7fd f853 	bl	8000958 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e09b      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038c0:	f7ff fbb1 	bl	8003026 <LL_RCC_IsActiveFlag_PPRE1>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f1      	beq.n	80038ae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d017      	beq.n	8003906 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fadb 	bl	8002e98 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038e2:	f7fd f839 	bl	8000958 <HAL_GetTick>
 80038e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038ea:	f7fd f835 	bl	8000958 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e07d      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038fc:	f7ff fba5 	bl	800304a <LL_RCC_IsActiveFlag_PPRE2>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f1      	beq.n	80038ea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d043      	beq.n	800399a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d106      	bne.n	8003928 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800391a:	f7ff f87b 	bl	8002a14 <LL_RCC_HSE_IsReady>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d11e      	bne.n	8003962 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e067      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d106      	bne.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003930:	f7ff fafe 	bl	8002f30 <LL_RCC_PLL_IsReady>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d113      	bne.n	8003962 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e05c      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003946:	f7ff f9e3 	bl	8002d10 <LL_RCC_MSI_IsReady>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e051      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003954:	f7ff f88e 	bl	8002a74 <LL_RCC_HSI_IsReady>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e04a      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fa21 	bl	8002dae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fc fff4 	bl	8000958 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fc fff0 	bl	8000958 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e036      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	f7ff fa24 	bl	8002dd6 <LL_RCC_GetSysClkSource>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	429a      	cmp	r2, r3
 8003998:	d1ec      	bne.n	8003974 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800399a:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCC_ClockConfig+0x278>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d21b      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <HAL_RCC_ClockConfig+0x278>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 0207 	bic.w	r2, r3, #7
 80039b0:	4913      	ldr	r1, [pc, #76]	; (8003a00 <HAL_RCC_ClockConfig+0x278>)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b8:	f7fc ffce 	bl	8000958 <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039c0:	f7fc ffca 	bl	8000958 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e012      	b.n	80039f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_ClockConfig+0x278>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1ef      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039e0:	f000 f87e 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <HAL_RCC_ClockConfig+0x27c>)
 80039e8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039ea:	f7fc ffc1 	bl	8000970 <HAL_GetTickPrio>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc ff63 	bl	80008bc <HAL_InitTick>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	58004000 	.word	0x58004000
 8003a04:	20000004 	.word	0x20000004

08003a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	f7ff f9e2 	bl	8002dd6 <LL_RCC_GetSysClkSource>
 8003a12:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a1a:	f7ff f99e 	bl	8002d5a <LL_RCC_MSI_GetRange>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	e04b      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d102      	bne.n	8003a3c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a36:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e045      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d10a      	bne.n	8003a58 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a42:	f7fe ffb7 	bl	80029b4 <LL_RCC_HSE_IsEnabledDiv2>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e03a      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a52:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e037      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a58:	f7ff faa1 	bl	8002f9e <LL_RCC_PLL_GetMainSource>
 8003a5c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d003      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x64>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x6a>
 8003a6a:	e00d      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a6e:	60bb      	str	r3, [r7, #8]
        break;
 8003a70:	e015      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a72:	f7fe ff9f 	bl	80029b4 <LL_RCC_HSE_IsEnabledDiv2>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a80:	e00d      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a84:	60bb      	str	r3, [r7, #8]
        break;
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a88:	f7ff f967 	bl	8002d5a <LL_RCC_MSI_GetRange>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	4a0f      	ldr	r2, [pc, #60]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9a:	60bb      	str	r3, [r7, #8]
        break;
 8003a9c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003a9e:	f7ff fa59 	bl	8002f54 <LL_RCC_PLL_GetN>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	fb03 f402 	mul.w	r4, r3, r2
 8003aaa:	f7ff fa6c 	bl	8002f86 <LL_RCC_PLL_GetDivider>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ab8:	f7ff fa59 	bl	8002f6e <LL_RCC_PLL_GetR>
 8003abc:	4603      	mov	r3, r0
 8003abe:	0f5b      	lsrs	r3, r3, #29
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ac6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	0800985c 	.word	0x0800985c
 8003ad8:	00f42400 	.word	0x00f42400
 8003adc:	007a1200 	.word	0x007a1200

08003ae0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae0:	b598      	push	{r3, r4, r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ae4:	f7ff ff90 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8003ae8:	4604      	mov	r4, r0
 8003aea:	f7ff f9e9 	bl	8002ec0 <LL_RCC_GetAHBPrescaler>
 8003aee:	4603      	mov	r3, r0
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a03      	ldr	r2, [pc, #12]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x24>)
 8003af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd98      	pop	{r3, r4, r7, pc}
 8003b04:	0800981c 	.word	0x0800981c

08003b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2bb0      	cmp	r3, #176	; 0xb0
 8003b14:	d903      	bls.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e007      	b.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b2e:	f7ff f9d3 	bl	8002ed8 <LL_RCC_GetAHB4Prescaler>
 8003b32:	4603      	mov	r3, r0
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	0c9c      	lsrs	r4, r3, #18
 8003b52:	f7fe ff11 	bl	8002978 <HAL_PWREx_GetVoltageRange>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 f80c 	bl	8003b78 <RCC_SetFlashLatency>
 8003b60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	0800985c 	.word	0x0800985c
 8003b70:	0800981c 	.word	0x0800981c
 8003b74:	431bde83 	.word	0x431bde83

08003b78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b093      	sub	sp, #76	; 0x4c
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b82:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <RCC_SetFlashLatency+0xf0>)
 8003b84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b8e:	4a37      	ldr	r2, [pc, #220]	; (8003c6c <RCC_SetFlashLatency+0xf4>)
 8003b90:	f107 031c 	add.w	r3, r7, #28
 8003b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b9a:	4b35      	ldr	r3, [pc, #212]	; (8003c70 <RCC_SetFlashLatency+0xf8>)
 8003b9c:	f107 040c 	add.w	r4, r7, #12
 8003ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb0:	d11c      	bne.n	8003bec <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb6:	e015      	b.n	8003be4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d808      	bhi.n	8003bde <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bda:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003bdc:	e022      	b.n	8003c24 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be0:	3301      	adds	r3, #1
 8003be2:	643b      	str	r3, [r7, #64]	; 0x40
 8003be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d9e6      	bls.n	8003bb8 <RCC_SetFlashLatency+0x40>
 8003bea:	e01b      	b.n	8003c24 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf0:	e015      	b.n	8003c1e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d808      	bhi.n	8003c18 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c0e:	4413      	add	r3, r2
 8003c10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c16:	e005      	b.n	8003c24 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d9e6      	bls.n	8003bf2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <RCC_SetFlashLatency+0xfc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 0207 	bic.w	r2, r3, #7
 8003c2c:	4911      	ldr	r1, [pc, #68]	; (8003c74 <RCC_SetFlashLatency+0xfc>)
 8003c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c34:	f7fc fe90 	bl	8000958 <HAL_GetTick>
 8003c38:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c3a:	e008      	b.n	8003c4e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c3c:	f7fc fe8c 	bl	8000958 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e007      	b.n	8003c5e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <RCC_SetFlashLatency+0xfc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1ef      	bne.n	8003c3c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	374c      	adds	r7, #76	; 0x4c
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd90      	pop	{r4, r7, pc}
 8003c66:	bf00      	nop
 8003c68:	080097a8 	.word	0x080097a8
 8003c6c:	080097b8 	.word	0x080097b8
 8003c70:	080097c4 	.word	0x080097c4
 8003c74:	58004000 	.word	0x58004000

08003c78 <LL_RCC_LSE_IsEnabled>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <LL_RCC_LSE_IsEnabled+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_RCC_LSE_IsEnabled+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_LSE_IsReady>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d101      	bne.n	8003cb4 <LL_RCC_LSE_IsReady+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_RCC_LSE_IsReady+0x1a>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_RCC_MSI_EnablePLLMode>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	6013      	str	r3, [r2, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_RCC_SetRFWKPClockSource>:
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_SetSMPSClockSource>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f023 0203 	bic.w	r2, r3, #3
 8003d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <LL_RCC_SetSMPSPrescaler>:
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <LL_RCC_SetUSARTClockSource>:
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_RCC_SetLPUARTClockSource>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_RCC_SetI2CClockSource>:
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	401a      	ands	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_RCC_SetLPTIMClockSource>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	43db      	mvns	r3, r3
 8003e04:	401a      	ands	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_RCC_SetSAIClockSource>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_RCC_SetRNGClockSource>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_RCC_SetCLK48ClockSource>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_SetUSBClockSource>:
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff ffe3 	bl	8003e78 <LL_RCC_SetCLK48ClockSource>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <LL_RCC_SetADCClockSource>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_SetRTCClockSource>:
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <LL_RCC_GetRTCClockSource>:
{
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_ForceBackupDomainReset>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_PLLSAI1_Enable>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_PLLSAI1_Disable>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fa0:	6013      	str	r3, [r2, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_PLLSAI1_IsReady>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fbe:	d101      	bne.n	8003fc4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003fdc:	2300      	movs	r3, #0
 8003fde:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d034      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ff4:	d021      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003ff6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ffa:	d81b      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004000:	d01d      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004002:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004006:	d815      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00b      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800400c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004010:	d110      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800401c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004020:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004022:	e00d      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f94d 	bl	80042c8 <RCCEx_PLLSAI1_ConfigNP>
 800402e:	4603      	mov	r3, r0
 8004030:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004032:	e005      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	77fb      	strb	r3, [r7, #31]
        break;
 8004038:	e002      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800403a:	bf00      	nop
 800403c:	e000      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800403e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fee8 	bl	8003e20 <LL_RCC_SetSAIClockSource>
 8004050:	e001      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004052:	7ffb      	ldrb	r3, [r7, #31]
 8004054:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405e:	2b00      	cmp	r3, #0
 8004060:	d046      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004062:	f7ff ff56 	bl	8003f12 <LL_RCC_GetRTCClockSource>
 8004066:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	429a      	cmp	r2, r3
 8004070:	d03c      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004072:	f7fe fc71 	bl	8002958 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff30 	bl	8003ee6 <LL_RCC_SetRTCClockSource>
 8004086:	e02e      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004092:	f7ff ff4b 	bl	8003f2c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004096:	f7ff ff5a 	bl	8003f4e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80040a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80040b2:	f7ff fde1 	bl	8003c78 <LL_RCC_LSE_IsEnabled>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d114      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040bc:	f7fc fc4c 	bl	8000958 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80040c2:	e00b      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fc fc48 	bl	8000958 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d902      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	77fb      	strb	r3, [r7, #31]
              break;
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040dc:	f7ff fdde 	bl	8003c9c <LL_RCC_LSE_IsReady>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d1ee      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80040e6:	7ffb      	ldrb	r3, [r7, #31]
 80040e8:	77bb      	strb	r3, [r7, #30]
 80040ea:	e001      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
 80040ee:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fe2a 	bl	8003d5a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d004      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fe35 	bl	8003d86 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fe5d 	bl	8003dec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fe52 	bl	8003dec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fe2a 	bl	8003db2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fe1f 	bl	8003db2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d022      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fe8d 	bl	8003ea4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004192:	d107      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f8e3 	bl	800437e <RCCEx_PLLSAI1_ConfigNQ>
 80041b8:	4603      	mov	r3, r0
 80041ba:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80041bc:	7ffb      	ldrb	r3, [r7, #31]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80041c2:	7ffb      	ldrb	r3, [r7, #31]
 80041c4:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02b      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d008      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041e4:	d003      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d105      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fe2a 	bl	8003e4c <LL_RCC_SetRNGClockSource>
 80041f8:	e00a      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	2000      	movs	r0, #0
 8004206:	f7ff fe21 	bl	8003e4c <LL_RCC_SetRNGClockSource>
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff fe34 	bl	8003e78 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004218:	d107      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004228:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004232:	2b00      	cmp	r3, #0
 8004234:	d022      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fe3d 	bl	8003eba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004248:	d107      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004262:	d10b      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f000 f8e3 	bl	8004434 <RCCEx_PLLSAI1_ConfigNR>
 800426e:	4603      	mov	r3, r0
 8004270:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004272:	7ffb      	ldrb	r3, [r7, #31]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004278:	7ffb      	ldrb	r3, [r7, #31]
 800427a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fd26 	bl	8003cde <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fd45 	bl	8003d32 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fd2c 	bl	8003d0a <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80042b2:	7fbb      	ldrb	r3, [r7, #30]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80042c0:	f7ff fcfe 	bl	8003cc0 <LL_RCC_MSI_EnablePLLMode>
}
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042d4:	f7ff fe5b 	bl	8003f8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042d8:	f7fc fb3e 	bl	8000958 <HAL_GetTick>
 80042dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042de:	e009      	b.n	80042f4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e0:	f7fc fb3a 	bl	8000958 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d902      	bls.n	80042f4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	73fb      	strb	r3, [r7, #15]
      break;
 80042f2:	e004      	b.n	80042fe <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042f4:	f7ff fe5a 	bl	8003fac <LL_RCC_PLLSAI1_IsReady>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d137      	bne.n	8004374 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004318:	4313      	orrs	r3, r2
 800431a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432e:	4313      	orrs	r3, r2
 8004330:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004332:	f7ff fe1d 	bl	8003f70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004336:	f7fc fb0f 	bl	8000958 <HAL_GetTick>
 800433a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800433c:	e009      	b.n	8004352 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800433e:	f7fc fb0b 	bl	8000958 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d902      	bls.n	8004352 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	73fb      	strb	r3, [r7, #15]
        break;
 8004350:	e004      	b.n	800435c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004352:	f7ff fe2b 	bl	8003fac <LL_RCC_PLLSAI1_IsReady>
 8004356:	4603      	mov	r3, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d1f0      	bne.n	800433e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d108      	bne.n	8004374 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004370:	4313      	orrs	r3, r2
 8004372:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800438a:	f7ff fe00 	bl	8003f8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800438e:	f7fc fae3 	bl	8000958 <HAL_GetTick>
 8004392:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004394:	e009      	b.n	80043aa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004396:	f7fc fadf 	bl	8000958 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d902      	bls.n	80043aa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	73fb      	strb	r3, [r7, #15]
      break;
 80043a8:	e004      	b.n	80043b4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043aa:	f7ff fdff 	bl	8003fac <LL_RCC_PLLSAI1_IsReady>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d137      	bne.n	800442a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ce:	4313      	orrs	r3, r2
 80043d0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e4:	4313      	orrs	r3, r2
 80043e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043e8:	f7ff fdc2 	bl	8003f70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fc fab4 	bl	8000958 <HAL_GetTick>
 80043f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043f2:	e009      	b.n	8004408 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f4:	f7fc fab0 	bl	8000958 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d902      	bls.n	8004408 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	73fb      	strb	r3, [r7, #15]
        break;
 8004406:	e004      	b.n	8004412 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004408:	f7ff fdd0 	bl	8003fac <LL_RCC_PLLSAI1_IsReady>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d1f0      	bne.n	80043f4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d108      	bne.n	800442a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004440:	f7ff fda5 	bl	8003f8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004444:	f7fc fa88 	bl	8000958 <HAL_GetTick>
 8004448:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800444a:	e009      	b.n	8004460 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800444c:	f7fc fa84 	bl	8000958 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d902      	bls.n	8004460 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	73fb      	strb	r3, [r7, #15]
      break;
 800445e:	e004      	b.n	800446a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004460:	f7ff fda4 	bl	8003fac <LL_RCC_PLLSAI1_IsReady>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d137      	bne.n	80044e0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004484:	4313      	orrs	r3, r2
 8004486:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800449a:	4313      	orrs	r3, r2
 800449c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800449e:	f7ff fd67 	bl	8003f70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a2:	f7fc fa59 	bl	8000958 <HAL_GetTick>
 80044a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044a8:	e009      	b.n	80044be <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044aa:	f7fc fa55 	bl	8000958 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d902      	bls.n	80044be <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	73fb      	strb	r3, [r7, #15]
        break;
 80044bc:	e004      	b.n	80044c8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044be:	f7ff fd75 	bl	8003fac <LL_RCC_PLLSAI1_IsReady>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d1f0      	bne.n	80044aa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e095      	b.n	8004628 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450c:	d009      	beq.n	8004522 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	61da      	str	r2, [r3, #28]
 8004514:	e005      	b.n	8004522 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fc f88b 	bl	8000658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004558:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004562:	d902      	bls.n	800456a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e002      	b.n	8004570 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800456a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004578:	d007      	beq.n	800458a <HAL_SPI_Init+0xa0>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004582:	d002      	beq.n	800458a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	ea42 0103 	orr.w	r1, r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	f003 0204 	and.w	r2, r3, #4
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004606:	ea42 0103 	orr.w	r1, r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_SPI_Transmit+0x22>
 800464e:	2302      	movs	r3, #2
 8004650:	e158      	b.n	8004904 <HAL_SPI_Transmit+0x2d4>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800465a:	f7fc f97d 	bl	8000958 <HAL_GetTick>
 800465e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004670:	2302      	movs	r3, #2
 8004672:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004674:	e13d      	b.n	80048f2 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_Transmit+0x52>
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004686:	e134      	b.n	80048f2 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2203      	movs	r2, #3
 800468c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	d10f      	bne.n	80046f4 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d007      	beq.n	8004712 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004710:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800471a:	d94b      	bls.n	80047b4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_SPI_Transmit+0xfa>
 8004724:	8afb      	ldrh	r3, [r7, #22]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d13e      	bne.n	80047a8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	881a      	ldrh	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	1c9a      	adds	r2, r3, #2
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800474e:	e02b      	b.n	80047a8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d112      	bne.n	8004784 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004782:	e011      	b.n	80047a8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004784:	f7fc f8e8 	bl	8000958 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d803      	bhi.n	800479c <HAL_SPI_Transmit+0x16c>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d102      	bne.n	80047a2 <HAL_SPI_Transmit+0x172>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047a6:	e0a4      	b.n	80048f2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ce      	bne.n	8004750 <HAL_SPI_Transmit+0x120>
 80047b2:	e07c      	b.n	80048ae <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_SPI_Transmit+0x192>
 80047bc:	8afb      	ldrh	r3, [r7, #22]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d170      	bne.n	80048a4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d912      	bls.n	80047f2 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	881a      	ldrh	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	1c9a      	adds	r2, r3, #2
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b02      	subs	r3, #2
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047f0:	e058      	b.n	80048a4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004818:	e044      	b.n	80048a4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b02      	cmp	r3, #2
 8004826:	d12b      	bne.n	8004880 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d912      	bls.n	8004858 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	1c9a      	adds	r2, r3, #2
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b02      	subs	r3, #2
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004856:	e025      	b.n	80048a4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800487e:	e011      	b.n	80048a4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004880:	f7fc f86a 	bl	8000958 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d803      	bhi.n	8004898 <HAL_SPI_Transmit+0x268>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d102      	bne.n	800489e <HAL_SPI_Transmit+0x26e>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048a2:	e026      	b.n	80048f2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1b5      	bne.n	800481a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fce4 	bl	8005280 <SPI_EndRxTxTransaction>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e000      	b.n	80048f2 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80048f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004902:	7ffb      	ldrb	r3, [r7, #31]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004928:	d112      	bne.n	8004950 <HAL_SPI_Receive+0x44>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10e      	bne.n	8004950 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2204      	movs	r2, #4
 8004936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f910 	bl	8004b6c <HAL_SPI_TransmitReceive>
 800494c:	4603      	mov	r3, r0
 800494e:	e109      	b.n	8004b64 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_SPI_Receive+0x52>
 800495a:	2302      	movs	r3, #2
 800495c:	e102      	b.n	8004b64 <HAL_SPI_Receive+0x258>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004966:	f7fb fff7 	bl	8000958 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d002      	beq.n	800497e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004978:	2302      	movs	r3, #2
 800497a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800497c:	e0e9      	b.n	8004b52 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_SPI_Receive+0x7e>
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800498e:	e0e0      	b.n	8004b52 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2204      	movs	r2, #4
 8004994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049da:	d908      	bls.n	80049ee <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	e007      	b.n	80049fe <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a06:	d10f      	bne.n	8004a28 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d007      	beq.n	8004a46 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a4e:	d867      	bhi.n	8004b20 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a50:	e030      	b.n	8004ab4 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d117      	bne.n	8004a90 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f103 020c 	add.w	r2, r3, #12
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a8e:	e011      	b.n	8004ab4 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a90:	f7fb ff62 	bl	8000958 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d803      	bhi.n	8004aa8 <HAL_SPI_Receive+0x19c>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d102      	bne.n	8004aae <HAL_SPI_Receive+0x1a2>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ab2:	e04e      	b.n	8004b52 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1c8      	bne.n	8004a52 <HAL_SPI_Receive+0x146>
 8004ac0:	e034      	b.n	8004b2c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d115      	bne.n	8004afc <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	b292      	uxth	r2, r2
 8004adc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	1c9a      	adds	r2, r3, #2
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004afa:	e011      	b.n	8004b20 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afc:	f7fb ff2c 	bl	8000958 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d803      	bhi.n	8004b14 <HAL_SPI_Receive+0x208>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d102      	bne.n	8004b1a <HAL_SPI_Receive+0x20e>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b1e:	e018      	b.n	8004b52 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ca      	bne.n	8004ac2 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fb4d 	bl	80051d0 <SPI_EndRxTransaction>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
 8004b4e:	e000      	b.n	8004b52 <HAL_SPI_Receive+0x246>
  }

error :
 8004b50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_SPI_TransmitReceive+0x26>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e1fb      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x41e>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b9a:	f7fb fedd 	bl	8000958 <HAL_GetTick>
 8004b9e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ba6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bb6:	7efb      	ldrb	r3, [r7, #27]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d00e      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x6e>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc2:	d106      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x66>
 8004bcc:	7efb      	ldrb	r3, [r7, #27]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d003      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bd8:	e1cd      	b.n	8004f76 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_SPI_TransmitReceive+0x80>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_TransmitReceive+0x80>
 8004be6:	887b      	ldrh	r3, [r7, #2]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bf2:	e1c0      	b.n	8004f76 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d003      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2205      	movs	r2, #5
 8004c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	887a      	ldrh	r2, [r7, #2]
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c4a:	d802      	bhi.n	8004c52 <HAL_SPI_TransmitReceive+0xe6>
 8004c4c:	8a3b      	ldrh	r3, [r7, #16]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d908      	bls.n	8004c64 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	e007      	b.n	8004c74 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d007      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c9a:	d97c      	bls.n	8004d96 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_TransmitReceive+0x13e>
 8004ca4:	8a7b      	ldrh	r3, [r7, #18]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d169      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	1c9a      	adds	r2, r3, #2
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cce:	e056      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d11b      	bne.n	8004d16 <HAL_SPI_TransmitReceive+0x1aa>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d016      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x1aa>
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d113      	bne.n	8004d16 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	881a      	ldrh	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	1c9a      	adds	r2, r3, #2
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d11c      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x1f2>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d016      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	b292      	uxth	r2, r2
 8004d3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d5e:	f7fb fdfb 	bl	8000958 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d807      	bhi.n	8004d7e <HAL_SPI_TransmitReceive+0x212>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d003      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d7c:	e0fb      	b.n	8004f76 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1a3      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x164>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d19d      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x164>
 8004d94:	e0df      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x23a>
 8004d9e:	8a7b      	ldrh	r3, [r7, #18]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	f040 80cb 	bne.w	8004f3c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d912      	bls.n	8004dd6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	881a      	ldrh	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b02      	subs	r3, #2
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd4:	e0b2      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dfc:	e09e      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d134      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x30a>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d02f      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x30a>
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d12c      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d912      	bls.n	8004e4c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	881a      	ldrh	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	1c9a      	adds	r2, r3, #2
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b02      	subs	r3, #2
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e4a:	e012      	b.n	8004e72 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	7812      	ldrb	r2, [r2, #0]
 8004e58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d148      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x3aa>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d042      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d923      	bls.n	8004ee4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	b292      	uxth	r2, r2
 8004ea8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	1c9a      	adds	r2, r3, #2
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b02      	subs	r3, #2
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d81f      	bhi.n	8004f12 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	e016      	b.n	8004f12 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f103 020c 	add.w	r2, r3, #12
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f12:	2301      	movs	r3, #1
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f16:	f7fb fd1f 	bl	8000958 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d803      	bhi.n	8004f2e <HAL_SPI_TransmitReceive+0x3c2>
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d102      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x3c8>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f3a:	e01c      	b.n	8004f76 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f47f af5b 	bne.w	8004dfe <HAL_SPI_TransmitReceive+0x292>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f47f af54 	bne.w	8004dfe <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f990 	bl	8005280 <SPI_EndRxTxTransaction>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	661a      	str	r2, [r3, #96]	; 0x60
 8004f72:	e000      	b.n	8004f76 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004f74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3728      	adds	r7, #40	; 0x28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fa4:	f7fb fcd8 	bl	8000958 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fb4:	f7fb fcd0 	bl	8000958 <HAL_GetTick>
 8004fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fba:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	015b      	lsls	r3, r3, #5
 8004fc0:	0d1b      	lsrs	r3, r3, #20
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	fb02 f303 	mul.w	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fca:	e054      	b.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d050      	beq.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fd4:	f7fb fcc0 	bl	8000958 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d902      	bls.n	8004fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d13d      	bne.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005002:	d111      	bne.n	8005028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500c:	d004      	beq.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d107      	bne.n	8005028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005030:	d10f      	bne.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e017      	b.n	8005096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3b01      	subs	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	429a      	cmp	r2, r3
 8005092:	d19b      	bne.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000004 	.word	0x20000004

080050a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08a      	sub	sp, #40	; 0x28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050b6:	f7fb fc4f 	bl	8000958 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	4413      	add	r3, r2
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80050c6:	f7fb fc47 	bl	8000958 <HAL_GetTick>
 80050ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050d4:	4b3d      	ldr	r3, [pc, #244]	; (80051cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	00da      	lsls	r2, r3, #3
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	0d1b      	lsrs	r3, r3, #20
 80050e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050ec:	e060      	b.n	80051b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050f4:	d107      	bne.n	8005106 <SPI_WaitFifoStateUntilTimeout+0x62>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005104:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d050      	beq.n	80051b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800510e:	f7fb fc23 	bl	8000958 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511a:	429a      	cmp	r2, r3
 800511c:	d902      	bls.n	8005124 <SPI_WaitFifoStateUntilTimeout+0x80>
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	d13d      	bne.n	80051a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513c:	d111      	bne.n	8005162 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005146:	d004      	beq.n	8005152 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005150:	d107      	bne.n	8005162 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516a:	d10f      	bne.n	800518c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800518a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e010      	b.n	80051c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4013      	ands	r3, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d196      	bne.n	80050ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3728      	adds	r7, #40	; 0x28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000004 	.word	0x20000004

080051d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e4:	d111      	bne.n	800520a <SPI_EndRxTransaction+0x3a>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ee:	d004      	beq.n	80051fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f8:	d107      	bne.n	800520a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005208:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2200      	movs	r2, #0
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff febd 	bl	8004f94 <SPI_WaitFlagStateUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005224:	f043 0220 	orr.w	r2, r3, #32
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e023      	b.n	8005278 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005238:	d11d      	bne.n	8005276 <SPI_EndRxTransaction+0xa6>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005242:	d004      	beq.n	800524e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	d113      	bne.n	8005276 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff ff22 	bl	80050a4 <SPI_WaitFifoStateUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e000      	b.n	8005278 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2200      	movs	r2, #0
 8005294:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff ff03 	bl	80050a4 <SPI_WaitFifoStateUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a8:	f043 0220 	orr.w	r2, r3, #32
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e027      	b.n	8005304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2200      	movs	r2, #0
 80052bc:	2180      	movs	r1, #128	; 0x80
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff fe68 	bl	8004f94 <SPI_WaitFlagStateUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ce:	f043 0220 	orr.w	r2, r3, #32
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e014      	b.n	8005304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7ff fedc 	bl	80050a4 <SPI_WaitFifoStateUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f6:	f043 0220 	orr.w	r2, r3, #32
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e000      	b.n	8005304 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800531c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005320:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005342:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005346:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	b29b      	uxth	r3, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	b29b      	uxth	r3, r3
 8005358:	4013      	ands	r3, r2
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005370:	b084      	sub	sp, #16
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	f107 0014 	add.w	r0, r7, #20
 800537e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	b004      	add	sp, #16
 80053b0:	4770      	bx	lr
	...

080053b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b09d      	sub	sp, #116	; 0x74
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	78db      	ldrb	r3, [r3, #3]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d81f      	bhi.n	8005426 <USB_ActivateEndpoint+0x72>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <USB_ActivateEndpoint+0x38>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005419 	.word	0x08005419
 80053f4:	0800542f 	.word	0x0800542f
 80053f8:	0800540b 	.word	0x0800540b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005404:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005408:	e012      	b.n	8005430 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800540a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800540e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005412:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005416:	e00b      	b.n	8005430 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005418:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800541c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005420:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005424:	e004      	b.n	8005430 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800542c:	e000      	b.n	8005430 <USB_ActivateEndpoint+0x7c>
      break;
 800542e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800543e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544e:	b29b      	uxth	r3, r3
 8005450:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	b21b      	sxth	r3, r3
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	b21a      	sxth	r2, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b21b      	sxth	r3, r3
 8005472:	4313      	orrs	r3, r2
 8005474:	b21b      	sxth	r3, r3
 8005476:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	441a      	add	r2, r3
 8005484:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	7b1b      	ldrb	r3, [r3, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f040 8149 	bne.w	8005738 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8084 	beq.w	80055b8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	4413      	add	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	00da      	lsls	r2, r3, #3
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	88db      	ldrh	r3, [r3, #6]
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	b29b      	uxth	r3, r3
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	827b      	strh	r3, [r7, #18]
 80054f2:	8a7b      	ldrh	r3, [r7, #18]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01b      	beq.n	8005534 <USB_ActivateEndpoint+0x180>
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	823b      	strh	r3, [r7, #16]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	8a3b      	ldrh	r3, [r7, #16]
 8005520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005530:	b29b      	uxth	r3, r3
 8005532:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	78db      	ldrb	r3, [r3, #3]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d020      	beq.n	800557e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005552:	81bb      	strh	r3, [r7, #12]
 8005554:	89bb      	ldrh	r3, [r7, #12]
 8005556:	f083 0320 	eor.w	r3, r3, #32
 800555a:	81bb      	strh	r3, [r7, #12]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	441a      	add	r2, r3
 8005566:	89bb      	ldrh	r3, [r7, #12]
 8005568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	b29b      	uxth	r3, r3
 800557a:	8013      	strh	r3, [r2, #0]
 800557c:	e2a6      	b.n	8005acc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005594:	81fb      	strh	r3, [r7, #14]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	89fb      	ldrh	r3, [r7, #14]
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]
 80055b6:	e289      	b.n	8005acc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	633b      	str	r3, [r7, #48]	; 0x30
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	4413      	add	r3, r2
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	00da      	lsls	r2, r3, #3
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	88db      	ldrh	r3, [r3, #6]
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	4413      	add	r3, r2
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	00da      	lsls	r2, r3, #3
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	4413      	add	r3, r2
 800560a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b3e      	cmp	r3, #62	; 0x3e
 8005616:	d918      	bls.n	800564a <USB_ActivateEndpoint+0x296>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <USB_ActivateEndpoint+0x27e>
 800562c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800562e:	3b01      	subs	r3, #1
 8005630:	66bb      	str	r3, [r7, #104]	; 0x68
 8005632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005634:	b29b      	uxth	r3, r3
 8005636:	029b      	lsls	r3, r3, #10
 8005638:	b29b      	uxth	r3, r3
 800563a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005642:	b29a      	uxth	r2, r3
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e029      	b.n	800569e <USB_ActivateEndpoint+0x2ea>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d112      	bne.n	8005678 <USB_ActivateEndpoint+0x2c4>
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800565c:	b29a      	uxth	r2, r3
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005670:	b29a      	uxth	r2, r3
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	e012      	b.n	800569e <USB_ActivateEndpoint+0x2ea>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <USB_ActivateEndpoint+0x2de>
 800568c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800568e:	3301      	adds	r3, #1
 8005690:	66bb      	str	r3, [r7, #104]	; 0x68
 8005692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005694:	b29b      	uxth	r3, r3
 8005696:	029b      	lsls	r3, r3, #10
 8005698:	b29a      	uxth	r2, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80056ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01b      	beq.n	80056ee <USB_ActivateEndpoint+0x33a>
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056cc:	843b      	strh	r3, [r7, #32]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	8c3b      	ldrh	r3, [r7, #32]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	83fb      	strh	r3, [r7, #30]
 8005706:	8bfb      	ldrh	r3, [r7, #30]
 8005708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800570c:	83fb      	strh	r3, [r7, #30]
 800570e:	8bfb      	ldrh	r3, [r7, #30]
 8005710:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005714:	83fb      	strh	r3, [r7, #30]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	8bfb      	ldrh	r3, [r7, #30]
 8005722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005732:	b29b      	uxth	r3, r3
 8005734:	8013      	strh	r3, [r2, #0]
 8005736:	e1c9      	b.n	8005acc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d11e      	bne.n	800577e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	441a      	add	r2, r3
 8005764:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005770:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005778:	b29b      	uxth	r3, r3
 800577a:	8013      	strh	r3, [r2, #0]
 800577c:	e01d      	b.n	80057ba <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005794:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ca:	4413      	add	r3, r2
 80057cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	00da      	lsls	r2, r3, #3
 80057d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	891b      	ldrh	r3, [r3, #8]
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	657b      	str	r3, [r7, #84]	; 0x54
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fe:	4413      	add	r3, r2
 8005800:	657b      	str	r3, [r7, #84]	; 0x54
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	00da      	lsls	r2, r3, #3
 8005808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580a:	4413      	add	r3, r2
 800580c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005810:	653b      	str	r3, [r7, #80]	; 0x50
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	895b      	ldrh	r3, [r3, #10]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	b29b      	uxth	r3, r3
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 8093 	bne.w	8005952 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800583c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01b      	beq.n	8005880 <USB_ActivateEndpoint+0x4cc>
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800586c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587c:	b29b      	uxth	r3, r3
 800587e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800588e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01b      	beq.n	80058d0 <USB_ActivateEndpoint+0x51c>
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	877b      	strh	r3, [r7, #58]	; 0x3a
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	441a      	add	r2, r3
 80058ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80058bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80058e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80058f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058f6:	873b      	strh	r3, [r7, #56]	; 0x38
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005914:	b29b      	uxth	r3, r3
 8005916:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	441a      	add	r2, r3
 800593a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800593c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594c:	b29b      	uxth	r3, r3
 800594e:	8013      	strh	r3, [r2, #0]
 8005950:	e0bc      	b.n	8005acc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01d      	beq.n	80059aa <USB_ActivateEndpoint+0x5f6>
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005984:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80059ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01d      	beq.n	8005a02 <USB_ActivateEndpoint+0x64e>
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	78db      	ldrb	r3, [r3, #3]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d024      	beq.n	8005a54 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a28:	f083 0320 	eor.w	r3, r3, #32
 8005a2c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	8013      	strh	r3, [r2, #0]
 8005a52:	e01d      	b.n	8005a90 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	441a      	add	r2, r3
 8005a78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005acc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3774      	adds	r7, #116	; 0x74
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08d      	sub	sp, #52	; 0x34
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	7b1b      	ldrb	r3, [r3, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 808e 	bne.w	8005c0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d044      	beq.n	8005b82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	81bb      	strh	r3, [r7, #12]
 8005b06:	89bb      	ldrh	r3, [r7, #12]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01b      	beq.n	8005b48 <USB_DeactivateEndpoint+0x6c>
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	817b      	strh	r3, [r7, #10]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	897b      	ldrh	r3, [r7, #10]
 8005b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5e:	813b      	strh	r3, [r7, #8]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	893b      	ldrh	r3, [r7, #8]
 8005b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8013      	strh	r3, [r2, #0]
 8005b80:	e192      	b.n	8005ea8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	827b      	strh	r3, [r7, #18]
 8005b90:	8a7b      	ldrh	r3, [r7, #18]
 8005b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01b      	beq.n	8005bd2 <USB_DeactivateEndpoint+0xf6>
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	823b      	strh	r3, [r7, #16]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	8a3b      	ldrh	r3, [r7, #16]
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	81fb      	strh	r3, [r7, #14]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	89fb      	ldrh	r3, [r7, #14]
 8005bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	8013      	strh	r3, [r2, #0]
 8005c0a:	e14d      	b.n	8005ea8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 80a5 	bne.w	8005d60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	843b      	strh	r3, [r7, #32]
 8005c24:	8c3b      	ldrh	r3, [r7, #32]
 8005c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01b      	beq.n	8005c66 <USB_DeactivateEndpoint+0x18a>
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c44:	83fb      	strh	r3, [r7, #30]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	8bfb      	ldrh	r3, [r7, #30]
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	83bb      	strh	r3, [r7, #28]
 8005c74:	8bbb      	ldrh	r3, [r7, #28]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01b      	beq.n	8005cb6 <USB_DeactivateEndpoint+0x1da>
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	837b      	strh	r3, [r7, #26]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	8b7b      	ldrh	r3, [r7, #26]
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	833b      	strh	r3, [r7, #24]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8b3b      	ldrh	r3, [r7, #24]
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	82fb      	strh	r3, [r7, #22]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8afb      	ldrh	r3, [r7, #22]
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3c:	82bb      	strh	r3, [r7, #20]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	8abb      	ldrh	r3, [r7, #20]
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
 8005d5e:	e0a3      	b.n	8005ea8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01b      	beq.n	8005db0 <USB_DeactivateEndpoint+0x2d4>
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005dbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01b      	beq.n	8005e00 <USB_DeactivateEndpoint+0x324>
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	853b      	strh	r3, [r7, #40]	; 0x28
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3734      	adds	r7, #52	; 0x34
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b0c2      	sub	sp, #264	; 0x108
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	1d3b      	adds	r3, r7, #4
 8005ebe:	6018      	str	r0, [r3, #0]
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f040 8509 	bne.w	80068e2 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d905      	bls.n	8005eec <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005eea:	e004      	b.n	8005ef6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	7b1b      	ldrb	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d128      	bne.n	8005f52 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6959      	ldr	r1, [r3, #20]
 8005f06:	463b      	mov	r3, r7
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	88da      	ldrh	r2, [r3, #6]
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	1d38      	adds	r0, r7, #4
 8005f14:	6800      	ldr	r0, [r0, #0]
 8005f16:	f001 f9da 	bl	80072ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	00da      	lsls	r2, r3, #3
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	f000 bc9f 	b.w	8006890 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	78db      	ldrb	r3, [r3, #3]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	f040 8347 	bne.w	80065ec <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f5e:	463b      	mov	r3, r7
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a1a      	ldr	r2, [r3, #32]
 8005f64:	463b      	mov	r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	f240 82eb 	bls.w	8006546 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f70:	1d3b      	adds	r3, r7, #4
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	463b      	mov	r3, r7
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	441a      	add	r2, r3
 8005f9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6a1a      	ldr	r2, [r3, #32]
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	463b      	mov	r3, r7
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8159 	beq.w	8006294 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe8:	463b      	mov	r3, r7
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d164      	bne.n	80060bc <USB_EPStartXfer+0x206>
 8005ff2:	1d3b      	adds	r3, r7, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	4413      	add	r3, r2
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
 800600a:	463b      	mov	r3, r7
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	00da      	lsls	r2, r3, #3
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	4413      	add	r3, r2
 8006016:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	2b3e      	cmp	r3, #62	; 0x3e
 8006022:	d91c      	bls.n	800605e <USB_EPStartXfer+0x1a8>
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <USB_EPStartXfer+0x18e>
 800603a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800603e:	3b01      	subs	r3, #1
 8006040:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006044:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006048:	b29b      	uxth	r3, r3
 800604a:	029b      	lsls	r3, r3, #10
 800604c:	b29b      	uxth	r3, r3
 800604e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006056:	b29a      	uxth	r2, r3
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	e04a      	b.n	80060f4 <USB_EPStartXfer+0x23e>
 800605e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006062:	2b00      	cmp	r3, #0
 8006064:	d112      	bne.n	800608c <USB_EPStartXfer+0x1d6>
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006070:	b29a      	uxth	r2, r3
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006084:	b29a      	uxth	r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	e033      	b.n	80060f4 <USB_EPStartXfer+0x23e>
 800608c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <USB_EPStartXfer+0x1f6>
 80060a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060a6:	3301      	adds	r3, #1
 80060a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	029b      	lsls	r3, r3, #10
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	e01b      	b.n	80060f4 <USB_EPStartXfer+0x23e>
 80060bc:	463b      	mov	r3, r7
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d116      	bne.n	80060f4 <USB_EPStartXfer+0x23e>
 80060c6:	1d3b      	adds	r3, r7, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	4413      	add	r3, r2
 80060d6:	633b      	str	r3, [r7, #48]	; 0x30
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	00da      	lsls	r2, r3, #3
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	4413      	add	r3, r2
 80060e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060f4:	463b      	mov	r3, r7
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	895b      	ldrh	r3, [r3, #10]
 80060fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060fe:	463b      	mov	r3, r7
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6959      	ldr	r1, [r3, #20]
 8006104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006108:	b29b      	uxth	r3, r3
 800610a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800610e:	1d38      	adds	r0, r7, #4
 8006110:	6800      	ldr	r0, [r0, #0]
 8006112:	f001 f8dc 	bl	80072ce <USB_WritePMA>
            ep->xfer_buff += len;
 8006116:	463b      	mov	r3, r7
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	441a      	add	r2, r3
 8006122:	463b      	mov	r3, r7
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006128:	463b      	mov	r3, r7
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a1a      	ldr	r2, [r3, #32]
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	429a      	cmp	r2, r3
 8006136:	d909      	bls.n	800614c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8006138:	463b      	mov	r3, r7
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	463b      	mov	r3, r7
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	621a      	str	r2, [r3, #32]
 800614a:	e008      	b.n	800615e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800615e:	463b      	mov	r3, r7
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d164      	bne.n	8006232 <USB_EPStartXfer+0x37c>
 8006168:	1d3b      	adds	r3, r7, #4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006176:	b29b      	uxth	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	4413      	add	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	463b      	mov	r3, r7
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	00da      	lsls	r2, r3, #3
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	4413      	add	r3, r2
 800618c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006196:	2b3e      	cmp	r3, #62	; 0x3e
 8006198:	d91c      	bls.n	80061d4 <USB_EPStartXfer+0x31e>
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <USB_EPStartXfer+0x304>
 80061b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b4:	3b01      	subs	r3, #1
 80061b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061be:	b29b      	uxth	r3, r3
 80061c0:	029b      	lsls	r3, r3, #10
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e04d      	b.n	8006270 <USB_EPStartXfer+0x3ba>
 80061d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d112      	bne.n	8006202 <USB_EPStartXfer+0x34c>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	e036      	b.n	8006270 <USB_EPStartXfer+0x3ba>
 8006202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <USB_EPStartXfer+0x36c>
 8006218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800621c:	3301      	adds	r3, #1
 800621e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006226:	b29b      	uxth	r3, r3
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	b29a      	uxth	r2, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e01e      	b.n	8006270 <USB_EPStartXfer+0x3ba>
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d119      	bne.n	8006270 <USB_EPStartXfer+0x3ba>
 800623c:	1d3b      	adds	r3, r7, #4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	623b      	str	r3, [r7, #32]
 8006242:	1d3b      	adds	r3, r7, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624a:	b29b      	uxth	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	4413      	add	r3, r2
 8006252:	623b      	str	r3, [r7, #32]
 8006254:	463b      	mov	r3, r7
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	00da      	lsls	r2, r3, #3
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	4413      	add	r3, r2
 8006260:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006264:	61fb      	str	r3, [r7, #28]
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626a:	b29a      	uxth	r2, r3
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006270:	463b      	mov	r3, r7
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	891b      	ldrh	r3, [r3, #8]
 8006276:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800627a:	463b      	mov	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6959      	ldr	r1, [r3, #20]
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	b29b      	uxth	r3, r3
 8006286:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800628a:	1d38      	adds	r0, r7, #4
 800628c:	6800      	ldr	r0, [r0, #0]
 800628e:	f001 f81e 	bl	80072ce <USB_WritePMA>
 8006292:	e2fd      	b.n	8006890 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d164      	bne.n	8006368 <USB_EPStartXfer+0x4b2>
 800629e:	1d3b      	adds	r3, r7, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a4:	1d3b      	adds	r3, r7, #4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b2:	4413      	add	r3, r2
 80062b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b6:	463b      	mov	r3, r7
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	00da      	lsls	r2, r3, #3
 80062be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c0:	4413      	add	r3, r2
 80062c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062c6:	647b      	str	r3, [r7, #68]	; 0x44
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062cc:	2b3e      	cmp	r3, #62	; 0x3e
 80062ce:	d91c      	bls.n	800630a <USB_EPStartXfer+0x454>
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <USB_EPStartXfer+0x43a>
 80062e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062ea:	3b01      	subs	r3, #1
 80062ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	029b      	lsls	r3, r3, #10
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006302:	b29a      	uxth	r2, r3
 8006304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	e04d      	b.n	80063a6 <USB_EPStartXfer+0x4f0>
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630e:	2b00      	cmp	r3, #0
 8006310:	d112      	bne.n	8006338 <USB_EPStartXfer+0x482>
 8006312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800631c:	b29a      	uxth	r2, r3
 800631e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006330:	b29a      	uxth	r2, r3
 8006332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	e036      	b.n	80063a6 <USB_EPStartXfer+0x4f0>
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <USB_EPStartXfer+0x4a2>
 800634e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006352:	3301      	adds	r3, #1
 8006354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800635c:	b29b      	uxth	r3, r3
 800635e:	029b      	lsls	r3, r3, #10
 8006360:	b29a      	uxth	r2, r3
 8006362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e01e      	b.n	80063a6 <USB_EPStartXfer+0x4f0>
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d119      	bne.n	80063a6 <USB_EPStartXfer+0x4f0>
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	653b      	str	r3, [r7, #80]	; 0x50
 8006378:	1d3b      	adds	r3, r7, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006380:	b29b      	uxth	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006386:	4413      	add	r3, r2
 8006388:	653b      	str	r3, [r7, #80]	; 0x50
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	00da      	lsls	r2, r3, #3
 8006392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006394:	4413      	add	r3, r2
 8006396:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800639a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800639c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063a6:	463b      	mov	r3, r7
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	891b      	ldrh	r3, [r3, #8]
 80063ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6959      	ldr	r1, [r3, #20]
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063c0:	1d38      	adds	r0, r7, #4
 80063c2:	6800      	ldr	r0, [r0, #0]
 80063c4:	f000 ff83 	bl	80072ce <USB_WritePMA>
            ep->xfer_buff += len;
 80063c8:	463b      	mov	r3, r7
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d2:	441a      	add	r2, r3
 80063d4:	463b      	mov	r3, r7
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063da:	463b      	mov	r3, r7
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d909      	bls.n	80063fe <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80063ea:	463b      	mov	r3, r7
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f4:	1ad2      	subs	r2, r2, r3
 80063f6:	463b      	mov	r3, r7
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	621a      	str	r2, [r3, #32]
 80063fc:	e008      	b.n	8006410 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2200      	movs	r2, #0
 800640e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	643b      	str	r3, [r7, #64]	; 0x40
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d164      	bne.n	80064ea <USB_EPStartXfer+0x634>
 8006420:	1d3b      	adds	r3, r7, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	63bb      	str	r3, [r7, #56]	; 0x38
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	4413      	add	r3, r2
 8006436:	63bb      	str	r3, [r7, #56]	; 0x38
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	00da      	lsls	r2, r3, #3
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	4413      	add	r3, r2
 8006444:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644e:	2b3e      	cmp	r3, #62	; 0x3e
 8006450:	d91c      	bls.n	800648c <USB_EPStartXfer+0x5d6>
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <USB_EPStartXfer+0x5bc>
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	3b01      	subs	r3, #1
 800646e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	b29b      	uxth	r3, r3
 8006478:	029b      	lsls	r3, r3, #10
 800647a:	b29b      	uxth	r3, r3
 800647c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006484:	b29a      	uxth	r2, r3
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e04a      	b.n	8006522 <USB_EPStartXfer+0x66c>
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006490:	2b00      	cmp	r3, #0
 8006492:	d112      	bne.n	80064ba <USB_EPStartXfer+0x604>
 8006494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800649e:	b29a      	uxth	r2, r3
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	801a      	strh	r2, [r3, #0]
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e033      	b.n	8006522 <USB_EPStartXfer+0x66c>
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	085b      	lsrs	r3, r3, #1
 80064c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <USB_EPStartXfer+0x624>
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	3301      	adds	r3, #1
 80064d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064de:	b29b      	uxth	r3, r3
 80064e0:	029b      	lsls	r3, r3, #10
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	e01b      	b.n	8006522 <USB_EPStartXfer+0x66c>
 80064ea:	463b      	mov	r3, r7
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d116      	bne.n	8006522 <USB_EPStartXfer+0x66c>
 80064f4:	1d3b      	adds	r3, r7, #4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006502:	4413      	add	r3, r2
 8006504:	643b      	str	r3, [r7, #64]	; 0x40
 8006506:	463b      	mov	r3, r7
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	00da      	lsls	r2, r3, #3
 800650e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006510:	4413      	add	r3, r2
 8006512:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	b29a      	uxth	r2, r3
 800651e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006520:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	895b      	ldrh	r3, [r3, #10]
 8006528:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6959      	ldr	r1, [r3, #20]
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006536:	b29b      	uxth	r3, r3
 8006538:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800653c:	1d38      	adds	r0, r7, #4
 800653e:	6800      	ldr	r0, [r0, #0]
 8006540:	f000 fec5 	bl	80072ce <USB_WritePMA>
 8006544:	e1a4      	b.n	8006890 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006546:	463b      	mov	r3, r7
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	463b      	mov	r3, r7
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	441a      	add	r2, r3
 800657c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a8:	4413      	add	r3, r2
 80065aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ac:	463b      	mov	r3, r7
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	00da      	lsls	r2, r3, #3
 80065b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065c8:	463b      	mov	r3, r7
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	891b      	ldrh	r3, [r3, #8]
 80065ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d2:	463b      	mov	r3, r7
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6959      	ldr	r1, [r3, #20]
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065e2:	1d38      	adds	r0, r7, #4
 80065e4:	6800      	ldr	r0, [r0, #0]
 80065e6:	f000 fe72 	bl	80072ce <USB_WritePMA>
 80065ea:	e151      	b.n	8006890 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80065ec:	463b      	mov	r3, r7
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	463b      	mov	r3, r7
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 809b 	beq.w	8006750 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800661a:	1d3b      	adds	r3, r7, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	673b      	str	r3, [r7, #112]	; 0x70
 8006620:	463b      	mov	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d164      	bne.n	80066f4 <USB_EPStartXfer+0x83e>
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006638:	b29b      	uxth	r3, r3
 800663a:	461a      	mov	r2, r3
 800663c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800663e:	4413      	add	r3, r2
 8006640:	66bb      	str	r3, [r7, #104]	; 0x68
 8006642:	463b      	mov	r3, r7
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	00da      	lsls	r2, r3, #3
 800664a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800664c:	4413      	add	r3, r2
 800664e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006652:	667b      	str	r3, [r7, #100]	; 0x64
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006658:	2b3e      	cmp	r3, #62	; 0x3e
 800665a:	d91c      	bls.n	8006696 <USB_EPStartXfer+0x7e0>
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <USB_EPStartXfer+0x7c6>
 8006672:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006676:	3b01      	subs	r3, #1
 8006678:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800667c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006680:	b29b      	uxth	r3, r3
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	b29b      	uxth	r3, r3
 8006686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668e:	b29a      	uxth	r2, r3
 8006690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	e04a      	b.n	800672c <USB_EPStartXfer+0x876>
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	2b00      	cmp	r3, #0
 800669c:	d112      	bne.n	80066c4 <USB_EPStartXfer+0x80e>
 800669e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	e033      	b.n	800672c <USB_EPStartXfer+0x876>
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <USB_EPStartXfer+0x82e>
 80066da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066de:	3301      	adds	r3, #1
 80066e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	029b      	lsls	r3, r3, #10
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	e01b      	b.n	800672c <USB_EPStartXfer+0x876>
 80066f4:	463b      	mov	r3, r7
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	785b      	ldrb	r3, [r3, #1]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d116      	bne.n	800672c <USB_EPStartXfer+0x876>
 80066fe:	1d3b      	adds	r3, r7, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006706:	b29b      	uxth	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800670c:	4413      	add	r3, r2
 800670e:	673b      	str	r3, [r7, #112]	; 0x70
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	00da      	lsls	r2, r3, #3
 8006718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800671a:	4413      	add	r3, r2
 800671c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006720:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006726:	b29a      	uxth	r2, r3
 8006728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800672c:	463b      	mov	r3, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	895b      	ldrh	r3, [r3, #10]
 8006732:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006736:	463b      	mov	r3, r7
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6959      	ldr	r1, [r3, #20]
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	b29b      	uxth	r3, r3
 8006742:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006746:	1d38      	adds	r0, r7, #4
 8006748:	6800      	ldr	r0, [r0, #0]
 800674a:	f000 fdc0 	bl	80072ce <USB_WritePMA>
 800674e:	e09f      	b.n	8006890 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006750:	463b      	mov	r3, r7
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d164      	bne.n	8006824 <USB_EPStartXfer+0x96e>
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006760:	1d3b      	adds	r3, r7, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006768:	b29b      	uxth	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800676e:	4413      	add	r3, r2
 8006770:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006772:	463b      	mov	r3, r7
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	00da      	lsls	r2, r3, #3
 800677a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800677c:	4413      	add	r3, r2
 800677e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006782:	67bb      	str	r3, [r7, #120]	; 0x78
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006788:	2b3e      	cmp	r3, #62	; 0x3e
 800678a:	d91c      	bls.n	80067c6 <USB_EPStartXfer+0x910>
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <USB_EPStartXfer+0x8f6>
 80067a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067a6:	3b01      	subs	r3, #1
 80067a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	029b      	lsls	r3, r3, #10
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067be:	b29a      	uxth	r2, r3
 80067c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e053      	b.n	800686e <USB_EPStartXfer+0x9b8>
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d112      	bne.n	80067f4 <USB_EPStartXfer+0x93e>
 80067ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e03c      	b.n	800686e <USB_EPStartXfer+0x9b8>
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <USB_EPStartXfer+0x95e>
 800680a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800680e:	3301      	adds	r3, #1
 8006810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006818:	b29b      	uxth	r3, r3
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	b29a      	uxth	r2, r3
 800681e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	e024      	b.n	800686e <USB_EPStartXfer+0x9b8>
 8006824:	463b      	mov	r3, r7
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d11f      	bne.n	800686e <USB_EPStartXfer+0x9b8>
 800682e:	1d3b      	adds	r3, r7, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006836:	1d3b      	adds	r3, r7, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006846:	4413      	add	r3, r2
 8006848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	00da      	lsls	r2, r3, #3
 8006854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006858:	4413      	add	r3, r2
 800685a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800685e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800686c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	891b      	ldrh	r3, [r3, #8]
 8006874:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6959      	ldr	r1, [r3, #20]
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006882:	b29b      	uxth	r3, r3
 8006884:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006888:	1d38      	adds	r0, r7, #4
 800688a:	6800      	ldr	r0, [r0, #0]
 800688c:	f000 fd1f 	bl	80072ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006890:	1d3b      	adds	r3, r7, #4
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	817b      	strh	r3, [r7, #10]
 80068ac:	897b      	ldrh	r3, [r7, #10]
 80068ae:	f083 0310 	eor.w	r3, r3, #16
 80068b2:	817b      	strh	r3, [r7, #10]
 80068b4:	897b      	ldrh	r3, [r7, #10]
 80068b6:	f083 0320 	eor.w	r3, r3, #32
 80068ba:	817b      	strh	r3, [r7, #10]
 80068bc:	1d3b      	adds	r3, r7, #4
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	897b      	ldrh	r3, [r7, #10]
 80068cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	b29b      	uxth	r3, r3
 80068de:	8013      	strh	r3, [r2, #0]
 80068e0:	e3b5      	b.n	800704e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068e2:	463b      	mov	r3, r7
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	7b1b      	ldrb	r3, [r3, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f040 8090 	bne.w	8006a0e <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068ee:	463b      	mov	r3, r7
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	463b      	mov	r3, r7
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d90e      	bls.n	800691c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80068fe:	463b      	mov	r3, r7
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006908:	463b      	mov	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	619a      	str	r2, [r3, #24]
 800691a:	e008      	b.n	800692e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2200      	movs	r2, #0
 800692c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006946:	4413      	add	r3, r2
 8006948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	00da      	lsls	r2, r3, #3
 8006954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006958:	4413      	add	r3, r2
 800695a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800695e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006966:	2b3e      	cmp	r3, #62	; 0x3e
 8006968:	d91d      	bls.n	80069a6 <USB_EPStartXfer+0xaf0>
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <USB_EPStartXfer+0xad4>
 8006980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006984:	3b01      	subs	r3, #1
 8006986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800698a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800698e:	b29b      	uxth	r3, r3
 8006990:	029b      	lsls	r3, r3, #10
 8006992:	b29b      	uxth	r3, r3
 8006994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699c:	b29a      	uxth	r2, r3
 800699e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e325      	b.n	8006ff2 <USB_EPStartXfer+0x113c>
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d116      	bne.n	80069dc <USB_EPStartXfer+0xb26>
 80069ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e30a      	b.n	8006ff2 <USB_EPStartXfer+0x113c>
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d004      	beq.n	80069fc <USB_EPStartXfer+0xb46>
 80069f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069f6:	3301      	adds	r3, #1
 80069f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	029b      	lsls	r3, r3, #10
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e2f1      	b.n	8006ff2 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a0e:	463b      	mov	r3, r7
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	78db      	ldrb	r3, [r3, #3]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	f040 818f 	bne.w	8006d38 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d175      	bne.n	8006b10 <USB_EPStartXfer+0xc5a>
 8006a24:	1d3b      	adds	r3, r7, #4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a42:	463b      	mov	r3, r7
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	00da      	lsls	r2, r3, #3
 8006a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a58:	463b      	mov	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a60:	d91f      	bls.n	8006aa2 <USB_EPStartXfer+0xbec>
 8006a62:	463b      	mov	r3, r7
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <USB_EPStartXfer+0xbd0>
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	3b01      	subs	r3, #1
 8006a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	029b      	lsls	r3, r3, #10
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e05c      	b.n	8006b5c <USB_EPStartXfer+0xca6>
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d116      	bne.n	8006ada <USB_EPStartXfer+0xc24>
 8006aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e040      	b.n	8006b5c <USB_EPStartXfer+0xca6>
 8006ada:	463b      	mov	r3, r7
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d004      	beq.n	8006afe <USB_EPStartXfer+0xc48>
 8006af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af8:	3301      	adds	r3, #1
 8006afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	029b      	lsls	r3, r3, #10
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	e025      	b.n	8006b5c <USB_EPStartXfer+0xca6>
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d120      	bne.n	8006b5c <USB_EPStartXfer+0xca6>
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b22:	1d3b      	adds	r3, r7, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b32:	4413      	add	r3, r2
 8006b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	00da      	lsls	r2, r3, #3
 8006b40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b44:	4413      	add	r3, r2
 8006b46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b4e:	463b      	mov	r3, r7
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	1d3b      	adds	r3, r7, #4
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b64:	463b      	mov	r3, r7
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d175      	bne.n	8006c5a <USB_EPStartXfer+0xda4>
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b86:	4413      	add	r3, r2
 8006b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b8c:	463b      	mov	r3, r7
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	00da      	lsls	r2, r3, #3
 8006b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b98:	4413      	add	r3, r2
 8006b9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8006baa:	d91f      	bls.n	8006bec <USB_EPStartXfer+0xd36>
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bb8:	463b      	mov	r3, r7
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <USB_EPStartXfer+0xd1a>
 8006bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	029b      	lsls	r3, r3, #10
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e058      	b.n	8006c9e <USB_EPStartXfer+0xde8>
 8006bec:	463b      	mov	r3, r7
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d116      	bne.n	8006c24 <USB_EPStartXfer+0xd6e>
 8006bf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c08:	801a      	strh	r2, [r3, #0]
 8006c0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	e03c      	b.n	8006c9e <USB_EPStartXfer+0xde8>
 8006c24:	463b      	mov	r3, r7
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	085b      	lsrs	r3, r3, #1
 8006c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c30:	463b      	mov	r3, r7
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <USB_EPStartXfer+0xd92>
 8006c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c42:	3301      	adds	r3, #1
 8006c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	029b      	lsls	r3, r3, #10
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	e021      	b.n	8006c9e <USB_EPStartXfer+0xde8>
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d11c      	bne.n	8006c9e <USB_EPStartXfer+0xde8>
 8006c64:	1d3b      	adds	r3, r7, #4
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c74:	4413      	add	r3, r2
 8006c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	00da      	lsls	r2, r3, #3
 8006c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c86:	4413      	add	r3, r2
 8006c88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c90:	463b      	mov	r3, r7
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c9c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 81a4 	beq.w	8006ff2 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	463b      	mov	r3, r7
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <USB_EPStartXfer+0xe20>
 8006cca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10d      	bne.n	8006cf2 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 8187 	bne.w	8006ff2 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ce4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 8180 	bne.w	8006ff2 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cf2:	1d3b      	adds	r3, r7, #4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]
 8006d36:	e15c      	b.n	8006ff2 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d38:	463b      	mov	r3, r7
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	78db      	ldrb	r3, [r3, #3]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	f040 8155 	bne.w	8006fee <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d44:	463b      	mov	r3, r7
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d90e      	bls.n	8006d72 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8006d54:	463b      	mov	r3, r7
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006d5e:	463b      	mov	r3, r7
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d68:	1ad2      	subs	r2, r2, r3
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	619a      	str	r2, [r3, #24]
 8006d70:	e008      	b.n	8006d84 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8006d72:	463b      	mov	r3, r7
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006d7c:	463b      	mov	r3, r7
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2200      	movs	r2, #0
 8006d82:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d84:	463b      	mov	r3, r7
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d16f      	bne.n	8006e6e <USB_EPStartXfer+0xfb8>
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006da6:	4413      	add	r3, r2
 8006da8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dac:	463b      	mov	r3, r7
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	00da      	lsls	r2, r3, #3
 8006db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006dc8:	d91d      	bls.n	8006e06 <USB_EPStartXfer+0xf50>
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <USB_EPStartXfer+0xf34>
 8006de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de4:	3b01      	subs	r3, #1
 8006de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e058      	b.n	8006eb8 <USB_EPStartXfer+0x1002>
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d116      	bne.n	8006e3c <USB_EPStartXfer+0xf86>
 8006e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e20:	801a      	strh	r2, [r3, #0]
 8006e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	e03d      	b.n	8006eb8 <USB_EPStartXfer+0x1002>
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <USB_EPStartXfer+0xfa6>
 8006e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e56:	3301      	adds	r3, #1
 8006e58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	e024      	b.n	8006eb8 <USB_EPStartXfer+0x1002>
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	785b      	ldrb	r3, [r3, #1]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d11f      	bne.n	8006eb8 <USB_EPStartXfer+0x1002>
 8006e78:	1d3b      	adds	r3, r7, #4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e80:	1d3b      	adds	r3, r7, #4
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e90:	4413      	add	r3, r2
 8006e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e96:	463b      	mov	r3, r7
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	00da      	lsls	r2, r3, #3
 8006e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	1d3b      	adds	r3, r7, #4
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	785b      	ldrb	r3, [r3, #1]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d16f      	bne.n	8006faa <USB_EPStartXfer+0x10f4>
 8006eca:	1d3b      	adds	r3, r7, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ee8:	463b      	mov	r3, r7
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	00da      	lsls	r2, r3, #3
 8006ef0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006efa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f02:	2b3e      	cmp	r3, #62	; 0x3e
 8006f04:	d91d      	bls.n	8006f42 <USB_EPStartXfer+0x108c>
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d104      	bne.n	8006f26 <USB_EPStartXfer+0x1070>
 8006f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f20:	3b01      	subs	r3, #1
 8006f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	029b      	lsls	r3, r3, #10
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f3e:	801a      	strh	r2, [r3, #0]
 8006f40:	e057      	b.n	8006ff2 <USB_EPStartXfer+0x113c>
 8006f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d116      	bne.n	8006f78 <USB_EPStartXfer+0x10c2>
 8006f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e03c      	b.n	8006ff2 <USB_EPStartXfer+0x113c>
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <USB_EPStartXfer+0x10e2>
 8006f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f92:	3301      	adds	r3, #1
 8006f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	029b      	lsls	r3, r3, #10
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e023      	b.n	8006ff2 <USB_EPStartXfer+0x113c>
 8006faa:	463b      	mov	r3, r7
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d11e      	bne.n	8006ff2 <USB_EPStartXfer+0x113c>
 8006fb4:	1d3b      	adds	r3, r7, #4
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fca:	463b      	mov	r3, r7
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	00da      	lsls	r2, r3, #3
 8006fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	e001      	b.n	8006ff2 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e02e      	b.n	8007050 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007010:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007014:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007018:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800701c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007020:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007024:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007028:	1d3b      	adds	r3, r7, #4
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	463b      	mov	r3, r7
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	441a      	add	r2, r3
 8007036:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800703a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800703e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704a:	b29b      	uxth	r3, r3
 800704c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d020      	beq.n	80070ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007082:	81bb      	strh	r3, [r7, #12]
 8007084:	89bb      	ldrh	r3, [r7, #12]
 8007086:	f083 0310 	eor.w	r3, r3, #16
 800708a:	81bb      	strh	r3, [r7, #12]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	441a      	add	r2, r3
 8007096:	89bb      	ldrh	r3, [r7, #12]
 8007098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	8013      	strh	r3, [r2, #0]
 80070ac:	e01f      	b.n	80070ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	81fb      	strh	r3, [r7, #14]
 80070c6:	89fb      	ldrh	r3, [r7, #14]
 80070c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070cc:	81fb      	strh	r3, [r7, #14]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	441a      	add	r2, r3
 80070d8:	89fb      	ldrh	r3, [r7, #14]
 80070da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	7b1b      	ldrb	r3, [r3, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	f040 809d 	bne.w	800724a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d04c      	beq.n	80071b2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	823b      	strh	r3, [r7, #16]
 8007126:	8a3b      	ldrh	r3, [r7, #16]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01b      	beq.n	8007168 <USB_EPClearStall+0x6c>
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007146:	81fb      	strh	r3, [r7, #14]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	441a      	add	r2, r3
 8007152:	89fb      	ldrh	r3, [r7, #14]
 8007154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007160:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007164:	b29b      	uxth	r3, r3
 8007166:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	78db      	ldrb	r3, [r3, #3]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d06c      	beq.n	800724a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007186:	81bb      	strh	r3, [r7, #12]
 8007188:	89bb      	ldrh	r3, [r7, #12]
 800718a:	f083 0320 	eor.w	r3, r3, #32
 800718e:	81bb      	strh	r3, [r7, #12]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	441a      	add	r2, r3
 800719a:	89bb      	ldrh	r3, [r7, #12]
 800719c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8013      	strh	r3, [r2, #0]
 80071b0:	e04b      	b.n	800724a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	82fb      	strh	r3, [r7, #22]
 80071c0:	8afb      	ldrh	r3, [r7, #22]
 80071c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01b      	beq.n	8007202 <USB_EPClearStall+0x106>
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e0:	82bb      	strh	r3, [r7, #20]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	441a      	add	r2, r3
 80071ec:	8abb      	ldrh	r3, [r7, #20]
 80071ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fe:	b29b      	uxth	r3, r3
 8007200:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007218:	827b      	strh	r3, [r7, #18]
 800721a:	8a7b      	ldrh	r3, [r7, #18]
 800721c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007220:	827b      	strh	r3, [r7, #18]
 8007222:	8a7b      	ldrh	r3, [r7, #18]
 8007224:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007228:	827b      	strh	r3, [r7, #18]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	441a      	add	r2, r3
 8007234:	8a7b      	ldrh	r3, [r7, #18]
 8007236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800723a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007246:	b29b      	uxth	r3, r3
 8007248:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2280      	movs	r2, #128	; 0x80
 800726e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800728e:	b29b      	uxth	r3, r3
 8007290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007298:	b29a      	uxth	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072bc:	b29b      	uxth	r3, r3
 80072be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80072c0:	68fb      	ldr	r3, [r7, #12]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b08d      	sub	sp, #52	; 0x34
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	4611      	mov	r1, r2
 80072da:	461a      	mov	r2, r3
 80072dc:	460b      	mov	r3, r1
 80072de:	80fb      	strh	r3, [r7, #6]
 80072e0:	4613      	mov	r3, r2
 80072e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072e4:	88bb      	ldrh	r3, [r7, #4]
 80072e6:	3301      	adds	r3, #1
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072f4:	88fa      	ldrh	r2, [r7, #6]
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007304:	e01b      	b.n	800733e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	3301      	adds	r3, #1
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	b29b      	uxth	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	b29a      	uxth	r2, r3
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	3302      	adds	r3, #2
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	3301      	adds	r3, #1
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	3b01      	subs	r3, #1
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e0      	bne.n	8007306 <USB_WritePMA+0x38>
  }
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3734      	adds	r7, #52	; 0x34
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007352:	b480      	push	{r7}
 8007354:	b08b      	sub	sp, #44	; 0x2c
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	4611      	mov	r1, r2
 800735e:	461a      	mov	r2, r3
 8007360:	460b      	mov	r3, r1
 8007362:	80fb      	strh	r3, [r7, #6]
 8007364:	4613      	mov	r3, r2
 8007366:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007368:	88bb      	ldrh	r3, [r7, #4]
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	b29b      	uxth	r3, r3
 800736e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007378:	88fa      	ldrh	r2, [r7, #6]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007382:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
 8007388:	e018      	b.n	80073bc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	3302      	adds	r3, #2
 8007396:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	3301      	adds	r3, #1
 80073a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	0a1b      	lsrs	r3, r3, #8
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	3301      	adds	r3, #1
 80073b4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	3b01      	subs	r3, #1
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e3      	bne.n	800738a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80073c2:	88bb      	ldrh	r3, [r7, #4]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	701a      	strb	r2, [r3, #0]
  }
}
 80073de:	bf00      	nop
 80073e0:	372c      	adds	r7, #44	; 0x2c
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073f6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073fa:	f002 f953 	bl	80096a4 <USBD_static_malloc>
 80073fe:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d105      	bne.n	8007412 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800740e:	2302      	movs	r3, #2
 8007410:	e066      	b.n	80074e0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7c1b      	ldrb	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d119      	bne.n	8007456 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007426:	2202      	movs	r2, #2
 8007428:	2181      	movs	r1, #129	; 0x81
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 ffdf 	bl	80093ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743a:	2202      	movs	r2, #2
 800743c:	2101      	movs	r1, #1
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 ffd5 	bl	80093ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2210      	movs	r2, #16
 8007450:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007454:	e016      	b.n	8007484 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	2202      	movs	r2, #2
 800745a:	2181      	movs	r1, #129	; 0x81
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 ffc6 	bl	80093ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	2202      	movs	r2, #2
 800746c:	2101      	movs	r1, #1
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 ffbd 	bl	80093ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2210      	movs	r2, #16
 8007480:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007484:	2308      	movs	r3, #8
 8007486:	2203      	movs	r2, #3
 8007488:	2182      	movs	r1, #130	; 0x82
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 ffaf 	bl	80093ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7c1b      	ldrb	r3, [r3, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074c4:	2101      	movs	r1, #1
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f002 f881 	bl	80095ce <USBD_LL_PrepareReceive>
 80074cc:	e007      	b.n	80074de <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074d4:	2340      	movs	r3, #64	; 0x40
 80074d6:	2101      	movs	r1, #1
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 f878 	bl	80095ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074f4:	2181      	movs	r1, #129	; 0x81
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 ff9f 	bl	800943a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007502:	2101      	movs	r1, #1
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 ff98 	bl	800943a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007512:	2182      	movs	r1, #130	; 0x82
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 ff90 	bl	800943a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00e      	beq.n	8007552 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007544:	4618      	mov	r0, r3
 8007546:	f002 f8bb 	bl	80096c0 <USBD_static_free>
    pdev->pClassData = NULL;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800756c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e0af      	b.n	80076e4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800758c:	2b00      	cmp	r3, #0
 800758e:	d03f      	beq.n	8007610 <USBD_CDC_Setup+0xb4>
 8007590:	2b20      	cmp	r3, #32
 8007592:	f040 809f 	bne.w	80076d4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02e      	beq.n	80075fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	da16      	bge.n	80075d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80075b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	88d2      	ldrh	r2, [r2, #6]
 80075ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	88db      	ldrh	r3, [r3, #6]
 80075c0:	2b07      	cmp	r3, #7
 80075c2:	bf28      	it	cs
 80075c4:	2307      	movcs	r3, #7
 80075c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	89fa      	ldrh	r2, [r7, #14]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 facf 	bl	8008b72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80075d4:	e085      	b.n	80076e2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	785a      	ldrb	r2, [r3, #1]
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	88db      	ldrh	r3, [r3, #6]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80075ec:	6939      	ldr	r1, [r7, #16]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88db      	ldrh	r3, [r3, #6]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fae8 	bl	8008bca <USBD_CtlPrepareRx>
      break;
 80075fa:	e072      	b.n	80076e2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	7850      	ldrb	r0, [r2, #1]
 8007608:	2200      	movs	r2, #0
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	4798      	blx	r3
      break;
 800760e:	e068      	b.n	80076e2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b0b      	cmp	r3, #11
 8007616:	d852      	bhi.n	80076be <USBD_CDC_Setup+0x162>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <USBD_CDC_Setup+0xc4>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007651 	.word	0x08007651
 8007624:	080076cd 	.word	0x080076cd
 8007628:	080076bf 	.word	0x080076bf
 800762c:	080076bf 	.word	0x080076bf
 8007630:	080076bf 	.word	0x080076bf
 8007634:	080076bf 	.word	0x080076bf
 8007638:	080076bf 	.word	0x080076bf
 800763c:	080076bf 	.word	0x080076bf
 8007640:	080076bf 	.word	0x080076bf
 8007644:	080076bf 	.word	0x080076bf
 8007648:	0800767b 	.word	0x0800767b
 800764c:	080076a5 	.word	0x080076a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b03      	cmp	r3, #3
 800765a:	d107      	bne.n	800766c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800765c:	f107 030a 	add.w	r3, r7, #10
 8007660:	2202      	movs	r2, #2
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fa84 	bl	8008b72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800766a:	e032      	b.n	80076d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 fa0e 	bl	8008a90 <USBD_CtlError>
            ret = USBD_FAIL;
 8007674:	2303      	movs	r3, #3
 8007676:	75fb      	strb	r3, [r7, #23]
          break;
 8007678:	e02b      	b.n	80076d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b03      	cmp	r3, #3
 8007684:	d107      	bne.n	8007696 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007686:	f107 030d 	add.w	r3, r7, #13
 800768a:	2201      	movs	r2, #1
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fa6f 	bl	8008b72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007694:	e01d      	b.n	80076d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f9f9 	bl	8008a90 <USBD_CtlError>
            ret = USBD_FAIL;
 800769e:	2303      	movs	r3, #3
 80076a0:	75fb      	strb	r3, [r7, #23]
          break;
 80076a2:	e016      	b.n	80076d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d00f      	beq.n	80076d0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 f9ec 	bl	8008a90 <USBD_CtlError>
            ret = USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076bc:	e008      	b.n	80076d0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f9e5 	bl	8008a90 <USBD_CtlError>
          ret = USBD_FAIL;
 80076c6:	2303      	movs	r3, #3
 80076c8:	75fb      	strb	r3, [r7, #23]
          break;
 80076ca:	e002      	b.n	80076d2 <USBD_CDC_Setup+0x176>
          break;
 80076cc:	bf00      	nop
 80076ce:	e008      	b.n	80076e2 <USBD_CDC_Setup+0x186>
          break;
 80076d0:	bf00      	nop
      }
      break;
 80076d2:	e006      	b.n	80076e2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 f9da 	bl	8008a90 <USBD_CtlError>
      ret = USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	75fb      	strb	r3, [r7, #23]
      break;
 80076e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	e04f      	b.n	80077ae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007714:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007716:	78fa      	ldrb	r2, [r7, #3]
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	3318      	adds	r3, #24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d029      	beq.n	8007780 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	440b      	add	r3, r1
 800773a:	3318      	adds	r3, #24
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	78f9      	ldrb	r1, [r7, #3]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	460b      	mov	r3, r1
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	4403      	add	r3, r0
 800774c:	3338      	adds	r3, #56	; 0x38
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	fbb2 f1f3 	udiv	r1, r2, r3
 8007754:	fb03 f301 	mul.w	r3, r3, r1
 8007758:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800775a:	2b00      	cmp	r3, #0
 800775c:	d110      	bne.n	8007780 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800775e:	78fa      	ldrb	r2, [r7, #3]
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	3318      	adds	r3, #24
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007772:	78f9      	ldrb	r1, [r7, #3]
 8007774:	2300      	movs	r3, #0
 8007776:	2200      	movs	r2, #0
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 ff07 	bl	800958c <USBD_LL_Transmit>
 800777e:	e015      	b.n	80077ac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e015      	b.n	8007804 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 ff17 	bl	8009610 <USBD_LL_GetRxDataSize>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077fe:	4611      	mov	r1, r2
 8007800:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800781a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007822:	2303      	movs	r3, #3
 8007824:	e01b      	b.n	800785e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d015      	beq.n	800785c <USBD_CDC_EP0_RxReady+0x50>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007836:	2bff      	cmp	r3, #255	; 0xff
 8007838:	d010      	beq.n	800785c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007848:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007850:	b292      	uxth	r2, r2
 8007852:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	22ff      	movs	r2, #255	; 0xff
 8007858:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2243      	movs	r2, #67	; 0x43
 8007874:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007876:	4b03      	ldr	r3, [pc, #12]	; (8007884 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	20000098 	.word	0x20000098

08007888 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2243      	movs	r2, #67	; 0x43
 8007894:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007896:	4b03      	ldr	r3, [pc, #12]	; (80078a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	20000054 	.word	0x20000054

080078a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2243      	movs	r2, #67	; 0x43
 80078b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80078b6:	4b03      	ldr	r3, [pc, #12]	; (80078c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	200000dc 	.word	0x200000dc

080078c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	220a      	movs	r2, #10
 80078d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078d6:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	20000010 	.word	0x20000010

080078e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e004      	b.n	8007906 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007912:	b480      	push	{r7}
 8007914:	b087      	sub	sp, #28
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007924:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800792c:	2303      	movs	r3, #3
 800792e:	e008      	b.n	8007942 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800795e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007966:	2303      	movs	r3, #3
 8007968:	e004      	b.n	8007974 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800798e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007990:	2301      	movs	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800799e:	2303      	movs	r3, #3
 80079a0:	e01a      	b.n	80079d8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d114      	bne.n	80079d6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079ca:	2181      	movs	r1, #129	; 0x81
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fddd 	bl	800958c <USBD_LL_Transmit>

    ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e016      	b.n	8007a2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7c1b      	ldrb	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a10:	2101      	movs	r1, #1
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fddb 	bl	80095ce <USBD_LL_PrepareReceive>
 8007a18:	e007      	b.n	8007a2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	2101      	movs	r1, #1
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fdd2 	bl	80095ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e01f      	b.n	8007a8c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	79fa      	ldrb	r2, [r7, #7]
 8007a7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f001 fc37 	bl	80092f4 <USBD_LL_Init>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e016      	b.n	8007ada <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	f107 020e 	add.w	r2, r7, #14
 8007acc:	4610      	mov	r0, r2
 8007ace:	4798      	blx	r3
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 fc64 	bl	80093b8 <USBD_LL_Start>
 8007af0:	4603      	mov	r3, r0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	4611      	mov	r1, r2
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	4611      	mov	r1, r2
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
  }

  return USBD_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 ff46 	bl	8008a1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d01a      	beq.n	8007bea <USBD_LL_SetupStage+0x72>
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d822      	bhi.n	8007bfe <USBD_LL_SetupStage+0x86>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <USBD_LL_SetupStage+0x4a>
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d00a      	beq.n	8007bd6 <USBD_LL_SetupStage+0x5e>
 8007bc0:	e01d      	b.n	8007bfe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f9ee 	bl	8007fac <USBD_StdDevReq>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd4:	e020      	b.n	8007c18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa52 	bl	8008088 <USBD_StdItfReq>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]
      break;
 8007be8:	e016      	b.n	8007c18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa91 	bl	800811a <USBD_StdEPReq>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfc:	e00c      	b.n	8007c18 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 fc33 	bl	8009478 <USBD_LL_StallEP>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
      break;
 8007c16:	bf00      	nop
  }

  return ret;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b086      	sub	sp, #24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	607a      	str	r2, [r7, #4]
 8007c2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d138      	bne.n	8007ca8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d14a      	bne.n	8007cde <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d913      	bls.n	8007c7c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	1ad2      	subs	r2, r2, r3
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	bf28      	it	cs
 8007c6e:	4613      	movcs	r3, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 ffc5 	bl	8008c04 <USBD_CtlContinueRx>
 8007c7a:	e030      	b.n	8007cde <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d10b      	bne.n	8007ca0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 ffc0 	bl	8008c26 <USBD_CtlSendStatus>
 8007ca6:	e01a      	b.n	8007cde <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d114      	bne.n	8007cde <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00e      	beq.n	8007cde <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	7afa      	ldrb	r2, [r7, #11]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	e000      	b.n	8007ce0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cf6:	7afb      	ldrb	r3, [r7, #11]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d16b      	bne.n	8007dd4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3314      	adds	r3, #20
 8007d00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d156      	bne.n	8007dba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d914      	bls.n	8007d42 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	1ad2      	subs	r2, r2, r3
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 ff3a 	bl	8008ba8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d34:	2300      	movs	r3, #0
 8007d36:	2200      	movs	r2, #0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f001 fc47 	bl	80095ce <USBD_LL_PrepareReceive>
 8007d40:	e03b      	b.n	8007dba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d11c      	bne.n	8007d88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d316      	bcc.n	8007d88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d20f      	bcs.n	8007d88 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 ff1b 	bl	8008ba8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f001 fc24 	bl	80095ce <USBD_LL_PrepareReceive>
 8007d86:	e018      	b.n	8007dba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d10b      	bne.n	8007dac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dac:	2180      	movs	r1, #128	; 0x80
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f001 fb62 	bl	8009478 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 ff49 	bl	8008c4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d122      	bne.n	8007e0a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff fe98 	bl	8007afa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007dd2:	e01a      	b.n	8007e0a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d114      	bne.n	8007e0a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00e      	beq.n	8007e0a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	7afa      	ldrb	r2, [r7, #11]
 8007df6:	4611      	mov	r1, r2
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	4798      	blx	r3
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	e000      	b.n	8007e0c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e02f      	b.n	8007ea8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00f      	beq.n	8007e72 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6852      	ldr	r2, [r2, #4]
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e72:	2340      	movs	r3, #64	; 0x40
 8007e74:	2200      	movs	r2, #0
 8007e76:	2100      	movs	r1, #0
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fab8 	bl	80093ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2240      	movs	r2, #64	; 0x40
 8007e8a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e8e:	2340      	movs	r3, #64	; 0x40
 8007e90:	2200      	movs	r2, #0
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 faaa 	bl	80093ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2240      	movs	r2, #64	; 0x40
 8007ea4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2204      	movs	r2, #4
 8007eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d106      	bne.n	8007f1e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e012      	b.n	8007f68 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d10b      	bne.n	8007f66 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	3301      	adds	r3, #1
 8007f86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f8e:	8a3b      	ldrh	r3, [r7, #16]
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	b21a      	sxth	r2, r3
 8007f94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	b21b      	sxth	r3, r3
 8007f9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f9e:	89fb      	ldrh	r3, [r7, #14]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc2:	2b40      	cmp	r3, #64	; 0x40
 8007fc4:	d005      	beq.n	8007fd2 <USBD_StdDevReq+0x26>
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d853      	bhi.n	8008072 <USBD_StdDevReq+0xc6>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <USBD_StdDevReq+0x3a>
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	d14f      	bne.n	8008072 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4798      	blx	r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe4:	e04a      	b.n	800807c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	2b09      	cmp	r3, #9
 8007fec:	d83b      	bhi.n	8008066 <USBD_StdDevReq+0xba>
 8007fee:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <USBD_StdDevReq+0x48>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	08008049 	.word	0x08008049
 8007ff8:	0800805d 	.word	0x0800805d
 8007ffc:	08008067 	.word	0x08008067
 8008000:	08008053 	.word	0x08008053
 8008004:	08008067 	.word	0x08008067
 8008008:	08008027 	.word	0x08008027
 800800c:	0800801d 	.word	0x0800801d
 8008010:	08008067 	.word	0x08008067
 8008014:	0800803f 	.word	0x0800803f
 8008018:	08008031 	.word	0x08008031
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f9de 	bl	80083e0 <USBD_GetDescriptor>
          break;
 8008024:	e024      	b.n	8008070 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fb6d 	bl	8008708 <USBD_SetAddress>
          break;
 800802e:	e01f      	b.n	8008070 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fbac 	bl	8008790 <USBD_SetConfig>
 8008038:	4603      	mov	r3, r0
 800803a:	73fb      	strb	r3, [r7, #15]
          break;
 800803c:	e018      	b.n	8008070 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fc4b 	bl	80088dc <USBD_GetConfig>
          break;
 8008046:	e013      	b.n	8008070 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fc7c 	bl	8008948 <USBD_GetStatus>
          break;
 8008050:	e00e      	b.n	8008070 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fcab 	bl	80089b0 <USBD_SetFeature>
          break;
 800805a:	e009      	b.n	8008070 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fcba 	bl	80089d8 <USBD_ClrFeature>
          break;
 8008064:	e004      	b.n	8008070 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fd11 	bl	8008a90 <USBD_CtlError>
          break;
 800806e:	bf00      	nop
      }
      break;
 8008070:	e004      	b.n	800807c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fd0b 	bl	8008a90 <USBD_CtlError>
      break;
 800807a:	bf00      	nop
  }

  return ret;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop

08008088 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800809e:	2b40      	cmp	r3, #64	; 0x40
 80080a0:	d005      	beq.n	80080ae <USBD_StdItfReq+0x26>
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d82f      	bhi.n	8008106 <USBD_StdItfReq+0x7e>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <USBD_StdItfReq+0x26>
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d12b      	bne.n	8008106 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d81d      	bhi.n	80080f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	889b      	ldrh	r3, [r3, #4]
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d813      	bhi.n	80080ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	88db      	ldrh	r3, [r3, #6]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d110      	bne.n	8008102 <USBD_StdItfReq+0x7a>
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10d      	bne.n	8008102 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fd9d 	bl	8008c26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080ec:	e009      	b.n	8008102 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fccd 	bl	8008a90 <USBD_CtlError>
          break;
 80080f6:	e004      	b.n	8008102 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fcc8 	bl	8008a90 <USBD_CtlError>
          break;
 8008100:	e000      	b.n	8008104 <USBD_StdItfReq+0x7c>
          break;
 8008102:	bf00      	nop
      }
      break;
 8008104:	e004      	b.n	8008110 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fcc1 	bl	8008a90 <USBD_CtlError>
      break;
 800810e:	bf00      	nop
  }

  return ret;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	889b      	ldrh	r3, [r3, #4]
 800812c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	d007      	beq.n	800814a <USBD_StdEPReq+0x30>
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	f200 8145 	bhi.w	80083ca <USBD_StdEPReq+0x2b0>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00c      	beq.n	800815e <USBD_StdEPReq+0x44>
 8008144:	2b20      	cmp	r3, #32
 8008146:	f040 8140 	bne.w	80083ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
      break;
 800815c:	e13a      	b.n	80083d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b03      	cmp	r3, #3
 8008164:	d007      	beq.n	8008176 <USBD_StdEPReq+0x5c>
 8008166:	2b03      	cmp	r3, #3
 8008168:	f300 8129 	bgt.w	80083be <USBD_StdEPReq+0x2a4>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d07f      	beq.n	8008270 <USBD_StdEPReq+0x156>
 8008170:	2b01      	cmp	r3, #1
 8008172:	d03c      	beq.n	80081ee <USBD_StdEPReq+0xd4>
 8008174:	e123      	b.n	80083be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b02      	cmp	r3, #2
 8008180:	d002      	beq.n	8008188 <USBD_StdEPReq+0x6e>
 8008182:	2b03      	cmp	r3, #3
 8008184:	d016      	beq.n	80081b4 <USBD_StdEPReq+0x9a>
 8008186:	e02c      	b.n	80081e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00d      	beq.n	80081aa <USBD_StdEPReq+0x90>
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	2b80      	cmp	r3, #128	; 0x80
 8008192:	d00a      	beq.n	80081aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f96d 	bl	8009478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800819e:	2180      	movs	r1, #128	; 0x80
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 f969 	bl	8009478 <USBD_LL_StallEP>
 80081a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081a8:	e020      	b.n	80081ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc6f 	bl	8008a90 <USBD_CtlError>
              break;
 80081b2:	e01b      	b.n	80081ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10e      	bne.n	80081da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <USBD_StdEPReq+0xc0>
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b80      	cmp	r3, #128	; 0x80
 80081c6:	d008      	beq.n	80081da <USBD_StdEPReq+0xc0>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	88db      	ldrh	r3, [r3, #6]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d104      	bne.n	80081da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 f94f 	bl	8009478 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fd23 	bl	8008c26 <USBD_CtlSendStatus>

              break;
 80081e0:	e004      	b.n	80081ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fc53 	bl	8008a90 <USBD_CtlError>
              break;
 80081ea:	bf00      	nop
          }
          break;
 80081ec:	e0ec      	b.n	80083c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d002      	beq.n	8008200 <USBD_StdEPReq+0xe6>
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d016      	beq.n	800822c <USBD_StdEPReq+0x112>
 80081fe:	e030      	b.n	8008262 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00d      	beq.n	8008222 <USBD_StdEPReq+0x108>
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b80      	cmp	r3, #128	; 0x80
 800820a:	d00a      	beq.n	8008222 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 f931 	bl	8009478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008216:	2180      	movs	r1, #128	; 0x80
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 f92d 	bl	8009478 <USBD_LL_StallEP>
 800821e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008220:	e025      	b.n	800826e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fc33 	bl	8008a90 <USBD_CtlError>
              break;
 800822a:	e020      	b.n	800826e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	885b      	ldrh	r3, [r3, #2]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d11b      	bne.n	800826c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823a:	2b00      	cmp	r3, #0
 800823c:	d004      	beq.n	8008248 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 f937 	bl	80094b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fcec 	bl	8008c26 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	4798      	blx	r3
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008260:	e004      	b.n	800826c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fc13 	bl	8008a90 <USBD_CtlError>
              break;
 800826a:	e000      	b.n	800826e <USBD_StdEPReq+0x154>
              break;
 800826c:	bf00      	nop
          }
          break;
 800826e:	e0ab      	b.n	80083c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d002      	beq.n	8008282 <USBD_StdEPReq+0x168>
 800827c:	2b03      	cmp	r3, #3
 800827e:	d032      	beq.n	80082e6 <USBD_StdEPReq+0x1cc>
 8008280:	e097      	b.n	80083b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d007      	beq.n	8008298 <USBD_StdEPReq+0x17e>
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b80      	cmp	r3, #128	; 0x80
 800828c:	d004      	beq.n	8008298 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fbfd 	bl	8008a90 <USBD_CtlError>
                break;
 8008296:	e091      	b.n	80083bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800829c:	2b00      	cmp	r3, #0
 800829e:	da0b      	bge.n	80082b8 <USBD_StdEPReq+0x19e>
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	3310      	adds	r3, #16
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	3304      	adds	r3, #4
 80082b6:	e00b      	b.n	80082d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	3304      	adds	r3, #4
 80082d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2202      	movs	r2, #2
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fc47 	bl	8008b72 <USBD_CtlSendData>
              break;
 80082e4:	e06a      	b.n	80083bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	da11      	bge.n	8008312 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	f003 020f 	and.w	r2, r3, #15
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	440b      	add	r3, r1
 8008300:	3324      	adds	r3, #36	; 0x24
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d117      	bne.n	8008338 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fbc0 	bl	8008a90 <USBD_CtlError>
                  break;
 8008310:	e054      	b.n	80083bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	f003 020f 	and.w	r2, r3, #15
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	4613      	mov	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	440b      	add	r3, r1
 8008324:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fbad 	bl	8008a90 <USBD_CtlError>
                  break;
 8008336:	e041      	b.n	80083bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800833c:	2b00      	cmp	r3, #0
 800833e:	da0b      	bge.n	8008358 <USBD_StdEPReq+0x23e>
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	3310      	adds	r3, #16
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	4413      	add	r3, r2
 8008354:	3304      	adds	r3, #4
 8008356:	e00b      	b.n	8008370 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	4413      	add	r3, r2
 800836e:	3304      	adds	r3, #4
 8008370:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <USBD_StdEPReq+0x264>
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	2b80      	cmp	r3, #128	; 0x80
 800837c:	d103      	bne.n	8008386 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e00e      	b.n	80083a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 f8b2 	bl	80094f4 <USBD_LL_IsStallEP>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2201      	movs	r2, #1
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e002      	b.n	80083a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2202      	movs	r2, #2
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fbe1 	bl	8008b72 <USBD_CtlSendData>
              break;
 80083b0:	e004      	b.n	80083bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fb6b 	bl	8008a90 <USBD_CtlError>
              break;
 80083ba:	bf00      	nop
          }
          break;
 80083bc:	e004      	b.n	80083c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fb65 	bl	8008a90 <USBD_CtlError>
          break;
 80083c6:	bf00      	nop
      }
      break;
 80083c8:	e004      	b.n	80083d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fb5f 	bl	8008a90 <USBD_CtlError>
      break;
 80083d2:	bf00      	nop
  }

  return ret;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	885b      	ldrh	r3, [r3, #2]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	2b0e      	cmp	r3, #14
 8008402:	f200 8152 	bhi.w	80086aa <USBD_GetDescriptor+0x2ca>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <USBD_GetDescriptor+0x2c>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	0800847d 	.word	0x0800847d
 8008410:	08008495 	.word	0x08008495
 8008414:	080084d5 	.word	0x080084d5
 8008418:	080086ab 	.word	0x080086ab
 800841c:	080086ab 	.word	0x080086ab
 8008420:	0800864b 	.word	0x0800864b
 8008424:	08008677 	.word	0x08008677
 8008428:	080086ab 	.word	0x080086ab
 800842c:	080086ab 	.word	0x080086ab
 8008430:	080086ab 	.word	0x080086ab
 8008434:	080086ab 	.word	0x080086ab
 8008438:	080086ab 	.word	0x080086ab
 800843c:	080086ab 	.word	0x080086ab
 8008440:	080086ab 	.word	0x080086ab
 8008444:	08008449 	.word	0x08008449
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	7c12      	ldrb	r2, [r2, #16]
 8008460:	f107 0108 	add.w	r1, r7, #8
 8008464:	4610      	mov	r0, r2
 8008466:	4798      	blx	r3
 8008468:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800846a:	e126      	b.n	80086ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb0e 	bl	8008a90 <USBD_CtlError>
        err++;
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	3301      	adds	r3, #1
 8008478:	72fb      	strb	r3, [r7, #11]
      break;
 800847a:	e11e      	b.n	80086ba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	7c12      	ldrb	r2, [r2, #16]
 8008488:	f107 0108 	add.w	r1, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
      break;
 8008492:	e112      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	7c1b      	ldrb	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10d      	bne.n	80084b8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	f107 0208 	add.w	r2, r7, #8
 80084a8:	4610      	mov	r0, r2
 80084aa:	4798      	blx	r3
 80084ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	2202      	movs	r2, #2
 80084b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084b6:	e100      	b.n	80086ba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	f107 0208 	add.w	r2, r7, #8
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
 80084c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3301      	adds	r3, #1
 80084ce:	2202      	movs	r2, #2
 80084d0:	701a      	strb	r2, [r3, #0]
      break;
 80084d2:	e0f2      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	885b      	ldrh	r3, [r3, #2]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b05      	cmp	r3, #5
 80084dc:	f200 80ac 	bhi.w	8008638 <USBD_GetDescriptor+0x258>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBD_GetDescriptor+0x108>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	08008501 	.word	0x08008501
 80084ec:	08008535 	.word	0x08008535
 80084f0:	08008569 	.word	0x08008569
 80084f4:	0800859d 	.word	0x0800859d
 80084f8:	080085d1 	.word	0x080085d1
 80084fc:	08008605 	.word	0x08008605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008522:	e091      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fab2 	bl	8008a90 <USBD_CtlError>
            err++;
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	3301      	adds	r3, #1
 8008530:	72fb      	strb	r3, [r7, #11]
          break;
 8008532:	e089      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7c12      	ldrb	r2, [r2, #16]
 800854c:	f107 0108 	add.w	r1, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008556:	e077      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa98 	bl	8008a90 <USBD_CtlError>
            err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
          break;
 8008566:	e06f      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	7c12      	ldrb	r2, [r2, #16]
 8008580:	f107 0108 	add.w	r1, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858a:	e05d      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa7e 	bl	8008a90 <USBD_CtlError>
            err++;
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	3301      	adds	r3, #1
 8008598:	72fb      	strb	r3, [r7, #11]
          break;
 800859a:	e055      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	7c12      	ldrb	r2, [r2, #16]
 80085b4:	f107 0108 	add.w	r1, r7, #8
 80085b8:	4610      	mov	r0, r2
 80085ba:	4798      	blx	r3
 80085bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085be:	e043      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa64 	bl	8008a90 <USBD_CtlError>
            err++;
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	3301      	adds	r3, #1
 80085cc:	72fb      	strb	r3, [r7, #11]
          break;
 80085ce:	e03b      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	7c12      	ldrb	r2, [r2, #16]
 80085e8:	f107 0108 	add.w	r1, r7, #8
 80085ec:	4610      	mov	r0, r2
 80085ee:	4798      	blx	r3
 80085f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085f2:	e029      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa4a 	bl	8008a90 <USBD_CtlError>
            err++;
 80085fc:	7afb      	ldrb	r3, [r7, #11]
 80085fe:	3301      	adds	r3, #1
 8008600:	72fb      	strb	r3, [r7, #11]
          break;
 8008602:	e021      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	7c12      	ldrb	r2, [r2, #16]
 800861c:	f107 0108 	add.w	r1, r7, #8
 8008620:	4610      	mov	r0, r2
 8008622:	4798      	blx	r3
 8008624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008626:	e00f      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa30 	bl	8008a90 <USBD_CtlError>
            err++;
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	3301      	adds	r3, #1
 8008634:	72fb      	strb	r3, [r7, #11]
          break;
 8008636:	e007      	b.n	8008648 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa28 	bl	8008a90 <USBD_CtlError>
          err++;
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	3301      	adds	r3, #1
 8008644:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008646:	bf00      	nop
      }
      break;
 8008648:	e037      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	7c1b      	ldrb	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865a:	f107 0208 	add.w	r2, r7, #8
 800865e:	4610      	mov	r0, r2
 8008660:	4798      	blx	r3
 8008662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008664:	e029      	b.n	80086ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fa11 	bl	8008a90 <USBD_CtlError>
        err++;
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	3301      	adds	r3, #1
 8008672:	72fb      	strb	r3, [r7, #11]
      break;
 8008674:	e021      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7c1b      	ldrb	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10d      	bne.n	800869a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	f107 0208 	add.w	r2, r7, #8
 800868a:	4610      	mov	r0, r2
 800868c:	4798      	blx	r3
 800868e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	2207      	movs	r2, #7
 8008696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008698:	e00f      	b.n	80086ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f9f7 	bl	8008a90 <USBD_CtlError>
        err++;
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	3301      	adds	r3, #1
 80086a6:	72fb      	strb	r3, [r7, #11]
      break;
 80086a8:	e007      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f9ef 	bl	8008a90 <USBD_CtlError>
      err++;
 80086b2:	7afb      	ldrb	r3, [r7, #11]
 80086b4:	3301      	adds	r3, #1
 80086b6:	72fb      	strb	r3, [r7, #11]
      break;
 80086b8:	bf00      	nop
  }

  if (err != 0U)
 80086ba:	7afb      	ldrb	r3, [r7, #11]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d11e      	bne.n	80086fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	88db      	ldrh	r3, [r3, #6]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d016      	beq.n	80086f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80086c8:	893b      	ldrh	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00e      	beq.n	80086ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	88da      	ldrh	r2, [r3, #6]
 80086d2:	893b      	ldrh	r3, [r7, #8]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bf28      	it	cs
 80086d8:	4613      	movcs	r3, r2
 80086da:	b29b      	uxth	r3, r3
 80086dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086de:	893b      	ldrh	r3, [r7, #8]
 80086e0:	461a      	mov	r2, r3
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa44 	bl	8008b72 <USBD_CtlSendData>
 80086ea:	e009      	b.n	8008700 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9ce 	bl	8008a90 <USBD_CtlError>
 80086f4:	e004      	b.n	8008700 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa95 	bl	8008c26 <USBD_CtlSendStatus>
 80086fc:	e000      	b.n	8008700 <USBD_GetDescriptor+0x320>
    return;
 80086fe:	bf00      	nop
  }
}
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop

08008708 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	889b      	ldrh	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d131      	bne.n	800877e <USBD_SetAddress+0x76>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	88db      	ldrh	r3, [r3, #6]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d12d      	bne.n	800877e <USBD_SetAddress+0x76>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	885b      	ldrh	r3, [r3, #2]
 8008726:	2b7f      	cmp	r3, #127	; 0x7f
 8008728:	d829      	bhi.n	800877e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008734:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b03      	cmp	r3, #3
 8008740:	d104      	bne.n	800874c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f9a3 	bl	8008a90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874a:	e01d      	b.n	8008788 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7bfa      	ldrb	r2, [r7, #15]
 8008750:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fef8 	bl	800954e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa61 	bl	8008c26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d004      	beq.n	8008774 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008772:	e009      	b.n	8008788 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877c:	e004      	b.n	8008788 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f985 	bl	8008a90 <USBD_CtlError>
  }
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	4b4c      	ldr	r3, [pc, #304]	; (80088d8 <USBD_SetConfig+0x148>)
 80087a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087a8:	4b4b      	ldr	r3, [pc, #300]	; (80088d8 <USBD_SetConfig+0x148>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d905      	bls.n	80087bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f96c 	bl	8008a90 <USBD_CtlError>
    return USBD_FAIL;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e088      	b.n	80088ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d002      	beq.n	80087ce <USBD_SetConfig+0x3e>
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d025      	beq.n	8008818 <USBD_SetConfig+0x88>
 80087cc:	e071      	b.n	80088b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087ce:	4b42      	ldr	r3, [pc, #264]	; (80088d8 <USBD_SetConfig+0x148>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d01c      	beq.n	8008810 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80087d6:	4b40      	ldr	r3, [pc, #256]	; (80088d8 <USBD_SetConfig+0x148>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087e0:	4b3d      	ldr	r3, [pc, #244]	; (80088d8 <USBD_SetConfig+0x148>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff f992 	bl	8007b10 <USBD_SetClassConfig>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d004      	beq.n	8008800 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f949 	bl	8008a90 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087fe:	e065      	b.n	80088cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fa10 	bl	8008c26 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2203      	movs	r2, #3
 800880a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800880e:	e05d      	b.n	80088cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fa08 	bl	8008c26 <USBD_CtlSendStatus>
      break;
 8008816:	e059      	b.n	80088cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008818:	4b2f      	ldr	r3, [pc, #188]	; (80088d8 <USBD_SetConfig+0x148>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d112      	bne.n	8008846 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008828:	4b2b      	ldr	r3, [pc, #172]	; (80088d8 <USBD_SetConfig+0x148>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008832:	4b29      	ldr	r3, [pc, #164]	; (80088d8 <USBD_SetConfig+0x148>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff f985 	bl	8007b48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f9f1 	bl	8008c26 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008844:	e042      	b.n	80088cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008846:	4b24      	ldr	r3, [pc, #144]	; (80088d8 <USBD_SetConfig+0x148>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	d02a      	beq.n	80088aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff f973 	bl	8007b48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008862:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <USBD_SetConfig+0x148>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800886c:	4b1a      	ldr	r3, [pc, #104]	; (80088d8 <USBD_SetConfig+0x148>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff f94c 	bl	8007b10 <USBD_SetClassConfig>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00f      	beq.n	80088a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f903 	bl	8008a90 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff f958 	bl	8007b48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088a0:	e014      	b.n	80088cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f9bf 	bl	8008c26 <USBD_CtlSendStatus>
      break;
 80088a8:	e010      	b.n	80088cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f9bb 	bl	8008c26 <USBD_CtlSendStatus>
      break;
 80088b0:	e00c      	b.n	80088cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f8eb 	bl	8008a90 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ba:	4b07      	ldr	r3, [pc, #28]	; (80088d8 <USBD_SetConfig+0x148>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff f941 	bl	8007b48 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088c6:	2303      	movs	r3, #3
 80088c8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ca:	bf00      	nop
  }

  return ret;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	200001a4 	.word	0x200001a4

080088dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88db      	ldrh	r3, [r3, #6]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d004      	beq.n	80088f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f8cd 	bl	8008a90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088f6:	e023      	b.n	8008940 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b02      	cmp	r3, #2
 8008902:	dc02      	bgt.n	800890a <USBD_GetConfig+0x2e>
 8008904:	2b00      	cmp	r3, #0
 8008906:	dc03      	bgt.n	8008910 <USBD_GetConfig+0x34>
 8008908:	e015      	b.n	8008936 <USBD_GetConfig+0x5a>
 800890a:	2b03      	cmp	r3, #3
 800890c:	d00b      	beq.n	8008926 <USBD_GetConfig+0x4a>
 800890e:	e012      	b.n	8008936 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3308      	adds	r3, #8
 800891a:	2201      	movs	r2, #1
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f927 	bl	8008b72 <USBD_CtlSendData>
        break;
 8008924:	e00c      	b.n	8008940 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3304      	adds	r3, #4
 800892a:	2201      	movs	r2, #1
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f91f 	bl	8008b72 <USBD_CtlSendData>
        break;
 8008934:	e004      	b.n	8008940 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f8a9 	bl	8008a90 <USBD_CtlError>
        break;
 800893e:	bf00      	nop
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008958:	b2db      	uxtb	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	2b02      	cmp	r3, #2
 800895e:	d81e      	bhi.n	800899e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	88db      	ldrh	r3, [r3, #6]
 8008964:	2b02      	cmp	r3, #2
 8008966:	d004      	beq.n	8008972 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f890 	bl	8008a90 <USBD_CtlError>
        break;
 8008970:	e01a      	b.n	80089a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f043 0202 	orr.w	r2, r3, #2
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	330c      	adds	r3, #12
 8008992:	2202      	movs	r2, #2
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f8eb 	bl	8008b72 <USBD_CtlSendData>
      break;
 800899c:	e004      	b.n	80089a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f875 	bl	8008a90 <USBD_CtlError>
      break;
 80089a6:	bf00      	nop
  }
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	885b      	ldrh	r3, [r3, #2]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d106      	bne.n	80089d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f92b 	bl	8008c26 <USBD_CtlSendStatus>
  }
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d80b      	bhi.n	8008a08 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	885b      	ldrh	r3, [r3, #2]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d10c      	bne.n	8008a12 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f910 	bl	8008c26 <USBD_CtlSendStatus>
      }
      break;
 8008a06:	e004      	b.n	8008a12 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f840 	bl	8008a90 <USBD_CtlError>
      break;
 8008a10:	e000      	b.n	8008a14 <USBD_ClrFeature+0x3c>
      break;
 8008a12:	bf00      	nop
  }
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	781a      	ldrb	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3301      	adds	r3, #1
 8008a36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3301      	adds	r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff fa92 	bl	8007f70 <SWAPBYTE>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff fa85 	bl	8007f70 <SWAPBYTE>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3301      	adds	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7ff fa78 	bl	8007f70 <SWAPBYTE>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	80da      	strh	r2, [r3, #6]
}
 8008a88:	bf00      	nop
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a9a:	2180      	movs	r1, #128	; 0x80
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fceb 	bl	8009478 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fce7 	bl	8009478 <USBD_LL_StallEP>
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b086      	sub	sp, #24
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d036      	beq.n	8008b36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008acc:	6938      	ldr	r0, [r7, #16]
 8008ace:	f000 f836 	bl	8008b3e <USBD_GetLen>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	7812      	ldrb	r2, [r2, #0]
 8008aea:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	3301      	adds	r3, #1
 8008af0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	4413      	add	r3, r2
 8008af8:	2203      	movs	r2, #3
 8008afa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	3301      	adds	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b02:	e013      	b.n	8008b2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	4413      	add	r3, r2
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	3301      	adds	r3, #1
 8008b14:	613b      	str	r3, [r7, #16]
    idx++;
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4413      	add	r3, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e7      	bne.n	8008b04 <USBD_GetString+0x52>
 8008b34:	e000      	b.n	8008b38 <USBD_GetString+0x86>
    return;
 8008b36:	bf00      	nop
  }
}
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b4e:	e005      	b.n	8008b5c <USBD_GetLen+0x1e>
  {
    len++;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	3301      	adds	r3, #1
 8008b54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1f5      	bne.n	8008b50 <USBD_GetLen+0x12>
  }

  return len;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2202      	movs	r2, #2
 8008b82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	2100      	movs	r1, #0
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fcf7 	bl	800958c <USBD_LL_Transmit>

  return USBD_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fce6 	bl	800958c <USBD_LL_Transmit>

  return USBD_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2203      	movs	r2, #3
 8008bda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fcea 	bl	80095ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	2100      	movs	r1, #0
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 fcd9 	bl	80095ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2204      	movs	r2, #4
 8008c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c36:	2300      	movs	r3, #0
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fca5 	bl	800958c <USBD_LL_Transmit>

  return USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2205      	movs	r2, #5
 8008c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fcb3 	bl	80095ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4912      	ldr	r1, [pc, #72]	; (8008cc4 <MX_USB_Device_Init+0x50>)
 8008c7c:	4812      	ldr	r0, [pc, #72]	; (8008cc8 <MX_USB_Device_Init+0x54>)
 8008c7e:	f7fe fed9 	bl	8007a34 <USBD_Init>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008c88:	f7f7 fc71 	bl	800056e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008c8c:	490f      	ldr	r1, [pc, #60]	; (8008ccc <MX_USB_Device_Init+0x58>)
 8008c8e:	480e      	ldr	r0, [pc, #56]	; (8008cc8 <MX_USB_Device_Init+0x54>)
 8008c90:	f7fe ff00 	bl	8007a94 <USBD_RegisterClass>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008c9a:	f7f7 fc68 	bl	800056e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008c9e:	490c      	ldr	r1, [pc, #48]	; (8008cd0 <MX_USB_Device_Init+0x5c>)
 8008ca0:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <MX_USB_Device_Init+0x54>)
 8008ca2:	f7fe fe21 	bl	80078e8 <USBD_CDC_RegisterInterface>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008cac:	f7f7 fc5f 	bl	800056e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <MX_USB_Device_Init+0x54>)
 8008cb2:	f7fe ff16 	bl	8007ae2 <USBD_Start>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008cbc:	f7f7 fc57 	bl	800056e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008cc0:	bf00      	nop
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	20000134 	.word	0x20000134
 8008cc8:	20000438 	.word	0x20000438
 8008ccc:	2000001c 	.word	0x2000001c
 8008cd0:	20000120 	.word	0x20000120

08008cd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4905      	ldr	r1, [pc, #20]	; (8008cf0 <CDC_Init_FS+0x1c>)
 8008cdc:	4805      	ldr	r0, [pc, #20]	; (8008cf4 <CDC_Init_FS+0x20>)
 8008cde:	f7fe fe18 	bl	8007912 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ce2:	4905      	ldr	r1, [pc, #20]	; (8008cf8 <CDC_Init_FS+0x24>)
 8008ce4:	4803      	ldr	r0, [pc, #12]	; (8008cf4 <CDC_Init_FS+0x20>)
 8008ce6:	f7fe fe32 	bl	800794e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000f08 	.word	0x20000f08
 8008cf4:	20000438 	.word	0x20000438
 8008cf8:	20000708 	.word	0x20000708

08008cfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	2b23      	cmp	r3, #35	; 0x23
 8008d20:	d84a      	bhi.n	8008db8 <CDC_Control_FS+0xac>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <CDC_Control_FS+0x1c>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008db9 	.word	0x08008db9
 8008d2c:	08008db9 	.word	0x08008db9
 8008d30:	08008db9 	.word	0x08008db9
 8008d34:	08008db9 	.word	0x08008db9
 8008d38:	08008db9 	.word	0x08008db9
 8008d3c:	08008db9 	.word	0x08008db9
 8008d40:	08008db9 	.word	0x08008db9
 8008d44:	08008db9 	.word	0x08008db9
 8008d48:	08008db9 	.word	0x08008db9
 8008d4c:	08008db9 	.word	0x08008db9
 8008d50:	08008db9 	.word	0x08008db9
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008db9 	.word	0x08008db9
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008db9 	.word	0x08008db9
 8008d64:	08008db9 	.word	0x08008db9
 8008d68:	08008db9 	.word	0x08008db9
 8008d6c:	08008db9 	.word	0x08008db9
 8008d70:	08008db9 	.word	0x08008db9
 8008d74:	08008db9 	.word	0x08008db9
 8008d78:	08008db9 	.word	0x08008db9
 8008d7c:	08008db9 	.word	0x08008db9
 8008d80:	08008db9 	.word	0x08008db9
 8008d84:	08008db9 	.word	0x08008db9
 8008d88:	08008db9 	.word	0x08008db9
 8008d8c:	08008db9 	.word	0x08008db9
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008db9 	.word	0x08008db9
 8008d98:	08008db9 	.word	0x08008db9
 8008d9c:	08008db9 	.word	0x08008db9
 8008da0:	08008db9 	.word	0x08008db9
 8008da4:	08008db9 	.word	0x08008db9
 8008da8:	08008db9 	.word	0x08008db9
 8008dac:	08008db9 	.word	0x08008db9
 8008db0:	08008db9 	.word	0x08008db9
 8008db4:	08008db9 	.word	0x08008db9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008db8:	bf00      	nop
  }

  return (USBD_OK);
 8008dba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	4805      	ldr	r0, [pc, #20]	; (8008dec <CDC_Receive_FS+0x24>)
 8008dd6:	f7fe fdba 	bl	800794e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008dda:	4804      	ldr	r0, [pc, #16]	; (8008dec <CDC_Receive_FS+0x24>)
 8008ddc:	f7fe fe00 	bl	80079e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008de0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20000438 	.word	0x20000438

08008df0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e00:	4b0d      	ldr	r3, [pc, #52]	; (8008e38 <CDC_Transmit_FS+0x48>)
 8008e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e00b      	b.n	8008e2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e16:	887b      	ldrh	r3, [r7, #2]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	4806      	ldr	r0, [pc, #24]	; (8008e38 <CDC_Transmit_FS+0x48>)
 8008e1e:	f7fe fd78 	bl	8007912 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e22:	4805      	ldr	r0, [pc, #20]	; (8008e38 <CDC_Transmit_FS+0x48>)
 8008e24:	f7fe fdac 	bl	8007980 <USBD_CDC_TransmitPacket>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000438 	.word	0x20000438

08008e3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	4613      	mov	r3, r2
 8008e48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
	...

08008e60 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2212      	movs	r2, #18
 8008e70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008e72:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	20000154 	.word	0x20000154

08008e84 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	6039      	str	r1, [r7, #0]
 8008e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2204      	movs	r2, #4
 8008e94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e96:	4b03      	ldr	r3, [pc, #12]	; (8008ea4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	20000168 	.word	0x20000168

08008ea8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d105      	bne.n	8008ec6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4907      	ldr	r1, [pc, #28]	; (8008edc <USBD_CDC_ProductStrDescriptor+0x34>)
 8008ebe:	4808      	ldr	r0, [pc, #32]	; (8008ee0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008ec0:	f7ff fdf7 	bl	8008ab2 <USBD_GetString>
 8008ec4:	e004      	b.n	8008ed0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	4904      	ldr	r1, [pc, #16]	; (8008edc <USBD_CDC_ProductStrDescriptor+0x34>)
 8008eca:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008ecc:	f7ff fdf1 	bl	8008ab2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ed0:	4b02      	ldr	r3, [pc, #8]	; (8008edc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20001708 	.word	0x20001708
 8008ee0:	080097d4 	.word	0x080097d4

08008ee4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	6039      	str	r1, [r7, #0]
 8008eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	4904      	ldr	r1, [pc, #16]	; (8008f04 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008ef4:	4804      	ldr	r0, [pc, #16]	; (8008f08 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008ef6:	f7ff fddc 	bl	8008ab2 <USBD_GetString>
  return USBD_StrDesc;
 8008efa:	4b02      	ldr	r3, [pc, #8]	; (8008f04 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20001708 	.word	0x20001708
 8008f08:	080097ec 	.word	0x080097ec

08008f0c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	221a      	movs	r2, #26
 8008f1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f1e:	f000 f843 	bl	8008fa8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008f22:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	2000016c 	.word	0x2000016c

08008f30 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	6039      	str	r1, [r7, #0]
 8008f3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d105      	bne.n	8008f4e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4907      	ldr	r1, [pc, #28]	; (8008f64 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008f46:	4808      	ldr	r0, [pc, #32]	; (8008f68 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008f48:	f7ff fdb3 	bl	8008ab2 <USBD_GetString>
 8008f4c:	e004      	b.n	8008f58 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4904      	ldr	r1, [pc, #16]	; (8008f64 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008f52:	4805      	ldr	r0, [pc, #20]	; (8008f68 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008f54:	f7ff fdad 	bl	8008ab2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f58:	4b02      	ldr	r3, [pc, #8]	; (8008f64 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20001708 	.word	0x20001708
 8008f68:	08009800 	.word	0x08009800

08008f6c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d105      	bne.n	8008f8a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	4907      	ldr	r1, [pc, #28]	; (8008fa0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008f82:	4808      	ldr	r0, [pc, #32]	; (8008fa4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008f84:	f7ff fd95 	bl	8008ab2 <USBD_GetString>
 8008f88:	e004      	b.n	8008f94 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	4904      	ldr	r1, [pc, #16]	; (8008fa0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008f8e:	4805      	ldr	r0, [pc, #20]	; (8008fa4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008f90:	f7ff fd8f 	bl	8008ab2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20001708 	.word	0x20001708
 8008fa4:	0800980c 	.word	0x0800980c

08008fa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fae:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <Get_SerialNum+0x44>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ff0 <Get_SerialNum+0x48>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fba:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <Get_SerialNum+0x4c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fce:	2208      	movs	r2, #8
 8008fd0:	4909      	ldr	r1, [pc, #36]	; (8008ff8 <Get_SerialNum+0x50>)
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 f814 	bl	8009000 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fd8:	2204      	movs	r2, #4
 8008fda:	4908      	ldr	r1, [pc, #32]	; (8008ffc <Get_SerialNum+0x54>)
 8008fdc:	68b8      	ldr	r0, [r7, #8]
 8008fde:	f000 f80f 	bl	8009000 <IntToUnicode>
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	1fff7590 	.word	0x1fff7590
 8008ff0:	1fff7594 	.word	0x1fff7594
 8008ff4:	1fff7598 	.word	0x1fff7598
 8008ff8:	2000016e 	.word	0x2000016e
 8008ffc:	2000017e 	.word	0x2000017e

08009000 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009012:	2300      	movs	r3, #0
 8009014:	75fb      	strb	r3, [r7, #23]
 8009016:	e027      	b.n	8009068 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	0f1b      	lsrs	r3, r3, #28
 800901c:	2b09      	cmp	r3, #9
 800901e:	d80b      	bhi.n	8009038 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	0f1b      	lsrs	r3, r3, #28
 8009024:	b2da      	uxtb	r2, r3
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	4619      	mov	r1, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	440b      	add	r3, r1
 8009030:	3230      	adds	r2, #48	; 0x30
 8009032:	b2d2      	uxtb	r2, r2
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	e00a      	b.n	800904e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	0f1b      	lsrs	r3, r3, #28
 800903c:	b2da      	uxtb	r2, r3
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	4619      	mov	r1, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	440b      	add	r3, r1
 8009048:	3237      	adds	r2, #55	; 0x37
 800904a:	b2d2      	uxtb	r2, r2
 800904c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009054:	7dfb      	ldrb	r3, [r7, #23]
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	3301      	adds	r3, #1
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4413      	add	r3, r2
 800905e:	2200      	movs	r2, #0
 8009060:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	3301      	adds	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
 8009068:	7dfa      	ldrb	r2, [r7, #23]
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	429a      	cmp	r2, r3
 800906e:	d3d3      	bcc.n	8009018 <IntToUnicode+0x18>
  }
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	371c      	adds	r7, #28
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <LL_AHB2_GRP1_EnableClock>:
{
 800907e:	b480      	push	{r7}
 8009080:	b085      	sub	sp, #20
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800908a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800908c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4313      	orrs	r3, r2
 8009094:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800909a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4013      	ands	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090a2:	68fb      	ldr	r3, [r7, #12]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <LL_APB1_GRP1_EnableClock>:
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80090b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80090c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4013      	ands	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090d4:	68fb      	ldr	r3, [r7, #12]
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
	...

080090e4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b09c      	sub	sp, #112	; 0x70
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	605a      	str	r2, [r3, #4]
 80090f6:	609a      	str	r2, [r3, #8]
 80090f8:	60da      	str	r2, [r3, #12]
 80090fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	2250      	movs	r2, #80	; 0x50
 8009102:	2100      	movs	r1, #0
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fb3b 	bl	8009780 <memset>
  if(pcdHandle->Instance==USB)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a23      	ldr	r2, [pc, #140]	; (800919c <HAL_PCD_MspInit+0xb8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d13e      	bne.n	8009192 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009118:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800911a:	2318      	movs	r3, #24
 800911c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800911e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009122:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009128:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800912a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800912e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8009130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009134:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009136:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800913a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800913c:	f107 030c 	add.w	r3, r7, #12
 8009140:	4618      	mov	r0, r3
 8009142:	f7fa ff45 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800914c:	f7f7 fa0f 	bl	800056e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009150:	2001      	movs	r0, #1
 8009152:	f7ff ff94 	bl	800907e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009156:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800915a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800915c:	2302      	movs	r3, #2
 800915e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009160:	2300      	movs	r3, #0
 8009162:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009164:	2300      	movs	r3, #0
 8009166:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009168:	230a      	movs	r3, #10
 800916a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800916c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009170:	4619      	mov	r1, r3
 8009172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009176:	f7f7 fd3b 	bl	8000bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800917a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800917e:	f7ff ff97 	bl	80090b0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009182:	2200      	movs	r2, #0
 8009184:	2100      	movs	r1, #0
 8009186:	2014      	movs	r0, #20
 8009188:	f7f7 fcfd 	bl	8000b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800918c:	2014      	movs	r0, #20
 800918e:	f7f7 fd14 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009192:	bf00      	nop
 8009194:	3770      	adds	r7, #112	; 0x70
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	40006800 	.word	0x40006800

080091a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f7fe fcde 	bl	8007b78 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80091bc:	bf00      	nop
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80091d6:	78fa      	ldrb	r2, [r7, #3]
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	440b      	add	r3, r1
 80091e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	4619      	mov	r1, r3
 80091ee:	f7fe fd18 	bl	8007c22 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	440b      	add	r3, r1
 800921a:	333c      	adds	r3, #60	; 0x3c
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	4619      	mov	r1, r3
 8009222:	f7fe fd61 	bl	8007ce8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fe75 	bl	8007f2c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009242:	bf00      	nop
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009252:	2301      	movs	r3, #1
 8009254:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d001      	beq.n	8009262 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800925e:	f7f7 f986 	bl	800056e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009268:	7bfa      	ldrb	r2, [r7, #15]
 800926a:	4611      	mov	r1, r2
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe fe1f 	bl	8007eb0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fdcb 	bl	8007e14 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800927e:	bf00      	nop
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fe1a 	bl	8007ed0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d005      	beq.n	80092b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092a4:	4b04      	ldr	r3, [pc, #16]	; (80092b8 <HAL_PCD_SuspendCallback+0x30>)
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	4a03      	ldr	r2, [pc, #12]	; (80092b8 <HAL_PCD_SuspendCallback+0x30>)
 80092aa:	f043 0306 	orr.w	r3, r3, #6
 80092ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	e000ed00 	.word	0xe000ed00

080092bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092cc:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <HAL_PCD_ResumeCallback+0x34>)
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	4a07      	ldr	r2, [pc, #28]	; (80092f0 <HAL_PCD_ResumeCallback+0x34>)
 80092d2:	f023 0306 	bic.w	r3, r3, #6
 80092d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80092d8:	f000 f9fc 	bl	80096d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fe0a 	bl	8007efc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	e000ed00 	.word	0xe000ed00

080092f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80092fc:	4a2c      	ldr	r2, [pc, #176]	; (80093b0 <USBD_LL_Init+0xbc>)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a2a      	ldr	r2, [pc, #168]	; (80093b0 <USBD_LL_Init+0xbc>)
 8009308:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800930c:	f7f9 fb42 	bl	8002994 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009310:	4b27      	ldr	r3, [pc, #156]	; (80093b0 <USBD_LL_Init+0xbc>)
 8009312:	4a28      	ldr	r2, [pc, #160]	; (80093b4 <USBD_LL_Init+0xc0>)
 8009314:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009316:	4b26      	ldr	r3, [pc, #152]	; (80093b0 <USBD_LL_Init+0xbc>)
 8009318:	2208      	movs	r2, #8
 800931a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800931c:	4b24      	ldr	r3, [pc, #144]	; (80093b0 <USBD_LL_Init+0xbc>)
 800931e:	2202      	movs	r2, #2
 8009320:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009322:	4b23      	ldr	r3, [pc, #140]	; (80093b0 <USBD_LL_Init+0xbc>)
 8009324:	2202      	movs	r2, #2
 8009326:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009328:	4b21      	ldr	r3, [pc, #132]	; (80093b0 <USBD_LL_Init+0xbc>)
 800932a:	2200      	movs	r2, #0
 800932c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800932e:	4b20      	ldr	r3, [pc, #128]	; (80093b0 <USBD_LL_Init+0xbc>)
 8009330:	2200      	movs	r2, #0
 8009332:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009334:	4b1e      	ldr	r3, [pc, #120]	; (80093b0 <USBD_LL_Init+0xbc>)
 8009336:	2200      	movs	r2, #0
 8009338:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800933a:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <USBD_LL_Init+0xbc>)
 800933c:	2200      	movs	r2, #0
 800933e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009340:	481b      	ldr	r0, [pc, #108]	; (80093b0 <USBD_LL_Init+0xbc>)
 8009342:	f7f7 fdd5 	bl	8000ef0 <HAL_PCD_Init>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800934c:	f7f7 f90f 	bl	800056e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009356:	2318      	movs	r3, #24
 8009358:	2200      	movs	r2, #0
 800935a:	2100      	movs	r1, #0
 800935c:	f7f9 fa8e 	bl	800287c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009366:	2358      	movs	r3, #88	; 0x58
 8009368:	2200      	movs	r2, #0
 800936a:	2180      	movs	r1, #128	; 0x80
 800936c:	f7f9 fa86 	bl	800287c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009376:	23c0      	movs	r3, #192	; 0xc0
 8009378:	2200      	movs	r2, #0
 800937a:	2181      	movs	r1, #129	; 0x81
 800937c:	f7f9 fa7e 	bl	800287c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009386:	f44f 7388 	mov.w	r3, #272	; 0x110
 800938a:	2200      	movs	r2, #0
 800938c:	2101      	movs	r1, #1
 800938e:	f7f9 fa75 	bl	800287c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800939c:	2200      	movs	r2, #0
 800939e:	2182      	movs	r1, #130	; 0x82
 80093a0:	f7f9 fa6c 	bl	800287c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20001908 	.word	0x20001908
 80093b4:	40006800 	.word	0x40006800

080093b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7f7 fe73 	bl	80010ba <HAL_PCD_Start>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 f980 	bl	80096e0 <USBD_Get_USB_Status>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	4608      	mov	r0, r1
 80093f8:	4611      	mov	r1, r2
 80093fa:	461a      	mov	r2, r3
 80093fc:	4603      	mov	r3, r0
 80093fe:	70fb      	strb	r3, [r7, #3]
 8009400:	460b      	mov	r3, r1
 8009402:	70bb      	strb	r3, [r7, #2]
 8009404:	4613      	mov	r3, r2
 8009406:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009416:	78bb      	ldrb	r3, [r7, #2]
 8009418:	883a      	ldrh	r2, [r7, #0]
 800941a:	78f9      	ldrb	r1, [r7, #3]
 800941c:	f7f7 ffbb 	bl	8001396 <HAL_PCD_EP_Open>
 8009420:	4603      	mov	r3, r0
 8009422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f95a 	bl	80096e0 <USBD_Get_USB_Status>
 800942c:	4603      	mov	r3, r0
 800942e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009430:	7bbb      	ldrb	r3, [r7, #14]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f7f8 f802 	bl	8001462 <HAL_PCD_EP_Close>
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f93b 	bl	80096e0 <USBD_Get_USB_Status>
 800946a:	4603      	mov	r3, r0
 800946c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800946e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f7f8 f8c3 	bl	8001622 <HAL_PCD_EP_SetStall>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f91c 	bl	80096e0 <USBD_Get_USB_Status>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094d0:	78fa      	ldrb	r2, [r7, #3]
 80094d2:	4611      	mov	r1, r2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7f8 f8f6 	bl	80016c6 <HAL_PCD_EP_ClrStall>
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 f8fd 	bl	80096e0 <USBD_Get_USB_Status>
 80094e6:	4603      	mov	r3, r0
 80094e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009506:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800950c:	2b00      	cmp	r3, #0
 800950e:	da0c      	bge.n	800952a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009516:	68f9      	ldr	r1, [r7, #12]
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	440b      	add	r3, r1
 8009524:	3302      	adds	r3, #2
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	e00b      	b.n	8009542 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009530:	68f9      	ldr	r1, [r7, #12]
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	440b      	add	r3, r1
 800953c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009540:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	4611      	mov	r1, r2
 800956c:	4618      	mov	r0, r3
 800956e:	f7f7 feed 	bl	800134c <HAL_PCD_SetAddress>
 8009572:	4603      	mov	r3, r0
 8009574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f8b1 	bl	80096e0 <USBD_Get_USB_Status>
 800957e:	4603      	mov	r3, r0
 8009580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009582:	7bbb      	ldrb	r3, [r7, #14]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	607a      	str	r2, [r7, #4]
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	460b      	mov	r3, r1
 800959a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095aa:	7af9      	ldrb	r1, [r7, #11]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	f7f7 fff4 	bl	800159c <HAL_PCD_EP_Transmit>
 80095b4:	4603      	mov	r3, r0
 80095b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f890 	bl	80096e0 <USBD_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b086      	sub	sp, #24
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
 80095da:	460b      	mov	r3, r1
 80095dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095ec:	7af9      	ldrb	r1, [r7, #11]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	f7f7 ff7e 	bl	80014f2 <HAL_PCD_EP_Receive>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f86f 	bl	80096e0 <USBD_Get_USB_Status>
 8009602:	4603      	mov	r3, r0
 8009604:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009606:	7dbb      	ldrb	r3, [r7, #22]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009622:	78fa      	ldrb	r2, [r7, #3]
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f7f7 ffa0 	bl	800156c <HAL_PCD_EP_GetRxCount>
 800962c:	4603      	mov	r3, r0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <HAL_PCDEx_LPM_Callback+0x18>
 800964a:	2b01      	cmp	r3, #1
 800964c:	d013      	beq.n	8009676 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800964e:	e023      	b.n	8009698 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d007      	beq.n	8009668 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009658:	f000 f83c 	bl	80096d4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800965c:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	4a0f      	ldr	r2, [pc, #60]	; (80096a0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009662:	f023 0306 	bic.w	r3, r3, #6
 8009666:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fc44 	bl	8007efc <USBD_LL_Resume>
    break;
 8009674:	e010      	b.n	8009698 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fc27 	bl	8007ed0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800968a:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	4a04      	ldr	r2, [pc, #16]	; (80096a0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009690:	f043 0306 	orr.w	r3, r3, #6
 8009694:	6113      	str	r3, [r2, #16]
    break;
 8009696:	bf00      	nop
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	e000ed00 	.word	0xe000ed00

080096a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096ac:	4b03      	ldr	r3, [pc, #12]	; (80096bc <USBD_static_malloc+0x18>)
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	200001a8 	.word	0x200001a8

080096c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]

}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80096d8:	f7f6 fec0 	bl	800045c <SystemClock_Config>
}
 80096dc:	bf00      	nop
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d817      	bhi.n	8009724 <USBD_Get_USB_Status+0x44>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <USBD_Get_USB_Status+0x1c>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	08009713 	.word	0x08009713
 8009704:	08009719 	.word	0x08009719
 8009708:	0800971f 	.word	0x0800971f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]
    break;
 8009710:	e00b      	b.n	800972a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009712:	2303      	movs	r3, #3
 8009714:	73fb      	strb	r3, [r7, #15]
    break;
 8009716:	e008      	b.n	800972a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009718:	2301      	movs	r3, #1
 800971a:	73fb      	strb	r3, [r7, #15]
    break;
 800971c:	e005      	b.n	800972a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800971e:	2303      	movs	r3, #3
 8009720:	73fb      	strb	r3, [r7, #15]
    break;
 8009722:	e002      	b.n	800972a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009724:	2303      	movs	r3, #3
 8009726:	73fb      	strb	r3, [r7, #15]
    break;
 8009728:	bf00      	nop
  }
  return usb_status;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <__libc_init_array>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	4d0d      	ldr	r5, [pc, #52]	; (8009770 <__libc_init_array+0x38>)
 800973c:	4c0d      	ldr	r4, [pc, #52]	; (8009774 <__libc_init_array+0x3c>)
 800973e:	1b64      	subs	r4, r4, r5
 8009740:	10a4      	asrs	r4, r4, #2
 8009742:	2600      	movs	r6, #0
 8009744:	42a6      	cmp	r6, r4
 8009746:	d109      	bne.n	800975c <__libc_init_array+0x24>
 8009748:	4d0b      	ldr	r5, [pc, #44]	; (8009778 <__libc_init_array+0x40>)
 800974a:	4c0c      	ldr	r4, [pc, #48]	; (800977c <__libc_init_array+0x44>)
 800974c:	f000 f820 	bl	8009790 <_init>
 8009750:	1b64      	subs	r4, r4, r5
 8009752:	10a4      	asrs	r4, r4, #2
 8009754:	2600      	movs	r6, #0
 8009756:	42a6      	cmp	r6, r4
 8009758:	d105      	bne.n	8009766 <__libc_init_array+0x2e>
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009760:	4798      	blx	r3
 8009762:	3601      	adds	r6, #1
 8009764:	e7ee      	b.n	8009744 <__libc_init_array+0xc>
 8009766:	f855 3b04 	ldr.w	r3, [r5], #4
 800976a:	4798      	blx	r3
 800976c:	3601      	adds	r6, #1
 800976e:	e7f2      	b.n	8009756 <__libc_init_array+0x1e>
 8009770:	0800989c 	.word	0x0800989c
 8009774:	0800989c 	.word	0x0800989c
 8009778:	0800989c 	.word	0x0800989c
 800977c:	080098a0 	.word	0x080098a0

08009780 <memset>:
 8009780:	4402      	add	r2, r0
 8009782:	4603      	mov	r3, r0
 8009784:	4293      	cmp	r3, r2
 8009786:	d100      	bne.n	800978a <memset+0xa>
 8009788:	4770      	bx	lr
 800978a:	f803 1b01 	strb.w	r1, [r3], #1
 800978e:	e7f9      	b.n	8009784 <memset+0x4>

08009790 <_init>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr

0800979c <_fini>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	bf00      	nop
 80097a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a2:	bc08      	pop	{r3}
 80097a4:	469e      	mov	lr, r3
 80097a6:	4770      	bx	lr

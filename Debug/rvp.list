
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a124  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a4  20000004  0800a35c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b10  200001a8  0800a500  000201a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001cb8  0800a500  00021cb8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023bb5  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004823  00000000  00000000  00043d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d50  00000000  00000000  000485b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b80  00000000  00000000  0004a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002493c  00000000  00000000  0004be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001dea6  00000000  00000000  000707bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8dee  00000000  00000000  0008e662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00167450  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007968  00000000  00000000  001674a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a8 	.word	0x200001a8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a248 	.word	0x0800a248

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001ac 	.word	0x200001ac
 8000178:	0800a248 	.word	0x0800a248

0800017c <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000188:	f001 f9c0 	bl	800150c <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d002      	beq.n	8000198 <update_buttons+0x1c>
		left_down = 0;
 8000192:	4b30      	ldr	r3, [pc, #192]	; (8000254 <update_buttons+0xd8>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000198:	2108      	movs	r1, #8
 800019a:	482f      	ldr	r0, [pc, #188]	; (8000258 <update_buttons+0xdc>)
 800019c:	f001 f9b6 	bl	800150c <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <update_buttons+0x30>
		left_down = 1;
 80001a6:	4b2b      	ldr	r3, [pc, #172]	; (8000254 <update_buttons+0xd8>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 80001ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001b4:	f001 f9aa 	bl	800150c <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d002      	beq.n	80001c4 <update_buttons+0x48>
		middle_down = 0;
 80001be:	4b27      	ldr	r3, [pc, #156]	; (800025c <update_buttons+0xe0>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 80001c4:	2110      	movs	r1, #16
 80001c6:	4826      	ldr	r0, [pc, #152]	; (8000260 <update_buttons+0xe4>)
 80001c8:	f001 f9a0 	bl	800150c <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d002      	beq.n	80001d8 <update_buttons+0x5c>
		middle_down = 1;
 80001d2:	4b22      	ldr	r3, [pc, #136]	; (800025c <update_buttons+0xe0>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 80001d8:	2102      	movs	r1, #2
 80001da:	481f      	ldr	r0, [pc, #124]	; (8000258 <update_buttons+0xdc>)
 80001dc:	f001 f996 	bl	800150c <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d002      	beq.n	80001ec <update_buttons+0x70>
		right_down = 0;
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <update_buttons+0xe8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 80001ec:	2101      	movs	r1, #1
 80001ee:	481a      	ldr	r0, [pc, #104]	; (8000258 <update_buttons+0xdc>)
 80001f0:	f001 f98c 	bl	800150c <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <update_buttons+0x84>
		right_down = 1;
 80001fa:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <update_buttons+0xe8>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000200:	2120      	movs	r1, #32
 8000202:	4815      	ldr	r0, [pc, #84]	; (8000258 <update_buttons+0xdc>)
 8000204:	f001 f982 	bl	800150c <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d002      	beq.n	8000214 <update_buttons+0x98>
		b4_down = 0;
 800020e:	4b16      	ldr	r3, [pc, #88]	; (8000268 <update_buttons+0xec>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000214:	2110      	movs	r1, #16
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <update_buttons+0xdc>)
 8000218:	f001 f978 	bl	800150c <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <update_buttons+0xac>
		b4_down = 1;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <update_buttons+0xec>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000228:	2180      	movs	r1, #128	; 0x80
 800022a:	480b      	ldr	r0, [pc, #44]	; (8000258 <update_buttons+0xdc>)
 800022c:	f001 f96e 	bl	800150c <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <update_buttons+0xc0>
		b5_down = 0;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <update_buttons+0xf0>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4806      	ldr	r0, [pc, #24]	; (8000258 <update_buttons+0xdc>)
 8000240:	f001 f964 	bl	800150c <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <update_buttons+0xd4>
		b5_down = 1;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <update_buttons+0xf0>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
	}
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200001c4 	.word	0x200001c4
 8000258:	48000400 	.word	0x48000400
 800025c:	200001c5 	.word	0x200001c5
 8000260:	48001000 	.word	0x48001000
 8000264:	200001c6 	.word	0x200001c6
 8000268:	200001c7 	.word	0x200001c7
 800026c:	200001c8 	.word	0x200001c8

08000270 <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000280:	b2db      	uxtb	r3, r3
 8000282:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000284:	2300      	movs	r3, #0
 8000286:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000290:	f001 f954 	bl	800153c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000294:	f107 010c 	add.w	r1, r7, #12
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	2201      	movs	r2, #1
 800029e:	480b      	ldr	r0, [pc, #44]	; (80002cc <read_register+0x5c>)
 80002a0:	f004 fd04 	bl	8004cac <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 80002a4:	f107 0108 	add.w	r1, r7, #8
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ac:	2201      	movs	r2, #1
 80002ae:	4807      	ldr	r0, [pc, #28]	; (80002cc <read_register+0x5c>)
 80002b0:	f004 fe6a 	bl	8004f88 <HAL_SPI_Receive>
	CS_END();
 80002b4:	2201      	movs	r2, #1
 80002b6:	2110      	movs	r1, #16
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f001 f93e 	bl	800153c <HAL_GPIO_WritePin>
	return pRxData[0];
 80002c0:	7a3b      	ldrb	r3, [r7, #8]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000440 	.word	0x20000440

080002d0 <write_register>:

void write_register(uint8_t r, uint8_t value) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	733b      	strb	r3, [r7, #12]
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	737b      	strb	r3, [r7, #13]
	CS_START();
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f001 f924 	bl	800153c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 80002f4:	f107 010c 	add.w	r1, r7, #12
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	2202      	movs	r2, #2
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <write_register+0x48>)
 8000300:	f004 fcd4 	bl	8004cac <HAL_SPI_Transmit>
	CS_END();
 8000304:	2201      	movs	r2, #1
 8000306:	2110      	movs	r1, #16
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f001 f916 	bl	800153c <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000440 	.word	0x20000440

0800031c <imu_setup>:

#pragma GCC push_options
#pragma GCC optimize ("O0")
void imu_setup() {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	206b      	movs	r0, #107	; 0x6b
 8000326:	f7ff ffd3 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800032a:	2064      	movs	r0, #100	; 0x64
 800032c:	f000 fe52 	bl	8000fd4 <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000330:	206b      	movs	r0, #107	; 0x6b
 8000332:	f7ff ff9d 	bl	8000270 <read_register>
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
		if (reg & (1UL << 6)) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0ee      	beq.n	8000322 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000344:	2101      	movs	r1, #1
 8000346:	206b      	movs	r0, #107	; 0x6b
 8000348:	f7ff ffc2 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800034c:	2064      	movs	r0, #100	; 0x64
 800034e:	f000 fe41 	bl	8000fd4 <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000352:	206b      	movs	r0, #107	; 0x6b
 8000354:	f7ff ff8c 	bl	8000270 <read_register>
 8000358:	4603      	mov	r3, r0
 800035a:	71bb      	strb	r3, [r7, #6]
		if (reg & (1 << 0)) {
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0ee      	beq.n	8000344 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000366:	2110      	movs	r1, #16
 8000368:	206a      	movs	r0, #106	; 0x6a
 800036a:	f7ff ffb1 	bl	80002d0 <write_register>
		HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f000 fe30 	bl	8000fd4 <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000374:	206a      	movs	r0, #106	; 0x6a
 8000376:	f7ff ff7b 	bl	8000270 <read_register>
 800037a:	4603      	mov	r3, r0
 800037c:	717b      	strb	r3, [r7, #5]
		if (reg & (1 << 4)) {
 800037e:	797b      	ldrb	r3, [r7, #5]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0ee      	beq.n	8000366 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000388:	2118      	movs	r1, #24
 800038a:	201c      	movs	r0, #28
 800038c:	f7ff ffa0 	bl	80002d0 <write_register>
		HAL_Delay(100);
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f000 fe1f 	bl	8000fd4 <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000396:	201c      	movs	r0, #28
 8000398:	f7ff ff6a 	bl	8000270 <read_register>
 800039c:	4603      	mov	r3, r0
 800039e:	713b      	strb	r3, [r7, #4]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 80003a0:	793b      	ldrb	r3, [r7, #4]
 80003a2:	f003 0310 	and.w	r3, r3, #16
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0ee      	beq.n	8000388 <imu_setup+0x6c>
 80003aa:	793b      	ldrb	r3, [r7, #4]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0e9      	beq.n	8000388 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	201d      	movs	r0, #29
 80003b8:	f7ff ff8a 	bl	80002d0 <write_register>
		HAL_Delay(100);
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 fe09 	bl	8000fd4 <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 80003c2:	201d      	movs	r0, #29
 80003c4:	f7ff ff54 	bl	8000270 <read_register>
 80003c8:	4603      	mov	r3, r0
 80003ca:	70fb      	strb	r3, [r7, #3]
		if (reg == 0) {
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d000      	beq.n	80003d4 <imu_setup+0xb8>
	while (1) {
 80003d2:	e7ef      	b.n	80003b4 <imu_setup+0x98>
			break;
 80003d4:	bf00      	nop
		}
	}
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <read_x>:
#pragma GCC pop_options

int16_t read_x() {
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_XOUT_H);
 80003e4:	203b      	movs	r0, #59	; 0x3b
 80003e6:	f7ff ff43 	bl	8000270 <read_register>
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_XOUT_L);
 80003ee:	203c      	movs	r0, #60	; 0x3c
 80003f0:	f7ff ff3e 	bl	8000270 <read_register>
 80003f4:	4603      	mov	r3, r0
 80003f6:	71bb      	strb	r3, [r7, #6]
	int16_t x = (h << 8) | l;
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	021b      	lsls	r3, r3, #8
 80003fc:	b21a      	sxth	r2, r3
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	b21b      	sxth	r3, r3
 8000402:	4313      	orrs	r3, r2
 8000404:	80bb      	strh	r3, [r7, #4]
	return x;
 8000406:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <read_y>:

int16_t read_y() {
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_YOUT_H);
 8000418:	203d      	movs	r0, #61	; 0x3d
 800041a:	f7ff ff29 	bl	8000270 <read_register>
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_YOUT_L);
 8000422:	203e      	movs	r0, #62	; 0x3e
 8000424:	f7ff ff24 	bl	8000270 <read_register>
 8000428:	4603      	mov	r3, r0
 800042a:	71bb      	strb	r3, [r7, #6]
	int16_t y = (h << 8) | l;
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	021b      	lsls	r3, r3, #8
 8000430:	b21a      	sxth	r2, r3
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	b21b      	sxth	r3, r3
 8000436:	4313      	orrs	r3, r2
 8000438:	80bb      	strh	r3, [r7, #4]
	return y;
 800043a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <read_z>:

int16_t read_z() {
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_ZOUT_H);
 800044c:	203f      	movs	r0, #63	; 0x3f
 800044e:	f7ff ff0f 	bl	8000270 <read_register>
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_ZOUT_L);
 8000456:	2040      	movs	r0, #64	; 0x40
 8000458:	f7ff ff0a 	bl	8000270 <read_register>
 800045c:	4603      	mov	r3, r0
 800045e:	71bb      	strb	r3, [r7, #6]
	int16_t z = (h << 8) | l;
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	021b      	lsls	r3, r3, #8
 8000464:	b21a      	sxth	r2, r3
 8000466:	79bb      	ldrb	r3, [r7, #6]
 8000468:	b21b      	sxth	r3, r3
 800046a:	4313      	orrs	r3, r2
 800046c:	80bb      	strh	r3, [r7, #4]
	return z;
 800046e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <filter_p>:
//float den[] = { -1, 3.1673, -3.8396, 2.1405, -0.4706 };
#define FILTER_N 3
float num[] = { 0.6156, -1.8468, 1.8468, -0.6156 };
float den[] = { -1, 2.0478, -1.5057, 0.3713 };

void filter_p(int16_t r[], int16_t f[], int16_t new) {
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	4613      	mov	r3, r2
 8000488:	80fb      	strh	r3, [r7, #6]
	if (new < -10000 || new > 10000) {
 800048a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800048e:	4a3e      	ldr	r2, [pc, #248]	; (8000588 <filter_p+0x10c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	db72      	blt.n	800057a <filter_p+0xfe>
 8000494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000498:	f242 7210 	movw	r2, #10000	; 0x2710
 800049c:	4293      	cmp	r3, r2
 800049e:	dc6c      	bgt.n	800057a <filter_p+0xfe>
		return;
	}
	r[0] = new;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	88fa      	ldrh	r2, [r7, #6]
 80004a4:	801a      	strh	r2, [r3, #0]
	f[0] = 0;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	2200      	movs	r2, #0
 80004aa:	801a      	strh	r2, [r3, #0]
	float sum = 0;
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
 80004b6:	e032      	b.n	800051e <filter_p+0xa2>
		sum += den[i] * f[i];
 80004b8:	4a34      	ldr	r2, [pc, #208]	; (800058c <filter_p+0x110>)
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	ed93 7a00 	vldr	s14, [r3]
 80004c4:	69bb      	ldr	r3, [r7, #24]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	4413      	add	r3, r2
 80004cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004d0:	ee07 3a90 	vmov	s15, r3
 80004d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80004e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004e4:	edc7 7a07 	vstr	s15, [r7, #28]
		sum += num[i] * r[i];
 80004e8:	4a29      	ldr	r2, [pc, #164]	; (8000590 <filter_p+0x114>)
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	4413      	add	r3, r2
 80004f0:	ed93 7a00 	vldr	s14, [r3]
 80004f4:	69bb      	ldr	r3, [r7, #24]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000500:	ee07 3a90 	vmov	s15, r3
 8000504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800050c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000514:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	3301      	adds	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2b03      	cmp	r3, #3
 8000522:	ddc9      	ble.n	80004b8 <filter_p+0x3c>
	}
	f[0] = sum;
 8000524:	edd7 7a07 	vldr	s15, [r7, #28]
 8000528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800052c:	ee17 3a90 	vmov	r3, s15
 8000530:	b21a      	sxth	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	801a      	strh	r2, [r3, #0]
//	f[0] = den[1] * f[1] + den[2] * f[2] + num[0] * r[0] + num[1] * r[1] + num[2] * r[2];

	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000536:	2302      	movs	r3, #2
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e01a      	b.n	8000572 <filter_p+0xf6>
		r[i + 1] = r[i];
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	441a      	add	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	3301      	adds	r3, #1
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	68f9      	ldr	r1, [r7, #12]
 800054c:	440b      	add	r3, r1
 800054e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000552:	801a      	strh	r2, [r3, #0]
		f[i + 1] = f[i];
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	68ba      	ldr	r2, [r7, #8]
 800055a:	441a      	add	r2, r3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	68b9      	ldr	r1, [r7, #8]
 8000564:	440b      	add	r3, r1
 8000566:	f9b2 2000 	ldrsh.w	r2, [r2]
 800056a:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	3b01      	subs	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	2b00      	cmp	r3, #0
 8000576:	dae1      	bge.n	800053c <filter_p+0xc0>
 8000578:	e000      	b.n	800057c <filter_p+0x100>
		return;
 800057a:	bf00      	nop
	}
}
 800057c:	3724      	adds	r7, #36	; 0x24
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	ffffd8f0 	.word	0xffffd8f0
 800058c:	20000014 	.word	0x20000014
 8000590:	20000004 	.word	0x20000004

08000594 <get_xyz>:
int16_t y_r[FILTER_N + 1] = { 0 };
int16_t y_f[FILTER_N + 1] = { 0 };
int16_t z_r[FILTER_N + 1] = { 0 };
int16_t z_f[FILTER_N + 1] = { 0 };

void get_xyz(int16_t *x, int16_t *y, int16_t *z) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	filter_p(x_r, x_f, read_x());
 80005a0:	f7ff ff1d 	bl	80003de <read_x>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	4913      	ldr	r1, [pc, #76]	; (80005f8 <get_xyz+0x64>)
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <get_xyz+0x68>)
 80005ac:	f7ff ff66 	bl	800047c <filter_p>
	filter_p(y_r, y_f, read_y());
 80005b0:	f7ff ff2f 	bl	8000412 <read_y>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4911      	ldr	r1, [pc, #68]	; (8000600 <get_xyz+0x6c>)
 80005ba:	4812      	ldr	r0, [pc, #72]	; (8000604 <get_xyz+0x70>)
 80005bc:	f7ff ff5e 	bl	800047c <filter_p>
	filter_p(z_r, z_f, read_z());
 80005c0:	f7ff ff41 	bl	8000446 <read_z>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	490f      	ldr	r1, [pc, #60]	; (8000608 <get_xyz+0x74>)
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <get_xyz+0x78>)
 80005cc:	f7ff ff56 	bl	800047c <filter_p>
	*x = x_f[0];
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <get_xyz+0x64>)
 80005d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	801a      	strh	r2, [r3, #0]
	*y = y_f[0];
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <get_xyz+0x6c>)
 80005dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	801a      	strh	r2, [r3, #0]
	*z = z_f[0];
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <get_xyz+0x74>)
 80005e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	801a      	strh	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200001d4 	.word	0x200001d4
 80005fc:	200001cc 	.word	0x200001cc
 8000600:	200001e4 	.word	0x200001e4
 8000604:	200001dc 	.word	0x200001dc
 8000608:	200001f4 	.word	0x200001f4
 800060c:	200001ec 	.word	0x200001ec

08000610 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800061e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4313      	orrs	r3, r2
 8000626:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000634:	68fb      	ldr	r3, [r7, #12]
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	2002      	movs	r0, #2
 800065a:	f7ff ffd9 	bl	8000610 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff ffd6 	bl	8000610 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000664:	2010      	movs	r0, #16
 8000666:	f7ff ffd3 	bl	8000610 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	4825      	ldr	r0, [pc, #148]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000672:	f000 ff63 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f000 ff5d 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000686:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	481b      	ldr	r0, [pc, #108]	; (8000708 <MX_GPIO_Init+0xc4>)
 800069a:	f000 fdcf 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800069e:	2310      	movs	r3, #16
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f000 fdc1 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 80006ba:	23fb      	movs	r3, #251	; 0xfb
 80006bc:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <MX_GPIO_Init+0xc4>)
 80006cc:	f000 fdb6 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 80006d0:	2310      	movs	r3, #16
 80006d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <MX_GPIO_Init+0xc8>)
 80006e2:	f000 fdab 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 80006e6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f000 fd9e 	bl	800123c <HAL_GPIO_Init>

}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	48000400 	.word	0x48000400
 800070c:	48001000 	.word	0x48001000

08000710 <calculate_encoder_diff>:

#define ENCODER_MAX 65535
#define ENCODER_QUADRANT (ENCODER_MAX / 4)
#define ENCODER_QUADRANT_3 (ENCODER_QUADRANT * 3)

int8_t calculate_encoder_diff(uint32_t prev_pos, uint32_t cur_pos) {
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	int diff = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000724:	4293      	cmp	r3, r2
 8000726:	d90c      	bls.n	8000742 <calculate_encoder_diff+0x32>
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 800072e:	4293      	cmp	r3, r2
 8000730:	d807      	bhi.n	8000742 <calculate_encoder_diff+0x32>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800073c:	33ff      	adds	r3, #255	; 0xff
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e015      	b.n	800076e <calculate_encoder_diff+0x5e>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000748:	4293      	cmp	r3, r2
 800074a:	d80c      	bhi.n	8000766 <calculate_encoder_diff+0x56>
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000752:	4293      	cmp	r3, r2
 8000754:	d907      	bls.n	8000766 <calculate_encoder_diff+0x56>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000760:	3bff      	subs	r3, #255	; 0xff
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e003      	b.n	800076e <calculate_encoder_diff+0x5e>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t)clamp(INT8_MIN, INT8_MAX, diff);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000774:	db07      	blt.n	8000786 <calculate_encoder_diff+0x76>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b7f      	cmp	r3, #127	; 0x7f
 800077a:	dc02      	bgt.n	8000782 <calculate_encoder_diff+0x72>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b25b      	sxtb	r3, r3
 8000780:	e003      	b.n	800078a <calculate_encoder_diff+0x7a>
 8000782:	237f      	movs	r3, #127	; 0x7f
 8000784:	e001      	b.n	800078a <calculate_encoder_diff+0x7a>
 8000786:	f06f 037f 	mvn.w	r3, #127	; 0x7f
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fb93 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f8c5 	bl	8000930 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007a6:	f000 f92f 	bl	8000a08 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff ff4b 	bl	8000644 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80007ae:	f008 ffbd 	bl	800972c <MX_USB_Device_Init>
  MX_SPI1_Init();
 80007b2:	f000 f97d 	bl	8000ab0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80007b6:	f000 fac5 	bl	8000d44 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80007ba:	2104      	movs	r1, #4
 80007bc:	484e      	ldr	r0, [pc, #312]	; (80008f8 <main+0x160>)
 80007be:	f005 f989 	bl	8005ad4 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	imu_setup();
 80007c2:	f7ff fdab 	bl	800031c <imu_setup>

	uint32_t encoder_prev = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
	int i = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
	while (1) {
		update_buttons();
 80007ce:	f7ff fcd5 	bl	800017c <update_buttons>
//		feedback.left = left_down;
//		feedback.middle = middle_down;
//		feedback.right = right_down;
//		feedback.b4 = b4_down;
//		feedback.b5 = b5_down;
		prev.x = accel.x;
 80007d2:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <main+0x164>)
 80007d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007d8:	4b49      	ldr	r3, [pc, #292]	; (8000900 <main+0x168>)
 80007da:	801a      	strh	r2, [r3, #0]
		prev.y = accel.y;
 80007dc:	4b47      	ldr	r3, [pc, #284]	; (80008fc <main+0x164>)
 80007de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <main+0x168>)
 80007e4:	805a      	strh	r2, [r3, #2]
		prev.z = accel.z;
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <main+0x164>)
 80007e8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80007ec:	4b44      	ldr	r3, [pc, #272]	; (8000900 <main+0x168>)
 80007ee:	809a      	strh	r2, [r3, #4]
		get_xyz(&accel.x, &accel.y, &accel.z);
 80007f0:	4a44      	ldr	r2, [pc, #272]	; (8000904 <main+0x16c>)
 80007f2:	4945      	ldr	r1, [pc, #276]	; (8000908 <main+0x170>)
 80007f4:	4841      	ldr	r0, [pc, #260]	; (80008fc <main+0x164>)
 80007f6:	f7ff fecd 	bl	8000594 <get_xyz>
		if (i > 1000) {
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000800:	dd27      	ble.n	8000852 <main+0xba>
			report.x += accel.x/100;
 8000802:	4b42      	ldr	r3, [pc, #264]	; (800090c <main+0x174>)
 8000804:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <main+0x164>)
 800080c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000810:	493f      	ldr	r1, [pc, #252]	; (8000910 <main+0x178>)
 8000812:	fb81 0103 	smull	r0, r1, r1, r3
 8000816:	1149      	asrs	r1, r1, #5
 8000818:	17db      	asrs	r3, r3, #31
 800081a:	1acb      	subs	r3, r1, r3
 800081c:	b21b      	sxth	r3, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4413      	add	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	b25a      	sxtb	r2, r3
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <main+0x174>)
 8000828:	705a      	strb	r2, [r3, #1]
			report.y += accel.y/100;
 800082a:	4b38      	ldr	r3, [pc, #224]	; (800090c <main+0x174>)
 800082c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <main+0x164>)
 8000834:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000838:	4935      	ldr	r1, [pc, #212]	; (8000910 <main+0x178>)
 800083a:	fb81 0103 	smull	r0, r1, r1, r3
 800083e:	1149      	asrs	r1, r1, #5
 8000840:	17db      	asrs	r3, r3, #31
 8000842:	1acb      	subs	r3, r1, r3
 8000844:	b21b      	sxth	r3, r3
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4413      	add	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	b25a      	sxtb	r2, r3
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <main+0x174>)
 8000850:	709a      	strb	r2, [r3, #2]
		}
		if (i < 10000) {
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	f242 720f 	movw	r2, #9999	; 0x270f
 8000858:	4293      	cmp	r3, r2
 800085a:	dc02      	bgt.n	8000862 <main+0xca>
			i++;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
		}
		feedback.x = accel.x;
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <main+0x164>)
 8000864:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000868:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <main+0x17c>)
 800086a:	801a      	strh	r2, [r3, #0]
		feedback.y = accel.y;
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <main+0x164>)
 800086e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <main+0x17c>)
 8000874:	805a      	strh	r2, [r3, #2]
		feedback.z += accel.x;
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <main+0x17c>)
 8000878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <main+0x164>)
 8000880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000884:	b29b      	uxth	r3, r3
 8000886:	4413      	add	r3, r2
 8000888:	b29b      	uxth	r3, r3
 800088a:	b21a      	sxth	r2, r3
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <main+0x17c>)
 800088e:	809a      	strh	r2, [r3, #4]
		uint32_t encoder_cur = TIM1->CNT;
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <main+0x180>)
 8000892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000894:	607b      	str	r3, [r7, #4]
		report.wheel = calculate_encoder_diff(encoder_prev, encoder_cur); // needs a larger change to move at all
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff ff39 	bl	8000710 <calculate_encoder_diff>
 800089e:	4603      	mov	r3, r0
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <main+0x174>)
 80008a4:	70da      	strb	r2, [r3, #3]
		encoder_prev = encoder_cur;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]
//		uint8_t buttons = 0;
//		uint8_t buttons = (2 << left_down) | (1 << middle_down) | (0 << right_down);// | (3 << feedback.b4) | (4 << feedback.b5);

		report.buttons = (left_down << 0) | (right_down << 1) | (middle_down << 2) | (b5_down << 3) | (b4_down << 4);
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <main+0x184>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <main+0x188>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b25a      	sxtb	r2, r3
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <main+0x18c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <main+0x190>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b25a      	sxtb	r2, r3
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <main+0x194>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	011b      	lsls	r3, r3, #4
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <main+0x174>)
 80008e4:	701a      	strb	r2, [r3, #0]
//		int16_t x = 0;
//		int16_t y = 0;
//		int16_t z = 0;

//		get_xyz(&feedback.x, &feedback.y, &feedback.z);
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80008e6:	2106      	movs	r1, #6
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <main+0x17c>)
 80008ea:	f008 ffdd 	bl	80098a8 <CDC_Transmit_FS>
		HAL_Delay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fb70 	bl	8000fd4 <HAL_Delay>
	while (1) {
 80008f4:	e76b      	b.n	80007ce <main+0x36>
 80008f6:	bf00      	nop
 80008f8:	200004a4 	.word	0x200004a4
 80008fc:	20000420 	.word	0x20000420
 8000900:	20000430 	.word	0x20000430
 8000904:	20000424 	.word	0x20000424
 8000908:	20000422 	.word	0x20000422
 800090c:	20000438 	.word	0x20000438
 8000910:	51eb851f 	.word	0x51eb851f
 8000914:	20000428 	.word	0x20000428
 8000918:	40012c00 	.word	0x40012c00
 800091c:	200001c6 	.word	0x200001c6
 8000920:	200001c4 	.word	0x200001c4
 8000924:	200001c5 	.word	0x200001c5
 8000928:	200001c8 	.word	0x200001c8
 800092c:	200001c7 	.word	0x200001c7

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b09a      	sub	sp, #104	; 0x68
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2248      	movs	r2, #72	; 0x48
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f009 fc7a 	bl	800a238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000956:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <SystemClock_Config+0xd4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800095e:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <SystemClock_Config+0xd4>)
 8000960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <SystemClock_Config+0xd4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000972:	2326      	movs	r3, #38	; 0x26
 8000974:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000988:	2300      	movs	r3, #0
 800098a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800098c:	2360      	movs	r3, #96	; 0x60
 800098e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000994:	2301      	movs	r3, #1
 8000996:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800099c:	2320      	movs	r3, #32
 800099e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fe98 	bl	80036ec <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009c2:	f000 f83e 	bl	8000a42 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80009c6:	236f      	movs	r3, #111	; 0x6f
 80009c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2303      	movs	r3, #3
 80009cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2103      	movs	r1, #3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 fa0c 	bl	8003e04 <HAL_RCC_ClockConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009f2:	f000 f826 	bl	8000a42 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009f6:	f003 ff9f 	bl	8004938 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009fa:	bf00      	nop
 80009fc:	3768      	adds	r7, #104	; 0x68
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	58000400 	.word	0x58000400

08000a08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2250      	movs	r2, #80	; 0x50
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f009 fc0f 	bl	800a238 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000a24:	2310      	movs	r3, #16
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 fe0e 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000a36:	f000 f804 	bl	8000a42 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	; 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a46:	b672      	cpsid	i
}
 8000a48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a4a:	e7fe      	b.n	8000a4a <Error_Handler+0x8>

08000a4c <LL_AHB2_GRP1_EnableClock>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a70:	68fb      	ldr	r3, [r7, #12]
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b085      	sub	sp, #20
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_SPI1_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000aca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ace:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000b10:	f004 f829 	bl	8004b66 <HAL_SPI_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f7ff ff92 	bl	8000a42 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000440 	.word	0x20000440
 8000b28:	40013000 	.word	0x40013000

08000b2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <HAL_SPI_MspInit+0x5c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d117      	bne.n	8000b7e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b52:	f7ff ff94 	bl	8000a7e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff ff78 	bl	8000a4c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000b5c:	23c2      	movs	r3, #194	; 0xc2
 8000b5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fb5f 	bl	800123c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40013000 	.word	0x40013000

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	f06f 000b 	mvn.w	r0, #11
 8000b98:	f000 fb1b 	bl	80011d2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	f06f 000a 	mvn.w	r0, #10
 8000ba4:	f000 fb15 	bl	80011d2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2101      	movs	r1, #1
 8000bac:	f06f 0009 	mvn.w	r0, #9
 8000bb0:	f000 fb0f 	bl	80011d2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	f06f 0004 	mvn.w	r0, #4
 8000bbc:	f000 fb09 	bl	80011d2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	f06f 0003 	mvn.w	r0, #3
 8000bc8:	f000 fb03 	bl	80011d2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2101      	movs	r1, #1
 8000bd0:	f06f 0001 	mvn.w	r0, #1
 8000bd4:	f000 fafd 	bl	80011d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f9a8 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <USB_LP_IRQHandler+0x10>)
 8000c36:	f000 fda0 	bl	800177a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200019c4 	.word	0x200019c4

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <SystemInit+0x90>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <SystemInit+0x90>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000c70:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <SystemInit+0x94>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c8e:	f023 0305 	bic.w	r3, r3, #5
 8000c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca2:	f023 0301 	bic.w	r3, r3, #1
 8000ca6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <SystemInit+0x98>)
 8000cb0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00
 8000cd8:	faf6fefb 	.word	0xfaf6fefb
 8000cdc:	22041000 	.word	0x22041000

08000ce0 <LL_AHB2_GRP1_EnableClock>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_APB2_GRP1_EnableClock>:
{
 8000d12:	b480      	push	{r7}
 8000d14:	b085      	sub	sp, #20
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2224      	movs	r2, #36	; 0x24
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f009 fa70 	bl	800a238 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000d64:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <MX_TIM1_Init+0xb0>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000da6:	2301      	movs	r3, #1
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000dba:	f004 fde5 	bl	8005988 <HAL_TIM_Encoder_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000dc4:	f7ff fe3d 	bl	8000a42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM1_Init+0xac>)
 8000dda:	f004 ff93 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000de4:	f7ff fe2d 	bl	8000a42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200004a4 	.word	0x200004a4
 8000df4:	40012c00 	.word	0x40012c00

08000df8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_TIM_Encoder_MspInit+0x5c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d118      	bne.n	8000e4c <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e1e:	f7ff ff78 	bl	8000d12 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff ff5c 	bl	8000ce0 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f000 f9f8 	bl	800123c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40012c00 	.word	0x40012c00

08000e58 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e58:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5c:	3304      	adds	r3, #4

08000e5e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e60:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e62:	d3f9      	bcc.n	8000e58 <CopyDataInit>
  bx lr
 8000e64:	4770      	bx	lr

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000e66:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000e68:	3004      	adds	r0, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000e6a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>
  bx lr
 8000e6e:	4770      	bx	lr

08000e70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000e72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e74:	f7ff fee6 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <LoopForever+0x8>)
 8000e7a:	490c      	ldr	r1, [pc, #48]	; (8000eac <LoopForever+0xc>)
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <LoopForever+0x10>)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f7ff ffed 	bl	8000e5e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <LoopForever+0x14>)
 8000e86:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <LoopForever+0x18>)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f7ff ffee 	bl	8000e6a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <LoopForever+0x1c>)
 8000e90:	490b      	ldr	r1, [pc, #44]	; (8000ec0 <LoopForever+0x20>)
 8000e92:	2300      	movs	r3, #0
 8000e94:	f7ff ffe9 	bl	8000e6a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e98:	f009 f9aa 	bl	800a1f0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000e9c:	f7ff fc7c 	bl	8000798 <main>

08000ea0 <LoopForever>:

LoopForever:
  b LoopForever
 8000ea0:	e7fe      	b.n	8000ea0 <LoopForever>
 8000ea2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000ea4:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	200001a8 	.word	0x200001a8
 8000eb0:	0800a35c 	.word	0x0800a35c
  INIT_BSS _sbss, _ebss
 8000eb4:	200001a8 	.word	0x200001a8
 8000eb8:	20001cb8 	.word	0x20001cb8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ebc:	20030000 	.word	0x20030000
 8000ec0:	20030000 	.word	0x20030000

08000ec4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_Init+0x3c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_Init+0x3c>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f000 f96c 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f000 f80f 	bl	8000f08 <HAL_InitTick>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	e001      	b.n	8000efa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef6:	f7ff fe49 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58004000 	.word	0x58004000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d024      	beq.n	8000f66 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f1c:	f003 f91e 	bl	800415c <HAL_RCC_GetHCLKFreq>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f974 	bl	8001222 <HAL_SYSTICK_Config>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10f      	bne.n	8000f60 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d809      	bhi.n	8000f5a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f46:	2200      	movs	r2, #0
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4e:	f000 f940 	bl	80011d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_InitTick+0x70>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e007      	b.n	8000f6a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e004      	b.n	8000f6a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e001      	b.n	8000f6a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000002c 	.word	0x2000002c
 8000f78:	20000028 	.word	0x20000028

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000002c 	.word	0x2000002c
 8000fa0:	200004f0 	.word	0x200004f0

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200004f0 	.word	0x200004f0

08000fbc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTickPrio+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000028 	.word	0x20000028

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffe2 	bl	8000fa4 <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffd2 	bl	8000fa4 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
    {
    }
  }
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000002c 	.word	0x2000002c

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff29 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff40 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff90 	bl	8001110 <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5f 	bl	80010bc <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff33 	bl	8001080 <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa4 	bl	8001178 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e146      	b.n	80014da <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8138 	beq.w	80014d4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x40>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 0201 	and.w	r2, r3, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d017      	beq.n	800131a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d123      	bne.n	800136e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	6939      	ldr	r1, [r7, #16]
 800136a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0203 	and.w	r2, r3, #3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8092 	beq.w	80014d4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80013b0:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_GPIO_Init+0x2bc>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013da:	d013      	beq.n	8001404 <HAL_GPIO_Init+0x1c8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00d      	beq.n	8001400 <HAL_GPIO_Init+0x1c4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a46      	ldr	r2, [pc, #280]	; (8001500 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x1c0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a45      	ldr	r2, [pc, #276]	; (8001504 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_GPIO_Init+0x1bc>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1ca>
 80013f8:	2307      	movs	r3, #7
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x1ca>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x1ca>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x1ca>
 8001404:	2300      	movs	r3, #0
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001416:	4938      	ldr	r1, [pc, #224]	; (80014f8 <HAL_GPIO_Init+0x2bc>)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001424:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001448:	4a2f      	ldr	r2, [pc, #188]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001472:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 800147a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149e:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 80014a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	fa22 f303 	lsr.w	r3, r2, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f47f aeb1 	bne.w	800124c <HAL_GPIO_Init+0x10>
  }
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40010000 	.word	0x40010000
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800
 8001504:	48001000 	.word	0x48001000
 8001508:	58000800 	.word	0x58000800

0800150c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e001      	b.n	800152e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001558:	e002      	b.n	8001560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	b08b      	sub	sp, #44	; 0x2c
 8001570:	af06      	add	r7, sp, #24
 8001572:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0d7      	b.n	800172e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f008 fb02 	bl	8009b9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 fc24 	bl	8005df2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e04c      	b.n	800164a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	3301      	adds	r3, #1
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	b298      	uxth	r0, r3
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	3336      	adds	r3, #54	; 0x36
 80015ee:	4602      	mov	r2, r0
 80015f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3303      	adds	r3, #3
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3338      	adds	r3, #56	; 0x38
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	333c      	adds	r3, #60	; 0x3c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	3340      	adds	r3, #64	; 0x40
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	3301      	adds	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3ad      	bcc.n	80015b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e044      	b.n	80016e4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	f203 1369 	addw	r3, r3, #361	; 0x169
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	3301      	adds	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d3b5      	bcc.n	800165a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	687e      	ldr	r6, [r7, #4]
 80016f6:	466d      	mov	r5, sp
 80016f8:	f106 0410 	add.w	r4, r6, #16
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	602b      	str	r3, [r5, #0]
 8001704:	1d33      	adds	r3, r6, #4
 8001706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f004 fb8d 	bl	8005e28 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f001 fc29 	bl	8002f7e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001736 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_PCD_Start+0x16>
 8001748:	2302      	movs	r3, #2
 800174a:	e012      	b.n	8001772 <HAL_PCD_Start+0x3c>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f004 fb33 	bl	8005dc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f006 fae8 	bl	8007d38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f006 faed 	bl	8007d66 <USB_ReadInterrupts>
 800178c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fb26 	bl	8001dea <PCD_EP_ISR_Handler>

    return;
 800179e:	e110      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d013      	beq.n	80017d2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017bc:	b292      	uxth	r2, r2
 80017be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f008 fa9d 	bl	8009d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017c8:	2100      	movs	r1, #0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f8fc 	bl	80019c8 <HAL_PCD_SetAddress>

    return;
 80017d0:	e0f7      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00c      	beq.n	80017f6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017f4:	e0e5      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00c      	beq.n	800181a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001812:	b292      	uxth	r2, r2
 8001814:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001818:	e0d3      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d034      	beq.n	800188e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	b292      	uxth	r2, r2
 8001838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001844:	b29a      	uxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0208 	bic.w	r2, r2, #8
 800184e:	b292      	uxth	r2, r2
 8001850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001866:	2100      	movs	r1, #0
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f008 fc41 	bl	800a0f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f008 fa80 	bl	8009d74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800187c:	b29a      	uxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001886:	b292      	uxth	r2, r2
 8001888:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800188c:	e099      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001894:	2b00      	cmp	r3, #0
 8001896:	d027      	beq.n	80018e8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0208 	orr.w	r2, r2, #8
 80018aa:	b292      	uxth	r2, r2
 80018ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c2:	b292      	uxth	r2, r2
 80018c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0204 	orr.w	r2, r2, #4
 80018da:	b292      	uxth	r2, r2
 80018dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f008 fa2d 	bl	8009d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80018e6:	e06c      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d040      	beq.n	8001974 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001904:	b292      	uxth	r2, r2
 8001906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d12b      	bne.n	800196c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0204 	orr.w	r2, r2, #4
 8001926:	b292      	uxth	r2, r2
 8001928:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0208 	orr.w	r2, r2, #8
 800193e:	b292      	uxth	r2, r2
 8001940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001954:	b29b      	uxth	r3, r3
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001962:	2101      	movs	r1, #1
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f008 fbc3 	bl	800a0f0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800196a:	e02a      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f008 f9e7 	bl	8009d40 <HAL_PCD_SuspendCallback>
    return;
 8001972:	e026      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00f      	beq.n	800199e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001986:	b29a      	uxth	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001990:	b292      	uxth	r2, r2
 8001992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f008 f9a5 	bl	8009ce6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800199c:	e011      	b.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00c      	beq.n	80019c2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ba:	b292      	uxth	r2, r2
 80019bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019c0:	bf00      	nop
  }
}
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_PCD_SetAddress+0x1a>
 80019de:	2302      	movs	r3, #2
 80019e0:	e013      	b.n	8001a0a <HAL_PCD_SetAddress+0x42>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f006 f988 	bl	8007d10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	4608      	mov	r0, r1
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	70fb      	strb	r3, [r7, #3]
 8001a24:	460b      	mov	r3, r1
 8001a26:	803b      	strh	r3, [r7, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da0e      	bge.n	8001a56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	705a      	strb	r2, [r3, #1]
 8001a54:	e00e      	b.n	8001a74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	f003 0207 	and.w	r2, r3, #7
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a80:	883a      	ldrh	r2, [r7, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	78ba      	ldrb	r2, [r7, #2]
 8001a8a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a9e:	78bb      	ldrb	r3, [r7, #2]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d102      	bne.n	8001aaa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_PCD_EP_Open+0xa6>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e00e      	b.n	8001ad6 <HAL_PCD_EP_Open+0xc4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 f9d0 	bl	8005e6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da0e      	bge.n	8001b10 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	705a      	strb	r2, [r3, #1]
 8001b0e:	e00e      	b.n	8001b2e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_PCD_EP_Close+0x6a>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e00e      	b.n	8001b66 <HAL_PCD_EP_Close+0x88>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 fd1c 	bl	8006594 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	f003 0207 	and.w	r2, r3, #7
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2200      	movs	r2, #0
 8001bac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bae:	7afb      	ldrb	r3, [r7, #11]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d106      	bne.n	8001bd2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6979      	ldr	r1, [r7, #20]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fecf 	bl	800696e <USB_EPStartXfer>
 8001bd0:	e005      	b.n	8001bde <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f004 fec8 	bl	800696e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 0207 	and.w	r2, r3, #7
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	460b      	mov	r3, r1
 8001c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2201      	movs	r2, #1
 8001c62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 fe74 	bl	800696e <USB_EPStartXfer>
 8001c86:	e005      	b.n	8001c94 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fe6d 	bl	800696e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 0207 	and.w	r2, r3, #7
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d901      	bls.n	8001cbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e03e      	b.n	8001d3a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da0e      	bge.n	8001ce2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	705a      	strb	r2, [r3, #1]
 8001ce0:	e00c      	b.n	8001cfc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_PCD_EP_SetStall+0x7e>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e00e      	b.n	8001d3a <HAL_PCD_EP_SetStall+0x9c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 fef1 	bl	8007b12 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 020f 	and.w	r2, r3, #15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d901      	bls.n	8001d60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e040      	b.n	8001de2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da0e      	bge.n	8001d86 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	705a      	strb	r2, [r3, #1]
 8001d84:	e00e      	b.n	8001da4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 0207 	and.w	r2, r3, #7
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_PCD_EP_ClrStall+0x82>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e00e      	b.n	8001de2 <HAL_PCD_EP_ClrStall+0xa0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f005 feee 	bl	8007bb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b096      	sub	sp, #88	; 0x58
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001df2:	e39c      	b.n	800252e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001e0e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 815e 	bne.w	80020d4 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d150      	bne.n	8001ec6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e34:	81fb      	strh	r3, [r7, #14]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
 8001e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3328      	adds	r3, #40	; 0x28
 8001e4c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	441a      	add	r2, r3
 8001e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e82:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e84:	2100      	movs	r1, #0
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f007 ff13 	bl	8009cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 834a 	beq.w	800252e <PCD_EP_ISR_Handler+0x744>
 8001e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8345 	bne.w	800252e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ec4:	e333      	b.n	800252e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ed8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d032      	beq.n	8001f4a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f18:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f005 ff73 	bl	8007e0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f30:	4013      	ands	r3, r2
 8001f32:	823b      	strh	r3, [r7, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	8a3a      	ldrh	r2, [r7, #16]
 8001f3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f007 fe88 	bl	8009c58 <HAL_PCD_SetupStageCallback>
 8001f48:	e2f1      	b.n	800252e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f4a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f280 82ed 	bge.w	800252e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f60:	4013      	ands	r3, r2
 8001f62:	83fb      	strh	r3, [r7, #30]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	8bfa      	ldrh	r2, [r7, #30]
 8001f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f98:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d019      	beq.n	8001fd6 <PCD_EP_ISR_Handler+0x1ec>
 8001fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d015      	beq.n	8001fd6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb0:	6959      	ldr	r1, [r3, #20]
 8001fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f005 ff25 	bl	8007e0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	441a      	add	r2, r3
 8001fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fcc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f007 fe53 	bl	8009c7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 82a3 	bne.w	800252e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b3e      	cmp	r3, #62	; 0x3e
 800200e:	d918      	bls.n	8002042 <PCD_EP_ISR_Handler+0x258>
 8002010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
 8002018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <PCD_EP_ISR_Handler+0x240>
 8002024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002026:	3b01      	subs	r3, #1
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
 800202a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202c:	b29b      	uxth	r3, r3
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	b29b      	uxth	r3, r3
 8002032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203a:	b29a      	uxth	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	801a      	strh	r2, [r3, #0]
 8002040:	e029      	b.n	8002096 <PCD_EP_ISR_Handler+0x2ac>
 8002042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d112      	bne.n	8002070 <PCD_EP_ISR_Handler+0x286>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002054:	b29a      	uxth	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002068:	b29a      	uxth	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	801a      	strh	r2, [r3, #0]
 800206e:	e012      	b.n	8002096 <PCD_EP_ISR_Handler+0x2ac>
 8002070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	647b      	str	r3, [r7, #68]	; 0x44
 8002078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <PCD_EP_ISR_Handler+0x2a0>
 8002084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002086:	3301      	adds	r3, #1
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
 800208a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208c:	b29b      	uxth	r3, r3
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	b29a      	uxth	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a6:	827b      	strh	r3, [r7, #18]
 80020a8:	8a7b      	ldrh	r3, [r7, #18]
 80020aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020ae:	827b      	strh	r3, [r7, #18]
 80020b0:	8a7b      	ldrh	r3, [r7, #18]
 80020b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020b6:	827b      	strh	r3, [r7, #18]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	8a7b      	ldrh	r3, [r7, #18]
 80020be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	8013      	strh	r3, [r2, #0]
 80020d2:	e22c      	b.n	800252e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020e8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f280 80f6 	bge.w	80022de <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29a      	uxth	r2, r3
 8002104:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002108:	4013      	ands	r3, r2
 800210a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002120:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002124:	b292      	uxth	r2, r2
 8002126:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002128:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800213e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002140:	7b1b      	ldrb	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d123      	bne.n	800218e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	4413      	add	r3, r2
 8002160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800216a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800216e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 808e 	beq.w	8002294 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217e:	6959      	ldr	r1, [r3, #20]
 8002180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002182:	88da      	ldrh	r2, [r3, #6]
 8002184:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002188:	f005 fe3f 	bl	8007e0a <USB_ReadPMA>
 800218c:	e082      	b.n	8002294 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800218e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002190:	78db      	ldrb	r3, [r3, #3]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d10a      	bne.n	80021ac <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002196:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800219a:	461a      	mov	r2, r3
 800219c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f9d3 	bl	800254a <HAL_PCD_EP_DB_Receive>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80021aa:	e073      	b.n	8002294 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	441a      	add	r2, r3
 80021d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d022      	beq.n	8002250 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	4413      	add	r3, r2
 8002224:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002232:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002236:	2b00      	cmp	r3, #0
 8002238:	d02c      	beq.n	8002294 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002240:	6959      	ldr	r1, [r3, #20]
 8002242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002244:	891a      	ldrh	r2, [r3, #8]
 8002246:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800224a:	f005 fdde 	bl	8007e0a <USB_ReadPMA>
 800224e:	e021      	b.n	8002294 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002258:	b29b      	uxth	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	4413      	add	r3, r2
 800226a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002274:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002278:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002286:	6959      	ldr	r1, [r3, #20]
 8002288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800228a:	895a      	ldrh	r2, [r3, #10]
 800228c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002290:	f005 fdbb 	bl	8007e0a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800229c:	441a      	add	r2, r3
 800229e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022aa:	441a      	add	r2, r3
 80022ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <PCD_EP_ISR_Handler+0x4da>
 80022b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80022bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d206      	bcs.n	80022d2 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f007 fcd6 	bl	8009c7c <HAL_PCD_DataOutStageCallback>
 80022d0:	e005      	b.n	80022de <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 fb48 	bl	800696e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8121 	beq.w	800252e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80022ec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	441a      	add	r2, r3
 800232c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002338:	b29b      	uxth	r3, r3
 800233a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800233c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233e:	78db      	ldrb	r3, [r3, #3]
 8002340:	2b02      	cmp	r3, #2
 8002342:	f000 80a2 	beq.w	800248a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800234c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234e:	7b1b      	ldrb	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8093 	beq.w	800247c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002356:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d046      	beq.n	80023f0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002364:	785b      	ldrb	r3, [r3, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d126      	bne.n	80023b8 <PCD_EP_ISR_Handler+0x5ce>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002378:	b29b      	uxth	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	4413      	add	r3, r2
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	00da      	lsls	r2, r3, #3
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	4413      	add	r3, r2
 800238c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800239c:	b29a      	uxth	r2, r3
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	e061      	b.n	800247c <PCD_EP_ISR_Handler+0x692>
 80023b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ba:	785b      	ldrb	r3, [r3, #1]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d15d      	bne.n	800247c <PCD_EP_ISR_Handler+0x692>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	4413      	add	r3, r2
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	00da      	lsls	r2, r3, #3
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	4413      	add	r3, r2
 80023e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	2200      	movs	r2, #0
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	e045      	b.n	800247c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d126      	bne.n	800244c <PCD_EP_ISR_Handler+0x662>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	4413      	add	r3, r2
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
 8002416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00da      	lsls	r2, r3, #3
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	4413      	add	r3, r2
 8002420:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002430:	b29a      	uxth	r2, r3
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002444:	b29a      	uxth	r2, r3
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e017      	b.n	800247c <PCD_EP_ISR_Handler+0x692>
 800244c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d113      	bne.n	800247c <PCD_EP_ISR_Handler+0x692>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245c:	b29b      	uxth	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002462:	4413      	add	r3, r2
 8002464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	00da      	lsls	r2, r3, #3
 800246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246e:	4413      	add	r3, r2
 8002470:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	2200      	movs	r2, #0
 800247a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800247c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f007 fc15 	bl	8009cb2 <HAL_PCD_DataInStageCallback>
 8002488:	e051      	b.n	800252e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800248a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d144      	bne.n	8002520 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80024be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d907      	bls.n	80024da <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80024ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024d2:	1ad2      	subs	r2, r2, r3
 80024d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d6:	619a      	str	r2, [r3, #24]
 80024d8:	e002      	b.n	80024e0 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80024da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80024e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f007 fbdf 	bl	8009cb2 <HAL_PCD_DataInStageCallback>
 80024f4:	e01b      	b.n	800252e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80024f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024fe:	441a      	add	r2, r3
 8002500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002502:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800250c:	441a      	add	r2, r3
 800250e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002510:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fa28 	bl	800696e <USB_EPStartXfer>
 800251e:	e006      	b.n	800252e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002520:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002524:	461a      	mov	r2, r3
 8002526:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f917 	bl	800275c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002536:	b29b      	uxth	r3, r3
 8002538:	b21b      	sxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	f6ff ac5a 	blt.w	8001df4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3758      	adds	r7, #88	; 0x58
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b088      	sub	sp, #32
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	4613      	mov	r3, r2
 8002556:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d07c      	beq.n	800265c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	4413      	add	r3, r2
 800257c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002586:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	699a      	ldr	r2, [r3, #24]
 800258c:	8b7b      	ldrh	r3, [r7, #26]
 800258e:	429a      	cmp	r2, r3
 8002590:	d306      	bcc.n	80025a0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	8b7b      	ldrh	r3, [r7, #26]
 8002598:	1ad2      	subs	r2, r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	619a      	str	r2, [r3, #24]
 800259e:	e002      	b.n	80025a6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d123      	bne.n	80025f6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c8:	833b      	strh	r3, [r7, #24]
 80025ca:	8b3b      	ldrh	r3, [r7, #24]
 80025cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025d0:	833b      	strh	r3, [r7, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	441a      	add	r2, r3
 80025e0:	8b3b      	ldrh	r3, [r7, #24]
 80025e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01f      	beq.n	8002640 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	82fb      	strh	r3, [r7, #22]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	8afb      	ldrh	r3, [r7, #22]
 800262c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800263c:	b29b      	uxth	r3, r3
 800263e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002640:	8b7b      	ldrh	r3, [r7, #26]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8085 	beq.w	8002752 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6959      	ldr	r1, [r3, #20]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	891a      	ldrh	r2, [r3, #8]
 8002654:	8b7b      	ldrh	r3, [r7, #26]
 8002656:	f005 fbd8 	bl	8007e0a <USB_ReadPMA>
 800265a:	e07a      	b.n	8002752 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4413      	add	r3, r2
 8002676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002680:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	8b7b      	ldrh	r3, [r7, #26]
 8002688:	429a      	cmp	r2, r3
 800268a:	d306      	bcc.n	800269a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	8b7b      	ldrh	r3, [r7, #26]
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	619a      	str	r2, [r3, #24]
 8002698:	e002      	b.n	80026a0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d123      	bne.n	80026f0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	83fb      	strh	r3, [r7, #30]
 80026c4:	8bfb      	ldrh	r3, [r7, #30]
 80026c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ca:	83fb      	strh	r3, [r7, #30]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	8bfb      	ldrh	r3, [r7, #30]
 80026dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11f      	bne.n	800273a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002714:	83bb      	strh	r3, [r7, #28]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	441a      	add	r2, r3
 8002724:	8bbb      	ldrh	r3, [r7, #28]
 8002726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002736:	b29b      	uxth	r3, r3
 8002738:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6959      	ldr	r1, [r3, #20]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	895a      	ldrh	r2, [r3, #10]
 800274c:	8b7b      	ldrh	r3, [r7, #26]
 800274e:	f005 fb5c 	bl	8007e0a <USB_ReadPMA>
    }
  }

  return count;
 8002752:	8b7b      	ldrh	r3, [r7, #26]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0a2      	sub	sp, #136	; 0x88
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 81c5 	beq.w	8002b00 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4413      	add	r3, r2
 8002790:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800279a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d907      	bls.n	80027ba <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027b2:	1ad2      	subs	r2, r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	619a      	str	r2, [r3, #24]
 80027b8:	e002      	b.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 80b9 	bne.w	800293c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	785b      	ldrb	r3, [r3, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d126      	bne.n	8002820 <HAL_PCD_EP_DB_Transmit+0xc4>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	4413      	add	r3, r2
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	00da      	lsls	r2, r3, #3
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	4413      	add	r3, r2
 80027f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002804:	b29a      	uxth	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002818:	b29a      	uxth	r2, r3
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	e01a      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d116      	bne.n	8002856 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	4413      	add	r3, r2
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00da      	lsls	r2, r3, #3
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	4413      	add	r3, r2
 800284a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	2200      	movs	r2, #0
 8002854:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	785b      	ldrb	r3, [r3, #1]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d126      	bne.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x156>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	00da      	lsls	r2, r3, #3
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4413      	add	r3, r2
 8002886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002896:	b29a      	uxth	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	801a      	strh	r2, [r3, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	e017      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x186>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d113      	bne.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x186>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	4413      	add	r3, r2
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	00da      	lsls	r2, r3, #3
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	4413      	add	r3, r2
 80028d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2200      	movs	r2, #0
 80028e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f007 f9e2 	bl	8009cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 82d2 	beq.w	8002e9e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002914:	827b      	strh	r3, [r7, #18]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	441a      	add	r2, r3
 8002924:	8a7b      	ldrh	r3, [r7, #18]
 8002926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	b29b      	uxth	r3, r3
 8002938:	8013      	strh	r3, [r2, #0]
 800293a:	e2b0      	b.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d021      	beq.n	800298a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002960:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800297e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002986:	b29b      	uxth	r3, r3
 8002988:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002990:	2b01      	cmp	r3, #1
 8002992:	f040 8284 	bne.w	8002e9e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800299e:	441a      	add	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	441a      	add	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6a1a      	ldr	r2, [r3, #32]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d309      	bcc.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6a1a      	ldr	r2, [r3, #32]
 80029c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ca:	1ad2      	subs	r2, r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	621a      	str	r2, [r3, #32]
 80029d0:	e015      	b.n	80029fe <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80029da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029e8:	e009      	b.n	80029fe <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	785b      	ldrb	r3, [r3, #1]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d155      	bne.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x356>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	4413      	add	r3, r2
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	00da      	lsls	r2, r3, #3
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	4413      	add	r3, r2
 8002a28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a30:	2b3e      	cmp	r3, #62	; 0x3e
 8002a32:	d916      	bls.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x306>
 8002a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a46:	3b01      	subs	r3, #1
 8002a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	029b      	lsls	r3, r3, #10
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5e:	801a      	strh	r2, [r3, #0]
 8002a60:	e043      	b.n	8002aea <HAL_PCD_EP_DB_Transmit+0x38e>
 8002a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d112      	bne.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x332>
 8002a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	e02d      	b.n	8002aea <HAL_PCD_EP_DB_Transmit+0x38e>
 8002a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x348>
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	029b      	lsls	r3, r3, #10
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	801a      	strh	r2, [r3, #0]
 8002ab0:	e01b      	b.n	8002aea <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	785b      	ldrb	r3, [r3, #1]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d117      	bne.n	8002aea <HAL_PCD_EP_DB_Transmit+0x38e>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ace:	4413      	add	r3, r2
 8002ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	00da      	lsls	r2, r3, #3
 8002ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ada:	4413      	add	r3, r2
 8002adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	6959      	ldr	r1, [r3, #20]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	891a      	ldrh	r2, [r3, #8]
 8002af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f005 f944 	bl	8007d86 <USB_WritePMA>
 8002afe:	e1ce      	b.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d307      	bcc.n	8002b44 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b3c:	1ad2      	subs	r2, r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	619a      	str	r2, [r3, #24]
 8002b42:	e002      	b.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80c4 	bne.w	8002cdc <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d126      	bne.n	8002baa <HAL_PCD_EP_DB_Transmit+0x44e>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b70:	4413      	add	r3, r2
 8002b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	00da      	lsls	r2, r3, #3
 8002b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b82:	667b      	str	r3, [r7, #100]	; 0x64
 8002b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	e01a      	b.n	8002be0 <HAL_PCD_EP_DB_Transmit+0x484>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d116      	bne.n	8002be0 <HAL_PCD_EP_DB_Transmit+0x484>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	673b      	str	r3, [r7, #112]	; 0x70
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc6:	4413      	add	r3, r2
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	00da      	lsls	r2, r3, #3
 8002bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	2200      	movs	r2, #0
 8002bde:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d12f      	bne.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c06:	4413      	add	r3, r2
 8002c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	00da      	lsls	r2, r3, #3
 8002c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c16:	4413      	add	r3, r2
 8002c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	e017      	b.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x522>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d113      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x522>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c64:	4413      	add	r3, r2
 8002c66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	00da      	lsls	r2, r3, #3
 8002c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c70:	4413      	add	r3, r2
 8002c72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c76:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4619      	mov	r1, r3
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f007 f814 	bl	8009cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f040 8104 	bne.w	8002e9e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	8013      	strh	r3, [r2, #0]
 8002cda:	e0e0      	b.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d121      	bne.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	441a      	add	r2, r3
 8002d12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	f040 80b4 	bne.w	8002e9e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d3e:	441a      	add	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d4c:	441a      	add	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d309      	bcc.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	621a      	str	r2, [r3, #32]
 8002d70:	e015      	b.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d107      	bne.n	8002d8a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002d7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d88:	e009      	b.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	663b      	str	r3, [r7, #96]	; 0x60
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d155      	bne.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc0:	4413      	add	r3, r2
 8002dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	00da      	lsls	r2, r3, #3
 8002dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dcc:	4413      	add	r3, r2
 8002dce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd6:	2b3e      	cmp	r3, #62	; 0x3e
 8002dd8:	d916      	bls.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	677b      	str	r3, [r7, #116]	; 0x74
 8002de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x694>
 8002dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dec:	3b01      	subs	r3, #1
 8002dee:	677b      	str	r3, [r7, #116]	; 0x74
 8002df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	029b      	lsls	r3, r3, #10
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	e040      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d112      	bne.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	e02a      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	677b      	str	r3, [r7, #116]	; 0x74
 8002e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e46:	3301      	adds	r3, #1
 8002e48:	677b      	str	r3, [r7, #116]	; 0x74
 8002e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	e018      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	785b      	ldrb	r3, [r3, #1]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d114      	bne.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e6e:	4413      	add	r3, r2
 8002e70:	663b      	str	r3, [r7, #96]	; 0x60
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	00da      	lsls	r2, r3, #3
 8002e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	6959      	ldr	r1, [r3, #20]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	895a      	ldrh	r2, [r3, #10]
 8002e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f004 ff74 	bl	8007d86 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb8:	823b      	strh	r3, [r7, #16]
 8002eba:	8a3b      	ldrh	r3, [r7, #16]
 8002ebc:	f083 0310 	eor.w	r3, r3, #16
 8002ec0:	823b      	strh	r3, [r7, #16]
 8002ec2:	8a3b      	ldrh	r3, [r7, #16]
 8002ec4:	f083 0320 	eor.w	r3, r3, #32
 8002ec8:	823b      	strh	r3, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	441a      	add	r2, r3
 8002ed8:	8a3b      	ldrh	r3, [r7, #16]
 8002eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3788      	adds	r7, #136	; 0x88
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	4613      	mov	r3, r2
 8002f08:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	897b      	ldrh	r3, [r7, #10]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e009      	b.n	8002f42 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f2e:	897a      	ldrh	r2, [r7, #10]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f42:	893b      	ldrh	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	80da      	strh	r2, [r3, #6]
 8002f56:	e00b      	b.n	8002f70 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f043 0302 	orr.w	r3, r3, #2
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	58000400 	.word	0x58000400

08002ff4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <HAL_PWREx_GetVoltageRange+0x18>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	58000400 	.word	0x58000400

08003010 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_PWREx_EnableVddUSB+0x1c>)
 800301a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301e:	6053      	str	r3, [r2, #4]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	58000400 	.word	0x58000400

08003030 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003042:	d101      	bne.n	8003048 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030a2:	d101      	bne.n	80030a8 <LL_RCC_HSE_IsReady+0x18>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <LL_RCC_HSE_IsReady+0x1a>
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80030d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e4:	6013      	str	r3, [r2, #0]
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003102:	d101      	bne.n	8003108 <LL_RCC_HSI_IsReady+0x18>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <LL_RCC_HSI_IsReady+0x1a>
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d101      	bne.n	800319a <LL_RCC_HSI48_IsReady+0x18>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_RCC_HSI48_IsReady+0x1a>
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d101      	bne.n	8003246 <LL_RCC_LSE_IsReady+0x18>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <LL_RCC_LSE_IsReady+0x1a>
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d101      	bne.n	80032ae <LL_RCC_LSI1_IsReady+0x18>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <LL_RCC_LSI1_IsReady+0x1a>
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80032d2:	bf00      	nop
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d101      	bne.n	8003316 <LL_RCC_LSI2_IsReady+0x18>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_RCC_LSI2_IsReady+0x1a>
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003332:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6013      	str	r3, [r2, #0]
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b02      	cmp	r3, #2
 800339c:	d101      	bne.n	80033a2 <LL_RCC_MSI_IsReady+0x16>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_RCC_MSI_IsReady+0x18>
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2bb0      	cmp	r3, #176	; 0xb0
 80033ec:	d901      	bls.n	80033f2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80033ee:	23b0      	movs	r3, #176	; 0xb0
 80033f0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80033f2:	687b      	ldr	r3, [r7, #4]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 0203 	bic.w	r2, r3, #3
 800343c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800349a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80034f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800357e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800359c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a0:	6013      	str	r3, [r2, #0]
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035be:	d101      	bne.n	80035c4 <LL_RCC_PLL_IsReady+0x18>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <LL_RCC_PLL_IsReady+0x1a>
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80035ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0303 	and.w	r3, r3, #3
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d101      	bne.n	800364a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800366a:	d101      	bne.n	8003670 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003684:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d101      	bne.n	8003696 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80036a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036b4:	d101      	bne.n	80036ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036d8:	d101      	bne.n	80036de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b08d      	sub	sp, #52	; 0x34
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e37e      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8092 	beq.w	8003830 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800370c:	f7ff fea1 	bl	8003452 <LL_RCC_GetSysClkSource>
 8003710:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003712:	f7ff ff82 	bl	800361a <LL_RCC_PLL_GetMainSource>
 8003716:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_RCC_OscConfig+0x3e>
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d14c      	bne.n	80037be <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	2b01      	cmp	r3, #1
 8003728:	d149      	bne.n	80037be <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800372a:	f7ff fe2f 	bl	800338c <LL_RCC_MSI_IsReady>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_OscConfig+0x54>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e35d      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003744:	f7ff fe47 	bl	80033d6 <LL_RCC_MSI_GetRange>
 8003748:	4603      	mov	r3, r0
 800374a:	429c      	cmp	r4, r3
 800374c:	d914      	bls.n	8003778 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fd16 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e34c      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fe21 	bl	80033ae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fe45 	bl	8003400 <LL_RCC_MSI_SetCalibTrimming>
 8003776:	e013      	b.n	80037a0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fe16 	bl	80033ae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fe3a 	bl	8003400 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fcf7 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e32d      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037a0:	f000 fcdc 	bl	800415c <HAL_RCC_GetHCLKFreq>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4ab3      	ldr	r2, [pc, #716]	; (8003a74 <HAL_RCC_OscConfig+0x388>)
 80037a8:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037aa:	4bb3      	ldr	r3, [pc, #716]	; (8003a78 <HAL_RCC_OscConfig+0x38c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fbaa 	bl	8000f08 <HAL_InitTick>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d039      	beq.n	800382e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e31e      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01e      	beq.n	8003804 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037c6:	f7ff fdc3 	bl	8003350 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037ca:	f7fd fbeb 	bl	8000fa4 <HAL_GetTick>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037d2:	f7fd fbe7 	bl	8000fa4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e30b      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80037e4:	f7ff fdd2 	bl	800338c <LL_RCC_MSI_IsReady>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f1      	beq.n	80037d2 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fddb 	bl	80033ae <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fdff 	bl	8003400 <LL_RCC_MSI_SetCalibTrimming>
 8003802:	e015      	b.n	8003830 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003804:	f7ff fdb3 	bl	800336e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003808:	f7fd fbcc 	bl	8000fa4 <HAL_GetTick>
 800380c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003810:	f7fd fbc8 	bl	8000fa4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e2ec      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003822:	f7ff fdb3 	bl	800338c <LL_RCC_MSI_IsReady>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f1      	bne.n	8003810 <HAL_RCC_OscConfig+0x124>
 800382c:	e000      	b.n	8003830 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800382e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d04e      	beq.n	80038da <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383c:	f7ff fe09 	bl	8003452 <LL_RCC_GetSysClkSource>
 8003840:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003842:	f7ff feea 	bl	800361a <LL_RCC_PLL_GetMainSource>
 8003846:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d005      	beq.n	800385a <HAL_RCC_OscConfig+0x16e>
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d10d      	bne.n	8003870 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b03      	cmp	r3, #3
 8003858:	d10a      	bne.n	8003870 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385a:	f7ff fc19 	bl	8003090 <LL_RCC_HSE_IsReady>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d039      	beq.n	80038d8 <HAL_RCC_OscConfig+0x1ec>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d135      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e2c5      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d102      	bne.n	8003880 <HAL_RCC_OscConfig+0x194>
 800387a:	f7ff fbeb 	bl	8003054 <LL_RCC_HSE_Enable>
 800387e:	e001      	b.n	8003884 <HAL_RCC_OscConfig+0x198>
 8003880:	f7ff fbf7 	bl	8003072 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fb8a 	bl	8000fa4 <HAL_GetTick>
 8003890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7fd fb86 	bl	8000fa4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e2aa      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80038a6:	f7ff fbf3 	bl	8003090 <LL_RCC_HSE_IsReady>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f1      	beq.n	8003894 <HAL_RCC_OscConfig+0x1a8>
 80038b0:	e013      	b.n	80038da <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fb77 	bl	8000fa4 <HAL_GetTick>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ba:	f7fd fb73 	bl	8000fa4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b64      	cmp	r3, #100	; 0x64
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e297      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80038cc:	f7ff fbe0 	bl	8003090 <LL_RCC_HSE_IsReady>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f1      	bne.n	80038ba <HAL_RCC_OscConfig+0x1ce>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d051      	beq.n	800398a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e6:	f7ff fdb4 	bl	8003452 <LL_RCC_GetSysClkSource>
 80038ea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ec:	f7ff fe95 	bl	800361a <LL_RCC_PLL_GetMainSource>
 80038f0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_OscConfig+0x218>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d113      	bne.n	8003926 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d110      	bne.n	8003926 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003904:	f7ff fbf4 	bl	80030f0 <LL_RCC_HSI_IsReady>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x22e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e270      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fbf8 	bl	8003114 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003924:	e031      	b.n	800398a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d019      	beq.n	8003962 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392e:	f7ff fbc1 	bl	80030b4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd fb37 	bl	8000fa4 <HAL_GetTick>
 8003936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fd fb33 	bl	8000fa4 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e257      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800394c:	f7ff fbd0 	bl	80030f0 <LL_RCC_HSI_IsReady>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f1      	beq.n	800393a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fbda 	bl	8003114 <LL_RCC_HSI_SetCalibTrimming>
 8003960:	e013      	b.n	800398a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	f7ff fbb6 	bl	80030d2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fd fb1d 	bl	8000fa4 <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396e:	f7fd fb19 	bl	8000fa4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e23d      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003980:	f7ff fbb6 	bl	80030f0 <LL_RCC_HSI_IsReady>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f1      	bne.n	800396e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80a3 	beq.w	8003aea <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d076      	beq.n	8003a9a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d046      	beq.n	8003a46 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80039b8:	f7ff fc6d 	bl	8003296 <LL_RCC_LSI1_IsReady>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d113      	bne.n	80039ea <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80039c2:	f7ff fc46 	bl	8003252 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039c6:	f7fd faed 	bl	8000fa4 <HAL_GetTick>
 80039ca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80039ce:	f7fd fae9 	bl	8000fa4 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e20d      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80039e0:	f7ff fc59 	bl	8003296 <LL_RCC_LSI1_IsReady>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f1      	beq.n	80039ce <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80039ea:	f7ff fc66 	bl	80032ba <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd fad9 	bl	8000fa4 <HAL_GetTick>
 80039f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80039f6:	f7fd fad5 	bl	8000fa4 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1f9      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003a08:	f7ff fc79 	bl	80032fe <LL_RCC_LSI2_IsReady>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f1      	beq.n	80039f6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fc83 	bl	8003322 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003a1c:	f7ff fc2a 	bl	8003274 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fd fac0 	bl	8000fa4 <HAL_GetTick>
 8003a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a28:	f7fd fabc 	bl	8000fa4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1e0      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003a3a:	f7ff fc2c 	bl	8003296 <LL_RCC_LSI1_IsReady>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f1      	bne.n	8003a28 <HAL_RCC_OscConfig+0x33c>
 8003a44:	e051      	b.n	8003aea <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003a46:	f7ff fc04 	bl	8003252 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd faab 	bl	8000fa4 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a52:	f7fd faa7 	bl	8000fa4 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e1cb      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003a64:	f7ff fc17 	bl	8003296 <LL_RCC_LSI1_IsReady>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f1      	beq.n	8003a52 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003a6e:	f7ff fc35 	bl	80032dc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003a72:	e00c      	b.n	8003a8e <HAL_RCC_OscConfig+0x3a2>
 8003a74:	20000024 	.word	0x20000024
 8003a78:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a7c:	f7fd fa92 	bl	8000fa4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1b6      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003a8e:	f7ff fc36 	bl	80032fe <LL_RCC_LSI2_IsReady>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f1      	bne.n	8003a7c <HAL_RCC_OscConfig+0x390>
 8003a98:	e027      	b.n	8003aea <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003a9a:	f7ff fc1f 	bl	80032dc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fd fa81 	bl	8000fa4 <HAL_GetTick>
 8003aa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003aa6:	f7fd fa7d 	bl	8000fa4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e1a1      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003ab8:	f7ff fc21 	bl	80032fe <LL_RCC_LSI2_IsReady>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f1      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003ac2:	f7ff fbd7 	bl	8003274 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fd fa6d 	bl	8000fa4 <HAL_GetTick>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ace:	f7fd fa69 	bl	8000fa4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e18d      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003ae0:	f7ff fbd9 	bl	8003296 <LL_RCC_LSI1_IsReady>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f1      	bne.n	8003ace <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d05b      	beq.n	8003bae <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af6:	4bb5      	ldr	r3, [pc, #724]	; (8003dcc <HAL_RCC_OscConfig+0x6e0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d114      	bne.n	8003b2c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003b02:	f7ff fa67 	bl	8002fd4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7fd fa4d 	bl	8000fa4 <HAL_GetTick>
 8003b0a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7fd fa49 	bl	8000fa4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e16d      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b20:	4baa      	ldr	r3, [pc, #680]	; (8003dcc <HAL_RCC_OscConfig+0x6e0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d102      	bne.n	8003b3a <HAL_RCC_OscConfig+0x44e>
 8003b34:	f7ff fb37 	bl	80031a6 <LL_RCC_LSE_Enable>
 8003b38:	e00c      	b.n	8003b54 <HAL_RCC_OscConfig+0x468>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b05      	cmp	r3, #5
 8003b40:	d104      	bne.n	8003b4c <HAL_RCC_OscConfig+0x460>
 8003b42:	f7ff fb52 	bl	80031ea <LL_RCC_LSE_EnableBypass>
 8003b46:	f7ff fb2e 	bl	80031a6 <LL_RCC_LSE_Enable>
 8003b4a:	e003      	b.n	8003b54 <HAL_RCC_OscConfig+0x468>
 8003b4c:	f7ff fb3c 	bl	80031c8 <LL_RCC_LSE_Disable>
 8003b50:	f7ff fb5c 	bl	800320c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d014      	beq.n	8003b86 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fd fa22 	bl	8000fa4 <HAL_GetTick>
 8003b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fd fa1e 	bl	8000fa4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e140      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003b7a:	f7ff fb58 	bl	800322e <LL_RCC_LSE_IsReady>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ef      	beq.n	8003b64 <HAL_RCC_OscConfig+0x478>
 8003b84:	e013      	b.n	8003bae <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fd fa0d 	bl	8000fa4 <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fd fa09 	bl	8000fa4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e12b      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003ba4:	f7ff fb43 	bl	800322e <LL_RCC_LSE_IsReady>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ef      	bne.n	8003b8e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d014      	beq.n	8003bec <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bc2:	f7ff fabc 	bl	800313e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fd f9ed 	bl	8000fa4 <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bce:	f7fd f9e9 	bl	8000fa4 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e10d      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003be0:	f7ff facf 	bl	8003182 <LL_RCC_HSI48_IsReady>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f1      	beq.n	8003bce <HAL_RCC_OscConfig+0x4e2>
 8003bea:	e013      	b.n	8003c14 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bec:	f7ff fab8 	bl	8003160 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fd f9d8 	bl	8000fa4 <HAL_GetTick>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bf8:	f7fd f9d4 	bl	8000fa4 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0f8      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003c0a:	f7ff faba 	bl	8003182 <LL_RCC_HSI48_IsReady>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f1      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80ee 	beq.w	8003dfa <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1e:	f7ff fc18 	bl	8003452 <LL_RCC_GetSysClkSource>
 8003c22:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	f040 80af 	bne.w	8003d94 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0203 	and.w	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d123      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d11c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d114      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d10d      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d106      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d05d      	beq.n	8003d48 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d058      	beq.n	8003d44 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0ab      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ca4:	f7ff fc73 	bl	800358e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca8:	f7fd f97c 	bl	8000fa4 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd f978 	bl	8000fa4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e09c      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ef      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <HAL_RCC_OscConfig+0x6e4>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ce8:	0212      	lsls	r2, r2, #8
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cf0:	4311      	orrs	r1, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d06:	f7ff fc33 	bl	8003570 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d18:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d1a:	f7fd f943 	bl	8000fa4 <HAL_GetTick>
 8003d1e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fd f93f 	bl	8000fa4 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e063      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ef      	beq.n	8003d22 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d42:	e05a      	b.n	8003dfa <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e059      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d151      	bne.n	8003dfa <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d56:	f7ff fc0b 	bl	8003570 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d6a:	f7fd f91b 	bl	8000fa4 <HAL_GetTick>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fd f917 	bl	8000fa4 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e03b      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ef      	beq.n	8003d72 <HAL_RCC_OscConfig+0x686>
 8003d92:	e032      	b.n	8003dfa <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b0c      	cmp	r3, #12
 8003d98:	d02d      	beq.n	8003df6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	f7ff fbf8 	bl	800358e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da8:	f023 0303 	bic.w	r3, r3, #3
 8003dac:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fd f8ef 	bl	8000fa4 <HAL_GetTick>
 8003dc6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc8:	e00d      	b.n	8003de6 <HAL_RCC_OscConfig+0x6fa>
 8003dca:	bf00      	nop
 8003dcc:	58000400 	.word	0x58000400
 8003dd0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fd f8e6 	bl	8000fa4 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ef      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x6e8>
 8003df4:	e001      	b.n	8003dfa <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3734      	adds	r7, #52	; 0x34
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd90      	pop	{r4, r7, pc}

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e12d      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b98      	ldr	r3, [pc, #608]	; (800407c <HAL_RCC_ClockConfig+0x278>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d91b      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b95      	ldr	r3, [pc, #596]	; (800407c <HAL_RCC_ClockConfig+0x278>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	4993      	ldr	r1, [pc, #588]	; (800407c <HAL_RCC_ClockConfig+0x278>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e36:	f7fd f8b5 	bl	8000fa4 <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e3e:	f7fd f8b1 	bl	8000fa4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e111      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e50:	4b8a      	ldr	r3, [pc, #552]	; (800407c <HAL_RCC_ClockConfig+0x278>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d1ef      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fafb 	bl	800346a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e74:	f7fd f896 	bl	8000fa4 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e7c:	f7fd f892 	bl	8000fa4 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0f2      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003e8e:	f7ff fbd0 	bl	8003632 <LL_RCC_IsActiveFlag_HPRE>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f1      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff faf2 	bl	8003492 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003eae:	f7fd f879 	bl	8000fa4 <HAL_GetTick>
 8003eb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003eb6:	f7fd f875 	bl	8000fa4 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0d5      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ec8:	f7ff fbc5 	bl	8003656 <LL_RCC_IsActiveFlag_C2HPRE>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f1      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff faeb 	bl	80034be <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ee8:	f7fd f85c 	bl	8000fa4 <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ef0:	f7fd f858 	bl	8000fa4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0b8      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f02:	f7ff fbbb 	bl	800367c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f1      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d016      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fae5 	bl	80034ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f22:	f7fd f83f 	bl	8000fa4 <HAL_GetTick>
 8003f26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f2a:	f7fd f83b 	bl	8000fa4 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e09b      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f3c:	f7ff fbb1 	bl	80036a2 <LL_RCC_IsActiveFlag_PPRE1>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f1      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d017      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fadb 	bl	8003514 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f5e:	f7fd f821 	bl	8000fa4 <HAL_GetTick>
 8003f62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f66:	f7fd f81d 	bl	8000fa4 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e07d      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003f78:	f7ff fba5 	bl	80036c6 <LL_RCC_IsActiveFlag_PPRE2>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f1      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d043      	beq.n	8004016 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003f96:	f7ff f87b 	bl	8003090 <LL_RCC_HSE_IsReady>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11e      	bne.n	8003fde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e067      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d106      	bne.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003fac:	f7ff fafe 	bl	80035ac <LL_RCC_PLL_IsReady>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d113      	bne.n	8003fde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e05c      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003fc2:	f7ff f9e3 	bl	800338c <LL_RCC_MSI_IsReady>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d108      	bne.n	8003fde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e051      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003fd0:	f7ff f88e 	bl	80030f0 <LL_RCC_HSI_IsReady>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e04a      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fa21 	bl	800342a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe8:	f7fc ffdc 	bl	8000fa4 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff0:	f7fc ffd8 	bl	8000fa4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e036      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	f7ff fa24 	bl	8003452 <LL_RCC_GetSysClkSource>
 800400a:	4602      	mov	r2, r0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	429a      	cmp	r2, r3
 8004014:	d1ec      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_ClockConfig+0x278>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d21b      	bcs.n	800405c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_RCC_ClockConfig+0x278>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 0207 	bic.w	r2, r3, #7
 800402c:	4913      	ldr	r1, [pc, #76]	; (800407c <HAL_RCC_ClockConfig+0x278>)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004034:	f7fc ffb6 	bl	8000fa4 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	e008      	b.n	800404e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800403c:	f7fc ffb2 	bl	8000fa4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e012      	b.n	8004074 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_ClockConfig+0x278>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d1ef      	bne.n	800403c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800405c:	f000 f87e 	bl	800415c <HAL_RCC_GetHCLKFreq>
 8004060:	4603      	mov	r3, r0
 8004062:	4a07      	ldr	r2, [pc, #28]	; (8004080 <HAL_RCC_ClockConfig+0x27c>)
 8004064:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004066:	f7fc ffa9 	bl	8000fbc <HAL_GetTickPrio>
 800406a:	4603      	mov	r3, r0
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc ff4b 	bl	8000f08 <HAL_InitTick>
 8004072:	4603      	mov	r3, r0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58004000 	.word	0x58004000
 8004080:	20000024 	.word	0x20000024

08004084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408a:	f7ff f9e2 	bl	8003452 <LL_RCC_GetSysClkSource>
 800408e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004096:	f7ff f99e 	bl	80033d6 <LL_RCC_MSI_GetRange>
 800409a:	4603      	mov	r3, r0
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	4a2b      	ldr	r2, [pc, #172]	; (8004150 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e04b      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d102      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040b2:	4b28      	ldr	r3, [pc, #160]	; (8004154 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e045      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d10a      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040be:	f7fe ffb7 	bl	8003030 <LL_RCC_HSE_IsEnabledDiv2>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <HAL_RCC_GetSysClockFreq+0xd4>)
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e03a      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e037      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80040d4:	f7ff faa1 	bl	800361a <LL_RCC_PLL_GetMainSource>
 80040d8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d003      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x64>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0x6a>
 80040e6:	e00d      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80040e8:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040ea:	60bb      	str	r3, [r7, #8]
        break;
 80040ec:	e015      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040ee:	f7fe ff9f 	bl	8003030 <LL_RCC_HSE_IsEnabledDiv2>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_RCC_GetSysClockFreq+0xd4>)
 80040fa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80040fc:	e00d      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004100:	60bb      	str	r3, [r7, #8]
        break;
 8004102:	e00a      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004104:	f7ff f967 	bl	80033d6 <LL_RCC_MSI_GetRange>
 8004108:	4603      	mov	r3, r0
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004116:	60bb      	str	r3, [r7, #8]
        break;
 8004118:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800411a:	f7ff fa59 	bl	80035d0 <LL_RCC_PLL_GetN>
 800411e:	4602      	mov	r2, r0
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	fb03 f402 	mul.w	r4, r3, r2
 8004126:	f7ff fa6c 	bl	8003602 <LL_RCC_PLL_GetDivider>
 800412a:	4603      	mov	r3, r0
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	3301      	adds	r3, #1
 8004130:	fbb4 f4f3 	udiv	r4, r4, r3
 8004134:	f7ff fa59 	bl	80035ea <LL_RCC_PLL_GetR>
 8004138:	4603      	mov	r3, r0
 800413a:	0f5b      	lsrs	r3, r3, #29
 800413c:	3301      	adds	r3, #1
 800413e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004142:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004144:	68fb      	ldr	r3, [r7, #12]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}
 800414e:	bf00      	nop
 8004150:	0800a314 	.word	0x0800a314
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200

0800415c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800415c:	b598      	push	{r3, r4, r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004160:	f7ff ff90 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004164:	4604      	mov	r4, r0
 8004166:	f7ff f9e9 	bl	800353c <LL_RCC_GetAHBPrescaler>
 800416a:	4603      	mov	r3, r0
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	4a03      	ldr	r2, [pc, #12]	; (8004180 <HAL_RCC_GetHCLKFreq+0x24>)
 8004174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004178:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd98      	pop	{r3, r4, r7, pc}
 8004180:	0800a2d4 	.word	0x0800a2d4

08004184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2bb0      	cmp	r3, #176	; 0xb0
 8004190:	d903      	bls.n	800419a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e007      	b.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80041a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80041aa:	f7ff f9d3 	bl	8003554 <LL_RCC_GetAHB4Prescaler>
 80041ae:	4603      	mov	r3, r0
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	0c9c      	lsrs	r4, r3, #18
 80041ce:	f7fe ff11 	bl	8002ff4 <HAL_PWREx_GetVoltageRange>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4619      	mov	r1, r3
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 f80c 	bl	80041f4 <RCC_SetFlashLatency>
 80041dc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	bf00      	nop
 80041e8:	0800a314 	.word	0x0800a314
 80041ec:	0800a2d4 	.word	0x0800a2d4
 80041f0:	431bde83 	.word	0x431bde83

080041f4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b093      	sub	sp, #76	; 0x4c
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80041fe:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <RCC_SetFlashLatency+0xf0>)
 8004200:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800420a:	4a37      	ldr	r2, [pc, #220]	; (80042e8 <RCC_SetFlashLatency+0xf4>)
 800420c:	f107 031c 	add.w	r3, r7, #28
 8004210:	ca07      	ldmia	r2, {r0, r1, r2}
 8004212:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004216:	4b35      	ldr	r3, [pc, #212]	; (80042ec <RCC_SetFlashLatency+0xf8>)
 8004218:	f107 040c 	add.w	r4, r7, #12
 800421c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800421e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004222:	2300      	movs	r3, #0
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422c:	d11c      	bne.n	8004268 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800422e:	2300      	movs	r3, #0
 8004230:	643b      	str	r3, [r7, #64]	; 0x40
 8004232:	e015      	b.n	8004260 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800423c:	4413      	add	r3, r2
 800423e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d808      	bhi.n	800425a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004250:	4413      	add	r3, r2
 8004252:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004258:	e022      	b.n	80042a0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800425a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425c:	3301      	adds	r3, #1
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
 8004260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004262:	2b03      	cmp	r3, #3
 8004264:	d9e6      	bls.n	8004234 <RCC_SetFlashLatency+0x40>
 8004266:	e01b      	b.n	80042a0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004268:	2300      	movs	r3, #0
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426c:	e015      	b.n	800429a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800426e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004276:	4413      	add	r3, r2
 8004278:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d808      	bhi.n	8004294 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800428a:	4413      	add	r3, r2
 800428c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004290:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004292:	e005      	b.n	80042a0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004296:	3301      	adds	r3, #1
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	2b02      	cmp	r3, #2
 800429e:	d9e6      	bls.n	800426e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80042a0:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <RCC_SetFlashLatency+0xfc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 0207 	bic.w	r2, r3, #7
 80042a8:	4911      	ldr	r1, [pc, #68]	; (80042f0 <RCC_SetFlashLatency+0xfc>)
 80042aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042b0:	f7fc fe78 	bl	8000fa4 <HAL_GetTick>
 80042b4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80042b6:	e008      	b.n	80042ca <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80042b8:	f7fc fe74 	bl	8000fa4 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e007      	b.n	80042da <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <RCC_SetFlashLatency+0xfc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1ef      	bne.n	80042b8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	374c      	adds	r7, #76	; 0x4c
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd90      	pop	{r4, r7, pc}
 80042e2:	bf00      	nop
 80042e4:	0800a260 	.word	0x0800a260
 80042e8:	0800a270 	.word	0x0800a270
 80042ec:	0800a27c 	.word	0x0800a27c
 80042f0:	58004000 	.word	0x58004000

080042f4 <LL_RCC_LSE_IsEnabled>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <LL_RCC_LSE_IsEnabled+0x18>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <LL_RCC_LSE_IsEnabled+0x1a>
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <LL_RCC_LSE_IsReady>:
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d101      	bne.n	8004330 <LL_RCC_LSE_IsReady+0x18>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <LL_RCC_LSE_IsReady+0x1a>
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_RCC_MSI_EnablePLLMode>:
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434a:	f043 0304 	orr.w	r3, r3, #4
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <LL_RCC_SetRFWKPClockSource>:
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800436e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <LL_RCC_SetSMPSClockSource>:
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f023 0203 	bic.w	r2, r3, #3
 8004398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4313      	orrs	r3, r2
 80043a0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_RCC_SetSMPSPrescaler>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <LL_RCC_SetUSARTClockSource>:
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 0203 	bic.w	r2, r3, #3
 80043ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_RCC_SetLPUARTClockSource>:
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <LL_RCC_SetI2CClockSource>:
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004446:	43db      	mvns	r3, r3
 8004448:	401a      	ands	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_RCC_SetLPTIMClockSource>:
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004474:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	43db      	mvns	r3, r3
 8004480:	401a      	ands	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_RCC_SetSAIClockSource>:
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_RCC_SetRNGClockSource>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80044dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_RCC_SetCLK48ClockSource>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_RCC_SetUSBClockSource>:
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffe3 	bl	80044f4 <LL_RCC_SetCLK48ClockSource>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <LL_RCC_SetADCClockSource>:
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800453e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800454a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_RCC_SetRTCClockSource>:
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800456a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_RCC_GetRTCClockSource>:
{
 800458e:	b480      	push	{r7}
 8004590:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_RCC_ForceBackupDomainReset>:
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_RCC_ReleaseBackupDomainReset>:
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_PLLSAI1_Enable>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045fe:	6013      	str	r3, [r2, #0]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <LL_RCC_PLLSAI1_Disable>:
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800460e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800461c:	6013      	str	r3, [r2, #0]
}
 800461e:	bf00      	nop
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <LL_RCC_PLLSAI1_IsReady>:
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800462c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463a:	d101      	bne.n	8004640 <LL_RCC_PLLSAI1_IsReady+0x18>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004654:	2300      	movs	r3, #0
 8004656:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004658:	2300      	movs	r3, #0
 800465a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d034      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004670:	d021      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004672:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004676:	d81b      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800467c:	d01d      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800467e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004682:	d815      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468c:	d110      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800469e:	e00d      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f94d 	bl	8004944 <RCCEx_PLLSAI1_ConfigNP>
 80046aa:	4603      	mov	r3, r0
 80046ac:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80046ae:	e005      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	77fb      	strb	r3, [r7, #31]
        break;
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80046b6:	bf00      	nop
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80046ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046bc:	7ffb      	ldrb	r3, [r7, #31]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fee8 	bl	800449c <LL_RCC_SetSAIClockSource>
 80046cc:	e001      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ce:	7ffb      	ldrb	r3, [r7, #31]
 80046d0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d046      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80046de:	f7ff ff56 	bl	800458e <LL_RCC_GetRTCClockSource>
 80046e2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d03c      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80046ee:	f7fe fc71 	bl	8002fd4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff30 	bl	8004562 <LL_RCC_SetRTCClockSource>
 8004702:	e02e      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800470e:	f7ff ff4b 	bl	80045a8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004712:	f7ff ff5a 	bl	80045ca <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800472e:	f7ff fde1 	bl	80042f4 <LL_RCC_LSE_IsEnabled>
 8004732:	4603      	mov	r3, r0
 8004734:	2b01      	cmp	r3, #1
 8004736:	d114      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004738:	f7fc fc34 	bl	8000fa4 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800473e:	e00b      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fc fc30 	bl	8000fa4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d902      	bls.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	77fb      	strb	r3, [r7, #31]
              break;
 8004756:	e004      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004758:	f7ff fdde 	bl	8004318 <LL_RCC_LSE_IsReady>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d1ee      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004762:	7ffb      	ldrb	r3, [r7, #31]
 8004764:	77bb      	strb	r3, [r7, #30]
 8004766:	e001      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	7ffb      	ldrb	r3, [r7, #31]
 800476a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fe2a 	bl	80043d6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d004      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fe35 	bl	8004402 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fe5d 	bl	8004468 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fe52 	bl	8004468 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fe2a 	bl	800442e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fe1f 	bl	800442e <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d022      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fe8d 	bl	8004520 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480e:	d107      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800481a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800481e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004828:	d10b      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3304      	adds	r3, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f8e3 	bl	80049fa <RCCEx_PLLSAI1_ConfigNQ>
 8004834:	4603      	mov	r3, r0
 8004836:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004838:	7ffb      	ldrb	r3, [r7, #31]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800483e:	7ffb      	ldrb	r3, [r7, #31]
 8004840:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02b      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d008      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004860:	d003      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fe2a 	bl	80044c8 <LL_RCC_SetRNGClockSource>
 8004874:	e00a      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	2000      	movs	r0, #0
 8004882:	f7ff fe21 	bl	80044c8 <LL_RCC_SetRNGClockSource>
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7ff fe34 	bl	80044f4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004894:	d107      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d022      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fe3d 	bl	8004536 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c4:	d107      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048de:	d10b      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f8e3 	bl	8004ab0 <RCCEx_PLLSAI1_ConfigNR>
 80048ea:	4603      	mov	r3, r0
 80048ec:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80048ee:	7ffb      	ldrb	r3, [r7, #31]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80048f4:	7ffb      	ldrb	r3, [r7, #31]
 80048f6:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fd26 	bl	800435a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fd45 	bl	80043ae <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fd2c 	bl	8004386 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800492e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800493c:	f7ff fcfe 	bl	800433c <LL_RCC_MSI_EnablePLLMode>
}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}

08004944 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004950:	f7ff fe5b 	bl	800460a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004954:	f7fc fb26 	bl	8000fa4 <HAL_GetTick>
 8004958:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800495a:	e009      	b.n	8004970 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800495c:	f7fc fb22 	bl	8000fa4 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d902      	bls.n	8004970 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	73fb      	strb	r3, [r7, #15]
      break;
 800496e:	e004      	b.n	800497a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004970:	f7ff fe5a 	bl	8004628 <LL_RCC_PLLSAI1_IsReady>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d137      	bne.n	80049f0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004994:	4313      	orrs	r3, r2
 8004996:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049aa:	4313      	orrs	r3, r2
 80049ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80049ae:	f7ff fe1d 	bl	80045ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b2:	f7fc faf7 	bl	8000fa4 <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049b8:	e009      	b.n	80049ce <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ba:	f7fc faf3 	bl	8000fa4 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d902      	bls.n	80049ce <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	73fb      	strb	r3, [r7, #15]
        break;
 80049cc:	e004      	b.n	80049d8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049ce:	f7ff fe2b 	bl	8004628 <LL_RCC_PLLSAI1_IsReady>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d1f0      	bne.n	80049ba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ec:	4313      	orrs	r3, r2
 80049ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004a06:	f7ff fe00 	bl	800460a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a0a:	f7fc facb 	bl	8000fa4 <HAL_GetTick>
 8004a0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a10:	e009      	b.n	8004a26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a12:	f7fc fac7 	bl	8000fa4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d902      	bls.n	8004a26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	e004      	b.n	8004a30 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a26:	f7ff fdff 	bl	8004628 <LL_RCC_PLLSAI1_IsReady>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d137      	bne.n	8004aa6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a60:	4313      	orrs	r3, r2
 8004a62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a64:	f7ff fdc2 	bl	80045ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a68:	f7fc fa9c 	bl	8000fa4 <HAL_GetTick>
 8004a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a6e:	e009      	b.n	8004a84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a70:	f7fc fa98 	bl	8000fa4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d902      	bls.n	8004a84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	73fb      	strb	r3, [r7, #15]
        break;
 8004a82:	e004      	b.n	8004a8e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a84:	f7ff fdd0 	bl	8004628 <LL_RCC_PLLSAI1_IsReady>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d1f0      	bne.n	8004a70 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004abc:	f7ff fda5 	bl	800460a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ac0:	f7fc fa70 	bl	8000fa4 <HAL_GetTick>
 8004ac4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ac6:	e009      	b.n	8004adc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ac8:	f7fc fa6c 	bl	8000fa4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d902      	bls.n	8004adc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8004ada:	e004      	b.n	8004ae6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004adc:	f7ff fda4 	bl	8004628 <LL_RCC_PLLSAI1_IsReady>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d137      	bne.n	8004b5c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004b1a:	f7ff fd67 	bl	80045ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1e:	f7fc fa41 	bl	8000fa4 <HAL_GetTick>
 8004b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b24:	e009      	b.n	8004b3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b26:	f7fc fa3d 	bl	8000fa4 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d902      	bls.n	8004b3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	73fb      	strb	r3, [r7, #15]
        break;
 8004b38:	e004      	b.n	8004b44 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b3a:	f7ff fd75 	bl	8004628 <LL_RCC_PLLSAI1_IsReady>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d1f0      	bne.n	8004b26 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e095      	b.n	8004ca4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d108      	bne.n	8004b92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b88:	d009      	beq.n	8004b9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	61da      	str	r2, [r3, #28]
 8004b90:	e005      	b.n	8004b9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fb ffb7 	bl	8000b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bde:	d902      	bls.n	8004be6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e002      	b.n	8004bec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bf4:	d007      	beq.n	8004c06 <HAL_SPI_Init+0xa0>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bfe:	d002      	beq.n	8004c06 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	ea42 0103 	orr.w	r1, r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	f003 0204 	and.w	r2, r3, #4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c82:	ea42 0103 	orr.w	r1, r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_SPI_Transmit+0x22>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e158      	b.n	8004f80 <HAL_SPI_Transmit+0x2d4>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd6:	f7fc f965 	bl	8000fa4 <HAL_GetTick>
 8004cda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d002      	beq.n	8004cf2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
 8004cee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cf0:	e13d      	b.n	8004f6e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_Transmit+0x52>
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d02:	e134      	b.n	8004f6e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2203      	movs	r2, #3
 8004d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	88fa      	ldrh	r2, [r7, #6]
 8004d22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4e:	d10f      	bne.n	8004d70 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	d007      	beq.n	8004d8e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d96:	d94b      	bls.n	8004e30 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_SPI_Transmit+0xfa>
 8004da0:	8afb      	ldrh	r3, [r7, #22]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d13e      	bne.n	8004e24 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	881a      	ldrh	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dca:	e02b      	b.n	8004e24 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d112      	bne.n	8004e00 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	881a      	ldrh	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dfe:	e011      	b.n	8004e24 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e00:	f7fc f8d0 	bl	8000fa4 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d803      	bhi.n	8004e18 <HAL_SPI_Transmit+0x16c>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d102      	bne.n	8004e1e <HAL_SPI_Transmit+0x172>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e22:	e0a4      	b.n	8004f6e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1ce      	bne.n	8004dcc <HAL_SPI_Transmit+0x120>
 8004e2e:	e07c      	b.n	8004f2a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_SPI_Transmit+0x192>
 8004e38:	8afb      	ldrh	r3, [r7, #22]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d170      	bne.n	8004f20 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d912      	bls.n	8004e6e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b02      	subs	r3, #2
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e6c:	e058      	b.n	8004f20 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	7812      	ldrb	r2, [r2, #0]
 8004e7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e94:	e044      	b.n	8004f20 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d12b      	bne.n	8004efc <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d912      	bls.n	8004ed4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	881a      	ldrh	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	1c9a      	adds	r2, r3, #2
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b02      	subs	r3, #2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed2:	e025      	b.n	8004f20 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	330c      	adds	r3, #12
 8004ede:	7812      	ldrb	r2, [r2, #0]
 8004ee0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004efa:	e011      	b.n	8004f20 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efc:	f7fc f852 	bl	8000fa4 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d803      	bhi.n	8004f14 <HAL_SPI_Transmit+0x268>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d102      	bne.n	8004f1a <HAL_SPI_Transmit+0x26e>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f1e:	e026      	b.n	8004f6e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1b5      	bne.n	8004e96 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fce4 	bl	80058fc <SPI_EndRxTxTransaction>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e000      	b.n	8004f6e <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa4:	d112      	bne.n	8004fcc <HAL_SPI_Receive+0x44>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10e      	bne.n	8004fcc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f910 	bl	80051e8 <HAL_SPI_TransmitReceive>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	e109      	b.n	80051e0 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_SPI_Receive+0x52>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e102      	b.n	80051e0 <HAL_SPI_Receive+0x258>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fe2:	f7fb ffdf 	bl	8000fa4 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d002      	beq.n	8004ffa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ff8:	e0e9      	b.n	80051ce <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_SPI_Receive+0x7e>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
    goto error;
 800500a:	e0e0      	b.n	80051ce <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2204      	movs	r2, #4
 8005010:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005056:	d908      	bls.n	800506a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	e007      	b.n	800507a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005078:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005082:	d10f      	bne.n	80050a4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d007      	beq.n	80050c2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ca:	d867      	bhi.n	800519c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050cc:	e030      	b.n	8005130 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d117      	bne.n	800510c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f103 020c 	add.w	r2, r3, #12
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	7812      	ldrb	r2, [r2, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800510a:	e011      	b.n	8005130 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510c:	f7fb ff4a 	bl	8000fa4 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d803      	bhi.n	8005124 <HAL_SPI_Receive+0x19c>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d102      	bne.n	800512a <HAL_SPI_Receive+0x1a2>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800512e:	e04e      	b.n	80051ce <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1c8      	bne.n	80050ce <HAL_SPI_Receive+0x146>
 800513c:	e034      	b.n	80051a8 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d115      	bne.n	8005178 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	b292      	uxth	r2, r2
 8005158:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	1c9a      	adds	r2, r3, #2
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005176:	e011      	b.n	800519c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005178:	f7fb ff14 	bl	8000fa4 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d803      	bhi.n	8005190 <HAL_SPI_Receive+0x208>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d102      	bne.n	8005196 <HAL_SPI_Receive+0x20e>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	75fb      	strb	r3, [r7, #23]
          goto error;
 800519a:	e018      	b.n	80051ce <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ca      	bne.n	800513e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fb4d 	bl	800584c <SPI_EndRxTransaction>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
 80051ca:	e000      	b.n	80051ce <HAL_SPI_Receive+0x246>
  }

error :
 80051cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051f6:	2301      	movs	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_SPI_TransmitReceive+0x26>
 800520a:	2302      	movs	r3, #2
 800520c:	e1fb      	b.n	8005606 <HAL_SPI_TransmitReceive+0x41e>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005216:	f7fb fec5 	bl	8000fa4 <HAL_GetTick>
 800521a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005222:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800522a:	887b      	ldrh	r3, [r7, #2]
 800522c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800522e:	887b      	ldrh	r3, [r7, #2]
 8005230:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005232:	7efb      	ldrb	r3, [r7, #27]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d00e      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x6e>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523e:	d106      	bne.n	800524e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <HAL_SPI_TransmitReceive+0x66>
 8005248:	7efb      	ldrb	r3, [r7, #27]
 800524a:	2b04      	cmp	r3, #4
 800524c:	d003      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800524e:	2302      	movs	r3, #2
 8005250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005254:	e1cd      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x80>
 8005262:	887b      	ldrh	r3, [r7, #2]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800526e:	e1c0      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b04      	cmp	r3, #4
 800527a:	d003      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2205      	movs	r2, #5
 8005280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	887a      	ldrh	r2, [r7, #2]
 8005294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	887a      	ldrh	r2, [r7, #2]
 800529c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	887a      	ldrh	r2, [r7, #2]
 80052aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	887a      	ldrh	r2, [r7, #2]
 80052b0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c6:	d802      	bhi.n	80052ce <HAL_SPI_TransmitReceive+0xe6>
 80052c8:	8a3b      	ldrh	r3, [r7, #16]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d908      	bls.n	80052e0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	e007      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d007      	beq.n	800530e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800530c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005316:	d97c      	bls.n	8005412 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x13e>
 8005320:	8a7b      	ldrh	r3, [r7, #18]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d169      	bne.n	80053fa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	881a      	ldrh	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800534a:	e056      	b.n	80053fa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b02      	cmp	r3, #2
 8005358:	d11b      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x1aa>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d016      	beq.n	8005392 <HAL_SPI_TransmitReceive+0x1aa>
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	2b01      	cmp	r3, #1
 8005368:	d113      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	881a      	ldrh	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	1c9a      	adds	r2, r3, #2
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d11c      	bne.n	80053da <HAL_SPI_TransmitReceive+0x1f2>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d016      	beq.n	80053da <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	b292      	uxth	r2, r2
 80053b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	1c9a      	adds	r2, r3, #2
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053d6:	2301      	movs	r3, #1
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053da:	f7fb fde3 	bl	8000fa4 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d807      	bhi.n	80053fa <HAL_SPI_TransmitReceive+0x212>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d003      	beq.n	80053fa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80053f8:	e0fb      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1a3      	bne.n	800534c <HAL_SPI_TransmitReceive+0x164>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d19d      	bne.n	800534c <HAL_SPI_TransmitReceive+0x164>
 8005410:	e0df      	b.n	80055d2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_SPI_TransmitReceive+0x23a>
 800541a:	8a7b      	ldrh	r3, [r7, #18]
 800541c:	2b01      	cmp	r3, #1
 800541e:	f040 80cb 	bne.w	80055b8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d912      	bls.n	8005452 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	881a      	ldrh	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	1c9a      	adds	r2, r3, #2
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b02      	subs	r3, #2
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005450:	e0b2      	b.n	80055b8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005478:	e09e      	b.n	80055b8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d134      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x30a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02f      	beq.n	80054f2 <HAL_SPI_TransmitReceive+0x30a>
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	2b01      	cmp	r3, #1
 8005496:	d12c      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d912      	bls.n	80054c8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b02      	subs	r3, #2
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054c6:	e012      	b.n	80054ee <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	7812      	ldrb	r2, [r2, #0]
 80054d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d148      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x3aa>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d042      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d923      	bls.n	8005560 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	b292      	uxth	r2, r2
 8005524:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	1c9a      	adds	r2, r3, #2
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b02      	subs	r3, #2
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d81f      	bhi.n	800558e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	e016      	b.n	800558e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f103 020c 	add.w	r2, r3, #12
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800558e:	2301      	movs	r3, #1
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005592:	f7fb fd07 	bl	8000fa4 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	429a      	cmp	r2, r3
 80055a0:	d803      	bhi.n	80055aa <HAL_SPI_TransmitReceive+0x3c2>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d102      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x3c8>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d103      	bne.n	80055b8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80055b6:	e01c      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f47f af5b 	bne.w	800547a <HAL_SPI_TransmitReceive+0x292>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f af54 	bne.w	800547a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f990 	bl	80058fc <SPI_EndRxTxTransaction>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	661a      	str	r2, [r3, #96]	; 0x60
 80055ee:	e000      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80055f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005606:	4618      	mov	r0, r3
 8005608:	3728      	adds	r7, #40	; 0x28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005620:	f7fb fcc0 	bl	8000fa4 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	4413      	add	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005630:	f7fb fcb8 	bl	8000fa4 <HAL_GetTick>
 8005634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005636:	4b39      	ldr	r3, [pc, #228]	; (800571c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	015b      	lsls	r3, r3, #5
 800563c:	0d1b      	lsrs	r3, r3, #20
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	fb02 f303 	mul.w	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005646:	e054      	b.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d050      	beq.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005650:	f7fb fca8 	bl	8000fa4 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	429a      	cmp	r2, r3
 800565e:	d902      	bls.n	8005666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d13d      	bne.n	80056e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567e:	d111      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005688:	d004      	beq.n	8005694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d107      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ac:	d10f      	bne.n	80056ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e017      	b.n	8005712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4013      	ands	r3, r2
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	429a      	cmp	r2, r3
 800570e:	d19b      	bne.n	8005648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000024 	.word	0x20000024

08005720 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005732:	f7fb fc37 	bl	8000fa4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	4413      	add	r3, r2
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005742:	f7fb fc2f 	bl	8000fa4 <HAL_GetTick>
 8005746:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005750:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	00da      	lsls	r2, r3, #3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	0d1b      	lsrs	r3, r3, #20
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005768:	e060      	b.n	800582c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005770:	d107      	bne.n	8005782 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005780:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d050      	beq.n	800582c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800578a:	f7fb fc0b 	bl	8000fa4 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005796:	429a      	cmp	r2, r3
 8005798:	d902      	bls.n	80057a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d13d      	bne.n	800581c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b8:	d111      	bne.n	80057de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c2:	d004      	beq.n	80057ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d107      	bne.n	80057de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e6:	d10f      	bne.n	8005808 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005806:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e010      	b.n	800583e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3b01      	subs	r3, #1
 800582a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d196      	bne.n	800576a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3728      	adds	r7, #40	; 0x28
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000024 	.word	0x20000024

0800584c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005860:	d111      	bne.n	8005886 <SPI_EndRxTransaction+0x3a>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586a:	d004      	beq.n	8005876 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005874:	d107      	bne.n	8005886 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005884:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2200      	movs	r2, #0
 800588e:	2180      	movs	r1, #128	; 0x80
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7ff febd 	bl	8005610 <SPI_WaitFlagStateUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e023      	b.n	80058f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b4:	d11d      	bne.n	80058f2 <SPI_EndRxTransaction+0xa6>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058be:	d004      	beq.n	80058ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c8:	d113      	bne.n	80058f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f7ff ff22 	bl	8005720 <SPI_WaitFifoStateUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e000      	b.n	80058f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff ff03 	bl	8005720 <SPI_WaitFifoStateUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e027      	b.n	8005980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2200      	movs	r2, #0
 8005938:	2180      	movs	r1, #128	; 0x80
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff fe68 	bl	8005610 <SPI_WaitFlagStateUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800594a:	f043 0220 	orr.w	r2, r3, #32
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e014      	b.n	8005980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2200      	movs	r2, #0
 800595e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff fedc 	bl	8005720 <SPI_WaitFifoStateUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e000      	b.n	8005980 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e097      	b.n	8005acc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fb fa21 	bl	8000df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80059cc:	f023 0307 	bic.w	r3, r3, #7
 80059d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	f000 f907 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a28:	f023 030c 	bic.w	r3, r3, #12
 8005a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	4313      	orrs	r3, r2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	011a      	lsls	r2, r3, #4
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	031b      	lsls	r3, r3, #12
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005aec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005af4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005afc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d110      	bne.n	8005b26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d102      	bne.n	8005b10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b0a:	7b7b      	ldrb	r3, [r7, #13]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e069      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b24:	e031      	b.n	8005b8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d110      	bne.n	8005b4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b2c:	7bbb      	ldrb	r3, [r7, #14]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d102      	bne.n	8005b38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b32:	7b3b      	ldrb	r3, [r7, #12]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d001      	beq.n	8005b3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e055      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b4c:	e01d      	b.n	8005b8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d108      	bne.n	8005b66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b5a:	7b7b      	ldrb	r3, [r7, #13]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d102      	bne.n	8005b66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b60:	7b3b      	ldrb	r3, [r7, #12]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d001      	beq.n	8005b6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e03e      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_TIM_Encoder_Start+0xc4>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d008      	beq.n	8005ba8 <HAL_TIM_Encoder_Start+0xd4>
 8005b96:	e00f      	b.n	8005bb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f889 	bl	8005cb8 <TIM_CCxChannelCmd>
      break;
 8005ba6:	e016      	b.n	8005bd6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2201      	movs	r2, #1
 8005bae:	2104      	movs	r1, #4
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 f881 	bl	8005cb8 <TIM_CCxChannelCmd>
      break;
 8005bb6:	e00e      	b.n	8005bd6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f879 	bl	8005cb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	2104      	movs	r1, #4
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f872 	bl	8005cb8 <TIM_CCxChannelCmd>
      break;
 8005bd4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <TIM_Base_SetConfig+0xbc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0x20>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0e:	d108      	bne.n	8005c22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <TIM_Base_SetConfig+0xbc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <TIM_Base_SetConfig+0x52>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d007      	beq.n	8005c42 <TIM_Base_SetConfig+0x52>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1e      	ldr	r2, [pc, #120]	; (8005cb0 <TIM_Base_SetConfig+0xc0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_Base_SetConfig+0x52>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	; (8005cb4 <TIM_Base_SetConfig+0xc4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d108      	bne.n	8005c54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <TIM_Base_SetConfig+0xbc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0xa0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a0b      	ldr	r2, [pc, #44]	; (8005cb0 <TIM_Base_SetConfig+0xc0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0xa0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <TIM_Base_SetConfig+0xc4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d103      	bne.n	8005c98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800

08005cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2201      	movs	r2, #1
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	401a      	ands	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e04a      	b.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1f      	ldr	r2, [pc, #124]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d108      	bne.n	8005d58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d84:	d10c      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40012c00 	.word	0x40012c00

08005dc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005dd4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005dd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005dfa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005dfe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	4013      	ands	r3, r2
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e28:	b084      	sub	sp, #16
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	f107 0014 	add.w	r0, r7, #20
 8005e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	b004      	add	sp, #16
 8005e68:	4770      	bx	lr
	...

08005e6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b09d      	sub	sp, #116	; 0x74
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	78db      	ldrb	r3, [r3, #3]
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d81f      	bhi.n	8005ede <USB_ActivateEndpoint+0x72>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <USB_ActivateEndpoint+0x38>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005eb5 	.word	0x08005eb5
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ee7 	.word	0x08005ee7
 8005eb0:	08005ec3 	.word	0x08005ec3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005eb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ebc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005ec0:	e012      	b.n	8005ee8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ec2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ec6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005eca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005ece:	e00b      	b.n	8005ee8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ed0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ed8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005edc:	e004      	b.n	8005ee8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005ee4:	e000      	b.n	8005ee8 <USB_ActivateEndpoint+0x7c>
      break;
 8005ee6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	b21b      	sxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	b21a      	sxth	r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	b21b      	sxth	r3, r3
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	b21b      	sxth	r3, r3
 8005f2e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	7b1b      	ldrb	r3, [r3, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 8149 	bne.w	80061f0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 8084 	beq.w	8006070 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	4413      	add	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	00da      	lsls	r2, r3, #3
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	88db      	ldrh	r3, [r3, #6]
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	827b      	strh	r3, [r7, #18]
 8005faa:	8a7b      	ldrh	r3, [r7, #18]
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01b      	beq.n	8005fec <USB_ActivateEndpoint+0x180>
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	823b      	strh	r3, [r7, #16]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	8a3b      	ldrh	r3, [r7, #16]
 8005fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d020      	beq.n	8006036 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600a:	81bb      	strh	r3, [r7, #12]
 800600c:	89bb      	ldrh	r3, [r7, #12]
 800600e:	f083 0320 	eor.w	r3, r3, #32
 8006012:	81bb      	strh	r3, [r7, #12]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	89bb      	ldrh	r3, [r7, #12]
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]
 8006034:	e2a6      	b.n	8006584 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800604c:	81fb      	strh	r3, [r7, #14]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	89fb      	ldrh	r3, [r7, #14]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
 800606e:	e289      	b.n	8006584 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	633b      	str	r3, [r7, #48]	; 0x30
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800607a:	b29b      	uxth	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	4413      	add	r3, r2
 8006082:	633b      	str	r3, [r7, #48]	; 0x30
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	00da      	lsls	r2, r3, #3
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	4413      	add	r3, r2
 800608e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	88db      	ldrh	r3, [r3, #6]
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	b29b      	uxth	r3, r3
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	4413      	add	r3, r2
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	00da      	lsls	r2, r3, #3
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b3e      	cmp	r3, #62	; 0x3e
 80060ce:	d918      	bls.n	8006102 <USB_ActivateEndpoint+0x296>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <USB_ActivateEndpoint+0x27e>
 80060e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060e6:	3b01      	subs	r3, #1
 80060e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	029b      	lsls	r3, r3, #10
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	e029      	b.n	8006156 <USB_ActivateEndpoint+0x2ea>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d112      	bne.n	8006130 <USB_ActivateEndpoint+0x2c4>
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006114:	b29a      	uxth	r2, r3
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006128:	b29a      	uxth	r2, r3
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	e012      	b.n	8006156 <USB_ActivateEndpoint+0x2ea>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	66bb      	str	r3, [r7, #104]	; 0x68
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <USB_ActivateEndpoint+0x2de>
 8006144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006146:	3301      	adds	r3, #1
 8006148:	66bb      	str	r3, [r7, #104]	; 0x68
 800614a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800614c:	b29b      	uxth	r3, r3
 800614e:	029b      	lsls	r3, r3, #10
 8006150:	b29a      	uxth	r2, r3
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	847b      	strh	r3, [r7, #34]	; 0x22
 8006164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01b      	beq.n	80061a6 <USB_ActivateEndpoint+0x33a>
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	843b      	strh	r3, [r7, #32]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	8c3b      	ldrh	r3, [r7, #32]
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800619e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061bc:	83fb      	strh	r3, [r7, #30]
 80061be:	8bfb      	ldrh	r3, [r7, #30]
 80061c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061c4:	83fb      	strh	r3, [r7, #30]
 80061c6:	8bfb      	ldrh	r3, [r7, #30]
 80061c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061cc:	83fb      	strh	r3, [r7, #30]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	8bfb      	ldrh	r3, [r7, #30]
 80061da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	8013      	strh	r3, [r2, #0]
 80061ee:	e1c9      	b.n	8006584 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	78db      	ldrb	r3, [r3, #3]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d11e      	bne.n	8006236 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	441a      	add	r2, r3
 800621c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006228:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800622c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006230:	b29b      	uxth	r3, r3
 8006232:	8013      	strh	r3, [r2, #0]
 8006234:	e01d      	b.n	8006272 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800625e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626e:	b29b      	uxth	r3, r3
 8006270:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006282:	4413      	add	r3, r2
 8006284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	00da      	lsls	r2, r3, #3
 800628c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800628e:	4413      	add	r3, r2
 8006290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006294:	65bb      	str	r3, [r7, #88]	; 0x58
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	891b      	ldrh	r3, [r3, #8]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	b29b      	uxth	r3, r3
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	657b      	str	r3, [r7, #84]	; 0x54
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b6:	4413      	add	r3, r2
 80062b8:	657b      	str	r3, [r7, #84]	; 0x54
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	00da      	lsls	r2, r3, #3
 80062c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c2:	4413      	add	r3, r2
 80062c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062c8:	653b      	str	r3, [r7, #80]	; 0x50
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	895b      	ldrh	r3, [r3, #10]
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 8093 	bne.w	800640a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80062f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80062f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01b      	beq.n	8006338 <USB_ActivateEndpoint+0x4cc>
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006346:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01b      	beq.n	8006388 <USB_ActivateEndpoint+0x51c>
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	873b      	strh	r3, [r7, #56]	; 0x38
 80063a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80063a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	441a      	add	r2, r3
 80063ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006404:	b29b      	uxth	r3, r3
 8006406:	8013      	strh	r3, [r2, #0]
 8006408:	e0bc      	b.n	8006584 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800641a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800641e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01d      	beq.n	8006462 <USB_ActivateEndpoint+0x5f6>
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800644e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800645a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645e:	b29b      	uxth	r3, r3
 8006460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006472:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d01d      	beq.n	80064ba <USB_ActivateEndpoint+0x64e>
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006494:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	441a      	add	r2, r3
 80064a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	78db      	ldrb	r3, [r3, #3]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d024      	beq.n	800650c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064e0:	f083 0320 	eor.w	r3, r3, #32
 80064e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006506:	b29b      	uxth	r3, r3
 8006508:	8013      	strh	r3, [r2, #0]
 800650a:	e01d      	b.n	8006548 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006522:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	b29b      	uxth	r3, r3
 8006546:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800655a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006580:	b29b      	uxth	r3, r3
 8006582:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006584:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006588:	4618      	mov	r0, r3
 800658a:	3774      	adds	r7, #116	; 0x74
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006594:	b480      	push	{r7}
 8006596:	b08d      	sub	sp, #52	; 0x34
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	7b1b      	ldrb	r3, [r3, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 808e 	bne.w	80066c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d044      	beq.n	800663a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	81bb      	strh	r3, [r7, #12]
 80065be:	89bb      	ldrh	r3, [r7, #12]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01b      	beq.n	8006600 <USB_DeactivateEndpoint+0x6c>
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	817b      	strh	r3, [r7, #10]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	441a      	add	r2, r3
 80065ea:	897b      	ldrh	r3, [r7, #10]
 80065ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006616:	813b      	strh	r3, [r7, #8]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	441a      	add	r2, r3
 8006622:	893b      	ldrh	r3, [r7, #8]
 8006624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006634:	b29b      	uxth	r3, r3
 8006636:	8013      	strh	r3, [r2, #0]
 8006638:	e192      	b.n	8006960 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	827b      	strh	r3, [r7, #18]
 8006648:	8a7b      	ldrh	r3, [r7, #18]
 800664a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01b      	beq.n	800668a <USB_DeactivateEndpoint+0xf6>
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006668:	823b      	strh	r3, [r7, #16]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	8a3b      	ldrh	r3, [r7, #16]
 8006676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800669c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a0:	81fb      	strh	r3, [r7, #14]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	89fb      	ldrh	r3, [r7, #14]
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]
 80066c2:	e14d      	b.n	8006960 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f040 80a5 	bne.w	8006818 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	843b      	strh	r3, [r7, #32]
 80066dc:	8c3b      	ldrh	r3, [r7, #32]
 80066de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01b      	beq.n	800671e <USB_DeactivateEndpoint+0x18a>
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fc:	83fb      	strh	r3, [r7, #30]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	441a      	add	r2, r3
 8006708:	8bfb      	ldrh	r3, [r7, #30]
 800670a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671a:	b29b      	uxth	r3, r3
 800671c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	83bb      	strh	r3, [r7, #28]
 800672c:	8bbb      	ldrh	r3, [r7, #28]
 800672e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01b      	beq.n	800676e <USB_DeactivateEndpoint+0x1da>
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674c:	837b      	strh	r3, [r7, #26]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	8b7b      	ldrh	r3, [r7, #26]
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006766:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006784:	833b      	strh	r3, [r7, #24]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	441a      	add	r2, r3
 8006790:	8b3b      	ldrh	r3, [r7, #24]
 8006792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067bc:	82fb      	strh	r3, [r7, #22]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	8afb      	ldrh	r3, [r7, #22]
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f4:	82bb      	strh	r3, [r7, #20]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	441a      	add	r2, r3
 8006800:	8abb      	ldrh	r3, [r7, #20]
 8006802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	b29b      	uxth	r3, r3
 8006814:	8013      	strh	r3, [r2, #0]
 8006816:	e0a3      	b.n	8006960 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01b      	beq.n	8006868 <USB_DeactivateEndpoint+0x2d4>
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006846:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006864:	b29b      	uxth	r3, r3
 8006866:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006876:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01b      	beq.n	80068b8 <USB_DeactivateEndpoint+0x324>
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	853b      	strh	r3, [r7, #40]	; 0x28
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006906:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	441a      	add	r2, r3
 8006912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006924:	b29b      	uxth	r3, r3
 8006926:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	441a      	add	r2, r3
 800694a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800694c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695c:	b29b      	uxth	r3, r3
 800695e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3734      	adds	r7, #52	; 0x34
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b0c2      	sub	sp, #264	; 0x108
 8006972:	af00      	add	r7, sp, #0
 8006974:	1d3b      	adds	r3, r7, #4
 8006976:	6018      	str	r0, [r3, #0]
 8006978:	463b      	mov	r3, r7
 800697a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800697c:	463b      	mov	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b01      	cmp	r3, #1
 8006984:	f040 8509 	bne.w	800739a <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006988:	463b      	mov	r3, r7
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	463b      	mov	r3, r7
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	429a      	cmp	r2, r3
 8006996:	d905      	bls.n	80069a4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006998:	463b      	mov	r3, r7
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069a2:	e004      	b.n	80069ae <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80069a4:	463b      	mov	r3, r7
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	7b1b      	ldrb	r3, [r3, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d128      	bne.n	8006a0a <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80069b8:	463b      	mov	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6959      	ldr	r1, [r3, #20]
 80069be:	463b      	mov	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	88da      	ldrh	r2, [r3, #6]
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	1d38      	adds	r0, r7, #4
 80069cc:	6800      	ldr	r0, [r0, #0]
 80069ce:	f001 f9da 	bl	8007d86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069d2:	1d3b      	adds	r3, r7, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	1d3b      	adds	r3, r7, #4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4413      	add	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	00da      	lsls	r2, r3, #3
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	f000 bc9f 	b.w	8007348 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	78db      	ldrb	r3, [r3, #3]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	f040 8347 	bne.w	80070a4 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a16:	463b      	mov	r3, r7
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a1a      	ldr	r2, [r3, #32]
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	f240 82eb 	bls.w	8006ffe <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a1a      	ldr	r2, [r3, #32]
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a76:	1ad2      	subs	r2, r2, r3
 8006a78:	463b      	mov	r3, r7
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	463b      	mov	r3, r7
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8159 	beq.w	8006d4c <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d164      	bne.n	8006b74 <USB_EPStartXfer+0x206>
 8006aaa:	1d3b      	adds	r3, r7, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab0:	1d3b      	adds	r3, r7, #4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	4413      	add	r3, r2
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	00da      	lsls	r2, r3, #3
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8006ada:	d91c      	bls.n	8006b16 <USB_EPStartXfer+0x1a8>
 8006adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <USB_EPStartXfer+0x18e>
 8006af2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006af6:	3b01      	subs	r3, #1
 8006af8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006afc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	029b      	lsls	r3, r3, #10
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	801a      	strh	r2, [r3, #0]
 8006b14:	e04a      	b.n	8006bac <USB_EPStartXfer+0x23e>
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d112      	bne.n	8006b44 <USB_EPStartXfer+0x1d6>
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	801a      	strh	r2, [r3, #0]
 8006b42:	e033      	b.n	8006bac <USB_EPStartXfer+0x23e>
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <USB_EPStartXfer+0x1f6>
 8006b5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	e01b      	b.n	8006bac <USB_EPStartXfer+0x23e>
 8006b74:	463b      	mov	r3, r7
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d116      	bne.n	8006bac <USB_EPStartXfer+0x23e>
 8006b7e:	1d3b      	adds	r3, r7, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	4413      	add	r3, r2
 8006b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b90:	463b      	mov	r3, r7
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	00da      	lsls	r2, r3, #3
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006baa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	895b      	ldrh	r3, [r3, #10]
 8006bb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6959      	ldr	r1, [r3, #20]
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bc6:	1d38      	adds	r0, r7, #4
 8006bc8:	6800      	ldr	r0, [r0, #0]
 8006bca:	f001 f8dc 	bl	8007d86 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bce:	463b      	mov	r3, r7
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695a      	ldr	r2, [r3, #20]
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd8:	441a      	add	r2, r3
 8006bda:	463b      	mov	r3, r7
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006be0:	463b      	mov	r3, r7
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a1a      	ldr	r2, [r3, #32]
 8006be6:	463b      	mov	r3, r7
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d909      	bls.n	8006c04 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8006bf0:	463b      	mov	r3, r7
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6a1a      	ldr	r2, [r3, #32]
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	621a      	str	r2, [r3, #32]
 8006c02:	e008      	b.n	8006c16 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c04:	463b      	mov	r3, r7
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006c0e:	463b      	mov	r3, r7
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c16:	463b      	mov	r3, r7
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d164      	bne.n	8006cea <USB_EPStartXfer+0x37c>
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	1d3b      	adds	r3, r7, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	4413      	add	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	463b      	mov	r3, r7
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	00da      	lsls	r2, r3, #3
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	4413      	add	r3, r2
 8006c44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c50:	d91c      	bls.n	8006c8c <USB_EPStartXfer+0x31e>
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d104      	bne.n	8006c72 <USB_EPStartXfer+0x304>
 8006c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	029b      	lsls	r3, r3, #10
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	801a      	strh	r2, [r3, #0]
 8006c8a:	e04d      	b.n	8006d28 <USB_EPStartXfer+0x3ba>
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d112      	bne.n	8006cba <USB_EPStartXfer+0x34c>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e036      	b.n	8006d28 <USB_EPStartXfer+0x3ba>
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <USB_EPStartXfer+0x36c>
 8006cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	029b      	lsls	r3, r3, #10
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e01e      	b.n	8006d28 <USB_EPStartXfer+0x3ba>
 8006cea:	463b      	mov	r3, r7
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d119      	bne.n	8006d28 <USB_EPStartXfer+0x3ba>
 8006cf4:	1d3b      	adds	r3, r7, #4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	1d3b      	adds	r3, r7, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	4413      	add	r3, r2
 8006d0a:	623b      	str	r3, [r7, #32]
 8006d0c:	463b      	mov	r3, r7
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	00da      	lsls	r2, r3, #3
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	4413      	add	r3, r2
 8006d18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d28:	463b      	mov	r3, r7
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	891b      	ldrh	r3, [r3, #8]
 8006d2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d32:	463b      	mov	r3, r7
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6959      	ldr	r1, [r3, #20]
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d42:	1d38      	adds	r0, r7, #4
 8006d44:	6800      	ldr	r0, [r0, #0]
 8006d46:	f001 f81e 	bl	8007d86 <USB_WritePMA>
 8006d4a:	e2fd      	b.n	8007348 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	785b      	ldrb	r3, [r3, #1]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d164      	bne.n	8006e20 <USB_EPStartXfer+0x4b2>
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d5c:	1d3b      	adds	r3, r7, #4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6a:	4413      	add	r3, r2
 8006d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d6e:	463b      	mov	r3, r7
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	00da      	lsls	r2, r3, #3
 8006d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d78:	4413      	add	r3, r2
 8006d7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	2b3e      	cmp	r3, #62	; 0x3e
 8006d86:	d91c      	bls.n	8006dc2 <USB_EPStartXfer+0x454>
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <USB_EPStartXfer+0x43a>
 8006d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006da2:	3b01      	subs	r3, #1
 8006da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006da8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	029b      	lsls	r3, r3, #10
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e04d      	b.n	8006e5e <USB_EPStartXfer+0x4f0>
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d112      	bne.n	8006df0 <USB_EPStartXfer+0x482>
 8006dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e036      	b.n	8006e5e <USB_EPStartXfer+0x4f0>
 8006df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df4:	085b      	lsrs	r3, r3, #1
 8006df6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d004      	beq.n	8006e10 <USB_EPStartXfer+0x4a2>
 8006e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	029b      	lsls	r3, r3, #10
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	e01e      	b.n	8006e5e <USB_EPStartXfer+0x4f0>
 8006e20:	463b      	mov	r3, r7
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d119      	bne.n	8006e5e <USB_EPStartXfer+0x4f0>
 8006e2a:	1d3b      	adds	r3, r7, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e30:	1d3b      	adds	r3, r7, #4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3e:	4413      	add	r3, r2
 8006e40:	653b      	str	r3, [r7, #80]	; 0x50
 8006e42:	463b      	mov	r3, r7
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	00da      	lsls	r2, r3, #3
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e5e:	463b      	mov	r3, r7
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	891b      	ldrh	r3, [r3, #8]
 8006e64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e68:	463b      	mov	r3, r7
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6959      	ldr	r1, [r3, #20]
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e78:	1d38      	adds	r0, r7, #4
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	f000 ff83 	bl	8007d86 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e80:	463b      	mov	r3, r7
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8a:	441a      	add	r2, r3
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a1a      	ldr	r2, [r3, #32]
 8006e98:	463b      	mov	r3, r7
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d909      	bls.n	8006eb6 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6a1a      	ldr	r2, [r3, #32]
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eac:	1ad2      	subs	r2, r2, r3
 8006eae:	463b      	mov	r3, r7
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	621a      	str	r2, [r3, #32]
 8006eb4:	e008      	b.n	8006ec8 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ec8:	1d3b      	adds	r3, r7, #4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ece:	463b      	mov	r3, r7
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	785b      	ldrb	r3, [r3, #1]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d164      	bne.n	8006fa2 <USB_EPStartXfer+0x634>
 8006ed8:	1d3b      	adds	r3, r7, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ede:	1d3b      	adds	r3, r7, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	4413      	add	r3, r2
 8006eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	00da      	lsls	r2, r3, #3
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	4413      	add	r3, r2
 8006efc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f06:	2b3e      	cmp	r3, #62	; 0x3e
 8006f08:	d91c      	bls.n	8006f44 <USB_EPStartXfer+0x5d6>
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <USB_EPStartXfer+0x5bc>
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f24:	3b01      	subs	r3, #1
 8006f26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	029b      	lsls	r3, r3, #10
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	801a      	strh	r2, [r3, #0]
 8006f42:	e04a      	b.n	8006fda <USB_EPStartXfer+0x66c>
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d112      	bne.n	8006f72 <USB_EPStartXfer+0x604>
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6e:	801a      	strh	r2, [r3, #0]
 8006f70:	e033      	b.n	8006fda <USB_EPStartXfer+0x66c>
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <USB_EPStartXfer+0x624>
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	029b      	lsls	r3, r3, #10
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	e01b      	b.n	8006fda <USB_EPStartXfer+0x66c>
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d116      	bne.n	8006fda <USB_EPStartXfer+0x66c>
 8006fac:	1d3b      	adds	r3, r7, #4
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fba:	4413      	add	r3, r2
 8006fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	00da      	lsls	r2, r3, #3
 8006fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc8:	4413      	add	r3, r2
 8006fca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fda:	463b      	mov	r3, r7
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	895b      	ldrh	r3, [r3, #10]
 8006fe0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fe4:	463b      	mov	r3, r7
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6959      	ldr	r1, [r3, #20]
 8006fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ff4:	1d38      	adds	r0, r7, #4
 8006ff6:	6800      	ldr	r0, [r0, #0]
 8006ff8:	f000 fec5 	bl	8007d86 <USB_WritePMA>
 8006ffc:	e1a4      	b.n	8007348 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ffe:	463b      	mov	r3, r7
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007008:	1d3b      	adds	r3, r7, #4
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	463b      	mov	r3, r7
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800701e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007022:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800703c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800704c:	1d3b      	adds	r3, r7, #4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705a:	b29b      	uxth	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007060:	4413      	add	r3, r2
 8007062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007064:	463b      	mov	r3, r7
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800706e:	4413      	add	r3, r2
 8007070:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007074:	65bb      	str	r3, [r7, #88]	; 0x58
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707a:	b29a      	uxth	r2, r3
 800707c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800707e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	891b      	ldrh	r3, [r3, #8]
 8007086:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6959      	ldr	r1, [r3, #20]
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007094:	b29b      	uxth	r3, r3
 8007096:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800709a:	1d38      	adds	r0, r7, #4
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f000 fe72 	bl	8007d86 <USB_WritePMA>
 80070a2:	e151      	b.n	8007348 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80070a4:	463b      	mov	r3, r7
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6a1a      	ldr	r2, [r3, #32]
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	463b      	mov	r3, r7
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	463b      	mov	r3, r7
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 809b 	beq.w	8007208 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070d2:	1d3b      	adds	r3, r7, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	673b      	str	r3, [r7, #112]	; 0x70
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d164      	bne.n	80071ac <USB_EPStartXfer+0x83e>
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80070e8:	1d3b      	adds	r3, r7, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070f6:	4413      	add	r3, r2
 80070f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	00da      	lsls	r2, r3, #3
 8007102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007104:	4413      	add	r3, r2
 8007106:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800710a:	667b      	str	r3, [r7, #100]	; 0x64
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007110:	2b3e      	cmp	r3, #62	; 0x3e
 8007112:	d91c      	bls.n	800714e <USB_EPStartXfer+0x7e0>
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	2b00      	cmp	r3, #0
 8007128:	d104      	bne.n	8007134 <USB_EPStartXfer+0x7c6>
 800712a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800712e:	3b01      	subs	r3, #1
 8007130:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007134:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007138:	b29b      	uxth	r3, r3
 800713a:	029b      	lsls	r3, r3, #10
 800713c:	b29b      	uxth	r3, r3
 800713e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007146:	b29a      	uxth	r2, r3
 8007148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	e04a      	b.n	80071e4 <USB_EPStartXfer+0x876>
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007152:	2b00      	cmp	r3, #0
 8007154:	d112      	bne.n	800717c <USB_EPStartXfer+0x80e>
 8007156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007160:	b29a      	uxth	r2, r3
 8007162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007174:	b29a      	uxth	r2, r3
 8007176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	e033      	b.n	80071e4 <USB_EPStartXfer+0x876>
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <USB_EPStartXfer+0x82e>
 8007192:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007196:	3301      	adds	r3, #1
 8007198:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800719c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	029b      	lsls	r3, r3, #10
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	e01b      	b.n	80071e4 <USB_EPStartXfer+0x876>
 80071ac:	463b      	mov	r3, r7
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d116      	bne.n	80071e4 <USB_EPStartXfer+0x876>
 80071b6:	1d3b      	adds	r3, r7, #4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071be:	b29b      	uxth	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071c4:	4413      	add	r3, r2
 80071c6:	673b      	str	r3, [r7, #112]	; 0x70
 80071c8:	463b      	mov	r3, r7
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	00da      	lsls	r2, r3, #3
 80071d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071d2:	4413      	add	r3, r2
 80071d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071de:	b29a      	uxth	r2, r3
 80071e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80071e4:	463b      	mov	r3, r7
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	895b      	ldrh	r3, [r3, #10]
 80071ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ee:	463b      	mov	r3, r7
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6959      	ldr	r1, [r3, #20]
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071fe:	1d38      	adds	r0, r7, #4
 8007200:	6800      	ldr	r0, [r0, #0]
 8007202:	f000 fdc0 	bl	8007d86 <USB_WritePMA>
 8007206:	e09f      	b.n	8007348 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d164      	bne.n	80072dc <USB_EPStartXfer+0x96e>
 8007212:	1d3b      	adds	r3, r7, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007218:	1d3b      	adds	r3, r7, #4
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007220:	b29b      	uxth	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007226:	4413      	add	r3, r2
 8007228:	67fb      	str	r3, [r7, #124]	; 0x7c
 800722a:	463b      	mov	r3, r7
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	00da      	lsls	r2, r3, #3
 8007232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007234:	4413      	add	r3, r2
 8007236:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800723a:	67bb      	str	r3, [r7, #120]	; 0x78
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007240:	2b3e      	cmp	r3, #62	; 0x3e
 8007242:	d91c      	bls.n	800727e <USB_EPStartXfer+0x910>
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	095b      	lsrs	r3, r3, #5
 800724a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <USB_EPStartXfer+0x8f6>
 800725a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800725e:	3b01      	subs	r3, #1
 8007260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007264:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007268:	b29b      	uxth	r3, r3
 800726a:	029b      	lsls	r3, r3, #10
 800726c:	b29b      	uxth	r3, r3
 800726e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007276:	b29a      	uxth	r2, r3
 8007278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e053      	b.n	8007326 <USB_EPStartXfer+0x9b8>
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007282:	2b00      	cmp	r3, #0
 8007284:	d112      	bne.n	80072ac <USB_EPStartXfer+0x93e>
 8007286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007290:	b29a      	uxth	r2, r3
 8007292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a8:	801a      	strh	r2, [r3, #0]
 80072aa:	e03c      	b.n	8007326 <USB_EPStartXfer+0x9b8>
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b0:	085b      	lsrs	r3, r3, #1
 80072b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <USB_EPStartXfer+0x95e>
 80072c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80072c6:	3301      	adds	r3, #1
 80072c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	029b      	lsls	r3, r3, #10
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	e024      	b.n	8007326 <USB_EPStartXfer+0x9b8>
 80072dc:	463b      	mov	r3, r7
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d11f      	bne.n	8007326 <USB_EPStartXfer+0x9b8>
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072ee:	1d3b      	adds	r3, r7, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072fe:	4413      	add	r3, r2
 8007300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	00da      	lsls	r2, r3, #3
 800730c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007310:	4413      	add	r3, r2
 8007312:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007324:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	891b      	ldrh	r3, [r3, #8]
 800732c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007330:	463b      	mov	r3, r7
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6959      	ldr	r1, [r3, #20]
 8007336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733a:	b29b      	uxth	r3, r3
 800733c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007340:	1d38      	adds	r0, r7, #4
 8007342:	6800      	ldr	r0, [r0, #0]
 8007344:	f000 fd1f 	bl	8007d86 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007348:	1d3b      	adds	r3, r7, #4
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	463b      	mov	r3, r7
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007362:	817b      	strh	r3, [r7, #10]
 8007364:	897b      	ldrh	r3, [r7, #10]
 8007366:	f083 0310 	eor.w	r3, r3, #16
 800736a:	817b      	strh	r3, [r7, #10]
 800736c:	897b      	ldrh	r3, [r7, #10]
 800736e:	f083 0320 	eor.w	r3, r3, #32
 8007372:	817b      	strh	r3, [r7, #10]
 8007374:	1d3b      	adds	r3, r7, #4
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	463b      	mov	r3, r7
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	441a      	add	r2, r3
 8007382:	897b      	ldrh	r3, [r7, #10]
 8007384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007394:	b29b      	uxth	r3, r3
 8007396:	8013      	strh	r3, [r2, #0]
 8007398:	e3b5      	b.n	8007b06 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800739a:	463b      	mov	r3, r7
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	7b1b      	ldrb	r3, [r3, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 8090 	bne.w	80074c6 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80073a6:	463b      	mov	r3, r7
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d90e      	bls.n	80073d4 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80073b6:	463b      	mov	r3, r7
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80073c0:	463b      	mov	r3, r7
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	463b      	mov	r3, r7
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	619a      	str	r2, [r3, #24]
 80073d2:	e008      	b.n	80073e6 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 80073d4:	463b      	mov	r3, r7
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80073de:	463b      	mov	r3, r7
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2200      	movs	r2, #0
 80073e4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073ee:	1d3b      	adds	r3, r7, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073fe:	4413      	add	r3, r2
 8007400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007404:	463b      	mov	r3, r7
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	00da      	lsls	r2, r3, #3
 800740c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007410:	4413      	add	r3, r2
 8007412:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741e:	2b3e      	cmp	r3, #62	; 0x3e
 8007420:	d91d      	bls.n	800745e <USB_EPStartXfer+0xaf0>
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007430:	f003 031f 	and.w	r3, r3, #31
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <USB_EPStartXfer+0xad4>
 8007438:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800743c:	3b01      	subs	r3, #1
 800743e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007446:	b29b      	uxth	r3, r3
 8007448:	029b      	lsls	r3, r3, #10
 800744a:	b29b      	uxth	r3, r3
 800744c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007454:	b29a      	uxth	r2, r3
 8007456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	e325      	b.n	8007aaa <USB_EPStartXfer+0x113c>
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007462:	2b00      	cmp	r3, #0
 8007464:	d116      	bne.n	8007494 <USB_EPStartXfer+0xb26>
 8007466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29b      	uxth	r3, r3
 800746e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007472:	b29a      	uxth	r2, r3
 8007474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748a:	b29a      	uxth	r2, r3
 800748c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	e30a      	b.n	8007aaa <USB_EPStartXfer+0x113c>
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007498:	085b      	lsrs	r3, r3, #1
 800749a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <USB_EPStartXfer+0xb46>
 80074aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074ae:	3301      	adds	r3, #1
 80074b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	029b      	lsls	r3, r3, #10
 80074bc:	b29a      	uxth	r2, r3
 80074be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074c2:	801a      	strh	r2, [r3, #0]
 80074c4:	e2f1      	b.n	8007aaa <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074c6:	463b      	mov	r3, r7
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	78db      	ldrb	r3, [r3, #3]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	f040 818f 	bne.w	80077f0 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074d2:	463b      	mov	r3, r7
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	785b      	ldrb	r3, [r3, #1]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d175      	bne.n	80075c8 <USB_EPStartXfer+0xc5a>
 80074dc:	1d3b      	adds	r3, r7, #4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074e4:	1d3b      	adds	r3, r7, #4
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074f4:	4413      	add	r3, r2
 80074f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074fa:	463b      	mov	r3, r7
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	00da      	lsls	r2, r3, #3
 8007502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007506:	4413      	add	r3, r2
 8007508:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800750c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007510:	463b      	mov	r3, r7
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b3e      	cmp	r3, #62	; 0x3e
 8007518:	d91f      	bls.n	800755a <USB_EPStartXfer+0xbec>
 800751a:	463b      	mov	r3, r7
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	095b      	lsrs	r3, r3, #5
 8007522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007526:	463b      	mov	r3, r7
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <USB_EPStartXfer+0xbd0>
 8007534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007538:	3b01      	subs	r3, #1
 800753a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800753e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007542:	b29b      	uxth	r3, r3
 8007544:	029b      	lsls	r3, r3, #10
 8007546:	b29b      	uxth	r3, r3
 8007548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007550:	b29a      	uxth	r2, r3
 8007552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e05c      	b.n	8007614 <USB_EPStartXfer+0xca6>
 800755a:	463b      	mov	r3, r7
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d116      	bne.n	8007592 <USB_EPStartXfer+0xc24>
 8007564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007570:	b29a      	uxth	r2, r3
 8007572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	b29b      	uxth	r3, r3
 8007580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007588:	b29a      	uxth	r2, r3
 800758a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	e040      	b.n	8007614 <USB_EPStartXfer+0xca6>
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	085b      	lsrs	r3, r3, #1
 800759a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800759e:	463b      	mov	r3, r7
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <USB_EPStartXfer+0xc48>
 80075ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b0:	3301      	adds	r3, #1
 80075b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	029b      	lsls	r3, r3, #10
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	e025      	b.n	8007614 <USB_EPStartXfer+0xca6>
 80075c8:	463b      	mov	r3, r7
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d120      	bne.n	8007614 <USB_EPStartXfer+0xca6>
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075ea:	4413      	add	r3, r2
 80075ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075f0:	463b      	mov	r3, r7
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	00da      	lsls	r2, r3, #3
 80075f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075fc:	4413      	add	r3, r2
 80075fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007606:	463b      	mov	r3, r7
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	1d3b      	adds	r3, r7, #4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800761c:	463b      	mov	r3, r7
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d175      	bne.n	8007712 <USB_EPStartXfer+0xda4>
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800762e:	1d3b      	adds	r3, r7, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007636:	b29b      	uxth	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800763e:	4413      	add	r3, r2
 8007640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007644:	463b      	mov	r3, r7
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	00da      	lsls	r2, r3, #3
 800764c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007650:	4413      	add	r3, r2
 8007652:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007656:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800765a:	463b      	mov	r3, r7
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b3e      	cmp	r3, #62	; 0x3e
 8007662:	d91f      	bls.n	80076a4 <USB_EPStartXfer+0xd36>
 8007664:	463b      	mov	r3, r7
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007670:	463b      	mov	r3, r7
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <USB_EPStartXfer+0xd1a>
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	3b01      	subs	r3, #1
 8007684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800768c:	b29b      	uxth	r3, r3
 800768e:	029b      	lsls	r3, r3, #10
 8007690:	b29b      	uxth	r3, r3
 8007692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769a:	b29a      	uxth	r2, r3
 800769c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076a0:	801a      	strh	r2, [r3, #0]
 80076a2:	e058      	b.n	8007756 <USB_EPStartXfer+0xde8>
 80076a4:	463b      	mov	r3, r7
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d116      	bne.n	80076dc <USB_EPStartXfer+0xd6e>
 80076ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	e03c      	b.n	8007756 <USB_EPStartXfer+0xde8>
 80076dc:	463b      	mov	r3, r7
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076e8:	463b      	mov	r3, r7
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <USB_EPStartXfer+0xd92>
 80076f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fa:	3301      	adds	r3, #1
 80076fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007704:	b29b      	uxth	r3, r3
 8007706:	029b      	lsls	r3, r3, #10
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e021      	b.n	8007756 <USB_EPStartXfer+0xde8>
 8007712:	463b      	mov	r3, r7
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d11c      	bne.n	8007756 <USB_EPStartXfer+0xde8>
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007724:	b29b      	uxth	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800772c:	4413      	add	r3, r2
 800772e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007732:	463b      	mov	r3, r7
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	00da      	lsls	r2, r3, #3
 800773a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800773e:	4413      	add	r3, r2
 8007740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007748:	463b      	mov	r3, r7
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	b29a      	uxth	r2, r3
 8007750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007754:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007756:	463b      	mov	r3, r7
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 81a4 	beq.w	8007aaa <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007762:	1d3b      	adds	r3, r7, #4
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	463b      	mov	r3, r7
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007776:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800777a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <USB_EPStartXfer+0xe20>
 8007782:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10d      	bne.n	80077aa <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800778e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 8187 	bne.w	8007aaa <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800779c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80077a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 8180 	bne.w	8007aaa <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80077aa:	1d3b      	adds	r3, r7, #4
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	463b      	mov	r3, r7
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80077c8:	1d3b      	adds	r3, r7, #4
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	463b      	mov	r3, r7
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	441a      	add	r2, r3
 80077d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80077da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	8013      	strh	r3, [r2, #0]
 80077ee:	e15c      	b.n	8007aaa <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077f0:	463b      	mov	r3, r7
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	78db      	ldrb	r3, [r3, #3]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	f040 8155 	bne.w	8007aa6 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80077fc:	463b      	mov	r3, r7
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	429a      	cmp	r2, r3
 800780a:	d90e      	bls.n	800782a <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007816:	463b      	mov	r3, r7
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699a      	ldr	r2, [r3, #24]
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007820:	1ad2      	subs	r2, r2, r3
 8007822:	463b      	mov	r3, r7
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	619a      	str	r2, [r3, #24]
 8007828:	e008      	b.n	800783c <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800782a:	463b      	mov	r3, r7
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007834:	463b      	mov	r3, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2200      	movs	r2, #0
 800783a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800783c:	463b      	mov	r3, r7
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	785b      	ldrb	r3, [r3, #1]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d16f      	bne.n	8007926 <USB_EPStartXfer+0xfb8>
 8007846:	1d3b      	adds	r3, r7, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800784e:	1d3b      	adds	r3, r7, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007856:	b29b      	uxth	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800785e:	4413      	add	r3, r2
 8007860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	00da      	lsls	r2, r3, #3
 800786c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007870:	4413      	add	r3, r2
 8007872:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787e:	2b3e      	cmp	r3, #62	; 0x3e
 8007880:	d91d      	bls.n	80078be <USB_EPStartXfer+0xf50>
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <USB_EPStartXfer+0xf34>
 8007898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800789c:	3b01      	subs	r3, #1
 800789e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	029b      	lsls	r3, r3, #10
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	e058      	b.n	8007970 <USB_EPStartXfer+0x1002>
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d116      	bne.n	80078f4 <USB_EPStartXfer+0xf86>
 80078c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078d8:	801a      	strh	r2, [r3, #0]
 80078da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e03d      	b.n	8007970 <USB_EPStartXfer+0x1002>
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f8:	085b      	lsrs	r3, r3, #1
 80078fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d004      	beq.n	8007914 <USB_EPStartXfer+0xfa6>
 800790a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800790e:	3301      	adds	r3, #1
 8007910:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007918:	b29b      	uxth	r3, r3
 800791a:	029b      	lsls	r3, r3, #10
 800791c:	b29a      	uxth	r2, r3
 800791e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	e024      	b.n	8007970 <USB_EPStartXfer+0x1002>
 8007926:	463b      	mov	r3, r7
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d11f      	bne.n	8007970 <USB_EPStartXfer+0x1002>
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007938:	1d3b      	adds	r3, r7, #4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007948:	4413      	add	r3, r2
 800794a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800794e:	463b      	mov	r3, r7
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	00da      	lsls	r2, r3, #3
 8007956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800795a:	4413      	add	r3, r2
 800795c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007968:	b29a      	uxth	r2, r3
 800796a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	1d3b      	adds	r3, r7, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007978:	463b      	mov	r3, r7
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d16f      	bne.n	8007a62 <USB_EPStartXfer+0x10f4>
 8007982:	1d3b      	adds	r3, r7, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800798a:	1d3b      	adds	r3, r7, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007992:	b29b      	uxth	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800799a:	4413      	add	r3, r2
 800799c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079a0:	463b      	mov	r3, r7
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	00da      	lsls	r2, r3, #3
 80079a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079ac:	4413      	add	r3, r2
 80079ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ba:	2b3e      	cmp	r3, #62	; 0x3e
 80079bc:	d91d      	bls.n	80079fa <USB_EPStartXfer+0x108c>
 80079be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <USB_EPStartXfer+0x1070>
 80079d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079d8:	3b01      	subs	r3, #1
 80079da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	029b      	lsls	r3, r3, #10
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	e057      	b.n	8007aaa <USB_EPStartXfer+0x113c>
 80079fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d116      	bne.n	8007a30 <USB_EPStartXfer+0x10c2>
 8007a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a14:	801a      	strh	r2, [r3, #0]
 8007a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	e03c      	b.n	8007aaa <USB_EPStartXfer+0x113c>
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d004      	beq.n	8007a50 <USB_EPStartXfer+0x10e2>
 8007a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	029b      	lsls	r3, r3, #10
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	e023      	b.n	8007aaa <USB_EPStartXfer+0x113c>
 8007a62:	463b      	mov	r3, r7
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d11e      	bne.n	8007aaa <USB_EPStartXfer+0x113c>
 8007a6c:	1d3b      	adds	r3, r7, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	461a      	mov	r2, r3
 8007a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a82:	463b      	mov	r3, r7
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	00da      	lsls	r2, r3, #3
 8007a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a8e:	4413      	add	r3, r2
 8007a90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	e001      	b.n	8007aaa <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e02e      	b.n	8007b08 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007aaa:	1d3b      	adds	r3, r7, #4
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	463b      	mov	r3, r7
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ac8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007acc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ad0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ad4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ad8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007adc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ae0:	1d3b      	adds	r3, r7, #4
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	441a      	add	r2, r3
 8007aee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d020      	beq.n	8007b66 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b3a:	81bb      	strh	r3, [r7, #12]
 8007b3c:	89bb      	ldrh	r3, [r7, #12]
 8007b3e:	f083 0310 	eor.w	r3, r3, #16
 8007b42:	81bb      	strh	r3, [r7, #12]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	441a      	add	r2, r3
 8007b4e:	89bb      	ldrh	r3, [r7, #12]
 8007b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	8013      	strh	r3, [r2, #0]
 8007b64:	e01f      	b.n	8007ba6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7c:	81fb      	strh	r3, [r7, #14]
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
 8007b80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b84:	81fb      	strh	r3, [r7, #14]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	441a      	add	r2, r3
 8007b90:	89fb      	ldrh	r3, [r7, #14]
 8007b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	7b1b      	ldrb	r3, [r3, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 809d 	bne.w	8007d02 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	785b      	ldrb	r3, [r3, #1]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d04c      	beq.n	8007c6a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	823b      	strh	r3, [r7, #16]
 8007bde:	8a3b      	ldrh	r3, [r7, #16]
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01b      	beq.n	8007c20 <USB_EPClearStall+0x6c>
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfe:	81fb      	strh	r3, [r7, #14]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	441a      	add	r2, r3
 8007c0a:	89fb      	ldrh	r3, [r7, #14]
 8007c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	78db      	ldrb	r3, [r3, #3]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d06c      	beq.n	8007d02 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3e:	81bb      	strh	r3, [r7, #12]
 8007c40:	89bb      	ldrh	r3, [r7, #12]
 8007c42:	f083 0320 	eor.w	r3, r3, #32
 8007c46:	81bb      	strh	r3, [r7, #12]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	441a      	add	r2, r3
 8007c52:	89bb      	ldrh	r3, [r7, #12]
 8007c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	8013      	strh	r3, [r2, #0]
 8007c68:	e04b      	b.n	8007d02 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	82fb      	strh	r3, [r7, #22]
 8007c78:	8afb      	ldrh	r3, [r7, #22]
 8007c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d01b      	beq.n	8007cba <USB_EPClearStall+0x106>
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c98:	82bb      	strh	r3, [r7, #20]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	441a      	add	r2, r3
 8007ca4:	8abb      	ldrh	r3, [r7, #20]
 8007ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd0:	827b      	strh	r3, [r7, #18]
 8007cd2:	8a7b      	ldrh	r3, [r7, #18]
 8007cd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cd8:	827b      	strh	r3, [r7, #18]
 8007cda:	8a7b      	ldrh	r3, [r7, #18]
 8007cdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ce0:	827b      	strh	r3, [r7, #18]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	441a      	add	r2, r3
 8007cec:	8a7b      	ldrh	r3, [r7, #18]
 8007cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2280      	movs	r2, #128	; 0x80
 8007d26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d78:	68fb      	ldr	r3, [r7, #12]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b08d      	sub	sp, #52	; 0x34
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	4611      	mov	r1, r2
 8007d92:	461a      	mov	r2, r3
 8007d94:	460b      	mov	r3, r1
 8007d96:	80fb      	strh	r3, [r7, #6]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d9c:	88bb      	ldrh	r3, [r7, #4]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	085b      	lsrs	r3, r3, #1
 8007da2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dac:	88fa      	ldrh	r2, [r7, #6]
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007db6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dbc:	e01b      	b.n	8007df6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	3302      	adds	r3, #2
 8007de8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	3301      	adds	r3, #1
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	3b01      	subs	r3, #1
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e0      	bne.n	8007dbe <USB_WritePMA+0x38>
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	3734      	adds	r7, #52	; 0x34
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b08b      	sub	sp, #44	; 0x2c
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	4611      	mov	r1, r2
 8007e16:	461a      	mov	r2, r3
 8007e18:	460b      	mov	r3, r1
 8007e1a:	80fb      	strh	r3, [r7, #6]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e20:	88bb      	ldrh	r3, [r7, #4]
 8007e22:	085b      	lsrs	r3, r3, #1
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e30:	88fa      	ldrh	r2, [r7, #6]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e3a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e40:	e018      	b.n	8007e74 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	0a1b      	lsrs	r3, r3, #8
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	3b01      	subs	r3, #1
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e3      	bne.n	8007e42 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e7a:	88bb      	ldrh	r3, [r7, #4]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	701a      	strb	r2, [r3, #0]
  }
}
 8007e96:	bf00      	nop
 8007e98:	372c      	adds	r7, #44	; 0x2c
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007eae:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007eb2:	f002 f953 	bl	800a15c <USBD_static_malloc>
 8007eb6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e066      	b.n	8007f98 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7c1b      	ldrb	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d119      	bne.n	8007f0e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ede:	2202      	movs	r2, #2
 8007ee0:	2181      	movs	r1, #129	; 0x81
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 ffdf 	bl	8009ea6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 ffd5 	bl	8009ea6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2210      	movs	r2, #16
 8007f08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007f0c:	e016      	b.n	8007f3c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f0e:	2340      	movs	r3, #64	; 0x40
 8007f10:	2202      	movs	r2, #2
 8007f12:	2181      	movs	r1, #129	; 0x81
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 ffc6 	bl	8009ea6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f20:	2340      	movs	r3, #64	; 0x40
 8007f22:	2202      	movs	r2, #2
 8007f24:	2101      	movs	r1, #1
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 ffbd 	bl	8009ea6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2210      	movs	r2, #16
 8007f38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f3c:	2308      	movs	r3, #8
 8007f3e:	2203      	movs	r2, #3
 8007f40:	2182      	movs	r1, #130	; 0x82
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 ffaf 	bl	8009ea6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7c1b      	ldrb	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f002 f881 	bl	800a086 <USBD_LL_PrepareReceive>
 8007f84:	e007      	b.n	8007f96 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f8c:	2340      	movs	r3, #64	; 0x40
 8007f8e:	2101      	movs	r1, #1
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f002 f878 	bl	800a086 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007fac:	2181      	movs	r1, #129	; 0x81
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 ff9f 	bl	8009ef2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007fba:	2101      	movs	r1, #1
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 ff98 	bl	8009ef2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007fca:	2182      	movs	r1, #130	; 0x82
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 ff90 	bl	8009ef2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00e      	beq.n	800800a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f002 f8bb 	bl	800a178 <USBD_static_free>
    pdev->pClassData = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008024:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	e0af      	b.n	800819c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008044:	2b00      	cmp	r3, #0
 8008046:	d03f      	beq.n	80080c8 <USBD_CDC_Setup+0xb4>
 8008048:	2b20      	cmp	r3, #32
 800804a:	f040 809f 	bne.w	800818c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	88db      	ldrh	r3, [r3, #6]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d02e      	beq.n	80080b4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b25b      	sxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	da16      	bge.n	800808e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800806c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	88d2      	ldrh	r2, [r2, #6]
 8008072:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	88db      	ldrh	r3, [r3, #6]
 8008078:	2b07      	cmp	r3, #7
 800807a:	bf28      	it	cs
 800807c:	2307      	movcs	r3, #7
 800807e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	89fa      	ldrh	r2, [r7, #14]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 facf 	bl	800962a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800808c:	e085      	b.n	800819a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	785a      	ldrb	r2, [r3, #1]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	88db      	ldrh	r3, [r3, #6]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80080a4:	6939      	ldr	r1, [r7, #16]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	88db      	ldrh	r3, [r3, #6]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 fae8 	bl	8009682 <USBD_CtlPrepareRx>
      break;
 80080b2:	e072      	b.n	800819a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	7850      	ldrb	r0, [r2, #1]
 80080c0:	2200      	movs	r2, #0
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	4798      	blx	r3
      break;
 80080c6:	e068      	b.n	800819a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b0b      	cmp	r3, #11
 80080ce:	d852      	bhi.n	8008176 <USBD_CDC_Setup+0x162>
 80080d0:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <USBD_CDC_Setup+0xc4>)
 80080d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d6:	bf00      	nop
 80080d8:	08008109 	.word	0x08008109
 80080dc:	08008185 	.word	0x08008185
 80080e0:	08008177 	.word	0x08008177
 80080e4:	08008177 	.word	0x08008177
 80080e8:	08008177 	.word	0x08008177
 80080ec:	08008177 	.word	0x08008177
 80080f0:	08008177 	.word	0x08008177
 80080f4:	08008177 	.word	0x08008177
 80080f8:	08008177 	.word	0x08008177
 80080fc:	08008177 	.word	0x08008177
 8008100:	08008133 	.word	0x08008133
 8008104:	0800815d 	.word	0x0800815d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b03      	cmp	r3, #3
 8008112:	d107      	bne.n	8008124 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008114:	f107 030a 	add.w	r3, r7, #10
 8008118:	2202      	movs	r2, #2
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 fa84 	bl	800962a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008122:	e032      	b.n	800818a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fa0e 	bl	8009548 <USBD_CtlError>
            ret = USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	75fb      	strb	r3, [r7, #23]
          break;
 8008130:	e02b      	b.n	800818a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b03      	cmp	r3, #3
 800813c:	d107      	bne.n	800814e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800813e:	f107 030d 	add.w	r3, r7, #13
 8008142:	2201      	movs	r2, #1
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 fa6f 	bl	800962a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800814c:	e01d      	b.n	800818a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 f9f9 	bl	8009548 <USBD_CtlError>
            ret = USBD_FAIL;
 8008156:	2303      	movs	r3, #3
 8008158:	75fb      	strb	r3, [r7, #23]
          break;
 800815a:	e016      	b.n	800818a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b03      	cmp	r3, #3
 8008166:	d00f      	beq.n	8008188 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 f9ec 	bl	8009548 <USBD_CtlError>
            ret = USBD_FAIL;
 8008170:	2303      	movs	r3, #3
 8008172:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008174:	e008      	b.n	8008188 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 f9e5 	bl	8009548 <USBD_CtlError>
          ret = USBD_FAIL;
 800817e:	2303      	movs	r3, #3
 8008180:	75fb      	strb	r3, [r7, #23]
          break;
 8008182:	e002      	b.n	800818a <USBD_CDC_Setup+0x176>
          break;
 8008184:	bf00      	nop
 8008186:	e008      	b.n	800819a <USBD_CDC_Setup+0x186>
          break;
 8008188:	bf00      	nop
      }
      break;
 800818a:	e006      	b.n	800819a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f9da 	bl	8009548 <USBD_CtlError>
      ret = USBD_FAIL;
 8008194:	2303      	movs	r3, #3
 8008196:	75fb      	strb	r3, [r7, #23]
      break;
 8008198:	bf00      	nop
  }

  return (uint8_t)ret;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e04f      	b.n	8008266 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	3318      	adds	r3, #24
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d029      	beq.n	8008238 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3318      	adds	r3, #24
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	78f9      	ldrb	r1, [r7, #3]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	460b      	mov	r3, r1
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	4403      	add	r3, r0
 8008204:	3338      	adds	r3, #56	; 0x38
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	fbb2 f1f3 	udiv	r1, r2, r3
 800820c:	fb03 f301 	mul.w	r3, r3, r1
 8008210:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008212:	2b00      	cmp	r3, #0
 8008214:	d110      	bne.n	8008238 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	3318      	adds	r3, #24
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800822a:	78f9      	ldrb	r1, [r7, #3]
 800822c:	2300      	movs	r3, #0
 800822e:	2200      	movs	r2, #0
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 ff07 	bl	800a044 <USBD_LL_Transmit>
 8008236:	e015      	b.n	8008264 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008260:	78fa      	ldrb	r2, [r7, #3]
 8008262:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008280:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	e015      	b.n	80082bc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 ff17 	bl	800a0c8 <USBD_LL_GetRxDataSize>
 800829a:	4602      	mov	r2, r0
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082b6:	4611      	mov	r1, r2
 80082b8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80082da:	2303      	movs	r3, #3
 80082dc:	e01b      	b.n	8008316 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d015      	beq.n	8008314 <USBD_CDC_EP0_RxReady+0x50>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082ee:	2bff      	cmp	r3, #255	; 0xff
 80082f0:	d010      	beq.n	8008314 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008300:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008308:	b292      	uxth	r2, r2
 800830a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	22ff      	movs	r2, #255	; 0xff
 8008310:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2243      	movs	r2, #67	; 0x43
 800832c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800832e:	4b03      	ldr	r3, [pc, #12]	; (800833c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	200000b8 	.word	0x200000b8

08008340 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2243      	movs	r2, #67	; 0x43
 800834c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800834e:	4b03      	ldr	r3, [pc, #12]	; (800835c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	20000074 	.word	0x20000074

08008360 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2243      	movs	r2, #67	; 0x43
 800836c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800836e:	4b03      	ldr	r3, [pc, #12]	; (800837c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	200000fc 	.word	0x200000fc

08008380 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	220a      	movs	r2, #10
 800838c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800838e:	4b03      	ldr	r3, [pc, #12]	; (800839c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20000030 	.word	0x20000030

080083a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e004      	b.n	80083be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b087      	sub	sp, #28
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083dc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e008      	b.n	80083fa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008416:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800841e:	2303      	movs	r3, #3
 8008420:	e004      	b.n	800842c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008446:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008456:	2303      	movs	r3, #3
 8008458:	e01a      	b.n	8008490 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008460:	2b00      	cmp	r3, #0
 8008462:	d114      	bne.n	800848e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2201      	movs	r2, #1
 8008468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008482:	2181      	movs	r1, #129	; 0x81
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fddd 	bl	800a044 <USBD_LL_Transmit>

    ret = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800848e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e016      	b.n	80084e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	7c1b      	ldrb	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c8:	2101      	movs	r1, #1
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 fddb 	bl	800a086 <USBD_LL_PrepareReceive>
 80084d0:	e007      	b.n	80084e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084d8:	2340      	movs	r3, #64	; 0x40
 80084da:	2101      	movs	r1, #1
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 fdd2 	bl	800a086 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008500:	2303      	movs	r3, #3
 8008502:	e01f      	b.n	8008544 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	79fa      	ldrb	r2, [r7, #7]
 8008536:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f001 fc37 	bl	8009dac <USBD_LL_Init>
 800853e:	4603      	mov	r3, r0
 8008540:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008542:	7dfb      	ldrb	r3, [r7, #23]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008560:	2303      	movs	r3, #3
 8008562:	e016      	b.n	8008592 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	f107 020e 	add.w	r2, r7, #14
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	4602      	mov	r2, r0
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f001 fc64 	bl	8009e70 <USBD_LL_Start>
 80085a8:	4603      	mov	r3, r0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085d4:	2303      	movs	r3, #3
 80085d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d009      	beq.n	80085f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	4611      	mov	r1, r2
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	4611      	mov	r1, r2
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
  }

  return USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 ff46 	bl	80094d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008664:	f003 031f 	and.w	r3, r3, #31
 8008668:	2b02      	cmp	r3, #2
 800866a:	d01a      	beq.n	80086a2 <USBD_LL_SetupStage+0x72>
 800866c:	2b02      	cmp	r3, #2
 800866e:	d822      	bhi.n	80086b6 <USBD_LL_SetupStage+0x86>
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <USBD_LL_SetupStage+0x4a>
 8008674:	2b01      	cmp	r3, #1
 8008676:	d00a      	beq.n	800868e <USBD_LL_SetupStage+0x5e>
 8008678:	e01d      	b.n	80086b6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9ee 	bl	8008a64 <USBD_StdDevReq>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
      break;
 800868c:	e020      	b.n	80086d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa52 	bl	8008b40 <USBD_StdItfReq>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]
      break;
 80086a0:	e016      	b.n	80086d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa91 	bl	8008bd2 <USBD_StdEPReq>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]
      break;
 80086b4:	e00c      	b.n	80086d0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 fc33 	bl	8009f30 <USBD_LL_StallEP>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]
      break;
 80086ce:	bf00      	nop
  }

  return ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	460b      	mov	r3, r1
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086e8:	7afb      	ldrb	r3, [r7, #11]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d138      	bne.n	8008760 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d14a      	bne.n	8008796 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	429a      	cmp	r2, r3
 800870a:	d913      	bls.n	8008734 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	1ad2      	subs	r2, r2, r3
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	4293      	cmp	r3, r2
 8008724:	bf28      	it	cs
 8008726:	4613      	movcs	r3, r2
 8008728:	461a      	mov	r2, r3
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 ffc5 	bl	80096bc <USBD_CtlContinueRx>
 8008732:	e030      	b.n	8008796 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b03      	cmp	r3, #3
 800873e:	d10b      	bne.n	8008758 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 ffc0 	bl	80096de <USBD_CtlSendStatus>
 800875e:	e01a      	b.n	8008796 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b03      	cmp	r3, #3
 800876a:	d114      	bne.n	8008796 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00e      	beq.n	8008796 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	7afa      	ldrb	r2, [r7, #11]
 8008782:	4611      	mov	r1, r2
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	4798      	blx	r3
 8008788:	4603      	mov	r3, r0
 800878a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	e000      	b.n	8008798 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	460b      	mov	r3, r1
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d16b      	bne.n	800888c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3314      	adds	r3, #20
 80087b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d156      	bne.n	8008872 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d914      	bls.n	80087fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	1ad2      	subs	r2, r2, r3
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 ff3a 	bl	8009660 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ec:	2300      	movs	r3, #0
 80087ee:	2200      	movs	r2, #0
 80087f0:	2100      	movs	r1, #0
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f001 fc47 	bl	800a086 <USBD_LL_PrepareReceive>
 80087f8:	e03b      	b.n	8008872 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	429a      	cmp	r2, r3
 8008804:	d11c      	bne.n	8008840 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800880e:	429a      	cmp	r2, r3
 8008810:	d316      	bcc.n	8008840 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800881c:	429a      	cmp	r2, r3
 800881e:	d20f      	bcs.n	8008840 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008820:	2200      	movs	r2, #0
 8008822:	2100      	movs	r1, #0
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 ff1b 	bl	8009660 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008832:	2300      	movs	r3, #0
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f001 fc24 	bl	800a086 <USBD_LL_PrepareReceive>
 800883e:	e018      	b.n	8008872 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b03      	cmp	r3, #3
 800884a:	d10b      	bne.n	8008864 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008864:	2180      	movs	r1, #128	; 0x80
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f001 fb62 	bl	8009f30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 ff49 	bl	8009704 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008878:	2b01      	cmp	r3, #1
 800887a:	d122      	bne.n	80088c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7ff fe98 	bl	80085b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800888a:	e01a      	b.n	80088c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b03      	cmp	r3, #3
 8008896:	d114      	bne.n	80088c2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	7afa      	ldrb	r2, [r7, #11]
 80088ae:	4611      	mov	r1, r2
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	4798      	blx	r3
 80088b4:	4603      	mov	r3, r0
 80088b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	e000      	b.n	80088c4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e02f      	b.n	8008960 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00f      	beq.n	800892a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6852      	ldr	r2, [r2, #4]
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	4611      	mov	r1, r2
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800892a:	2340      	movs	r3, #64	; 0x40
 800892c:	2200      	movs	r2, #0
 800892e:	2100      	movs	r1, #0
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 fab8 	bl	8009ea6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2240      	movs	r2, #64	; 0x40
 8008942:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008946:	2340      	movs	r3, #64	; 0x40
 8008948:	2200      	movs	r2, #0
 800894a:	2180      	movs	r1, #128	; 0x80
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 faaa 	bl	8009ea6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2240      	movs	r2, #64	; 0x40
 800895c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008996:	b2da      	uxtb	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2204      	movs	r2, #4
 80089a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d106      	bne.n	80089d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e012      	b.n	8008a20 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d10b      	bne.n	8008a1e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a46:	8a3b      	ldrh	r3, [r7, #16]
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	b21a      	sxth	r2, r3
 8008a4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	b21b      	sxth	r3, r3
 8008a54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a56:	89fb      	ldrh	r3, [r7, #14]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a7a:	2b40      	cmp	r3, #64	; 0x40
 8008a7c:	d005      	beq.n	8008a8a <USBD_StdDevReq+0x26>
 8008a7e:	2b40      	cmp	r3, #64	; 0x40
 8008a80:	d853      	bhi.n	8008b2a <USBD_StdDevReq+0xc6>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00b      	beq.n	8008a9e <USBD_StdDevReq+0x3a>
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	d14f      	bne.n	8008b2a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9c:	e04a      	b.n	8008b34 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	785b      	ldrb	r3, [r3, #1]
 8008aa2:	2b09      	cmp	r3, #9
 8008aa4:	d83b      	bhi.n	8008b1e <USBD_StdDevReq+0xba>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <USBD_StdDevReq+0x48>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008b01 	.word	0x08008b01
 8008ab0:	08008b15 	.word	0x08008b15
 8008ab4:	08008b1f 	.word	0x08008b1f
 8008ab8:	08008b0b 	.word	0x08008b0b
 8008abc:	08008b1f 	.word	0x08008b1f
 8008ac0:	08008adf 	.word	0x08008adf
 8008ac4:	08008ad5 	.word	0x08008ad5
 8008ac8:	08008b1f 	.word	0x08008b1f
 8008acc:	08008af7 	.word	0x08008af7
 8008ad0:	08008ae9 	.word	0x08008ae9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f9de 	bl	8008e98 <USBD_GetDescriptor>
          break;
 8008adc:	e024      	b.n	8008b28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fb6d 	bl	80091c0 <USBD_SetAddress>
          break;
 8008ae6:	e01f      	b.n	8008b28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fbac 	bl	8009248 <USBD_SetConfig>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
          break;
 8008af4:	e018      	b.n	8008b28 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fc4b 	bl	8009394 <USBD_GetConfig>
          break;
 8008afe:	e013      	b.n	8008b28 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fc7c 	bl	8009400 <USBD_GetStatus>
          break;
 8008b08:	e00e      	b.n	8008b28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fcab 	bl	8009468 <USBD_SetFeature>
          break;
 8008b12:	e009      	b.n	8008b28 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fcba 	bl	8009490 <USBD_ClrFeature>
          break;
 8008b1c:	e004      	b.n	8008b28 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fd11 	bl	8009548 <USBD_CtlError>
          break;
 8008b26:	bf00      	nop
      }
      break;
 8008b28:	e004      	b.n	8008b34 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fd0b 	bl	8009548 <USBD_CtlError>
      break;
 8008b32:	bf00      	nop
  }

  return ret;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop

08008b40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b56:	2b40      	cmp	r3, #64	; 0x40
 8008b58:	d005      	beq.n	8008b66 <USBD_StdItfReq+0x26>
 8008b5a:	2b40      	cmp	r3, #64	; 0x40
 8008b5c:	d82f      	bhi.n	8008bbe <USBD_StdItfReq+0x7e>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <USBD_StdItfReq+0x26>
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	d12b      	bne.n	8008bbe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d81d      	bhi.n	8008bb0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	889b      	ldrh	r3, [r3, #4]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d813      	bhi.n	8008ba6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	4798      	blx	r3
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	88db      	ldrh	r3, [r3, #6]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d110      	bne.n	8008bba <USBD_StdItfReq+0x7a>
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10d      	bne.n	8008bba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fd9d 	bl	80096de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ba4:	e009      	b.n	8008bba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fccd 	bl	8009548 <USBD_CtlError>
          break;
 8008bae:	e004      	b.n	8008bba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fcc8 	bl	8009548 <USBD_CtlError>
          break;
 8008bb8:	e000      	b.n	8008bbc <USBD_StdItfReq+0x7c>
          break;
 8008bba:	bf00      	nop
      }
      break;
 8008bbc:	e004      	b.n	8008bc8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fcc1 	bl	8009548 <USBD_CtlError>
      break;
 8008bc6:	bf00      	nop
  }

  return ret;
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	889b      	ldrh	r3, [r3, #4]
 8008be4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bee:	2b40      	cmp	r3, #64	; 0x40
 8008bf0:	d007      	beq.n	8008c02 <USBD_StdEPReq+0x30>
 8008bf2:	2b40      	cmp	r3, #64	; 0x40
 8008bf4:	f200 8145 	bhi.w	8008e82 <USBD_StdEPReq+0x2b0>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00c      	beq.n	8008c16 <USBD_StdEPReq+0x44>
 8008bfc:	2b20      	cmp	r3, #32
 8008bfe:	f040 8140 	bne.w	8008e82 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]
      break;
 8008c14:	e13a      	b.n	8008e8c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	785b      	ldrb	r3, [r3, #1]
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d007      	beq.n	8008c2e <USBD_StdEPReq+0x5c>
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	f300 8129 	bgt.w	8008e76 <USBD_StdEPReq+0x2a4>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d07f      	beq.n	8008d28 <USBD_StdEPReq+0x156>
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d03c      	beq.n	8008ca6 <USBD_StdEPReq+0xd4>
 8008c2c:	e123      	b.n	8008e76 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d002      	beq.n	8008c40 <USBD_StdEPReq+0x6e>
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d016      	beq.n	8008c6c <USBD_StdEPReq+0x9a>
 8008c3e:	e02c      	b.n	8008c9a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00d      	beq.n	8008c62 <USBD_StdEPReq+0x90>
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	2b80      	cmp	r3, #128	; 0x80
 8008c4a:	d00a      	beq.n	8008c62 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 f96d 	bl	8009f30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c56:	2180      	movs	r1, #128	; 0x80
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 f969 	bl	8009f30 <USBD_LL_StallEP>
 8008c5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c60:	e020      	b.n	8008ca4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fc6f 	bl	8009548 <USBD_CtlError>
              break;
 8008c6a:	e01b      	b.n	8008ca4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	885b      	ldrh	r3, [r3, #2]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10e      	bne.n	8008c92 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00b      	beq.n	8008c92 <USBD_StdEPReq+0xc0>
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b80      	cmp	r3, #128	; 0x80
 8008c7e:	d008      	beq.n	8008c92 <USBD_StdEPReq+0xc0>
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	88db      	ldrh	r3, [r3, #6]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d104      	bne.n	8008c92 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 f94f 	bl	8009f30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fd23 	bl	80096de <USBD_CtlSendStatus>

              break;
 8008c98:	e004      	b.n	8008ca4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fc53 	bl	8009548 <USBD_CtlError>
              break;
 8008ca2:	bf00      	nop
          }
          break;
 8008ca4:	e0ec      	b.n	8008e80 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d002      	beq.n	8008cb8 <USBD_StdEPReq+0xe6>
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d016      	beq.n	8008ce4 <USBD_StdEPReq+0x112>
 8008cb6:	e030      	b.n	8008d1a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00d      	beq.n	8008cda <USBD_StdEPReq+0x108>
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b80      	cmp	r3, #128	; 0x80
 8008cc2:	d00a      	beq.n	8008cda <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f931 	bl	8009f30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cce:	2180      	movs	r1, #128	; 0x80
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f92d 	bl	8009f30 <USBD_LL_StallEP>
 8008cd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cd8:	e025      	b.n	8008d26 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fc33 	bl	8009548 <USBD_CtlError>
              break;
 8008ce2:	e020      	b.n	8008d26 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	885b      	ldrh	r3, [r3, #2]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d11b      	bne.n	8008d24 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d004      	beq.n	8008d00 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 f937 	bl	8009f6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fcec 	bl	80096de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d18:	e004      	b.n	8008d24 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fc13 	bl	8009548 <USBD_CtlError>
              break;
 8008d22:	e000      	b.n	8008d26 <USBD_StdEPReq+0x154>
              break;
 8008d24:	bf00      	nop
          }
          break;
 8008d26:	e0ab      	b.n	8008e80 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d002      	beq.n	8008d3a <USBD_StdEPReq+0x168>
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d032      	beq.n	8008d9e <USBD_StdEPReq+0x1cc>
 8008d38:	e097      	b.n	8008e6a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d007      	beq.n	8008d50 <USBD_StdEPReq+0x17e>
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b80      	cmp	r3, #128	; 0x80
 8008d44:	d004      	beq.n	8008d50 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fbfd 	bl	8009548 <USBD_CtlError>
                break;
 8008d4e:	e091      	b.n	8008e74 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da0b      	bge.n	8008d70 <USBD_StdEPReq+0x19e>
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	3310      	adds	r3, #16
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	e00b      	b.n	8008d88 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	4413      	add	r3, r2
 8008d86:	3304      	adds	r3, #4
 8008d88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2202      	movs	r2, #2
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fc47 	bl	800962a <USBD_CtlSendData>
              break;
 8008d9c:	e06a      	b.n	8008e74 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da11      	bge.n	8008dca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	f003 020f 	and.w	r2, r3, #15
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	3324      	adds	r3, #36	; 0x24
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d117      	bne.n	8008df0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fbc0 	bl	8009548 <USBD_CtlError>
                  break;
 8008dc8:	e054      	b.n	8008e74 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	f003 020f 	and.w	r2, r3, #15
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d104      	bne.n	8008df0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fbad 	bl	8009548 <USBD_CtlError>
                  break;
 8008dee:	e041      	b.n	8008e74 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da0b      	bge.n	8008e10 <USBD_StdEPReq+0x23e>
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	3310      	adds	r3, #16
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	e00b      	b.n	8008e28 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	4413      	add	r3, r2
 8008e26:	3304      	adds	r3, #4
 8008e28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <USBD_StdEPReq+0x264>
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	2b80      	cmp	r3, #128	; 0x80
 8008e34:	d103      	bne.n	8008e3e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e00e      	b.n	8008e5c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 f8b2 	bl	8009fac <USBD_LL_IsStallEP>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2201      	movs	r2, #1
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	e002      	b.n	8008e5c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fbe1 	bl	800962a <USBD_CtlSendData>
              break;
 8008e68:	e004      	b.n	8008e74 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fb6b 	bl	8009548 <USBD_CtlError>
              break;
 8008e72:	bf00      	nop
          }
          break;
 8008e74:	e004      	b.n	8008e80 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fb65 	bl	8009548 <USBD_CtlError>
          break;
 8008e7e:	bf00      	nop
      }
      break;
 8008e80:	e004      	b.n	8008e8c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fb5f 	bl	8009548 <USBD_CtlError>
      break;
 8008e8a:	bf00      	nop
  }

  return ret;
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	885b      	ldrh	r3, [r3, #2]
 8008eb2:	0a1b      	lsrs	r3, r3, #8
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	2b0e      	cmp	r3, #14
 8008eba:	f200 8152 	bhi.w	8009162 <USBD_GetDescriptor+0x2ca>
 8008ebe:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <USBD_GetDescriptor+0x2c>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008f35 	.word	0x08008f35
 8008ec8:	08008f4d 	.word	0x08008f4d
 8008ecc:	08008f8d 	.word	0x08008f8d
 8008ed0:	08009163 	.word	0x08009163
 8008ed4:	08009163 	.word	0x08009163
 8008ed8:	08009103 	.word	0x08009103
 8008edc:	0800912f 	.word	0x0800912f
 8008ee0:	08009163 	.word	0x08009163
 8008ee4:	08009163 	.word	0x08009163
 8008ee8:	08009163 	.word	0x08009163
 8008eec:	08009163 	.word	0x08009163
 8008ef0:	08009163 	.word	0x08009163
 8008ef4:	08009163 	.word	0x08009163
 8008ef8:	08009163 	.word	0x08009163
 8008efc:	08008f01 	.word	0x08008f01
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00b      	beq.n	8008f24 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	7c12      	ldrb	r2, [r2, #16]
 8008f18:	f107 0108 	add.w	r1, r7, #8
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
 8008f20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f22:	e126      	b.n	8009172 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fb0e 	bl	8009548 <USBD_CtlError>
        err++;
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	72fb      	strb	r3, [r7, #11]
      break;
 8008f32:	e11e      	b.n	8009172 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	7c12      	ldrb	r2, [r2, #16]
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	60f8      	str	r0, [r7, #12]
      break;
 8008f4a:	e112      	b.n	8009172 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7c1b      	ldrb	r3, [r3, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10d      	bne.n	8008f70 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5c:	f107 0208 	add.w	r2, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f6e:	e100      	b.n	8009172 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	f107 0208 	add.w	r2, r7, #8
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	2202      	movs	r2, #2
 8008f88:	701a      	strb	r2, [r3, #0]
      break;
 8008f8a:	e0f2      	b.n	8009172 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	f200 80ac 	bhi.w	80090f0 <USBD_GetDescriptor+0x258>
 8008f98:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <USBD_GetDescriptor+0x108>)
 8008f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9e:	bf00      	nop
 8008fa0:	08008fb9 	.word	0x08008fb9
 8008fa4:	08008fed 	.word	0x08008fed
 8008fa8:	08009021 	.word	0x08009021
 8008fac:	08009055 	.word	0x08009055
 8008fb0:	08009089 	.word	0x08009089
 8008fb4:	080090bd 	.word	0x080090bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	7c12      	ldrb	r2, [r2, #16]
 8008fd0:	f107 0108 	add.w	r1, r7, #8
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4798      	blx	r3
 8008fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fda:	e091      	b.n	8009100 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fab2 	bl	8009548 <USBD_CtlError>
            err++;
 8008fe4:	7afb      	ldrb	r3, [r7, #11]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fea:	e089      	b.n	8009100 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00b      	beq.n	8009010 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	7c12      	ldrb	r2, [r2, #16]
 8009004:	f107 0108 	add.w	r1, r7, #8
 8009008:	4610      	mov	r0, r2
 800900a:	4798      	blx	r3
 800900c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800900e:	e077      	b.n	8009100 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fa98 	bl	8009548 <USBD_CtlError>
            err++;
 8009018:	7afb      	ldrb	r3, [r7, #11]
 800901a:	3301      	adds	r3, #1
 800901c:	72fb      	strb	r3, [r7, #11]
          break;
 800901e:	e06f      	b.n	8009100 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	7c12      	ldrb	r2, [r2, #16]
 8009038:	f107 0108 	add.w	r1, r7, #8
 800903c:	4610      	mov	r0, r2
 800903e:	4798      	blx	r3
 8009040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009042:	e05d      	b.n	8009100 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa7e 	bl	8009548 <USBD_CtlError>
            err++;
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	3301      	adds	r3, #1
 8009050:	72fb      	strb	r3, [r7, #11]
          break;
 8009052:	e055      	b.n	8009100 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	7c12      	ldrb	r2, [r2, #16]
 800906c:	f107 0108 	add.w	r1, r7, #8
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009076:	e043      	b.n	8009100 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa64 	bl	8009548 <USBD_CtlError>
            err++;
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	3301      	adds	r3, #1
 8009084:	72fb      	strb	r3, [r7, #11]
          break;
 8009086:	e03b      	b.n	8009100 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7c12      	ldrb	r2, [r2, #16]
 80090a0:	f107 0108 	add.w	r1, r7, #8
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
 80090a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090aa:	e029      	b.n	8009100 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa4a 	bl	8009548 <USBD_CtlError>
            err++;
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	3301      	adds	r3, #1
 80090b8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ba:	e021      	b.n	8009100 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	7c12      	ldrb	r2, [r2, #16]
 80090d4:	f107 0108 	add.w	r1, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090de:	e00f      	b.n	8009100 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa30 	bl	8009548 <USBD_CtlError>
            err++;
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	3301      	adds	r3, #1
 80090ec:	72fb      	strb	r3, [r7, #11]
          break;
 80090ee:	e007      	b.n	8009100 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa28 	bl	8009548 <USBD_CtlError>
          err++;
 80090f8:	7afb      	ldrb	r3, [r7, #11]
 80090fa:	3301      	adds	r3, #1
 80090fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80090fe:	bf00      	nop
      }
      break;
 8009100:	e037      	b.n	8009172 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	7c1b      	ldrb	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d109      	bne.n	800911e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009112:	f107 0208 	add.w	r2, r7, #8
 8009116:	4610      	mov	r0, r2
 8009118:	4798      	blx	r3
 800911a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800911c:	e029      	b.n	8009172 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa11 	bl	8009548 <USBD_CtlError>
        err++;
 8009126:	7afb      	ldrb	r3, [r7, #11]
 8009128:	3301      	adds	r3, #1
 800912a:	72fb      	strb	r3, [r7, #11]
      break;
 800912c:	e021      	b.n	8009172 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	7c1b      	ldrb	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	f107 0208 	add.w	r2, r7, #8
 8009142:	4610      	mov	r0, r2
 8009144:	4798      	blx	r3
 8009146:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	2207      	movs	r2, #7
 800914e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009150:	e00f      	b.n	8009172 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9f7 	bl	8009548 <USBD_CtlError>
        err++;
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	3301      	adds	r3, #1
 800915e:	72fb      	strb	r3, [r7, #11]
      break;
 8009160:	e007      	b.n	8009172 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f9ef 	bl	8009548 <USBD_CtlError>
      err++;
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	3301      	adds	r3, #1
 800916e:	72fb      	strb	r3, [r7, #11]
      break;
 8009170:	bf00      	nop
  }

  if (err != 0U)
 8009172:	7afb      	ldrb	r3, [r7, #11]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d11e      	bne.n	80091b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	88db      	ldrh	r3, [r3, #6]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d016      	beq.n	80091ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009180:	893b      	ldrh	r3, [r7, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00e      	beq.n	80091a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	88da      	ldrh	r2, [r3, #6]
 800918a:	893b      	ldrh	r3, [r7, #8]
 800918c:	4293      	cmp	r3, r2
 800918e:	bf28      	it	cs
 8009190:	4613      	movcs	r3, r2
 8009192:	b29b      	uxth	r3, r3
 8009194:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009196:	893b      	ldrh	r3, [r7, #8]
 8009198:	461a      	mov	r2, r3
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fa44 	bl	800962a <USBD_CtlSendData>
 80091a2:	e009      	b.n	80091b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f9ce 	bl	8009548 <USBD_CtlError>
 80091ac:	e004      	b.n	80091b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fa95 	bl	80096de <USBD_CtlSendStatus>
 80091b4:	e000      	b.n	80091b8 <USBD_GetDescriptor+0x320>
    return;
 80091b6:	bf00      	nop
  }
}
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop

080091c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	889b      	ldrh	r3, [r3, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d131      	bne.n	8009236 <USBD_SetAddress+0x76>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	88db      	ldrh	r3, [r3, #6]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d12d      	bne.n	8009236 <USBD_SetAddress+0x76>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b7f      	cmp	r3, #127	; 0x7f
 80091e0:	d829      	bhi.n	8009236 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	885b      	ldrh	r3, [r3, #2]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d104      	bne.n	8009204 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f9a3 	bl	8009548 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009202:	e01d      	b.n	8009240 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fef8 	bl	800a006 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fa61 	bl	80096de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2202      	movs	r2, #2
 8009226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922a:	e009      	b.n	8009240 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009234:	e004      	b.n	8009240 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f985 	bl	8009548 <USBD_CtlError>
  }
}
 800923e:	bf00      	nop
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	885b      	ldrh	r3, [r3, #2]
 800925a:	b2da      	uxtb	r2, r3
 800925c:	4b4c      	ldr	r3, [pc, #304]	; (8009390 <USBD_SetConfig+0x148>)
 800925e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009260:	4b4b      	ldr	r3, [pc, #300]	; (8009390 <USBD_SetConfig+0x148>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d905      	bls.n	8009274 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f96c 	bl	8009548 <USBD_CtlError>
    return USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	e088      	b.n	8009386 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d002      	beq.n	8009286 <USBD_SetConfig+0x3e>
 8009280:	2b03      	cmp	r3, #3
 8009282:	d025      	beq.n	80092d0 <USBD_SetConfig+0x88>
 8009284:	e071      	b.n	800936a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009286:	4b42      	ldr	r3, [pc, #264]	; (8009390 <USBD_SetConfig+0x148>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d01c      	beq.n	80092c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800928e:	4b40      	ldr	r3, [pc, #256]	; (8009390 <USBD_SetConfig+0x148>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009298:	4b3d      	ldr	r3, [pc, #244]	; (8009390 <USBD_SetConfig+0x148>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff f992 	bl	80085c8 <USBD_SetClassConfig>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d004      	beq.n	80092b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f949 	bl	8009548 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092b6:	e065      	b.n	8009384 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fa10 	bl	80096de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2203      	movs	r2, #3
 80092c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092c6:	e05d      	b.n	8009384 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fa08 	bl	80096de <USBD_CtlSendStatus>
      break;
 80092ce:	e059      	b.n	8009384 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092d0:	4b2f      	ldr	r3, [pc, #188]	; (8009390 <USBD_SetConfig+0x148>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d112      	bne.n	80092fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80092e0:	4b2b      	ldr	r3, [pc, #172]	; (8009390 <USBD_SetConfig+0x148>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092ea:	4b29      	ldr	r3, [pc, #164]	; (8009390 <USBD_SetConfig+0x148>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff f985 	bl	8008600 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f9f1 	bl	80096de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092fc:	e042      	b.n	8009384 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80092fe:	4b24      	ldr	r3, [pc, #144]	; (8009390 <USBD_SetConfig+0x148>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	429a      	cmp	r2, r3
 800930a:	d02a      	beq.n	8009362 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff f973 	bl	8008600 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800931a:	4b1d      	ldr	r3, [pc, #116]	; (8009390 <USBD_SetConfig+0x148>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009324:	4b1a      	ldr	r3, [pc, #104]	; (8009390 <USBD_SetConfig+0x148>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff f94c 	bl	80085c8 <USBD_SetClassConfig>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00f      	beq.n	800935a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f903 	bl	8009548 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff f958 	bl	8008600 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009358:	e014      	b.n	8009384 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f9bf 	bl	80096de <USBD_CtlSendStatus>
      break;
 8009360:	e010      	b.n	8009384 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f9bb 	bl	80096de <USBD_CtlSendStatus>
      break;
 8009368:	e00c      	b.n	8009384 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f8eb 	bl	8009548 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009372:	4b07      	ldr	r3, [pc, #28]	; (8009390 <USBD_SetConfig+0x148>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff f941 	bl	8008600 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800937e:	2303      	movs	r3, #3
 8009380:	73fb      	strb	r3, [r7, #15]
      break;
 8009382:	bf00      	nop
  }

  return ret;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	200001fc 	.word	0x200001fc

08009394 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	88db      	ldrh	r3, [r3, #6]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d004      	beq.n	80093b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f8cd 	bl	8009548 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093ae:	e023      	b.n	80093f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	dc02      	bgt.n	80093c2 <USBD_GetConfig+0x2e>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dc03      	bgt.n	80093c8 <USBD_GetConfig+0x34>
 80093c0:	e015      	b.n	80093ee <USBD_GetConfig+0x5a>
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d00b      	beq.n	80093de <USBD_GetConfig+0x4a>
 80093c6:	e012      	b.n	80093ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3308      	adds	r3, #8
 80093d2:	2201      	movs	r2, #1
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f927 	bl	800962a <USBD_CtlSendData>
        break;
 80093dc:	e00c      	b.n	80093f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3304      	adds	r3, #4
 80093e2:	2201      	movs	r2, #1
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f91f 	bl	800962a <USBD_CtlSendData>
        break;
 80093ec:	e004      	b.n	80093f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f8a9 	bl	8009548 <USBD_CtlError>
        break;
 80093f6:	bf00      	nop
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009410:	b2db      	uxtb	r3, r3
 8009412:	3b01      	subs	r3, #1
 8009414:	2b02      	cmp	r3, #2
 8009416:	d81e      	bhi.n	8009456 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	88db      	ldrh	r3, [r3, #6]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d004      	beq.n	800942a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f890 	bl	8009548 <USBD_CtlError>
        break;
 8009428:	e01a      	b.n	8009460 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d005      	beq.n	8009446 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f043 0202 	orr.w	r2, r3, #2
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	330c      	adds	r3, #12
 800944a:	2202      	movs	r2, #2
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f8eb 	bl	800962a <USBD_CtlSendData>
      break;
 8009454:	e004      	b.n	8009460 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f875 	bl	8009548 <USBD_CtlError>
      break;
 800945e:	bf00      	nop
  }
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	885b      	ldrh	r3, [r3, #2]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d106      	bne.n	8009488 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f92b 	bl	80096de <USBD_CtlSendStatus>
  }
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d80b      	bhi.n	80094c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	885b      	ldrh	r3, [r3, #2]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d10c      	bne.n	80094ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f910 	bl	80096de <USBD_CtlSendStatus>
      }
      break;
 80094be:	e004      	b.n	80094ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f840 	bl	8009548 <USBD_CtlError>
      break;
 80094c8:	e000      	b.n	80094cc <USBD_ClrFeature+0x3c>
      break;
 80094ca:	bf00      	nop
  }
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	781a      	ldrb	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3301      	adds	r3, #1
 80094ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	781a      	ldrb	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff fa92 	bl	8008a28 <SWAPBYTE>
 8009504:	4603      	mov	r3, r0
 8009506:	461a      	mov	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3301      	adds	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3301      	adds	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7ff fa85 	bl	8008a28 <SWAPBYTE>
 800951e:	4603      	mov	r3, r0
 8009520:	461a      	mov	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3301      	adds	r3, #1
 800952a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3301      	adds	r3, #1
 8009530:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f7ff fa78 	bl	8008a28 <SWAPBYTE>
 8009538:	4603      	mov	r3, r0
 800953a:	461a      	mov	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	80da      	strh	r2, [r3, #6]
}
 8009540:	bf00      	nop
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009552:	2180      	movs	r1, #128	; 0x80
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fceb 	bl	8009f30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800955a:	2100      	movs	r1, #0
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fce7 	bl	8009f30 <USBD_LL_StallEP>
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b086      	sub	sp, #24
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d036      	beq.n	80095ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009584:	6938      	ldr	r0, [r7, #16]
 8009586:	f000 f836 	bl	80095f6 <USBD_GetLen>
 800958a:	4603      	mov	r3, r0
 800958c:	3301      	adds	r3, #1
 800958e:	b29b      	uxth	r3, r3
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	4413      	add	r3, r2
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	7812      	ldrb	r2, [r2, #0]
 80095a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	3301      	adds	r3, #1
 80095a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	4413      	add	r3, r2
 80095b0:	2203      	movs	r2, #3
 80095b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	3301      	adds	r3, #1
 80095b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095ba:	e013      	b.n	80095e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	4413      	add	r3, r2
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	7812      	ldrb	r2, [r2, #0]
 80095c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	3301      	adds	r3, #1
 80095cc:	613b      	str	r3, [r7, #16]
    idx++;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	3301      	adds	r3, #1
 80095d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	4413      	add	r3, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	3301      	adds	r3, #1
 80095e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e7      	bne.n	80095bc <USBD_GetString+0x52>
 80095ec:	e000      	b.n	80095f0 <USBD_GetString+0x86>
    return;
 80095ee:	bf00      	nop
  }
}
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009606:	e005      	b.n	8009614 <USBD_GetLen+0x1e>
  {
    len++;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	3301      	adds	r3, #1
 800960c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	3301      	adds	r3, #1
 8009612:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1f5      	bne.n	8009608 <USBD_GetLen+0x12>
  }

  return len;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	60f8      	str	r0, [r7, #12]
 8009632:	60b9      	str	r1, [r7, #8]
 8009634:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2202      	movs	r2, #2
 800963a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	2100      	movs	r1, #0
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 fcf7 	bl	800a044 <USBD_LL_Transmit>

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	2100      	movs	r1, #0
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 fce6 	bl	800a044 <USBD_LL_Transmit>

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	60f8      	str	r0, [r7, #12]
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2203      	movs	r2, #3
 8009692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	2100      	movs	r1, #0
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 fcea 	bl	800a086 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	2100      	movs	r1, #0
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fcd9 	bl	800a086 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2204      	movs	r2, #4
 80096ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096ee:	2300      	movs	r3, #0
 80096f0:	2200      	movs	r2, #0
 80096f2:	2100      	movs	r1, #0
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fca5 	bl	800a044 <USBD_LL_Transmit>

  return USBD_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2205      	movs	r2, #5
 8009710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009714:	2300      	movs	r3, #0
 8009716:	2200      	movs	r2, #0
 8009718:	2100      	movs	r1, #0
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fcb3 	bl	800a086 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009730:	2200      	movs	r2, #0
 8009732:	4912      	ldr	r1, [pc, #72]	; (800977c <MX_USB_Device_Init+0x50>)
 8009734:	4812      	ldr	r0, [pc, #72]	; (8009780 <MX_USB_Device_Init+0x54>)
 8009736:	f7fe fed9 	bl	80084ec <USBD_Init>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009740:	f7f7 f97f 	bl	8000a42 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009744:	490f      	ldr	r1, [pc, #60]	; (8009784 <MX_USB_Device_Init+0x58>)
 8009746:	480e      	ldr	r0, [pc, #56]	; (8009780 <MX_USB_Device_Init+0x54>)
 8009748:	f7fe ff00 	bl	800854c <USBD_RegisterClass>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009752:	f7f7 f976 	bl	8000a42 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009756:	490c      	ldr	r1, [pc, #48]	; (8009788 <MX_USB_Device_Init+0x5c>)
 8009758:	4809      	ldr	r0, [pc, #36]	; (8009780 <MX_USB_Device_Init+0x54>)
 800975a:	f7fe fe21 	bl	80083a0 <USBD_CDC_RegisterInterface>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009764:	f7f7 f96d 	bl	8000a42 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009768:	4805      	ldr	r0, [pc, #20]	; (8009780 <MX_USB_Device_Init+0x54>)
 800976a:	f7fe ff16 	bl	800859a <USBD_Start>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009774:	f7f7 f965 	bl	8000a42 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009778:	bf00      	nop
 800977a:	bd80      	pop	{r7, pc}
 800977c:	20000154 	.word	0x20000154
 8009780:	200004f4 	.word	0x200004f4
 8009784:	2000003c 	.word	0x2000003c
 8009788:	20000140 	.word	0x20000140

0800978c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009790:	2200      	movs	r2, #0
 8009792:	4905      	ldr	r1, [pc, #20]	; (80097a8 <CDC_Init_FS+0x1c>)
 8009794:	4805      	ldr	r0, [pc, #20]	; (80097ac <CDC_Init_FS+0x20>)
 8009796:	f7fe fe18 	bl	80083ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800979a:	4905      	ldr	r1, [pc, #20]	; (80097b0 <CDC_Init_FS+0x24>)
 800979c:	4803      	ldr	r0, [pc, #12]	; (80097ac <CDC_Init_FS+0x20>)
 800979e:	f7fe fe32 	bl	8008406 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20000fc4 	.word	0x20000fc4
 80097ac:	200004f4 	.word	0x200004f4
 80097b0:	200007c4 	.word	0x200007c4

080097b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
 80097d0:	4613      	mov	r3, r2
 80097d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097d4:	79fb      	ldrb	r3, [r7, #7]
 80097d6:	2b23      	cmp	r3, #35	; 0x23
 80097d8:	d84a      	bhi.n	8009870 <CDC_Control_FS+0xac>
 80097da:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <CDC_Control_FS+0x1c>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	08009871 	.word	0x08009871
 80097e4:	08009871 	.word	0x08009871
 80097e8:	08009871 	.word	0x08009871
 80097ec:	08009871 	.word	0x08009871
 80097f0:	08009871 	.word	0x08009871
 80097f4:	08009871 	.word	0x08009871
 80097f8:	08009871 	.word	0x08009871
 80097fc:	08009871 	.word	0x08009871
 8009800:	08009871 	.word	0x08009871
 8009804:	08009871 	.word	0x08009871
 8009808:	08009871 	.word	0x08009871
 800980c:	08009871 	.word	0x08009871
 8009810:	08009871 	.word	0x08009871
 8009814:	08009871 	.word	0x08009871
 8009818:	08009871 	.word	0x08009871
 800981c:	08009871 	.word	0x08009871
 8009820:	08009871 	.word	0x08009871
 8009824:	08009871 	.word	0x08009871
 8009828:	08009871 	.word	0x08009871
 800982c:	08009871 	.word	0x08009871
 8009830:	08009871 	.word	0x08009871
 8009834:	08009871 	.word	0x08009871
 8009838:	08009871 	.word	0x08009871
 800983c:	08009871 	.word	0x08009871
 8009840:	08009871 	.word	0x08009871
 8009844:	08009871 	.word	0x08009871
 8009848:	08009871 	.word	0x08009871
 800984c:	08009871 	.word	0x08009871
 8009850:	08009871 	.word	0x08009871
 8009854:	08009871 	.word	0x08009871
 8009858:	08009871 	.word	0x08009871
 800985c:	08009871 	.word	0x08009871
 8009860:	08009871 	.word	0x08009871
 8009864:	08009871 	.word	0x08009871
 8009868:	08009871 	.word	0x08009871
 800986c:	08009871 	.word	0x08009871
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009870:	bf00      	nop
  }

  return (USBD_OK);
 8009872:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	4805      	ldr	r0, [pc, #20]	; (80098a4 <CDC_Receive_FS+0x24>)
 800988e:	f7fe fdba 	bl	8008406 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009892:	4804      	ldr	r0, [pc, #16]	; (80098a4 <CDC_Receive_FS+0x24>)
 8009894:	f7fe fe00 	bl	8008498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009898:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200004f4 	.word	0x200004f4

080098a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098b8:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <CDC_Transmit_FS+0x48>)
 80098ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e00b      	b.n	80098e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098ce:	887b      	ldrh	r3, [r7, #2]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4806      	ldr	r0, [pc, #24]	; (80098f0 <CDC_Transmit_FS+0x48>)
 80098d6:	f7fe fd78 	bl	80083ca <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098da:	4805      	ldr	r0, [pc, #20]	; (80098f0 <CDC_Transmit_FS+0x48>)
 80098dc:	f7fe fdac 	bl	8008438 <USBD_CDC_TransmitPacket>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200004f4 	.word	0x200004f4

080098f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800990a:	4618      	mov	r0, r3
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
	...

08009918 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	6039      	str	r1, [r7, #0]
 8009922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2212      	movs	r2, #18
 8009928:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800992a:	4b03      	ldr	r3, [pc, #12]	; (8009938 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	20000174 	.word	0x20000174

0800993c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2204      	movs	r2, #4
 800994c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800994e:	4b03      	ldr	r3, [pc, #12]	; (800995c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	20000188 	.word	0x20000188

08009960 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	6039      	str	r1, [r7, #0]
 800996a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d105      	bne.n	800997e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	4907      	ldr	r1, [pc, #28]	; (8009994 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009976:	4808      	ldr	r0, [pc, #32]	; (8009998 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009978:	f7ff fdf7 	bl	800956a <USBD_GetString>
 800997c:	e004      	b.n	8009988 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	4904      	ldr	r1, [pc, #16]	; (8009994 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009982:	4805      	ldr	r0, [pc, #20]	; (8009998 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009984:	f7ff fdf1 	bl	800956a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	200017c4 	.word	0x200017c4
 8009998:	0800a28c 	.word	0x0800a28c

0800999c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	4904      	ldr	r1, [pc, #16]	; (80099bc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80099ac:	4804      	ldr	r0, [pc, #16]	; (80099c0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80099ae:	f7ff fddc 	bl	800956a <USBD_GetString>
  return USBD_StrDesc;
 80099b2:	4b02      	ldr	r3, [pc, #8]	; (80099bc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	200017c4 	.word	0x200017c4
 80099c0:	0800a2a4 	.word	0x0800a2a4

080099c4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	6039      	str	r1, [r7, #0]
 80099ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	221a      	movs	r2, #26
 80099d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099d6:	f000 f843 	bl	8009a60 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80099da:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	2000018c 	.word	0x2000018c

080099e8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	6039      	str	r1, [r7, #0]
 80099f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099f4:	79fb      	ldrb	r3, [r7, #7]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d105      	bne.n	8009a06 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	4907      	ldr	r1, [pc, #28]	; (8009a1c <USBD_CDC_ConfigStrDescriptor+0x34>)
 80099fe:	4808      	ldr	r0, [pc, #32]	; (8009a20 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009a00:	f7ff fdb3 	bl	800956a <USBD_GetString>
 8009a04:	e004      	b.n	8009a10 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4904      	ldr	r1, [pc, #16]	; (8009a1c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009a0a:	4805      	ldr	r0, [pc, #20]	; (8009a20 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009a0c:	f7ff fdad 	bl	800956a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a10:	4b02      	ldr	r3, [pc, #8]	; (8009a1c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	200017c4 	.word	0x200017c4
 8009a20:	0800a2b8 	.word	0x0800a2b8

08009a24 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	6039      	str	r1, [r7, #0]
 8009a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d105      	bne.n	8009a42 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	4907      	ldr	r1, [pc, #28]	; (8009a58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009a3a:	4808      	ldr	r0, [pc, #32]	; (8009a5c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009a3c:	f7ff fd95 	bl	800956a <USBD_GetString>
 8009a40:	e004      	b.n	8009a4c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	4904      	ldr	r1, [pc, #16]	; (8009a58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009a46:	4805      	ldr	r0, [pc, #20]	; (8009a5c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009a48:	f7ff fd8f 	bl	800956a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	200017c4 	.word	0x200017c4
 8009a5c:	0800a2c4 	.word	0x0800a2c4

08009a60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a66:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <Get_SerialNum+0x44>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a6c:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <Get_SerialNum+0x48>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a72:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <Get_SerialNum+0x4c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d009      	beq.n	8009a9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a86:	2208      	movs	r2, #8
 8009a88:	4909      	ldr	r1, [pc, #36]	; (8009ab0 <Get_SerialNum+0x50>)
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f814 	bl	8009ab8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a90:	2204      	movs	r2, #4
 8009a92:	4908      	ldr	r1, [pc, #32]	; (8009ab4 <Get_SerialNum+0x54>)
 8009a94:	68b8      	ldr	r0, [r7, #8]
 8009a96:	f000 f80f 	bl	8009ab8 <IntToUnicode>
  }
}
 8009a9a:	bf00      	nop
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	1fff7590 	.word	0x1fff7590
 8009aa8:	1fff7594 	.word	0x1fff7594
 8009aac:	1fff7598 	.word	0x1fff7598
 8009ab0:	2000018e 	.word	0x2000018e
 8009ab4:	2000019e 	.word	0x2000019e

08009ab8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009aca:	2300      	movs	r3, #0
 8009acc:	75fb      	strb	r3, [r7, #23]
 8009ace:	e027      	b.n	8009b20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	0f1b      	lsrs	r3, r3, #28
 8009ad4:	2b09      	cmp	r3, #9
 8009ad6:	d80b      	bhi.n	8009af0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	0f1b      	lsrs	r3, r3, #28
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	440b      	add	r3, r1
 8009ae8:	3230      	adds	r2, #48	; 0x30
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	e00a      	b.n	8009b06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	0f1b      	lsrs	r3, r3, #28
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	4619      	mov	r1, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	440b      	add	r3, r1
 8009b00:	3237      	adds	r2, #55	; 0x37
 8009b02:	b2d2      	uxtb	r2, r2
 8009b04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	3301      	adds	r3, #1
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	4413      	add	r3, r2
 8009b16:	2200      	movs	r2, #0
 8009b18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	75fb      	strb	r3, [r7, #23]
 8009b20:	7dfa      	ldrb	r2, [r7, #23]
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d3d3      	bcc.n	8009ad0 <IntToUnicode+0x18>
  }
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <LL_AHB2_GRP1_EnableClock>:
{
 8009b36:	b480      	push	{r7}
 8009b38:	b085      	sub	sp, #20
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4013      	ands	r3, r2
 8009b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
}
 8009b5c:	bf00      	nop
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <LL_APB1_GRP1_EnableClock>:
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4013      	ands	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
}
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
	...

08009b9c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b09c      	sub	sp, #112	; 0x70
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ba4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009ba8:	2200      	movs	r2, #0
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	605a      	str	r2, [r3, #4]
 8009bae:	609a      	str	r2, [r3, #8]
 8009bb0:	60da      	str	r2, [r3, #12]
 8009bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009bb4:	f107 030c 	add.w	r3, r7, #12
 8009bb8:	2250      	movs	r2, #80	; 0x50
 8009bba:	2100      	movs	r1, #0
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 fb3b 	bl	800a238 <memset>
  if(pcdHandle->Instance==USB)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a23      	ldr	r2, [pc, #140]	; (8009c54 <HAL_PCD_MspInit+0xb8>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d13e      	bne.n	8009c4a <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8009bd2:	2318      	movs	r3, #24
 8009bd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009bda:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009be0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8009be2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009be6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8009be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009bee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009bf2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009bf4:	f107 030c 	add.w	r3, r7, #12
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fa fd27 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8009c04:	f7f6 ff1d 	bl	8000a42 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c08:	2001      	movs	r0, #1
 8009c0a:	f7ff ff94 	bl	8009b36 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c14:	2302      	movs	r3, #2
 8009c16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009c20:	230a      	movs	r3, #10
 8009c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c2e:	f7f7 fb05 	bl	800123c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009c32:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009c36:	f7ff ff97 	bl	8009b68 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	2014      	movs	r0, #20
 8009c40:	f7f7 fac7 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009c44:	2014      	movs	r0, #20
 8009c46:	f7f7 fade 	bl	8001206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c4a:	bf00      	nop
 8009c4c:	3770      	adds	r7, #112	; 0x70
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	40006800 	.word	0x40006800

08009c58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f7fe fcde 	bl	8008630 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009c8e:	78fa      	ldrb	r2, [r7, #3]
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	440b      	add	r3, r1
 8009c9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f7fe fd18 	bl	80086da <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	440b      	add	r3, r1
 8009cd2:	333c      	adds	r3, #60	; 0x3c
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	78fb      	ldrb	r3, [r7, #3]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	f7fe fd61 	bl	80087a0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fe fe75 	bl	80089e4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d001      	beq.n	8009d1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d16:	f7f6 fe94 	bl	8000a42 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d20:	7bfa      	ldrb	r2, [r7, #15]
 8009d22:	4611      	mov	r1, r2
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe fe1f 	bl	8008968 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe fdcb 	bl	80088cc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fe fe1a 	bl	8008988 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d005      	beq.n	8009d68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d5c:	4b04      	ldr	r3, [pc, #16]	; (8009d70 <HAL_PCD_SuspendCallback+0x30>)
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	4a03      	ldr	r2, [pc, #12]	; (8009d70 <HAL_PCD_SuspendCallback+0x30>)
 8009d62:	f043 0306 	orr.w	r3, r3, #6
 8009d66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009d68:	bf00      	nop
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	e000ed00 	.word	0xe000ed00

08009d74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d84:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <HAL_PCD_ResumeCallback+0x34>)
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	4a07      	ldr	r2, [pc, #28]	; (8009da8 <HAL_PCD_ResumeCallback+0x34>)
 8009d8a:	f023 0306 	bic.w	r3, r3, #6
 8009d8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009d90:	f000 f9fc 	bl	800a18c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fe0a 	bl	80089b4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	e000ed00 	.word	0xe000ed00

08009dac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009db4:	4a2c      	ldr	r2, [pc, #176]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a2a      	ldr	r2, [pc, #168]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009dc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009dc4:	f7f9 f924 	bl	8003010 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009dc8:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009dca:	4a28      	ldr	r2, [pc, #160]	; (8009e6c <USBD_LL_Init+0xc0>)
 8009dcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009dce:	4b26      	ldr	r3, [pc, #152]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009dd0:	2208      	movs	r2, #8
 8009dd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009dd4:	4b24      	ldr	r3, [pc, #144]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dda:	4b23      	ldr	r3, [pc, #140]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009ddc:	2202      	movs	r2, #2
 8009dde:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009de0:	4b21      	ldr	r3, [pc, #132]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009de6:	4b20      	ldr	r3, [pc, #128]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009dec:	4b1e      	ldr	r3, [pc, #120]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009df2:	4b1d      	ldr	r3, [pc, #116]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009df8:	481b      	ldr	r0, [pc, #108]	; (8009e68 <USBD_LL_Init+0xbc>)
 8009dfa:	f7f7 fbb7 	bl	800156c <HAL_PCD_Init>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009e04:	f7f6 fe1d 	bl	8000a42 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e0e:	2318      	movs	r3, #24
 8009e10:	2200      	movs	r2, #0
 8009e12:	2100      	movs	r1, #0
 8009e14:	f7f9 f870 	bl	8002ef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e1e:	2358      	movs	r3, #88	; 0x58
 8009e20:	2200      	movs	r2, #0
 8009e22:	2180      	movs	r1, #128	; 0x80
 8009e24:	f7f9 f868 	bl	8002ef8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e2e:	23c0      	movs	r3, #192	; 0xc0
 8009e30:	2200      	movs	r2, #0
 8009e32:	2181      	movs	r1, #129	; 0x81
 8009e34:	f7f9 f860 	bl	8002ef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e3e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009e42:	2200      	movs	r2, #0
 8009e44:	2101      	movs	r1, #1
 8009e46:	f7f9 f857 	bl	8002ef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e54:	2200      	movs	r2, #0
 8009e56:	2182      	movs	r1, #130	; 0x82
 8009e58:	f7f9 f84e 	bl	8002ef8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	200019c4 	.word	0x200019c4
 8009e6c:	40006800 	.word	0x40006800

08009e70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f7 fc55 	bl	8001736 <HAL_PCD_Start>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 f980 	bl	800a198 <USBD_Get_USB_Status>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	70fb      	strb	r3, [r7, #3]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70bb      	strb	r3, [r7, #2]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ece:	78bb      	ldrb	r3, [r7, #2]
 8009ed0:	883a      	ldrh	r2, [r7, #0]
 8009ed2:	78f9      	ldrb	r1, [r7, #3]
 8009ed4:	f7f7 fd9d 	bl	8001a12 <HAL_PCD_EP_Open>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 f95a 	bl	800a198 <USBD_Get_USB_Status>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	460b      	mov	r3, r1
 8009efc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f0c:	78fa      	ldrb	r2, [r7, #3]
 8009f0e:	4611      	mov	r1, r2
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7f7 fde4 	bl	8001ade <HAL_PCD_EP_Close>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 f93b 	bl	800a198 <USBD_Get_USB_Status>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f4a:	78fa      	ldrb	r2, [r7, #3]
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7f7 fea5 	bl	8001c9e <HAL_PCD_EP_SetStall>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f000 f91c 	bl	800a198 <USBD_Get_USB_Status>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	460b      	mov	r3, r1
 8009f78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f88:	78fa      	ldrb	r2, [r7, #3]
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f7 fed8 	bl	8001d42 <HAL_PCD_EP_ClrStall>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 f8fd 	bl	800a198 <USBD_Get_USB_Status>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	da0c      	bge.n	8009fe2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	440b      	add	r3, r1
 8009fdc:	3302      	adds	r3, #2
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	e00b      	b.n	8009ffa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fe2:	78fb      	ldrb	r3, [r7, #3]
 8009fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fe8:	68f9      	ldr	r1, [r7, #12]
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	440b      	add	r3, r1
 8009ff4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ff8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	460b      	mov	r3, r1
 800a010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f7f7 fccf 	bl	80019c8 <HAL_PCD_SetAddress>
 800a02a:	4603      	mov	r3, r0
 800a02c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	4618      	mov	r0, r3
 800a032:	f000 f8b1 	bl	800a198 <USBD_Get_USB_Status>
 800a036:	4603      	mov	r3, r0
 800a038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	607a      	str	r2, [r7, #4]
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	460b      	mov	r3, r1
 800a052:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a062:	7af9      	ldrb	r1, [r7, #11]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	f7f7 fdd6 	bl	8001c18 <HAL_PCD_EP_Transmit>
 800a06c:	4603      	mov	r3, r0
 800a06e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 f890 	bl	800a198 <USBD_Get_USB_Status>
 800a078:	4603      	mov	r3, r0
 800a07a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a07c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b086      	sub	sp, #24
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
 800a092:	460b      	mov	r3, r1
 800a094:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0a4:	7af9      	ldrb	r1, [r7, #11]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	f7f7 fd60 	bl	8001b6e <HAL_PCD_EP_Receive>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 f86f 	bl	800a198 <USBD_Get_USB_Status>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0be:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0da:	78fa      	ldrb	r2, [r7, #3]
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7f7 fd82 	bl	8001be8 <HAL_PCD_EP_GetRxCount>
 800a0e4:	4603      	mov	r3, r0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <HAL_PCDEx_LPM_Callback+0x18>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d013      	beq.n	800a12e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a106:	e023      	b.n	800a150 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a110:	f000 f83c 	bl	800a18c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a114:	4b10      	ldr	r3, [pc, #64]	; (800a158 <HAL_PCDEx_LPM_Callback+0x68>)
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	4a0f      	ldr	r2, [pc, #60]	; (800a158 <HAL_PCDEx_LPM_Callback+0x68>)
 800a11a:	f023 0306 	bic.w	r3, r3, #6
 800a11e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fc44 	bl	80089b4 <USBD_LL_Resume>
    break;
 800a12c:	e010      	b.n	800a150 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a134:	4618      	mov	r0, r3
 800a136:	f7fe fc27 	bl	8008988 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d005      	beq.n	800a14e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a142:	4b05      	ldr	r3, [pc, #20]	; (800a158 <HAL_PCDEx_LPM_Callback+0x68>)
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	4a04      	ldr	r2, [pc, #16]	; (800a158 <HAL_PCDEx_LPM_Callback+0x68>)
 800a148:	f043 0306 	orr.w	r3, r3, #6
 800a14c:	6113      	str	r3, [r2, #16]
    break;
 800a14e:	bf00      	nop
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	e000ed00 	.word	0xe000ed00

0800a15c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a164:	4b03      	ldr	r3, [pc, #12]	; (800a174 <USBD_static_malloc+0x18>)
}
 800a166:	4618      	mov	r0, r3
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20000200 	.word	0x20000200

0800a178 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]

}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a190:	f7f6 fbce 	bl	8000930 <SystemClock_Config>
}
 800a194:	bf00      	nop
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	2b03      	cmp	r3, #3
 800a1aa:	d817      	bhi.n	800a1dc <USBD_Get_USB_Status+0x44>
 800a1ac:	a201      	add	r2, pc, #4	; (adr r2, 800a1b4 <USBD_Get_USB_Status+0x1c>)
 800a1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b2:	bf00      	nop
 800a1b4:	0800a1c5 	.word	0x0800a1c5
 800a1b8:	0800a1cb 	.word	0x0800a1cb
 800a1bc:	0800a1d1 	.word	0x0800a1d1
 800a1c0:	0800a1d7 	.word	0x0800a1d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1c8:	e00b      	b.n	800a1e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ce:	e008      	b.n	800a1e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d4:	e005      	b.n	800a1e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1da:	e002      	b.n	800a1e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e0:	bf00      	nop
  }
  return usb_status;
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <__libc_init_array>:
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	4d0d      	ldr	r5, [pc, #52]	; (800a228 <__libc_init_array+0x38>)
 800a1f4:	4c0d      	ldr	r4, [pc, #52]	; (800a22c <__libc_init_array+0x3c>)
 800a1f6:	1b64      	subs	r4, r4, r5
 800a1f8:	10a4      	asrs	r4, r4, #2
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	42a6      	cmp	r6, r4
 800a1fe:	d109      	bne.n	800a214 <__libc_init_array+0x24>
 800a200:	4d0b      	ldr	r5, [pc, #44]	; (800a230 <__libc_init_array+0x40>)
 800a202:	4c0c      	ldr	r4, [pc, #48]	; (800a234 <__libc_init_array+0x44>)
 800a204:	f000 f820 	bl	800a248 <_init>
 800a208:	1b64      	subs	r4, r4, r5
 800a20a:	10a4      	asrs	r4, r4, #2
 800a20c:	2600      	movs	r6, #0
 800a20e:	42a6      	cmp	r6, r4
 800a210:	d105      	bne.n	800a21e <__libc_init_array+0x2e>
 800a212:	bd70      	pop	{r4, r5, r6, pc}
 800a214:	f855 3b04 	ldr.w	r3, [r5], #4
 800a218:	4798      	blx	r3
 800a21a:	3601      	adds	r6, #1
 800a21c:	e7ee      	b.n	800a1fc <__libc_init_array+0xc>
 800a21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a222:	4798      	blx	r3
 800a224:	3601      	adds	r6, #1
 800a226:	e7f2      	b.n	800a20e <__libc_init_array+0x1e>
 800a228:	0800a354 	.word	0x0800a354
 800a22c:	0800a354 	.word	0x0800a354
 800a230:	0800a354 	.word	0x0800a354
 800a234:	0800a358 	.word	0x0800a358

0800a238 <memset>:
 800a238:	4402      	add	r2, r0
 800a23a:	4603      	mov	r3, r0
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d100      	bne.n	800a242 <memset+0xa>
 800a240:	4770      	bx	lr
 800a242:	f803 1b01 	strb.w	r1, [r3], #1
 800a246:	e7f9      	b.n	800a23c <memset+0x4>

0800a248 <_init>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	bf00      	nop
 800a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24e:	bc08      	pop	{r3}
 800a250:	469e      	mov	lr, r3
 800a252:	4770      	bx	lr

0800a254 <_fini>:
 800a254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a256:	bf00      	nop
 800a258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25a:	bc08      	pop	{r3}
 800a25c:	469e      	mov	lr, r3
 800a25e:	4770      	bx	lr
